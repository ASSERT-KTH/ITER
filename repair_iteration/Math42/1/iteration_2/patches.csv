bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ArrayList  columnsToDrop  =  getColumnsToDrop(columnLabels);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  ArrayList  columnsToDrop  =  getColumnsToDrop(columnLabels);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	ArrayList  columnsToDrop  =  getColumnsToDrop(columnLabels);	  List    columnsToDrop    =    getColumnsToDrop(columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
2	[BUG]  [BUGGY]  List  columnsToDrop  =  getColumnsToDrop(columnLabels.length);  [CE]  '.class'  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  List  columnsToDrop  =  getColumnsToDrop(columnLabels.length);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	List  columnsToDrop  =  getColumnsToDrop(columnLabels.length);	  List    columnsToDrop    =    getColumnsToDrop(columnLabels);    	non-compiled	[CE]  '.class'  expected	103	None	replace
3	[BUG]  [BUGGY]  List  columnsToDrop  =  getColumnsToDrop(columnLabels.size());  [CE]  '.class'  expected  [FE]                          AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  List  columnsToDrop  =  getColumnsToDrop(columnLabels.size());  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	List  columnsToDrop  =  getColumnsToDrop(columnLabels.size());	  List    columnsToDrop    =    getColumnsToDrop(columnLabels);    	non-compiled	[CE]  '.class'  expected	103	None	replace
4	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.mapper.getObjectiveFunction(0,  getNumObjectiveFunctions());  [CE]  '.class'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.mapper.getObjectiveFunction(0,  getNumObjectiveFunctions());  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.mapper.getObjectiveFunction(0,  getNumObjectiveFunctions());	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)mapper.getObjectiveFunction(0,    getNumObjectiveFunctions());    	non-compiled	[CE]  '.class'  expected	73	None	replace
5	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)mapper.getObjectiveFunction(0,  getNumObjectiveFunctions()  -  1);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)mapper.getObjectiveFunction(0,  getNumObjectiveFunctions()  -  1);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)mapper.getObjectiveFunction(0,  getNumObjectiveFunctions()  -  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)mapper.getObjectiveFunction(0,    getNumObjectiveFunctions());    	non-compiled	[CE]  ')'  expected	73	None	replace
6	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)mapper.getObjectiveFunction(0,  getNumObjectiveFunctions()  +  1);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)mapper.getObjectiveFunction(0,  getNumObjectiveFunctions()  +  1);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)mapper.getObjectiveFunction(0,  getNumObjectiveFunctions()  +  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)mapper.getObjectiveFunction(0,    getNumObjectiveFunctions());    	non-compiled	[CE]  ')'  expected	73	None	replace
7	[BUG]  [BUGGY]  SimplexTableau.this.popPhase2Objective();  [CE]  ')'  expected  [FE]        StackOverflowError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  SimplexTableau.this.popPhase2Objective();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	SimplexTableau.this.popPhase2Objective();	  SimplexTableau.this.dropPhase2Objective();    	non-compiled	[CE]  ')'  expected	25	None	replace
8	[BUG]  [BUGGY]  SimplexTableau.this.dropPhase2Objective(null);  [CE]  ')'  expected  [FE]          StackOverflowError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  SimplexTableau.this.dropPhase2Objective(null);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	SimplexTableau.this.dropPhase2Objective(null);	  SimplexTableau.this.dropPhase2Objective();    	non-compiled	[CE]  ')'  expected	25	None	replace
9	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(this,  DEFAULT_ULPS);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(this,  DEFAULT_ULPS);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(this,  DEFAULT_ULPS);	  FontMetrics    fm    =    getFontMetrics(null,    DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	90	None	replace
10	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(null,  NEGATIVE_VAR_COLUMN_LABEL);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(null,  NEGATIVE_VAR_COLUMN_LABEL);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(null,  NEGATIVE_VAR_COLUMN_LABEL);	  FontMetrics    fm    =    getFontMetrics(null,    DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	90	None	replace
11	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(null,  1);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(null,  1);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(null,  1);	  FontMetrics    fm    =    getFontMetrics(null,    DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	90	None	replace
12	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(null,  DEFAULT_ULPS,  maxUlps);  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(null,  DEFAULT_ULPS,  maxUlps);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(null,  DEFAULT_ULPS,  maxUlps);	  FontMetrics    fm    =    getFontMetrics(null,    DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	90	None	replace
13	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();	  ArrayList    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>();    Set    <    Integer>    columnsToDrop    =    new    LinkedHashSet    <    Integer>();    	non-compiled	[CE]  ')'  expected	98	None	replace
14	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(this,  columnLabels);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(this,  columnLabels);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(this,  columnLabels);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(this);    	non-compiled	[CE]  ')'  expected	63	None	replace
15	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(this,  columns);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(this,  columns);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(this,  columns);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(this);    	non-compiled	[CE]  ')'  expected	63	None	replace
16	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getPhase1ObjectiveFunction(this);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getPhase1ObjectiveFunction(this);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getPhase1ObjectiveFunction(this);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(this);    	non-compiled	[CE]  ')'  expected	63	None	replace
17	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.get(getNumObjectiveFunctions()  -  1);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.get(getNumObjectiveFunctions()  -  1);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.get(getNumObjectiveFunctions()  -  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.table.get(getNumObjectiveFunctions());    	non-compiled	[CE]  ')'  expected	28	None	replace
18	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.get(getNumObjectiveFunctions(),  getArtificialVariableOffset());  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.get(getNumObjectiveFunctions(),  getArtificialVariableOffset());  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.get(getNumObjectiveFunctions(),  getArtificialVariableOffset());	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.table.get(getNumObjectiveFunctions());    	non-compiled	[CE]  ')'  expected	28	None	replace
19	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.get(getNumObjectiveFunctions()  +  1);  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.get(getNumObjectiveFunctions()  +  1);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.get(getNumObjectiveFunctions()  +  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.table.get(getNumObjectiveFunctions());    	non-compiled	[CE]  ')'  expected	28	None	replace
20	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.plots.get(0);  [CE]  '.class'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.plots.get(0);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.plots.get(0);	  LinearObjectiveFunction    graph    =(LinearObjectiveFunction)this.plots.clone();    	non-compiled	[CE]  '.class'  expected	37	None	replace
21	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.plots.get();  [CE]  '.class'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.plots.get();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.plots.get();	  LinearObjectiveFunction    graph    =(LinearObjectiveFunction)this.plots.clone();    	non-compiled	[CE]  '.class'  expected	37	None	replace
22	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph,  column);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph,  column);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(graph,  column);	  FontMetrics    fm    =    getFontMetrics(graph,    null);    	non-compiled	[CE]  ')'  expected	118	None	replace
23	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph,  this);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph,  this);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(graph,  this);	  FontMetrics    fm    =    getFontMetrics(graph,    null);    	non-compiled	[CE]  ')'  expected	118	None	replace
24	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph,  this.columnLabels);  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph,  this.columnLabels);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(graph,  this.columnLabels);	  FontMetrics    fm    =    getFontMetrics(graph,    null);    	non-compiled	[CE]  ')'  expected	118	None	replace
25	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph,  graph.getScale());  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph,  graph.getScale());  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(graph,  graph.getScale());	  FontMetrics    fm    =    getFontMetrics(graph,    null);    	non-compiled	[CE]  ')'  expected	118	None	replace
26	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnLabels.get(getNumObjectiveFunctions());  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnLabels.get(getNumObjectiveFunctions());  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnLabels.get(getNumObjectiveFunctions());	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)map.get(getNumObjectiveFunctions());    	non-compiled	[CE]  ')'  expected	6	None	replace
27	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.scale.get(getNumObjectiveFunctions());  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.scale.get(getNumObjectiveFunctions());  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.scale.get(getNumObjectiveFunctions());	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)map.get(getNumObjectiveFunctions());    	non-compiled	[CE]  ')'  expected	6	None	replace
28	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.fields.get(getNumObjectiveFunctions());  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.fields.get(getNumObjectiveFunctions());  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.fields.get(getNumObjectiveFunctions());	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)map.get(getNumObjectiveFunctions());    	non-compiled	[CE]  ')'  expected	6	None	replace
29	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.graph.getObjectiveFunction(0,  getNumObjectiveFunctions());  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.graph.getObjectiveFunction(0,  getNumObjectiveFunctions());  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.graph.getObjectiveFunction(0,  getNumObjectiveFunctions());	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.matrix.getObjectiveFunction(0,    getNumObjectiveFunctions());    	non-compiled	[CE]  ')'  expected	2	None	replace
30	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.getGraph();  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.getGraph();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.getGraph();	  LinearObjectiveFunction    graph    =(LinearObjectiveFunction)this.getGraph().clone();    	non-compiled	[CE]  ')'  expected	36	None	replace
31	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  columns);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  columns);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  columns);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(null,    null,    columnLabels);    	non-compiled	[CE]  ')'  expected	71	None	replace
32	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  matrix);  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  matrix);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  matrix);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(null,    null,    columnLabels);    	non-compiled	[CE]  ')'  expected	71	None	replace
33	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  col);  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  col);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  col);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(null,    null,    columnLabels);    	non-compiled	[CE]  ')'  expected	71	None	replace
34	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  columnLabels,  columns);  [CE]  ')'  expected  [FE]                            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  columnLabels,  columns);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  columnLabels,  columns);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(null,    null,    columnLabels);    	non-compiled	[CE]  ')'  expected	71	None	replace
35	[BUG]  [BUGGY]  SimplexTableau.this.dropPhase1Objective();  SimplexTableau.this.setPhase2Objective(null);  [CE]  ')'  expected  [FE]              StackOverflowError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  SimplexTableau.this.dropPhase1Objective();  SimplexTableau.this.setPhase2Objective(null);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	SimplexTableau.this.dropPhase1Objective();  SimplexTableau.this.setPhase2Objective(null);	          SimplexTableau.this.dropPhase1Objective();    SimplexTableau.this.setPhase1Objective(null);    	non-compiled	[CE]  ')'  expected	61	None	replace
36	[BUG]  [BUGGY]  SimplexTableau.this.dropPhase2Objective();  SimplexTableau.this.setPhase2Objective(null);  [CE]  ')'  expected  [FE]                StackOverflowError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  SimplexTableau.this.dropPhase2Objective();  SimplexTableau.this.setPhase2Objective(null);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	SimplexTableau.this.dropPhase2Objective();  SimplexTableau.this.setPhase2Objective(null);	          SimplexTableau.this.dropPhase1Objective();    SimplexTableau.this.setPhase1Objective(null);    	non-compiled	[CE]  ')'  expected	61	None	replace
37	[BUG]  [BUGGY]  SimplexTableau.this.dropPhase1Objective();  SimplexTableau.this.setPhase1Objective(false);  [CE]  ')'  expected  [FE]                  StackOverflowError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  SimplexTableau.this.dropPhase1Objective();  SimplexTableau.this.setPhase1Objective(false);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	SimplexTableau.this.dropPhase1Objective();  SimplexTableau.this.setPhase1Objective(false);	          SimplexTableau.this.dropPhase1Objective();    SimplexTableau.this.setPhase1Objective(null);    	non-compiled	[CE]  ')'  expected	61	None	replace
38	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(this.columnLabels.size()  -  1);  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(this.columnLabels.size()  -  1);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(this.columnLabels.size()  -  1);	  List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(this.columnLabels.size());    	non-compiled	[CE]  ')'  expected	75	None	replace
39	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(this.columnLabels.size()  +  1);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(this.columnLabels.size()  +  1);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(this.columnLabels.size()  +  1);	  List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(this.columnLabels.size());    	non-compiled	[CE]  ')'  expected	75	None	replace
40	[BUG]  [BUGGY]  LinearObjectiveFunction  columnLabels  =(LinearObjectiveFunction)getColumnLabels().clone();  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  columnLabels  =(LinearObjectiveFunction)getColumnLabels().clone();  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  columnLabels  =(LinearObjectiveFunction)getColumnLabels().clone();	  LinearObjectiveFunction    columnLabels    =(LinearObjectiveFunction)getColumnLabels();    	non-compiled	[CE]  ')'  expected	56	None	replace
41	[BUG]  [BUGGY]  LinearObjectiveFunction  columnLabels  =(LinearObjectiveFunction)getRowLabels();  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  columnLabels  =(LinearObjectiveFunction)getRowLabels();  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  columnLabels  =(LinearObjectiveFunction)getRowLabels();	  LinearObjectiveFunction    columnLabels    =(LinearObjectiveFunction)getColumnLabels();    	non-compiled	[CE]  ')'  expected	56	None	replace
42	[BUG]  [BUGGY]  Set  <  Integer>  columnsToDrop  =  new  TreeSet  <  Integer>(columnLabels.size());  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  Set  <  Integer>  columnsToDrop  =  new  TreeSet  <  Integer>(columnLabels.size());  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	Set  <  Integer>  columnsToDrop  =  new  TreeSet  <  Integer>(columnLabels.size());	  List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(columnLabels.size());    Set    <    Integer>    columnsToDrop    =    new    LinkedList    <    Integer>(columnLabels.size());    	non-compiled	[CE]  ')'  expected	124	None	replace
43	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getPhase1ObjectiveFunction().clone();  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getPhase1ObjectiveFunction().clone();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getPhase1ObjectiveFunction().clone();	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction().clone();    	non-compiled	[CE]  ')'  expected	52	None	replace
44	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getNumObjectiveFunctions().clone();  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getNumObjectiveFunctions().clone();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getNumObjectiveFunctions().clone();	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction().clone();    	non-compiled	[CE]  ')'  expected	52	None	replace
45	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  columns);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  columns);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  columns);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(null,    columnLabels);    	non-compiled	[CE]  ')'  expected	64	None	replace
46	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  columnLabels,  columns);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  columnLabels,  columns);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  columnLabels,  columns);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(null,    columnLabels);    	non-compiled	[CE]  ')'  expected	64	None	replace
47	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  col);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  col);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  col);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(null,    columnLabels);    	non-compiled	[CE]  ')'  expected	64	None	replace
48	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  matrix);  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  matrix);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  matrix);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(null,    columnLabels);    	non-compiled	[CE]  ')'  expected	64	None	replace
49	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.scale.clone();  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.scale.clone();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.scale.clone();	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)scale.clone();    	non-compiled	[CE]  ')'  expected	46	None	replace
50	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.clone();  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.clone();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.clone();	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)scale.clone();    	non-compiled	[CE]  ')'  expected	46	None	replace
51	[BUG]  [BUGGY]  List  columnsToDrop  =  getRowLabels();  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  List  columnsToDrop  =  getRowLabels();  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	List  columnsToDrop  =  getRowLabels();	  List    columnsToDrop    =    getColumnLabels();    	non-compiled	[CE]  ')'  expected	104	None	replace
52	[BUG]  [BUGGY]  ArrayList  columnsToDrop  =  getColumnLabels();  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  ArrayList  columnsToDrop  =  getColumnLabels();  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	ArrayList  columnsToDrop  =  getColumnLabels();	  List    columnsToDrop    =    getColumnLabels();    	non-compiled	[CE]  ')'  expected	104	None	replace
53	[BUG]  [BUGGY]  List  columnsToDrop  =  getColumns();  [CE]  ')'  expected  [FE]                            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  List  columnsToDrop  =  getColumns();  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	List  columnsToDrop  =  getColumns();	  List    columnsToDrop    =    getColumnLabels();    	non-compiled	[CE]  ')'  expected	104	None	replace
54	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(table,  null);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(table,  null);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(table,  null);	  FontMetrics    fm    =    getFontMetrics(null,    null);    	non-compiled	[CE]  ')'  expected	7	None	replace
55	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(this,  null);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(this,  null);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(this,  null);	  FontMetrics    fm    =    getFontMetrics(null,    null);    	non-compiled	[CE]  ')'  expected	7	None	replace
56	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.map.get(getNumObjectiveFunctions(),  1);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.map.get(getNumObjectiveFunctions(),  1);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.map.get(getNumObjectiveFunctions(),  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.map.get(getNumObjectiveFunctions(),    DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	116	None	replace
57	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.map.get(getNumObjectiveFunctions(),  2);  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.map.get(getNumObjectiveFunctions(),  2);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.map.get(getNumObjectiveFunctions(),  2);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.map.get(getNumObjectiveFunctions(),    DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	116	None	replace
58	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.map.get(getNumObjectiveFunctions(),  3);  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.map.get(getNumObjectiveFunctions(),  3);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.map.get(getNumObjectiveFunctions(),  3);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.map.get(getNumObjectiveFunctions(),    DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	116	None	replace
59	[BUG]  [BUGGY]  Integer  columnsToDrop  =  new  Integer(getNumObjectiveFunctions());  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  Integer  columnsToDrop  =  new  Integer(getNumObjectiveFunctions());  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	Integer  columnsToDrop  =  new  Integer(getNumObjectiveFunctions());	  ArrayList    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>();    Integer    columnsToDrop    =    new    ArrayList    <    Integer>();    	non-compiled	[CE]  ')'  expected	22	None	replace
60	[BUG]  [BUGGY]  Collection  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size());  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  Collection  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size());  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	Collection  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size());	  List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(columnLabels.size()    -    2);    	non-compiled	[CE]  ')'  expected	74	None	replace
61	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.map.get(getNumObjectiveFunctions(),  getArtificialVariableOffset()  -  1);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.map.get(getNumObjectiveFunctions(),  getArtificialVariableOffset()  -  1);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.map.get(getNumObjectiveFunctions(),  getArtificialVariableOffset()  -  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.map.get(getNumObjectiveFunctions(),    getArtificialVariableOffset());    	non-compiled	[CE]  ')'  expected	115	None	replace
62	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.map.get(getNumObjectiveFunctions(),  getArtificialVariableOffset()  +  1);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.map.get(getNumObjectiveFunctions(),  getArtificialVariableOffset()  +  1);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.map.get(getNumObjectiveFunctions(),  getArtificialVariableOffset()  +  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.map.get(getNumObjectiveFunctions(),    getArtificialVariableOffset());    	non-compiled	[CE]  ')'  expected	115	None	replace
63	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.map.get(getNumArtificialVariables(),  getArtificialVariableOffset());  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.map.get(getNumArtificialVariables(),  getArtificialVariableOffset());  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.map.get(getNumArtificialVariables(),  getArtificialVariableOffset());	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.map.get(getNumObjectiveFunctions(),    getArtificialVariableOffset());    	non-compiled	[CE]  ')'  expected	115	None	replace
64	[BUG]  [BUGGY]  LinearObjectiveFunction  table  =(LinearObjectiveFunction)this.table.get();  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  table  =(LinearObjectiveFunction)this.table.get();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  table  =(LinearObjectiveFunction)this.table.get();	  LinearObjectiveFunction    table    =(LinearObjectiveFunction)this.table.clone();    	non-compiled	[CE]  ')'  expected	76	None	replace
65	[BUG]  [BUGGY]  LinearObjectiveFunction  table  =(LinearObjectiveFunction)table.clone();  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  table  =(LinearObjectiveFunction)table.clone();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  table  =(LinearObjectiveFunction)table.clone();	  LinearObjectiveFunction    table    =(LinearObjectiveFunction)this.table.clone();    	non-compiled	[CE]  ')'  expected	76	None	replace
66	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  this.graph);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  this.graph);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(getBase(),  this.graph);	  FontMetrics    fm    =    getFontMetrics(getBase(),    graph);    	non-compiled	[CE]  ')'  expected	80	None	replace
67	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph,  getBase());  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph,  getBase());  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(graph,  getBase());	  FontMetrics    fm    =    getFontMetrics(getBase(),    graph);    	non-compiled	[CE]  ')'  expected	80	None	replace
68	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph.getBase(),  graph);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph.getBase(),  graph);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(graph.getBase(),  graph);	  FontMetrics    fm    =    getFontMetrics(getBase(),    graph);    	non-compiled	[CE]  ')'  expected	80	None	replace
69	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  graph,  column);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  graph,  column);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(getBase(),  graph,  column);	  FontMetrics    fm    =    getFontMetrics(getBase(),    graph);    	non-compiled	[CE]  ')'  expected	80	None	replace
70	[BUG]  [BUGGY]  SimplexTableau.this.dropPhase0Objective(null);  [CE]  ')'  expected  [FE]          StackOverflowError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  SimplexTableau.this.dropPhase0Objective(null);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	SimplexTableau.this.dropPhase0Objective(null);	  SimplexTableau.this.dropPhase0Objective();    	non-compiled	[CE]  ')'  expected	26	None	replace
71	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)map.getObjectiveFunction(0,  getNumObjectiveFunctions());  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)map.getObjectiveFunction(0,  getNumObjectiveFunctions());  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)map.getObjectiveFunction(0,  getNumObjectiveFunctions());	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.math.getObjectiveFunction(0,    getNumObjectiveFunctions());    	non-compiled	[CE]  ')'  expected	3	None	replace
72	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getObjectiveFunction(0,  getNumObjectiveFunctions());  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getObjectiveFunction(0,  getNumObjectiveFunctions());  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)getObjectiveFunction(0,  getNumObjectiveFunctions());	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.math.getObjectiveFunction(0,    getNumObjectiveFunctions());    	non-compiled	[CE]  ')'  expected	3	None	replace
73	[BUG]  [BUGGY]  LinearObjectiveFunction  columnLabels  =(LinearObjectiveFunction)columns.get(column);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  columnLabels  =(LinearObjectiveFunction)columns.get(column);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  columnLabels  =(LinearObjectiveFunction)columns.get(column);	  LinearObjectiveFunction    columnLabels    =(LinearObjectiveFunction)this.columns.get(column);    	non-compiled	[CE]  ')'  expected	54	None	replace
74	[BUG]  [BUGGY]  LinearObjectiveFunction  columnLabels  =(LinearObjectiveFunction)this.columns.get(column  +  1);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  columnLabels  =(LinearObjectiveFunction)this.columns.get(column  +  1);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  columnLabels  =(LinearObjectiveFunction)this.columns.get(column  +  1);	  LinearObjectiveFunction    columnLabels    =(LinearObjectiveFunction)this.columns.get(column);    	non-compiled	[CE]  ')'  expected	54	None	replace
75	[BUG]  [BUGGY]  LinearObjectiveFunction  columnLabels  =(LinearObjectiveFunction)this.columns.get(0);  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  columnLabels  =(LinearObjectiveFunction)this.columns.get(0);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  columnLabels  =(LinearObjectiveFunction)this.columns.get(0);	  LinearObjectiveFunction    columnLabels    =(LinearObjectiveFunction)this.columns.get(column);    	non-compiled	[CE]  ')'  expected	54	None	replace
76	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.list.getObjectiveFunction(0,  getNumObjectiveFunctions());  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.list.getObjectiveFunction(0,  getNumObjectiveFunctions());  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.list.getObjectiveFunction(0,  getNumObjectiveFunctions());	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)list.getObjectiveFunction(0,    getNumObjectiveFunctions());    	non-compiled	[CE]  ')'  expected	108	None	replace
77	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)list.getObjectiveFunction(0,  getNumObjectiveFunctions()  -  1);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)list.getObjectiveFunction(0,  getNumObjectiveFunctions()  -  1);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)list.getObjectiveFunction(0,  getNumObjectiveFunctions()  -  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)list.getObjectiveFunction(0,    getNumObjectiveFunctions());    	non-compiled	[CE]  ')'  expected	108	None	replace
78	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.fields.getObjectiveFunction(0,  getNumObjectiveFunctions());  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.fields.getObjectiveFunction(0,  getNumObjectiveFunctions());  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.fields.getObjectiveFunction(0,  getNumObjectiveFunctions());	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)list.getObjectiveFunction(0,    getNumObjectiveFunctions());    	non-compiled	[CE]  ')'  expected	108	None	replace
79	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnLabels.get(0,  getNumObjectiveFunctions());  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnLabels.get(0,  getNumObjectiveFunctions());  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnLabels.get(0,  getNumObjectiveFunctions());	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)list.getObjectiveFunction(0,    getNumObjectiveFunctions());    	non-compiled	[CE]  ')'  expected	108	None	replace
80	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.map.get(getNumObjectiveFunctions()  +  1);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.map.get(getNumObjectiveFunctions()  +  1);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.map.get(getNumObjectiveFunctions()  +  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.map.get(getNumObjectiveFunctions()    -    1);    	non-compiled	[CE]  ')'  expected	85	None	replace
81	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.map.get(getNumObjectiveFunctions()  *  1);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.map.get(getNumObjectiveFunctions()  *  1);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.map.get(getNumObjectiveFunctions()  *  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.map.get(getNumObjectiveFunctions()    -    1);    	non-compiled	[CE]  ')'  expected	85	None	replace
82	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph.getRange());  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph.getRange());  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(graph.getRange());	  FontMetrics    fm    =    getFontMetrics(graph.getBase());    	non-compiled	[CE]  ')'  expected	99	None	replace
83	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.matrix[0].clone();  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.matrix[0].clone();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.matrix[0].clone();	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.matrix.clone();    	non-compiled	[CE]  ')'  expected	127	None	replace
84	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps()  /  1;  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  int  maxUlps  =  getMaximumUlps()  /  1;  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	int  maxUlps  =  getMaximumUlps()  /  1;	  int    maxUlps    =    getMaximumUlps()    +    1;    	non-compiled	[CE]  ')'  expected	41	None	replace
85	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps()  *  2;  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  int  maxUlps  =  getMaximumUlps()  *  2;  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	int  maxUlps  =  getMaximumUlps()  *  2;	  int    maxUlps    =    getMaximumUlps()    *    DEFAULT_ULPS;    	non-compiled	[CE]  ')'  expected	109	None	replace
86	[BUG]  [BUGGY]  int  maxUlps  =  getMinimumUlps()  *  DEFAULT_ULPS;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  int  maxUlps  =  getMinimumUlps()  *  DEFAULT_ULPS;  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	int  maxUlps  =  getMinimumUlps()  *  DEFAULT_ULPS;	  int    maxUlps    =    getMaximumUlps()    *    DEFAULT_ULPS;    	non-compiled	[CE]  ')'  expected	109	None	replace
87	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps()  *  4;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  int  maxUlps  =  getMaximumUlps()  *  4;  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	int  maxUlps  =  getMaximumUlps()  *  4;	  int    maxUlps    =    getMaximumUlps()    *    DEFAULT_ULPS;    	non-compiled	[CE]  ')'  expected	109	None	replace
88	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getPhase2Objective();  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getPhase2Objective();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getPhase2Objective();	  LinearObjectiveFunction    f    =    getPhase1Objective();    	non-compiled	[CE]  ')'  expected	121	None	replace
89	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getPhase1();  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getPhase1();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getPhase1();	  LinearObjectiveFunction    f    =    getPhase1Objective();    	non-compiled	[CE]  ')'  expected	121	None	replace
90	[BUG]  [BUGGY]  Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>(columnLabels.size()  -  1);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>(columnLabels.size()  -  1);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>(columnLabels.size()  -  1);	  Set    <    Integer>    columnsToDrop    =    new    HashSet    <    Integer>(columnLabels.size());    	non-compiled	[CE]  ')'  expected	33	None	replace
91	[BUG]  [BUGGY]  Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>(columnLabels.size()  +  1);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>(columnLabels.size()  +  1);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>(columnLabels.size()  +  1);	  Set    <    Integer>    columnsToDrop    =    new    HashSet    <    Integer>(columnLabels.size());    	non-compiled	[CE]  ')'  expected	33	None	replace
92	[BUG]  [BUGGY]  Set  <  Integer>  columnsToDrop  =  new  LinkedHashSet  <  Integer>(columnLabels.size());  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  Set  <  Integer>  columnsToDrop  =  new  LinkedHashSet  <  Integer>(columnLabels.size());  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	Set  <  Integer>  columnsToDrop  =  new  LinkedHashSet  <  Integer>(columnLabels.size());	  Set    <    Integer>    columnsToDrop    =    new    HashSet    <    Integer>(columnLabels.size());    	non-compiled	[CE]  ')'  expected	33	None	replace
93	[BUG]  [BUGGY]  FontMetrics  fm  =  this.getFontMetrics(f);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  this.getFontMetrics(f);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  this.getFontMetrics(f);	  FontMetrics    fm    =    getFontMetrics(f);    	non-compiled	[CE]  ')'  expected	117	None	replace
94	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(f.getScale());  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(f.getScale());  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(f.getScale());	  FontMetrics    fm    =    getFontMetrics(f);    	non-compiled	[CE]  ')'  expected	117	None	replace
95	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(f,  column);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(f,  column);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(f,  column);	  FontMetrics    fm    =    getFontMetrics(f);    	non-compiled	[CE]  ')'  expected	117	None	replace
96	[BUG]  [BUGGY]  ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size()  -  1);  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size()  -  1);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size()  -  1);	  ArrayList    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(columnLabels.size());    	non-compiled	[CE]  ')'  expected	57	None	replace
97	[BUG]  [BUGGY]  ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size()  +  1);  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size()  +  1);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size()  +  1);	  ArrayList    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(columnLabels.size());    	non-compiled	[CE]  ')'  expected	57	None	replace
98	[BUG]  [BUGGY]  Collections.sort(this.columnLabels,  columnsToDrop);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  Collections.sort(this.columnLabels,  columnsToDrop);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	Collections.sort(this.columnLabels,  columnsToDrop);	  Collections.sort(this.columnLabels);    	non-compiled	[CE]  ')'  expected	101	None	replace
99	[BUG]  [BUGGY]  Collections.sort(this.columnLabels,  columnLabels);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  Collections.sort(this.columnLabels,  columnLabels);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	Collections.sort(this.columnLabels,  columnLabels);	  Collections.sort(this.columnLabels);    	non-compiled	[CE]  ')'  expected	101	None	replace
100	[BUG]  [BUGGY]  Collections.sort(this.columnLabels,  columns);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  Collections.sort(this.columnLabels,  columns);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	Collections.sort(this.columnLabels,  columns);	  Collections.sort(this.columnLabels);    	non-compiled	[CE]  ')'  expected	101	None	replace
101	[BUG]  [BUGGY]  Collections.sort(this.columnLabels,  matrix);  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  Collections.sort(this.columnLabels,  matrix);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	Collections.sort(this.columnLabels,  matrix);	  Collections.sort(this.columnLabels);    	non-compiled	[CE]  ')'  expected	101	None	replace
102	[BUG]  [BUGGY]  if(getNumObjectiveFunctions()  >  1)  {  SimplexTableau.this.dropPhase1Objective();  Tableau.this.dropPhase1Objective();  }  [CE]  ')'  expected  [FE]                StackOverflowError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  if(getNumObjectiveFunctions()  >  1)  {  SimplexTableau.this.dropPhase1Objective();  Tableau.this.dropPhase1Objective();  }  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	if(getNumObjectiveFunctions()  >  1)  {  SimplexTableau.this.dropPhase1Objective();  Tableau.this.dropPhase1Objective();  }	          SimplexTableau.this.dropPhase1Objective();    Tableau.this.dropPhase1Objective();    	non-compiled	[CE]  ')'  expected	62	None	replace
103	[BUG]  [BUGGY]  Tableau.this.dropPhase1Objective();  [CE]  ')'  expected  [FE]                  StackOverflowError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  Tableau.this.dropPhase1Objective();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	Tableau.this.dropPhase1Objective();	          SimplexTableau.this.dropPhase1Objective();    Tableau.this.dropPhase1Objective();    	non-compiled	[CE]  ')'  expected	62	None	replace
104	[BUG]  [BUGGY]  if(getNumObjectiveFunctions()  ==  1)  {  SimplexTableau.this.dropPhase1Objective();  Tableau.this.dropPhase1Objective();  }  [CE]  ')'  expected  [FE]                    StackOverflowError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  if(getNumObjectiveFunctions()  ==  1)  {  SimplexTableau.this.dropPhase1Objective();  Tableau.this.dropPhase1Objective();  }  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	if(getNumObjectiveFunctions()  ==  1)  {  SimplexTableau.this.dropPhase1Objective();  Tableau.this.dropPhase1Objective();  }	          SimplexTableau.this.dropPhase1Objective();    Tableau.this.dropPhase1Objective();    	non-compiled	[CE]  ')'  expected	62	None	replace
105	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  null,  columnLabels);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  null,  columnLabels);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  null,  columnLabels);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(null,    null,    null);    	non-compiled	[CE]  ')'  expected	70	None	replace
106	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  null,  maxUlps);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  null,  maxUlps);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  null,  maxUlps);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(null,    null,    null);    	non-compiled	[CE]  ')'  expected	70	None	replace
107	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  null,  1);  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  null,  1);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  null,  1);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(null,    null,    null);    	non-compiled	[CE]  ')'  expected	70	None	replace
108	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.super.clone();  [CE]  '('  expected  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.super.clone();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.super.clone();	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)super.clone();    	non-compiled	[CE]  '('  expected	44	None	replace
109	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.get();  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.get();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.get();	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)super.clone();    	non-compiled	[CE]  ')'  expected	44	None	replace
110	[BUG]  [BUGGY]  int  maxUlps  =  getMinimumUlps();  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  int  maxUlps  =  getMinimumUlps();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	int  maxUlps  =  getMinimumUlps();	  int    maxUlps    =    getMaximumUlps()    -    1;    	non-compiled	[CE]  ')'  expected	42	None	replace
111	[BUG]  [BUGGY]  LinearObjectiveFunction  table  =(LinearObjectiveFunction)this.getTable().clone();  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  table  =(LinearObjectiveFunction)this.getTable().clone();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  table  =(LinearObjectiveFunction)this.getTable().clone();	  LinearObjectiveFunction    table    =(LinearObjectiveFunction)getTable().clone();    	non-compiled	[CE]  ')'  expected	16	None	replace
112	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  true);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  true);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  true);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(null,    null,    false);    	non-compiled	[CE]  ')'  expected	107	None	replace
113	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  columnLabels,  false);  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  columnLabels,  false);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  columnLabels,  false);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(null,    null,    false);    	non-compiled	[CE]  ')'  expected	107	None	replace
114	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(this,  null,  false);  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(this,  null,  false);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(this,  null,  false);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(null,    null,    false);    	non-compiled	[CE]  ')'  expected	107	None	replace
115	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  false,  matrix);  [CE]  ')'  expected  [FE]                            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  false,  matrix);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  false,  matrix);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(null,    null,    false);    	non-compiled	[CE]  ')'  expected	107	None	replace
116	[BUG]  [BUGGY]  ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(1);  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(1);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(1);	  List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(0);    List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(1);    	non-compiled	[CE]  ')'  expected	11	None	replace
117	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph.getPhase(),  graph.getVerticalScale());  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph.getPhase(),  graph.getVerticalScale());  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(graph.getPhase(),  graph.getVerticalScale());	  FontMetrics    fm    =    getFontMetrics(graph.getPhase());    	non-compiled	[CE]  ')'  expected	38	None	replace
118	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph.getPhase(),  column);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph.getPhase(),  column);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(graph.getPhase(),  column);	  FontMetrics    fm    =    getFontMetrics(graph.getPhase());    	non-compiled	[CE]  ')'  expected	38	None	replace
119	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph.getPhase(),  columns);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph.getPhase(),  columns);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(graph.getPhase(),  columns);	  FontMetrics    fm    =    getFontMetrics(graph.getPhase());    	non-compiled	[CE]  ')'  expected	38	None	replace
120	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph.getSelectedRange());  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph.getSelectedRange());  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(graph.getSelectedRange());	  FontMetrics    fm    =    getFontMetrics(graph.getShape());    	non-compiled	[CE]  ')'  expected	100	None	replace
121	[BUG]  [BUGGY]  Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>(1);  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>(1);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>(1);	  List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(0);    Set    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(1);    	non-compiled	[CE]  ')'  expected	78	None	replace
122	[BUG]  [BUGGY]  Set  <  Integer>  columnsToDrop  =  new  TreeSet  <  Integer>(1);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  Set  <  Integer>  columnsToDrop  =  new  TreeSet  <  Integer>(1);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	Set  <  Integer>  columnsToDrop  =  new  TreeSet  <  Integer>(1);	  List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(0);    Set    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(1);    	non-compiled	[CE]  ')'  expected	78	None	replace
123	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunctions();  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunctions();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunctions();	  LinearObjectiveFunction    f    =    getNumObjectiveFunctions();    	non-compiled	[CE]  ')'  expected	51	None	replace
124	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getPhase();  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getPhase();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getPhase();	  LinearObjectiveFunction    f    =    getNumObjectiveFunctions();    	non-compiled	[CE]  ')'  expected	51	None	replace
125	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(this,  columns);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(this,  columns);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(this,  columns);	  FontMetrics    fm    =    getFontMetrics(this);    	non-compiled	[CE]  ')'  expected	8	None	replace
126	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(this,  columnLabels);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(this,  columnLabels);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(this,  columnLabels);	  FontMetrics    fm    =    getFontMetrics(this);    	non-compiled	[CE]  ')'  expected	8	None	replace
127	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(this,  column);  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(this,  column);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(this,  column);	  FontMetrics    fm    =    getFontMetrics(this);    	non-compiled	[CE]  ')'  expected	8	None	replace
128	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(this,  graph);  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(this,  graph);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(this,  graph);	  FontMetrics    fm    =    getFontMetrics(this);    	non-compiled	[CE]  ')'  expected	8	None	replace
129	[BUG]  [BUGGY]  SimplexTableau.this.dropPhase1Objective(0d);  [CE]  ')'  expected  [FE]            StackOverflowError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  SimplexTableau.this.dropPhase1Objective(0d);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	SimplexTableau.this.dropPhase1Objective(0d);	  SimplexTableau.this.dropPhase1Objective(0);    	non-compiled	[CE]  ')'  expected	27	None	replace
130	[BUG]  [BUGGY]  SimplexTableau.this.dropPhase1Objective(null);  [CE]  '.class'  expected  [FE]              StackOverflowError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  SimplexTableau.this.dropPhase1Objective(null);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	SimplexTableau.this.dropPhase1Objective(null);	  SimplexTableau.this.dropPhase1Objective(0);    	non-compiled	[CE]  '.class'  expected	27	None	replace
131	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)getGraph()  /  2;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)getGraph()  /  2;  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)getGraph()  /  2;	  LinearObjectiveFunction    graph    =(LinearObjectiveFunction)getGraph();    	non-compiled	[CE]  ')'  expected	87	None	replace
132	[BUG]  [BUGGY]  Table  <  Integer>  columnsToDrop  =  new  Table  <  Integer>(columnLabels.size());  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  Table  <  Integer>  columnsToDrop  =  new  Table  <  Integer>(columnLabels.size());  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	Table  <  Integer>  columnsToDrop  =  new  Table  <  Integer>(columnLabels.size());	  List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(columnLabels.size());    Table    <    Integer>    columnsToDrop    =    new    Table    <    Integer>(columnLabels.size());    	non-compiled	[CE]  ')'  expected	69	None	replace
133	[BUG]  [BUGGY]  ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size());  Integer[]  columnsToDrop  =  new  Integer[columnLabels.size()  ];  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size());  Integer[]  columnsToDrop  =  new  Integer[columnLabels.size()  ];  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size());  Integer[]  columnsToDrop  =  new  Integer[columnLabels.size()  ];	  List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(columnLabels.size());    Integer[]    columnsToDrop    =    new    Integer[columnLabels.size()    ];    	non-compiled	[CE]  ')'  expected	84	None	replace
134	[BUG]  [BUGGY]  Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>(columnLabels.size());  Integer[]  columnsToDrop  =  new  Integer[columnLabels.size()  ];  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>(columnLabels.size());  Integer[]  columnsToDrop  =  new  Integer[columnLabels.size()  ];  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>(columnLabels.size());  Integer[]  columnsToDrop  =  new  Integer[columnLabels.size()  ];	  List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(columnLabels.size());    Integer[]    columnsToDrop    =    new    Integer[columnLabels.size()    ];    	non-compiled	[CE]  ')'  expected	84	None	replace
135	[BUG]  [BUGGY]  Integer[]  columnsToDrop  =  new  Integer[columnLabels.size()  ];  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  Integer[]  columnsToDrop  =  new  Integer[columnLabels.size()  ];  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	Integer[]  columnsToDrop  =  new  Integer[columnLabels.size()  ];	  List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(columnLabels.size());    Integer[]    columnsToDrop    =    new    Integer[columnLabels.size()    ];    	non-compiled	[CE]  ')'  expected	84	None	replace
136	[BUG]  [BUGGY]  Set  <  Integer>  columnsToDrop  =  new  TreeSet  <  Integer>();  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  Set  <  Integer>  columnsToDrop  =  new  TreeSet  <  Integer>();  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	Set  <  Integer>  columnsToDrop  =  new  TreeSet  <  Integer>();	  ArrayList    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>();    Set    <    Integer>    columnsToDrop    =    new    TreeSet    <    Integer>();    	non-compiled	[CE]  ')'  expected	125	None	replace
137	[BUG]  [BUGGY]  FontMetrics  fontMetrics  =  getFontMetrics(getBase(),  getArtificialVariableOffset());  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fontMetrics  =  getFontMetrics(getBase(),  getArtificialVariableOffset());  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fontMetrics  =  getFontMetrics(getBase(),  getArtificialVariableOffset());	  FontMetrics    fontMetrics    =    getFontMetrics(getBase());    	non-compiled	[CE]  ')'  expected	49	None	replace
138	[BUG]  [BUGGY]  FontMetrics  fontMetrics  =  getFontMetrics(getBase(),  getScale());  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fontMetrics  =  getFontMetrics(getBase(),  getScale());  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fontMetrics  =  getFontMetrics(getBase(),  getScale());	  FontMetrics    fontMetrics    =    getFontMetrics(getBase());    	non-compiled	[CE]  ')'  expected	49	None	replace
139	[BUG]  [BUGGY]  FontMetrics  fontMetrics  =  getFontMetrics(getBase(),  columns);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fontMetrics  =  getFontMetrics(getBase(),  columns);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fontMetrics  =  getFontMetrics(getBase(),  columns);	  FontMetrics    fontMetrics    =    getFontMetrics(getBase());    	non-compiled	[CE]  ')'  expected	49	None	replace
140	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(0,  column);  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(0,  column);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(0,  column);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(null,    column);    	non-compiled	[CE]  ')'  expected	72	None	replace
141	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(column,  null);  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(column,  null);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(column,  null);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(null,    column);    	non-compiled	[CE]  ')'  expected	72	None	replace
142	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  column  +  1);  [CE]  ')'  expected  [FE]                            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  column  +  1);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  column  +  1);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(null,    column);    	non-compiled	[CE]  ')'  expected	72	None	replace
143	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(column,  column);  [CE]  ')'  expected  [FE]                              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(column,  column);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(column,  column);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(null,    column);    	non-compiled	[CE]  ')'  expected	72	None	replace
144	[BUG]  [BUGGY]  if(getNumObjectiveFunctions()  >  1)  {  SimplexTableau.this.dropPhase1Objective();  SimplexTableau.this.dropPhase2Objective();  }  [CE]  ')'  expected  [FE]          StackOverflowError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  if(getNumObjectiveFunctions()  >  1)  {  SimplexTableau.this.dropPhase1Objective();  SimplexTableau.this.dropPhase2Objective();  }  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	if(getNumObjectiveFunctions()  >  1)  {  SimplexTableau.this.dropPhase1Objective();  SimplexTableau.this.dropPhase2Objective();  }	          SimplexTableau.this.dropPhase1Objective();    SimplexTableau.this.dropPhase2Objective();    	non-compiled	[CE]  ')'  expected	59	None	replace
145	[BUG]  [BUGGY]  if(getNumObjectiveFunctions()  ==  1)  {  SimplexTableau.this.dropPhase1Objective();  SimplexTableau.this.dropPhase2Objective();  }  [CE]  ')'  expected  [FE]            StackOverflowError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  if(getNumObjectiveFunctions()  ==  1)  {  SimplexTableau.this.dropPhase1Objective();  SimplexTableau.this.dropPhase2Objective();  }  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	if(getNumObjectiveFunctions()  ==  1)  {  SimplexTableau.this.dropPhase1Objective();  SimplexTableau.this.dropPhase2Objective();  }	          SimplexTableau.this.dropPhase1Objective();    SimplexTableau.this.dropPhase2Objective();    	non-compiled	[CE]  ')'  expected	59	None	replace
146	[BUG]  [BUGGY]  final  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(0);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  final  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(0);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	final  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(0);	  List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(0);    Collection    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(0);    	non-compiled	[CE]  ')'  expected	12	None	replace
147	[BUG]  [BUGGY]  final  ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  final  ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	final  ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();	  ArrayList    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>();    List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>();    	non-compiled	[CE]  ')'  expected	19	None	replace
148	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.matrix.get(getNumObjectiveFunctions()  -  1);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.matrix.get(getNumObjectiveFunctions()  -  1);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.matrix.get(getNumObjectiveFunctions()  -  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.matrix.get(getNumObjectiveFunctions());    	non-compiled	[CE]  ')'  expected	120	None	replace
149	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.matrix.get(getNumObjectiveFunctions(),  getArtificialVariableOffset());  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.matrix.get(getNumObjectiveFunctions(),  getArtificialVariableOffset());  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.matrix.get(getNumObjectiveFunctions(),  getArtificialVariableOffset());	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.matrix.get(getNumObjectiveFunctions());    	non-compiled	[CE]  ')'  expected	120	None	replace
150	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.matrix.get(getNumObjectiveFunctions()  +  1);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.matrix.get(getNumObjectiveFunctions()  +  1);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.matrix.get(getNumObjectiveFunctions()  +  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.matrix.get(getNumObjectiveFunctions());    	non-compiled	[CE]  ')'  expected	120	None	replace
151	[BUG]  [BUGGY]  LinearObjectiveFunction  columnLabels  =(LinearObjectiveFunction)columnsToDrop.clone();  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  columnLabels  =(LinearObjectiveFunction)columnsToDrop.clone();  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  columnLabels  =(LinearObjectiveFunction)columnsToDrop.clone();	  LinearObjectiveFunction    columnLabels    =(LinearObjectiveFunction)this.columnsToDrop.clone();    	non-compiled	[CE]  ')'  expected	55	None	replace
152	[BUG]  [BUGGY]  LinearObjectiveFunction  columnsToDrop  =(LinearObjectiveFunction)this.columnsToDrop.clone();  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  columnsToDrop  =(LinearObjectiveFunction)this.columnsToDrop.clone();  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  columnsToDrop  =(LinearObjectiveFunction)this.columnsToDrop.clone();	  LinearObjectiveFunction    columnLabels    =(LinearObjectiveFunction)this.columnsToDrop.clone();    	non-compiled	[CE]  ')'  expected	55	None	replace
153	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  matrix,  columnLabels);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  matrix,  columnLabels);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(getBase(),  matrix,  columnLabels);	  FontMetrics    fm    =    getFontMetrics(getBase(),    matrix);    	non-compiled	[CE]  ')'  expected	48	None	replace
154	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  matrix,  columns);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  matrix,  columns);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(getBase(),  matrix,  columns);	  FontMetrics    fm    =    getFontMetrics(getBase(),    matrix);    	non-compiled	[CE]  ')'  expected	48	None	replace
155	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  matrix,  column);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  matrix,  column);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(getBase(),  matrix,  column);	  FontMetrics    fm    =    getFontMetrics(getBase(),    matrix);    	non-compiled	[CE]  ')'  expected	48	None	replace
156	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  matrix,  graph);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  matrix,  graph);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(getBase(),  matrix,  graph);	  FontMetrics    fm    =    getFontMetrics(getBase(),    matrix);    	non-compiled	[CE]  ')'  expected	48	None	replace
157	[BUG]  [BUGGY]  LinearObjectiveFunction  table  =(LinearObjectiveFunction)createTable();  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  table  =(LinearObjectiveFunction)createTable();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  table  =(LinearObjectiveFunction)createTable();	  LinearObjectiveFunction    table    =    createTable();    	non-compiled	[CE]  ')'  expected	123	None	replace
158	[BUG]  [BUGGY]  LinearObjectiveFunction  table  =  new  LinearObjectiveFunction(getNumObjectiveFunctions());  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  table  =  new  LinearObjectiveFunction(getNumObjectiveFunctions());  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  table  =  new  LinearObjectiveFunction(getNumObjectiveFunctions());	  LinearObjectiveFunction    table    =    createTable();    	non-compiled	[CE]  ')'  expected	123	None	replace
159	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getTable().getObjectiveFunction(0,  getNumObjectiveFunctions());  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getTable().getObjectiveFunction(0,  getNumObjectiveFunctions());  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)getTable().getObjectiveFunction(0,  getNumObjectiveFunctions());	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.table.getObjectiveFunction(0,    getNumObjectiveFunctions());    	non-compiled	[CE]  ')'  expected	1	None	replace
160	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.tab.getObjectiveFunction(0,  getNumObjectiveFunctions());  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.tab.getObjectiveFunction(0,  getNumObjectiveFunctions());  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.tab.getObjectiveFunction(0,  getNumObjectiveFunctions());	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.table.getObjectiveFunction(0,    getNumObjectiveFunctions());    	non-compiled	[CE]  ')'  expected	1	None	replace
161	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)list.get(getNumObjectiveFunctions());  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)list.get(getNumObjectiveFunctions());  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)list.get(getNumObjectiveFunctions());	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)math.get(getNumObjectiveFunctions());    	non-compiled	[CE]  ')'  expected	5	None	replace
162	[BUG]  [BUGGY]  Collection  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(0);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  Collection  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(0);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	Collection  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(0);	  Collection    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>();    	non-compiled	[CE]  ')'  expected	113	None	replace
163	[BUG]  [BUGGY]  Collection  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(1);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  Collection  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(1);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	Collection  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(1);	  Collection    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>();    	non-compiled	[CE]  ')'  expected	113	None	replace
164	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  getArtificialVariableOffset()  +  1);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  getArtificialVariableOffset()  +  1);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(getBase(),  getArtificialVariableOffset()  +  1);	  FontMetrics    fm    =    getFontMetrics(getBase(),    getArtificialVariableOffset());    	non-compiled	[CE]  ')'  expected	47	None	replace
165	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  getArtificialVariableOffset(),  matrix);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  getArtificialVariableOffset(),  matrix);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(getBase(),  getArtificialVariableOffset(),  matrix);	  FontMetrics    fm    =    getFontMetrics(getBase(),    getArtificialVariableOffset());    	non-compiled	[CE]  ')'  expected	47	None	replace
166	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  getArtificialVariableOffset(),  maxUlps);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  getArtificialVariableOffset(),  maxUlps);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(getBase(),  getArtificialVariableOffset(),  maxUlps);	  FontMetrics    fm    =    getFontMetrics(getBase(),    getArtificialVariableOffset());    	non-compiled	[CE]  ')'  expected	47	None	replace
167	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.math.get(getNumObjectiveFunctions(),  getArtificialVariableOffset()  +  1);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.math.get(getNumObjectiveFunctions(),  getArtificialVariableOffset()  +  1);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.math.get(getNumObjectiveFunctions(),  getArtificialVariableOffset()  +  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.math.get(getNumObjectiveFunctions(),    getArtificialVariableOffset());    	non-compiled	[CE]  ')'  expected	119	None	replace
168	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.math.get(getNumObjectiveFunctions(),  getArtificialVariableOffset()  -  1);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.math.get(getNumObjectiveFunctions(),  getArtificialVariableOffset()  -  1);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.math.get(getNumObjectiveFunctions(),  getArtificialVariableOffset()  -  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.math.get(getNumObjectiveFunctions(),    getArtificialVariableOffset());    	non-compiled	[CE]  ')'  expected	119	None	replace
169	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.math.get(getNumObjectiveFunctions(),  getArtificialVariableOffset(),  matrix);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.math.get(getNumObjectiveFunctions(),  getArtificialVariableOffset(),  matrix);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.math.get(getNumObjectiveFunctions(),  getArtificialVariableOffset(),  matrix);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.math.get(getNumObjectiveFunctions(),    getArtificialVariableOffset());    	non-compiled	[CE]  ')'  expected	119	None	replace
170	[BUG]  [BUGGY]  LinearTableObjectiveFunction  table  =(LinearTableObjectiveFunction)getTable().clone();  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearTableObjectiveFunction  table  =(LinearTableObjectiveFunction)getTable().clone();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearTableObjectiveFunction  table  =(LinearTableObjectiveFunction)getTable().clone();	  LinearTableObjectiveFunction    table    =    getTable();    	non-compiled	[CE]  ')'  expected	122	None	replace
171	[BUG]  [BUGGY]  LinearTableObjectiveFunction  table  =(LinearTableObjectiveFunction)getTable();  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearTableObjectiveFunction  table  =(LinearTableObjectiveFunction)getTable();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearTableObjectiveFunction  table  =(LinearTableObjectiveFunction)getTable();	  LinearTableObjectiveFunction    table    =    getTable();    	non-compiled	[CE]  ')'  expected	122	None	replace
172	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  NEGATIVE_VAR_COLUMN_LABEL);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  NEGATIVE_VAR_COLUMN_LABEL);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(getBase(),  NEGATIVE_VAR_COLUMN_LABEL);	  FontMetrics    fm    =    getFontMetrics(getBase(),    DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	79	None	replace
173	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  1);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  1);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(getBase(),  1);	  FontMetrics    fm    =    getFontMetrics(getBase(),    DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	79	None	replace
174	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  3);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  3);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(getBase(),  3);	  FontMetrics    fm    =    getFontMetrics(getBase(),    DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	79	None	replace
175	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  this.maxUlps);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  this.maxUlps);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(getBase(),  this.maxUlps);	  FontMetrics    fm    =    getFontMetrics(getBase(),    DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	79	None	replace
176	[BUG]  [BUGGY]  if(getNumObjectiveFunctions()  >  1)  {  SimplexTableau.this.dropPhase1Objective();  SimplexTableau.this.popPhase1Objective();  }  [CE]  ')'  expected  [FE]            StackOverflowError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  if(getNumObjectiveFunctions()  >  1)  {  SimplexTableau.this.dropPhase1Objective();  SimplexTableau.this.popPhase1Objective();  }  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	if(getNumObjectiveFunctions()  >  1)  {  SimplexTableau.this.dropPhase1Objective();  SimplexTableau.this.popPhase1Objective();  }	          SimplexTableau.this.dropPhase1Objective();    SimplexTableau.this.popPhase1Objective();    	non-compiled	[CE]  ')'  expected	60	None	replace
177	[BUG]  [BUGGY]  SimplexTableau.this.popPhase1Objective();  [CE]  ')'  expected  [FE]              StackOverflowError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  SimplexTableau.this.popPhase1Objective();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	SimplexTableau.this.popPhase1Objective();	          SimplexTableau.this.dropPhase1Objective();    SimplexTableau.this.popPhase1Objective();    	non-compiled	[CE]  ')'  expected	60	None	replace
178	[BUG]  [BUGGY]  if(getNumObjectiveFunctions()  >  1)  {  SimplexTableau.this.dropPhase1Objective();  SimplexTableau.this.popPhase1Objective();  }  else  {  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  [CE]  illegal  start  of  expression  [FE]                StackOverflowError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  if(getNumObjectiveFunctions()  >  1)  {  SimplexTableau.this.dropPhase1Objective();  SimplexTableau.this.popPhase1Objective();  }  else  {  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	if(getNumObjectiveFunctions()  >  1)  {  SimplexTableau.this.dropPhase1Objective();  SimplexTableau.this.popPhase1Objective();  }  else  {  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();	          SimplexTableau.this.dropPhase1Objective();    SimplexTableau.this.popPhase1Objective();    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
179	[BUG]  [BUGGY]  SimplexTableau.this.dropPhase2Objective(f);  [CE]  ')'  expected  [FE]        StackOverflowError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  SimplexTableau.this.dropPhase2Objective(f);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	SimplexTableau.this.dropPhase2Objective(f);	  SimplexTableau.this.dropPhase1Objective(f);    	non-compiled	[CE]  ')'  expected	92	None	replace
180	[BUG]  [BUGGY]  SimplexTableau.this.dropPhase1Objective(f,  columnLabels);  [CE]  ')'  expected  [FE]          StackOverflowError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  SimplexTableau.this.dropPhase1Objective(f,  columnLabels);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	SimplexTableau.this.dropPhase1Objective(f,  columnLabels);	  SimplexTableau.this.dropPhase1Objective(f);    	non-compiled	[CE]  ')'  expected	92	None	replace
181	[BUG]  [BUGGY]  SimplexTableau.this.dropPhase1Objective(f,  columnsToDrop);  [CE]  ')'  expected  [FE]            StackOverflowError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  SimplexTableau.this.dropPhase1Objective(f,  columnsToDrop);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	SimplexTableau.this.dropPhase1Objective(f,  columnsToDrop);	  SimplexTableau.this.dropPhase1Objective(f);    	non-compiled	[CE]  ')'  expected	92	None	replace
182	[BUG]  [BUGGY]  if(getNumObjectiveFunctions()  >  1)  {  SimplexTableau.this.dropPhase1Objective();  SimplexTableau.this.dropPhase0Objective();  }  [CE]  ')'  expected  [FE]        StackOverflowError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  if(getNumObjectiveFunctions()  >  1)  {  SimplexTableau.this.dropPhase1Objective();  SimplexTableau.this.dropPhase0Objective();  }  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	if(getNumObjectiveFunctions()  >  1)  {  SimplexTableau.this.dropPhase1Objective();  SimplexTableau.this.dropPhase0Objective();  }	          SimplexTableau.this.dropPhase1Objective();    SimplexTableau.this.dropPhase0Objective();    	non-compiled	[CE]  ')'  expected	86	None	replace
183	[BUG]  [BUGGY]  if(getNumObjectiveFunctions()  ==  1)  {  SimplexTableau.this.dropPhase1Objective();  SimplexTableau.this.dropPhase0Objective();  }  [CE]  ')'  expected  [FE]          StackOverflowError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  if(getNumObjectiveFunctions()  ==  1)  {  SimplexTableau.this.dropPhase1Objective();  SimplexTableau.this.dropPhase0Objective();  }  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	if(getNumObjectiveFunctions()  ==  1)  {  SimplexTableau.this.dropPhase1Objective();  SimplexTableau.this.dropPhase0Objective();  }	          SimplexTableau.this.dropPhase1Objective();    SimplexTableau.this.dropPhase0Objective();    	non-compiled	[CE]  ')'  expected	86	None	replace
184	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  0,  DEFAULT_ULPS);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  0,  DEFAULT_ULPS);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  0,  DEFAULT_ULPS);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(null,    null,    DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	106	None	replace
185	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  1);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  1);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  1);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(null,    null,    DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	106	None	replace
186	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  DEFAULT_ULPS,  NEGATIVE_VAR_COLUMN_LABEL);  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  DEFAULT_ULPS,  NEGATIVE_VAR_COLUMN_LABEL);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  DEFAULT_ULPS,  NEGATIVE_VAR_COLUMN_LABEL);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(null,    null,    DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	106	None	replace
187	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  3);  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  3);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  3);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(null,    null,    DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	106	None	replace
188	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  new  LinkedList  <  Integer>(1);  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  List  <  Integer>  columnsToDrop  =  new  LinkedList  <  Integer>(1);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	List  <  Integer>  columnsToDrop  =  new  LinkedList  <  Integer>(1);	  List    <    Integer>    columnsToDrop    =    new    LinkedList    <    Integer>(0);    	non-compiled	[CE]  ')'  expected	24	None	replace
189	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  new  java.util.ArrayList  <  Integer>(0);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  List  <  Integer>  columnsToDrop  =  new  java.util.ArrayList  <  Integer>(0);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	List  <  Integer>  columnsToDrop  =  new  java.util.ArrayList  <  Integer>(0);	  List    <    Integer>    columnsToDrop    =    new    java.util.ArrayList    <    Integer>();    	non-compiled	[CE]  ')'  expected	105	None	replace
190	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  new  java.util.ArrayList  <  Integer>(1);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  List  <  Integer>  columnsToDrop  =  new  java.util.ArrayList  <  Integer>(1);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	List  <  Integer>  columnsToDrop  =  new  java.util.ArrayList  <  Integer>(1);	  List    <    Integer>    columnsToDrop    =    new    java.util.ArrayList    <    Integer>();    	non-compiled	[CE]  ')'  expected	105	None	replace
191	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  new  LinkedList  <  Integer>(columnLabels.size()  -  1);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  List  <  Integer>  columnsToDrop  =  new  LinkedList  <  Integer>(columnLabels.size()  -  1);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	List  <  Integer>  columnsToDrop  =  new  LinkedList  <  Integer>(columnLabels.size()  -  1);	  List    <    Integer>    columnsToDrop    =    new    LinkedList    <    Integer>(columnLabels.size());    	non-compiled	[CE]  ')'  expected	34	None	replace
192	[BUG]  [BUGGY]  LinearObjectiveFunction  table  =(LinearObjectiveFunction)this.table.getTable();  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  table  =(LinearObjectiveFunction)this.table.getTable();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  table  =(LinearObjectiveFunction)this.table.getTable();	  LinearObjectiveFunction    table    =(LinearObjectiveFunction)getTable();    	non-compiled	[CE]  ')'  expected	15	None	replace
193	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)super.graph.clone();  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)super.graph.clone();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)super.graph.clone();	  LinearObjectiveFunction    graph    =(LinearObjectiveFunction)this.graph.clone();    	non-compiled	[CE]  ')'  expected	35	None	replace
194	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.graph.get();  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.graph.get();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.graph.get();	  LinearObjectiveFunction    graph    =(LinearObjectiveFunction)this.graph.clone();    	non-compiled	[CE]  ')'  expected	35	None	replace
195	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  true);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  true);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  true);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(null,    false);    	non-compiled	[CE]  ')'  expected	114	None	replace
196	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  false,  null);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  false,  null);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  false,  null);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(null,    false);    	non-compiled	[CE]  ')'  expected	114	None	replace
197	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(this,  false);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(this,  false);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(this,  false);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(null,    false);    	non-compiled	[CE]  ')'  expected	114	None	replace
198	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.super.get(getNumObjectiveFunctions());  [CE]  '('  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.super.get(getNumObjectiveFunctions());  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.super.get(getNumObjectiveFunctions());	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)super.get(getNumObjectiveFunctions());    	non-compiled	[CE]  '('  expected	4	None	replace
199	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.get(getNumObjectiveFunctions(),  getArtificialVariableOffset());  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.get(getNumObjectiveFunctions(),  getArtificialVariableOffset());  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.get(getNumObjectiveFunctions(),  getArtificialVariableOffset());	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)super.get(getNumObjectiveFunctions());    	non-compiled	[CE]  ')'  expected	4	None	replace
200	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  this,  columnLabels);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  this,  columnLabels);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(getBase(),  this,  columnLabels);	  FontMetrics    fm    =    getFontMetrics(getBase(),    this);    	non-compiled	[CE]  ')'  expected	81	None	replace
201	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  this,  columns);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  this,  columns);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(getBase(),  this,  columns);	  FontMetrics    fm    =    getFontMetrics(getBase(),    this);    	non-compiled	[CE]  ')'  expected	81	None	replace
202	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  this,  matrix);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  this,  matrix);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(getBase(),  this,  matrix);	  FontMetrics    fm    =    getFontMetrics(getBase(),    this);    	non-compiled	[CE]  ')'  expected	81	None	replace
203	[BUG]  [BUGGY]  LinearObjectiveFunction  columnLabels  =  getRowLabels();  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  columnLabels  =  getRowLabels();  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  columnLabels  =  getRowLabels();	  LinearObjectiveFunction    columnLabels    =    getColumnLabels();    	non-compiled	[CE]  ')'  expected	53	None	replace
204	[BUG]  [BUGGY]  LinearObjectiveFunction  columnLabels  =  getColumnLabels(0);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  columnLabels  =  getColumnLabels(0);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  columnLabels  =  getColumnLabels(0);	  LinearObjectiveFunction    columnLabels    =    getColumnLabels();    	non-compiled	[CE]  ')'  expected	53	None	replace
205	[BUG]  [BUGGY]  Table  table  =  this.table.getTable();  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  Table  table  =  this.table.getTable();  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	Table  table  =  this.table.getTable();	  Table    table    =    getTable();    	non-compiled	[CE]  ')'  expected	112	None	replace
206	[BUG]  [BUGGY]  Table  table  =  this.getTable();  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  Table  table  =  this.getTable();  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	Table  table  =  this.getTable();	  Table    table    =    getTable();    	non-compiled	[CE]  ')'  expected	112	None	replace
207	[BUG]  [BUGGY]  Table  table  =(Table)getTable();  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  Table  table  =(Table)getTable();  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	Table  table  =(Table)getTable();	  Table    table    =    getTable();    	non-compiled	[CE]  ')'  expected	112	None	replace
208	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.math.get(getNumObjectiveFunctions()  *  1);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.math.get(getNumObjectiveFunctions()  *  1);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.math.get(getNumObjectiveFunctions()  *  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.math.get(getNumObjectiveFunctions()    +    1);    	non-compiled	[CE]  ')'  expected	82	None	replace
209	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(map,  columnLabels);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(map,  columnLabels);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(map,  columnLabels);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(map,    null);    	non-compiled	[CE]  ')'  expected	96	None	replace
210	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(map,  columns);  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(map,  columns);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(map,  columns);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(map,    null);    	non-compiled	[CE]  ')'  expected	96	None	replace
211	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(map,  null,  columnLabels);  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(map,  null,  columnLabels);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(map,  null,  columnLabels);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(map,    null);    	non-compiled	[CE]  ')'  expected	96	None	replace
212	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(table,  null);  [CE]  ')'  expected  [FE]                            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(table,  null);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(table,  null);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(map,    null);    	non-compiled	[CE]  ')'  expected	96	None	replace
213	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.paint.get(getNumObjectiveFunctions(),  getArtificialVariableOffset());  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.paint.get(getNumObjectiveFunctions(),  getArtificialVariableOffset());  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.paint.get(getNumObjectiveFunctions(),  getArtificialVariableOffset());	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.paint.get(getNumObjectiveFunctions());    	non-compiled	[CE]  ')'  expected	29	None	replace
214	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.paint.get(getNumObjectiveFunctions()  -  1);  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.paint.get(getNumObjectiveFunctions()  -  1);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.paint.get(getNumObjectiveFunctions()  -  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.paint.get(getNumObjectiveFunctions());    	non-compiled	[CE]  ')'  expected	29	None	replace
215	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.paint.get(getNumObjectiveFunctions()  +  1);  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.paint.get(getNumObjectiveFunctions()  +  1);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.paint.get(getNumObjectiveFunctions()  +  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.paint.get(getNumObjectiveFunctions());    	non-compiled	[CE]  ')'  expected	29	None	replace
216	[BUG]  [BUGGY]  FontMetrics  graph  =  getFontMetrics(graph);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  graph  =  getFontMetrics(graph);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  graph  =  getFontMetrics(graph);	  FontMetrics    fm    =    getFontMetrics(graph);    	non-compiled	[CE]  ')'  expected	9	None	replace
217	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph,  graph);  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph,  graph);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(graph,  graph);	  FontMetrics    fm    =    getFontMetrics(graph);    	non-compiled	[CE]  ')'  expected	9	None	replace
218	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(columns);  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(columns);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(columns);	  FontMetrics    fm    =    getFontMetrics(graph);    	non-compiled	[CE]  ')'  expected	9	None	replace
219	[BUG]  [BUGGY]  List  columnsToDrop  =  getColumnsToDrop(0);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  List  columnsToDrop  =  getColumnsToDrop(0);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	List  columnsToDrop  =  getColumnsToDrop(0);	  List    columnsToDrop    =    getColumnsToDrop();    	non-compiled	[CE]  ')'  expected	102	None	replace
220	[BUG]  [BUGGY]  List  columnsToDrop  =  getRowsToDrop();  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  List  columnsToDrop  =  getRowsToDrop();  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	List  columnsToDrop  =  getRowsToDrop();	  List    columnsToDrop    =    getColumnsToDrop();    	non-compiled	[CE]  ')'  expected	102	None	replace
221	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.map.clone();  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.map.clone();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.map.clone();	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)map.clone();    	non-compiled	[CE]  ')'  expected	93	None	replace
222	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnLabels.clone();  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnLabels.clone();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnLabels.clone();	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)map.clone();    	non-compiled	[CE]  ')'  expected	93	None	replace
223	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph.getVisible());  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph.getVisible());  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(graph.getVisible());	  FontMetrics    fm    =    getFontMetrics(graph.getScale());    	non-compiled	[CE]  ')'  expected	39	None	replace
224	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getPhase2ObjectiveFunction();  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getPhase2ObjectiveFunction();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getPhase2ObjectiveFunction();	  LinearObjectiveFunction    f    =    getPhase1ObjectiveFunction();    	non-compiled	[CE]  ')'  expected	50	None	replace
225	[BUG]  [BUGGY]  LinearObjectiveFunction  table  =  getTable().getRow();  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  table  =  getTable().getRow();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  table  =  getTable().getRow();	  LinearObjectiveFunction    table    =    getTable().getTable();    	non-compiled	[CE]  ')'  expected	17	None	replace
226	[BUG]  [BUGGY]  LinearObjectiveFunction  table  =  getTable().getSegment();  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  table  =  getTable().getSegment();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  table  =  getTable().getSegment();	  LinearObjectiveFunction    table    =    getTable().getTable();    	non-compiled	[CE]  ')'  expected	17	None	replace
227	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(DEFAULT_ULPS,  NEGATIVE_VAR_COLUMN_LABEL);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(DEFAULT_ULPS,  NEGATIVE_VAR_COLUMN_LABEL);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(DEFAULT_ULPS,  NEGATIVE_VAR_COLUMN_LABEL);	  FontMetrics    fm    =    getFontMetrics(DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	110	None	replace
228	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(0,  1);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(0,  1);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(0,  1);	  FontMetrics    fm    =    getFontMetrics(DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	110	None	replace
229	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(DEFAULT_ULPS,  1);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(DEFAULT_ULPS,  1);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(DEFAULT_ULPS,  1);	  FontMetrics    fm    =    getFontMetrics(DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	110	None	replace
230	[BUG]  [BUGGY]  if(getNumObjectiveFunctions()  >  1)  {  SimplexTableau.this.dropPhase1Objective();  SimplexTableau.this.dropPhase1Objective();  }  [CE]  ')'  expected  [FE]        StackOverflowError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  if(getNumObjectiveFunctions()  >  1)  {  SimplexTableau.this.dropPhase1Objective();  SimplexTableau.this.dropPhase1Objective();  }  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	if(getNumObjectiveFunctions()  >  1)  {  SimplexTableau.this.dropPhase1Objective();  SimplexTableau.this.dropPhase1Objective();  }	          SimplexTableau.this.dropPhase1Objective();    SimplexTableau.this.dropPhase1Objective();    	non-compiled	[CE]  ')'  expected	58	None	replace
231	[BUG]  [BUGGY]  if(getNumObjectiveFunctions()  ==  1)  {  SimplexTableau.this.dropPhase1Objective();  SimplexTableau.this.dropPhase1Objective();  }  [CE]  ')'  expected  [FE]          StackOverflowError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  if(getNumObjectiveFunctions()  ==  1)  {  SimplexTableau.this.dropPhase1Objective();  SimplexTableau.this.dropPhase1Objective();  }  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	if(getNumObjectiveFunctions()  ==  1)  {  SimplexTableau.this.dropPhase1Objective();  SimplexTableau.this.dropPhase1Objective();  }	          SimplexTableau.this.dropPhase1Objective();    SimplexTableau.this.dropPhase1Objective();    	non-compiled	[CE]  ')'  expected	58	None	replace
232	[BUG]  [BUGGY]  if(getNumObjectiveFunctions()  >  1)  {  SimplexTableau.this.dropPhase1Objective();  SimplexTableau.this.dropPhase1Objective();  }  else  {  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  [CE]  illegal  start  of  expression  [FE]            StackOverflowError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  if(getNumObjectiveFunctions()  >  1)  {  SimplexTableau.this.dropPhase1Objective();  SimplexTableau.this.dropPhase1Objective();  }  else  {  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	if(getNumObjectiveFunctions()  >  1)  {  SimplexTableau.this.dropPhase1Objective();  SimplexTableau.this.dropPhase1Objective();  }  else  {  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();	          SimplexTableau.this.dropPhase1Objective();    SimplexTableau.this.dropPhase1Objective();    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
233	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  2);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  2);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  2);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(null,    null,    0);    	non-compiled	[CE]  ')'  expected	95	None	replace
234	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(getNumObjectiveFunctions(),  getArtificialVariableOffset());  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(getNumObjectiveFunctions(),  getArtificialVariableOffset());  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(getNumObjectiveFunctions(),  getArtificialVariableOffset());	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.get(getNumObjectiveFunctions());    	non-compiled	[CE]  ')'  expected	30	None	replace
235	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(getNumObjectiveFunctions()  -  1);  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(getNumObjectiveFunctions()  -  1);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(getNumObjectiveFunctions()  -  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.get(getNumObjectiveFunctions());    	non-compiled	[CE]  ')'  expected	30	None	replace
236	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph.getPhase1());  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph.getPhase1());  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(graph.getPhase1());	  FontMetrics    fm    =    getFontMetrics(graph.getNegativeFunctions());    	non-compiled	[CE]  ')'  expected	91	None	replace
237	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph.getVisibleFont());  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph.getVisibleFont());  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(graph.getVisibleFont());	  FontMetrics    fm    =    getFontMetrics(graph.getNegativeFunctions());    	non-compiled	[CE]  ')'  expected	91	None	replace
238	[BUG]  [BUGGY]  float  maxUlps  =  getMaximumUlps();  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  float  maxUlps  =  getMaximumUlps();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	float  maxUlps  =  getMaximumUlps();	  int    maxUlps    =    getMaximumUlps()    -    2;    	non-compiled	[CE]  ')'  expected	43	None	replace
239	[BUG]  [BUGGY]  FontMetrics  fm  =  getPhase1();  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getPhase1();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getPhase1();	  FontMetrics    fm    =    getPhase();    	non-compiled	[CE]  ')'  expected	111	None	replace
240	[BUG]  [BUGGY]  FontMetrics  fm  =  this.getPhase();  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  this.getPhase();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  this.getPhase();	  FontMetrics    fm    =    getPhase();    	non-compiled	[CE]  ')'  expected	111	None	replace
241	[BUG]  [BUGGY]  SimplexTableau.this.dropPhase1Objective();  SimplexTableau.this.setPhase2Objective(false);  [CE]  ')'  expected  [FE]        StackOverflowError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  SimplexTableau.this.dropPhase1Objective();  SimplexTableau.this.setPhase2Objective(false);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	SimplexTableau.this.dropPhase1Objective();  SimplexTableau.this.setPhase2Objective(false);	          SimplexTableau.this.dropPhase1Objective();    SimplexTableau.this.setPhase1Objective(true);    	non-compiled	[CE]  ')'  expected	126	None	replace
242	[BUG]  [BUGGY]  SimplexTableau.this.dropPhase2Objective();  SimplexTableau.this.setPhase1Objective(true);  [CE]  ')'  expected  [FE]          StackOverflowError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  SimplexTableau.this.dropPhase2Objective();  SimplexTableau.this.setPhase1Objective(true);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	SimplexTableau.this.dropPhase2Objective();  SimplexTableau.this.setPhase1Objective(true);	          SimplexTableau.this.dropPhase1Objective();    SimplexTableau.this.setPhase1Objective(true);    	non-compiled	[CE]  ')'  expected	126	None	replace
243	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps()  /  2;  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  int  maxUlps  =  getMaximumUlps()  /  2;  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	int  maxUlps  =  getMaximumUlps()  /  2;	  int    maxUlps    =    getMaximumUlps()    /    DEFAULT_ULPS;    	non-compiled	[CE]  ')'  expected	94	None	replace
244	[BUG]  [BUGGY]  int  maxUlps  =  getMinimumUlps()  /  DEFAULT_ULPS;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  int  maxUlps  =  getMinimumUlps()  /  DEFAULT_ULPS;  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	int  maxUlps  =  getMinimumUlps()  /  DEFAULT_ULPS;	  int    maxUlps    =    getMaximumUlps()    /    DEFAULT_ULPS;    	non-compiled	[CE]  ')'  expected	94	None	replace
245	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(this,  1);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(this,  1);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(this,  1);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(this);    	non-compiled	[CE]  ')'  expected	63	None	replace
246	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(this.columnLabels.size()  -  2);  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(this.columnLabels.size()  -  2);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(this.columnLabels.size()  -  2);	  List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(this.columnLabels.size());    	non-compiled	[CE]  ')'  expected	75	None	replace
247	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps()  /  4;  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  int  maxUlps  =  getMaximumUlps()  /  4;  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	int  maxUlps  =  getMaximumUlps()  /  4;	  int    maxUlps    =    getMaximumUlps()    /    DEFAULT_ULPS;    	non-compiled	[CE]  ')'  expected	94	None	replace
248	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph.getPhase(),  DEFAULT_ULPS);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph.getPhase(),  DEFAULT_ULPS);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(graph.getPhase(),  DEFAULT_ULPS);	  FontMetrics    fm    =    getFontMetrics(graph.getPhase());    	non-compiled	[CE]  ')'  expected	38	None	replace
249	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph.getPhase(),  graph.getEntryCount());  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph.getPhase(),  graph.getEntryCount());  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(graph.getPhase(),  graph.getEntryCount());	  FontMetrics    fm    =    getFontMetrics(graph.getPhase());    	non-compiled	[CE]  ')'  expected	38	None	replace
250	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(this,  table);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(this,  table);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(this,  table);	  FontMetrics    fm    =    getFontMetrics(this);    	non-compiled	[CE]  ')'  expected	8	None	replace
251	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(f,  graph);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(f,  graph);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(f,  graph);	  FontMetrics    fm    =    getFontMetrics(f);    	non-compiled	[CE]  ')'  expected	117	None	replace
252	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(f.getMask());  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(f.getMask());  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(f.getMask());	  FontMetrics    fm    =    getFontMetrics(f);    	non-compiled	[CE]  ')'  expected	117	None	replace
253	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>();  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>();  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>();	  ArrayList    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>();    Set    <    Integer>    columnsToDrop    =    new    HashSet    <    Integer>();    	non-compiled	[CE]  ')'  expected	21	None	replace
254	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.map.get(getNumObjectiveFunctions()  -  1,  DEFAULT_ULPS);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.map.get(getNumObjectiveFunctions()  -  1,  DEFAULT_ULPS);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.map.get(getNumObjectiveFunctions()  -  1,  DEFAULT_ULPS);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.map.get(getNumObjectiveFunctions(),    DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	116	None	replace
255	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(4);  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(4);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(4);	  List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(0);    List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(1);    	non-compiled	[CE]  ')'  expected	11	None	replace
256	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  this,  graph);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  this,  graph);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(getBase(),  this,  graph);	  FontMetrics    fm    =    getFontMetrics(getBase(),    this);    	non-compiled	[CE]  ')'  expected	81	None	replace
257	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  this,  maxUlps);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  this,  maxUlps);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(getBase(),  this,  maxUlps);	  FontMetrics    fm    =    getFontMetrics(getBase(),    this);    	non-compiled	[CE]  ')'  expected	81	None	replace
258	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  Integer  columnsToDrop  =  new  ArrayList  <  Integer>();  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  Integer  columnsToDrop  =  new  ArrayList  <  Integer>();  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  Integer  columnsToDrop  =  new  ArrayList  <  Integer>();	  ArrayList    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>();    Integer    columnsToDrop    =    new    ArrayList    <    Integer>();    	non-compiled	[CE]  ')'  expected	22	None	replace
259	[BUG]  [BUGGY]  Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>();  Integer  columnsToDrop  =  new  ArrayList  <  Integer>();  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>();  Integer  columnsToDrop  =  new  ArrayList  <  Integer>();  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>();  Integer  columnsToDrop  =  new  ArrayList  <  Integer>();	  ArrayList    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>();    Integer    columnsToDrop    =    new    ArrayList    <    Integer>();    	non-compiled	[CE]  ')'  expected	22	None	replace
260	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.plots.get(f);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.plots.get(f);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.plots.get(f);	  LinearObjectiveFunction    graph    =(LinearObjectiveFunction)this.plots.clone();    	non-compiled	[CE]  ')'  expected	37	None	replace
261	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.remove(getNumObjectiveFunctions());  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.remove(getNumObjectiveFunctions());  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.remove(getNumObjectiveFunctions());	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)super.get(getNumObjectiveFunctions());    	non-compiled	[CE]  ')'  expected	4	None	replace
262	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  getPhase());  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  getPhase());  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(getBase(),  getPhase());	  FontMetrics    fm    =    getFontMetrics(getBase(),    getArtificialVariableOffset());    	non-compiled	[CE]  ')'  expected	47	None	replace
263	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  getArtificialVariableOffset(),  DEFAULT_ULPS);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  getArtificialVariableOffset(),  DEFAULT_ULPS);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(getBase(),  getArtificialVariableOffset(),  DEFAULT_ULPS);	  FontMetrics    fm    =    getFontMetrics(getBase(),    getArtificialVariableOffset());    	non-compiled	[CE]  ')'  expected	47	None	replace
264	[BUG]  [BUGGY]  FontMetrics  graph  =  getGraph();  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  graph  =  getGraph();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  graph  =  getGraph();	  FontMetrics    fm    =    getFontMetrics(graph);    	non-compiled	[CE]  ')'  expected	9	None	replace
265	[BUG]  [BUGGY]  FontMetrics  graph  =  getGraph(graph);  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  graph  =  getGraph(graph);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  graph  =  getGraph(graph);	  FontMetrics    fm    =    getFontMetrics(graph);    	non-compiled	[CE]  ')'  expected	9	None	replace
266	[BUG]  [BUGGY]  LinearObjectiveFunction  table  =  getTable().clone();  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  table  =  getTable().clone();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  table  =  getTable().clone();	  LinearObjectiveFunction    table    =    getTable().getTable();    	non-compiled	[CE]  ')'  expected	17	None	replace
267	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.matrix.get(0);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.matrix.get(0);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.matrix.get(0);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.matrix.clone();    	non-compiled	[CE]  ')'  expected	127	None	replace
268	[BUG]  [BUGGY]  LinearTableObjectiveFunction  table  =(LinearTableObjectiveFunction)this.table.clone();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearTableObjectiveFunction  table  =(LinearTableObjectiveFunction)this.table.clone();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearTableObjectiveFunction  table  =(LinearTableObjectiveFunction)this.table.clone();	  LinearTableObjectiveFunction    table    =    getTable();    	non-compiled	[CE]  ';'  expected	122	None	replace
269	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps()  *  3;  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  int  maxUlps  =  getMaximumUlps()  *  3;  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	int  maxUlps  =  getMaximumUlps()  *  3;	  int    maxUlps    =    getMaximumUlps()    *    DEFAULT_ULPS;    	non-compiled	[CE]  ')'  expected	109	None	replace
270	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getPhase1ObjectiveFunctions();  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getPhase1ObjectiveFunctions();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getPhase1ObjectiveFunctions();	  LinearObjectiveFunction    f    =    getNumObjectiveFunctions();    	non-compiled	[CE]  ')'  expected	51	None	replace
271	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)getGraph()  -  1;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)getGraph()  -  1;  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)getGraph()  -  1;	  LinearObjectiveFunction    graph    =(LinearObjectiveFunction)getGraph();    	non-compiled	[CE]  ')'  expected	87	None	replace
272	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size()  +  1);  Integer[]  columnsToDrop  =  new  Integer[columnLabels.size()  ];  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size()  +  1);  Integer[]  columnsToDrop  =  new  Integer[columnLabels.size()  ];  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size()  +  1);  Integer[]  columnsToDrop  =  new  Integer[columnLabels.size()  ];	  List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(columnLabels.size());    Integer[]    columnsToDrop    =    new    Integer[columnLabels.size()    ];    	non-compiled	[CE]  ')'  expected	84	None	replace
273	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.math.get(getNumObjectiveFunctions(),  getBaseVariableOffset());  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.math.get(getNumObjectiveFunctions(),  getBaseVariableOffset());  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.math.get(getNumObjectiveFunctions(),  getBaseVariableOffset());	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.math.get(getNumObjectiveFunctions(),    getArtificialVariableOffset());    	non-compiled	[CE]  ')'  expected	119	None	replace
274	[BUG]  [BUGGY]  LinearObjectiveFunction  columnLabels  =(LinearObjectiveFunction)getRangeLabels();  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  columnLabels  =(LinearObjectiveFunction)getRangeLabels();  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  columnLabels  =(LinearObjectiveFunction)getRangeLabels();	  LinearObjectiveFunction    columnLabels    =(LinearObjectiveFunction)getColumnLabels();    	non-compiled	[CE]  ')'  expected	56	None	replace
275	[BUG]  [BUGGY]  LinearObjectiveFunction  columnLabels  =(LinearObjectiveFunction)this.columnLabels();  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  columnLabels  =(LinearObjectiveFunction)this.columnLabels();  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  columnLabels  =(LinearObjectiveFunction)this.columnLabels();	  LinearObjectiveFunction    columnLabels    =(LinearObjectiveFunction)getColumnLabels();    	non-compiled	[CE]  ')'  expected	56	None	replace
276	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(null,  graph);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(null,  graph);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(null,  graph);	  FontMetrics    fm    =    getFontMetrics(null,    null);    	non-compiled	[CE]  ')'  expected	7	None	replace
277	[BUG]  [BUGGY]  int  maxUlps  =  getmaximumUlps();  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  int  maxUlps  =  getmaximumUlps();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	int  maxUlps  =  getmaximumUlps();	  int    maxUlps    =    getMaximumUlps()    -    2;    	non-compiled	[CE]  ')'  expected	43	None	replace
278	[BUG]  [BUGGY]  FontMetrics  fontMetrics  =  getFontMetrics(getBase(),  DEFAULT_ULPS);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fontMetrics  =  getFontMetrics(getBase(),  DEFAULT_ULPS);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fontMetrics  =  getFontMetrics(getBase(),  DEFAULT_ULPS);	  FontMetrics    fontMetrics    =    getFontMetrics(getBase());    	non-compiled	[CE]  ')'  expected	49	None	replace
279	[BUG]  [BUGGY]  FontMetrics  fontMetrics  =  getFontMetrics(getPhase());  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fontMetrics  =  getFontMetrics(getPhase());  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fontMetrics  =  getFontMetrics(getPhase());	  FontMetrics    fontMetrics    =    getFontMetrics(getBase());    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
280	[BUG]  [BUGGY]  FontMetrics  fontMetrics  =  getFontMetrics(getBase(),  this);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fontMetrics  =  getFontMetrics(getBase(),  this);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fontMetrics  =  getFontMetrics(getBase(),  this);	  FontMetrics    fontMetrics    =    getFontMetrics(getBase());    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
281	[BUG]  [BUGGY]  ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size()  -  2);  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size()  -  2);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size()  -  2);	  ArrayList    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(columnLabels.size());    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
282	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.getGraph().reset();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.getGraph().reset();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.getGraph().reset();	  LinearObjectiveFunction    graph    =(LinearObjectiveFunction)this.getGraph().clone();    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
283	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getPhase0ObjectiveFunction();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getPhase0ObjectiveFunction();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getPhase0ObjectiveFunction();	  LinearObjectiveFunction    f    =    getPhase1ObjectiveFunction();    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
284	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getNumObjectiveFunction();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getNumObjectiveFunction();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getNumObjectiveFunction();	  LinearObjectiveFunction    f    =    getPhase1ObjectiveFunction();    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
285	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.math.get(getNumObjectiveFunctions()  +  2);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.math.get(getNumObjectiveFunctions()  +  2);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.math.get(getNumObjectiveFunctions()  +  2);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.math.get(getNumObjectiveFunctions()    +    1);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
286	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph.getBase(),  DEFAULT_ULPS);  [CE]  '.class'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph.getBase(),  DEFAULT_ULPS);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(graph.getBase(),  DEFAULT_ULPS);	  FontMetrics    fm    =    getFontMetrics(graph.getBase());    	non-compiled	[CE]  '.class'  expected	99	None	replace
287	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(map,  this);  [CE]  '.class'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(map,  this);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(map,  this);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(map,    null);    	non-compiled	[CE]  '.class'  expected	96	None	replace
288	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(map,  this.columnLabels);  [CE]  '.class'  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(map,  this.columnLabels);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(map,  this.columnLabels);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(map,    null);    	non-compiled	[CE]  '.class'  expected	96	None	replace
289	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  NEGATIVE_VAR_COLUMN_LABEL);  [CE]  '.class'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  NEGATIVE_VAR_COLUMN_LABEL);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  NEGATIVE_VAR_COLUMN_LABEL);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(null,    columnLabels);    	non-compiled	[CE]  '.class'  expected	64	None	replace
290	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  1);  [CE]  '.class'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  1);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  1);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(null,    columnLabels);    	non-compiled	[CE]  '.class'  expected	64	None	replace
291	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  3);  [CE]  '.class'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  3);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  3);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(null,    columnLabels);    	non-compiled	[CE]  '.class'  expected	64	None	replace
292	[BUG]  [BUGGY]  Collections.sort(this.columnLabels,  this.maxUlps);  [CE]  '.class'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  Collections.sort(this.columnLabels,  this.maxUlps);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	Collections.sort(this.columnLabels,  this.maxUlps);	  Collections.sort(this.columnLabels);    	non-compiled	[CE]  '.class'  expected	101	None	replace
293	[BUG]  [BUGGY]  Collections.sort(this.columnLabels,  getArtificialVariableOffset());  [CE]  '.class'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  Collections.sort(this.columnLabels,  getArtificialVariableOffset());  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	Collections.sort(this.columnLabels,  getArtificialVariableOffset());	  Collections.sort(this.columnLabels);    	non-compiled	[CE]  '.class'  expected	101	None	replace
294	[BUG]  [BUGGY]  Collections.sort(this.columnLabels,  0);  [CE]  '.class'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  Collections.sort(this.columnLabels,  0);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	Collections.sort(this.columnLabels,  0);	  Collections.sort(this.columnLabels);    	non-compiled	[CE]  '.class'  expected	101	None	replace
295	[BUG]  [BUGGY]  Collections.sort(this.columnLabels,  DEFAULT_ULPS);  [CE]  '.class'  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  Collections.sort(this.columnLabels,  DEFAULT_ULPS);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	Collections.sort(this.columnLabels,  DEFAULT_ULPS);	  Collections.sort(this.columnLabels);    	non-compiled	[CE]  '.class'  expected	101	None	replace
296	[BUG]  [BUGGY]  SimplexTableau.this.dropPhase3Objective();  [CE]  '.class'  expected  [FE]        StackOverflowError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  SimplexTableau.this.dropPhase3Objective();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	SimplexTableau.this.dropPhase3Objective();	          SimplexTableau.this.dropPhase1Objective();    SimplexTableau.this.dropPhase1Objective();    	non-compiled	[CE]  '.class'  expected	58	None	replace
297	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  matrix,  epsilon);  [CE]  '.class'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  matrix,  epsilon);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(getBase(),  matrix,  epsilon);	  FontMetrics    fm    =    getFontMetrics(getBase(),    matrix);    	non-compiled	[CE]  '.class'  expected	48	None	replace
298	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  this.matrix);  [CE]  '.class'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  this.matrix);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(getBase(),  this.matrix);	  FontMetrics    fm    =    getFontMetrics(getBase(),    matrix);    	non-compiled	[CE]  '.class'  expected	48	None	replace
299	[BUG]  [BUGGY]  SimplexTableau.this.dropPhase0Objective(f);  [CE]  '.class'  expected  [FE]          StackOverflowError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  SimplexTableau.this.dropPhase0Objective(f);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	SimplexTableau.this.dropPhase0Objective(f);	  SimplexTableau.this.dropPhase0Objective();    	non-compiled	[CE]  '.class'  expected	26	None	replace
300	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.getObjectiveFunction(0,  getNumObjectiveFunctions()  -  1);  [CE]  '.class'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.getObjectiveFunction(0,  getNumObjectiveFunctions()  -  1);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.getObjectiveFunction(0,  getNumObjectiveFunctions()  -  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.table.getObjectiveFunction(0,    getNumObjectiveFunctions());    	non-compiled	[CE]  '.class'  expected	1	None	replace
301	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.getObjectiveFunction(0,  getNumObjectiveFunctions()  +  1);  [CE]  '.class'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.getObjectiveFunction(0,  getNumObjectiveFunctions()  +  1);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.getObjectiveFunction(0,  getNumObjectiveFunctions()  +  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.table.getObjectiveFunction(0,    getNumObjectiveFunctions());    	non-compiled	[CE]  '.class'  expected	1	None	replace
302	[BUG]  [BUGGY]  Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>();  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  [CE]  '.class'  expected  [FE]          AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>();  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>();  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();	  ArrayList    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>();    List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>();    	non-compiled	[CE]  '.class'  expected	19	None	replace
303	[BUG]  [BUGGY]  Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>();  Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>();  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>();  Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>();  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>();  Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>();	  ArrayList    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>();    List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>();    	non-compiled	[CE]  ')'  expected	19	None	replace
304	[BUG]  [BUGGY]  LinearObjectiveFunction  table  =  createPhase();  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  table  =  createPhase();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  table  =  createPhase();	  LinearObjectiveFunction    table    =    createTable();    	non-compiled	[CE]  ')'  expected	123	None	replace
305	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)map.get(getNumObjectiveFunctions()  -  1);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)map.get(getNumObjectiveFunctions()  -  1);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)map.get(getNumObjectiveFunctions()  -  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)map.get(getNumObjectiveFunctions());    	non-compiled	[CE]  ')'  expected	6	None	replace
306	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph.getBase(),  getBase());  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph.getBase(),  getBase());  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(graph.getBase(),  getBase());	  FontMetrics    fm    =    getFontMetrics(getBase(),    graph);    	non-compiled	[CE]  ')'  expected	80	None	replace
307	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  null,  0);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  null,  0);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  null,  0);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(null,    null,    null);    	non-compiled	[CE]  ')'  expected	70	None	replace
308	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  0,  null);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  0,  null);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  0,  null);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(null,    null,    null);    	non-compiled	[CE]  ')'  expected	70	None	replace
309	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  0,  null);  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  0,  null);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  0,  null);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(null,    null,    null);    	non-compiled	[CE]  ')'  expected	70	None	replace
310	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)graph.clone();  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)graph.clone();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)graph.clone();	  LinearObjectiveFunction    graph    =(LinearObjectiveFunction)this.graph.clone();    	non-compiled	[CE]  ')'  expected	35	None	replace
311	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph.getNegativeFunctions(),  DEFAULT_ULPS);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph.getNegativeFunctions(),  DEFAULT_ULPS);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(graph.getNegativeFunctions(),  DEFAULT_ULPS);	  FontMetrics    fm    =    getFontMetrics(graph.getNegativeFunctions());    	non-compiled	[CE]  ')'  expected	91	None	replace
312	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph.getNegativeFunctions(),  0);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph.getNegativeFunctions(),  0);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(graph.getNegativeFunctions(),  0);	  FontMetrics    fm    =    getFontMetrics(graph.getNegativeFunctions());    	non-compiled	[CE]  ')'  expected	91	None	replace
313	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)list.getObjectiveFunction(0,  getNumObjectiveFunctions()  +  1);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)list.getObjectiveFunction(0,  getNumObjectiveFunctions()  +  1);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)list.getObjectiveFunction(0,  getNumObjectiveFunctions()  +  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)list.getObjectiveFunction(0,    getNumObjectiveFunctions());    	non-compiled	[CE]  ')'  expected	108	None	replace
314	[BUG]  [BUGGY]  Set  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size());  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  Set  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size());  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	Set  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size());	  List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(columnLabels.size()    +    1);    	non-compiled	[CE]  ')'  expected	32	None	replace
315	[BUG]  [BUGGY]  SimplexTableau.this.dropPhase(f);  [CE]  ')'  expected  [FE]        StackOverflowError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  SimplexTableau.this.dropPhase(f);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	SimplexTableau.this.dropPhase(f);	  SimplexTableau.this.dropPhase1Objective(f);    	non-compiled	[CE]  ')'  expected	92	None	replace
316	[BUG]  [BUGGY]  Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>(columnLabels.size()  -  2);  [CE]  '.class'  expected  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>(columnLabels.size()  -  2);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>(columnLabels.size()  -  2);	  Set    <    Integer>    columnsToDrop    =    new    HashSet    <    Integer>(columnLabels.size());    	non-compiled	[CE]  '.class'  expected	33	None	replace
317	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph,  this.maxUlps);  [CE]  '.class'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph,  this.maxUlps);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(graph,  this.maxUlps);	  FontMetrics    fm    =    getFontMetrics(graph,    null);    	non-compiled	[CE]  '.class'  expected	118	None	replace
318	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph,  0,  null);  [CE]  '.class'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph,  0,  null);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(graph,  0,  null);	  FontMetrics    fm    =    getFontMetrics(graph,    null);    	non-compiled	[CE]  '.class'  expected	118	None	replace
319	[BUG]  [BUGGY]  List  columnsToDrop  =  getColumnsToDrop(columnLabels  -  1);  [CE]  '.class'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  List  columnsToDrop  =  getColumnsToDrop(columnLabels  -  1);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	List  columnsToDrop  =  getColumnsToDrop(columnLabels  -  1);	  List    columnsToDrop    =    getColumnsToDrop(columnLabels);    	non-compiled	[CE]  '.class'  expected	103	None	replace
320	[BUG]  [BUGGY]  List  columnsToDrop  =  getColumnsToDrop(columnLabels,  0);  [CE]  '.class'  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  List  columnsToDrop  =  getColumnsToDrop(columnLabels,  0);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	List  columnsToDrop  =  getColumnsToDrop(columnLabels,  0);	  List    columnsToDrop    =    getColumnsToDrop(columnLabels);    	non-compiled	[CE]  '.class'  expected	103	None	replace
321	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)graph.clone();  [CE]  '.class'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)graph.clone();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)graph.clone();	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)math.clone();    	non-compiled	[CE]  '.class'  expected	45	None	replace
322	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.map.get(getNumObjectiveFunctions(),  getBase());  [CE]  '.class'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.map.get(getNumObjectiveFunctions(),  getBase());  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.map.get(getNumObjectiveFunctions(),  getBase());	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.map.get(getNumObjectiveFunctions(),    getArtificialVariableOffset());    	non-compiled	[CE]  '.class'  expected	115	None	replace
323	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  columnLabels,  DEFAULT_ULPS);  [CE]  '.class'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  columnLabels,  DEFAULT_ULPS);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  columnLabels,  DEFAULT_ULPS);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(null,    null,    columnLabels);    	non-compiled	[CE]  '.class'  expected	71	None	replace
324	[BUG]  [BUGGY]  LinearObjectiveFunction  columnLabels  =  getColumnLabels().toArray(new  LinearObjectiveFunction[columnLabels.size()  ]);  [CE]  '.class'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  columnLabels  =  getColumnLabels().toArray(new  LinearObjectiveFunction[columnLabels.size()  ]);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  columnLabels  =  getColumnLabels().toArray(new  LinearObjectiveFunction[columnLabels.size()  ]);	  LinearObjectiveFunction    columnLabels    =    getColumnLabels();    	non-compiled	[CE]  '.class'  expected	53	None	replace
325	[BUG]  [BUGGY]  LinearObjectiveFunction  columnLabels  =  getRangeColumnLabels();  [CE]  '.class'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  columnLabels  =  getRangeColumnLabels();  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  columnLabels  =  getRangeColumnLabels();	  LinearObjectiveFunction    columnLabels    =    getColumnLabels();    	non-compiled	[CE]  '.class'  expected	53	None	replace
326	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  Set  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  [CE]  '.class'  expected  [FE]        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  Set  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  Set  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();	  ArrayList    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>();    Set    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>();    	non-compiled	[CE]  '.class'  expected	97	None	replace
327	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(null,  0);  [CE]  '.class'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(null,  0);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(null,  0);	  FontMetrics    fm    =    getFontMetrics(null,    DEFAULT_ULPS);    	non-compiled	[CE]  '.class'  expected	90	None	replace
328	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(null,  DEFAULT_ULPS,  NEGATIVE_VAR_COLUMN_LABEL);  [CE]  '.class'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(null,  DEFAULT_ULPS,  NEGATIVE_VAR_COLUMN_LABEL);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(null,  DEFAULT_ULPS,  NEGATIVE_VAR_COLUMN_LABEL);	  FontMetrics    fm    =    getFontMetrics(null,    DEFAULT_ULPS);    	non-compiled	[CE]  '.class'  expected	90	None	replace
329	[BUG]  [BUGGY]  SimplexTableau.this.dropPhase1Objective();  Tableau.this.dropPhase2Objective();  [CE]  '.class'  expected  [FE]                StackOverflowError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  SimplexTableau.this.dropPhase1Objective();  Tableau.this.dropPhase2Objective();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	SimplexTableau.this.dropPhase1Objective();  Tableau.this.dropPhase2Objective();	          SimplexTableau.this.dropPhase1Objective();    Tableau.this.dropPhase1Objective();    	non-compiled	[CE]  '.class'  expected	62	None	replace
330	[BUG]  [BUGGY]  SimplexTableau.this.dropPhase0Objective();  SimplexTableau.this.dropPhase2Objective();  [CE]  '.class'  expected  [FE]          StackOverflowError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  SimplexTableau.this.dropPhase0Objective();  SimplexTableau.this.dropPhase2Objective();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	SimplexTableau.this.dropPhase0Objective();  SimplexTableau.this.dropPhase2Objective();	          SimplexTableau.this.dropPhase1Objective();    SimplexTableau.this.dropPhase2Objective();    	non-compiled	[CE]  '.class'  expected	59	None	replace
331	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  2);  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  2);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  2);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(null,    column);    	non-compiled	[CE]  ')'  expected	72	None	replace
332	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  Collection  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  Collection  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  Collection  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();	  ArrayList    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>();    Collection    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>();    	non-compiled	[CE]  ')'  expected	20	None	replace
333	[BUG]  [BUGGY]  Set  <  Integer>  columnsToDrop  =  new  LinkedHashSet  <  Integer>();  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  Set  <  Integer>  columnsToDrop  =  new  LinkedHashSet  <  Integer>();  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	Set  <  Integer>  columnsToDrop  =  new  LinkedHashSet  <  Integer>();	  Set    <    Integer>    columnsToDrop    =    new    HashSet    <    Integer>();    	non-compiled	[CE]  ')'  expected	40	None	replace
334	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.values.clone();  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.values.clone();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.values.clone();	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)map.clone();    	non-compiled	[CE]  ')'  expected	93	None	replace
335	[BUG]  [BUGGY]  Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>(columnLabels.size());  Table  <  Integer>  columnsToDrop  =  new  Table  <  Integer>(columnLabels.size());  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>(columnLabels.size());  Table  <  Integer>  columnsToDrop  =  new  Table  <  Integer>(columnLabels.size());  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>(columnLabels.size());  Table  <  Integer>  columnsToDrop  =  new  Table  <  Integer>(columnLabels.size());	  List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(columnLabels.size());    Table    <    Integer>    columnsToDrop    =    new    Table    <    Integer>(columnLabels.size());    	non-compiled	[CE]  ')'  expected	69	None	replace
336	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size());  Table  <  Integer>  columnsToDrop  =  new  Table  <  Integer>(columnLabels.get(0));  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size());  Table  <  Integer>  columnsToDrop  =  new  Table  <  Integer>(columnLabels.get(0));  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size());  Table  <  Integer>  columnsToDrop  =  new  Table  <  Integer>(columnLabels.get(0));	  List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(columnLabels.size());    Table    <    Integer>    columnsToDrop    =    new    Table    <    Integer>(columnLabels.size());    	non-compiled	[CE]  ')'  expected	69	None	replace
337	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  Set  <  Integer>  columnsToDrop  =  new  TreeSet  <  Integer>();  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  Set  <  Integer>  columnsToDrop  =  new  TreeSet  <  Integer>();  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  Set  <  Integer>  columnsToDrop  =  new  TreeSet  <  Integer>();	  ArrayList    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>();    Set    <    Integer>    columnsToDrop    =    new    TreeSet    <    Integer>();    	non-compiled	[CE]  ')'  expected	125	None	replace
338	[BUG]  [BUGGY]  LinearObjectiveFunction  columnLabels  =(LinearObjectiveFunction)this.columnsToDrop.get(0);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  columnLabels  =(LinearObjectiveFunction)this.columnsToDrop.get(0);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  columnLabels  =(LinearObjectiveFunction)this.columnsToDrop.get(0);	  LinearObjectiveFunction    columnLabels    =(LinearObjectiveFunction)this.columnsToDrop.clone();    	non-compiled	[CE]  ')'  expected	55	None	replace
339	[BUG]  [BUGGY]  LinearObjectiveFunction  columns  =(LinearObjectiveFunction)this.columnsToDrop.clone();  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  columns  =(LinearObjectiveFunction)this.columnsToDrop.clone();  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  columns  =(LinearObjectiveFunction)this.columnsToDrop.clone();	  LinearObjectiveFunction    columnLabels    =(LinearObjectiveFunction)this.columnsToDrop.clone();    	non-compiled	[CE]  ')'  expected	55	None	replace
340	[BUG]  [BUGGY]  SimplexTableau.this.dropPhase2Objective();  SimplexTableau.this.setPhase2Objective(true);  [CE]  ')'  expected  [FE]        StackOverflowError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  SimplexTableau.this.dropPhase2Objective();  SimplexTableau.this.setPhase2Objective(true);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	SimplexTableau.this.dropPhase2Objective();  SimplexTableau.this.setPhase2Objective(true);	          SimplexTableau.this.dropPhase1Objective();    SimplexTableau.this.setPhase1Objective(true);    	non-compiled	[CE]  ')'  expected	126	None	replace
341	[BUG]  [BUGGY]  SimplexTableau.this.dropPhase0Objective();  SimplexTableau.this.popPhase1Objective();  [CE]  ')'  expected  [FE]            StackOverflowError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  SimplexTableau.this.dropPhase0Objective();  SimplexTableau.this.popPhase1Objective();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	SimplexTableau.this.dropPhase0Objective();  SimplexTableau.this.popPhase1Objective();	          SimplexTableau.this.dropPhase1Objective();    SimplexTableau.this.popPhase1Objective();    	non-compiled	[CE]  ')'  expected	60	None	replace
342	[BUG]  [BUGGY]  SimplexTableau.this.popPhase1Objective();  SimplexTableau.this.popPhase0Objective();  [CE]  >  expected  [FE]        StackOverflowError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  SimplexTableau.this.popPhase1Objective();  SimplexTableau.this.popPhase0Objective();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	SimplexTableau.this.popPhase1Objective();  SimplexTableau.this.popPhase0Objective();	          SimplexTableau.this.dropPhase1Objective();    SimplexTableau.this.dropPhase0Objective();    	non-compiled	[CE]  >  expected	86	None	replace
343	[BUG]  [BUGGY]  LinearObjectiveFunction  columnLabels  =(LinearObjectiveFunction)this.columns.get(column  -  1);  [CE]  >  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  columnLabels  =(LinearObjectiveFunction)this.columns.get(column  -  1);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  columnLabels  =(LinearObjectiveFunction)this.columns.get(column  -  1);	  LinearObjectiveFunction    columnLabels    =(LinearObjectiveFunction)this.columns.get(column);    	non-compiled	[CE]  >  expected	54	None	replace
344	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(getNumObjectiveFunctions()  +  1);  [CE]  >  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(getNumObjectiveFunctions()  +  1);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(getNumObjectiveFunctions()  +  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.get(getNumObjectiveFunctions());    	non-compiled	[CE]  >  expected	30	None	replace
345	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(DEFAULT_ULPS,  DEFAULT_VAR_COLUMN_LABEL);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(DEFAULT_ULPS,  DEFAULT_VAR_COLUMN_LABEL);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(DEFAULT_ULPS,  DEFAULT_VAR_COLUMN_LABEL);	  FontMetrics    fm    =    getFontMetrics(DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	110	None	replace
346	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(DEFAULT_ULPS,  MAX_VAR_COLUMN_LABEL);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(DEFAULT_ULPS,  MAX_VAR_COLUMN_LABEL);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(DEFAULT_ULPS,  MAX_VAR_COLUMN_LABEL);	  FontMetrics    fm    =    getFontMetrics(DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	110	None	replace
347	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(0L);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(0L);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(0L);	  FontMetrics    fm    =    getFontMetrics(DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	110	None	replace
348	[BUG]  [BUGGY]  Set  <  Integer>  columnsToDrop  =  new  LinkedList  <  Integer>(columnLabels.size());  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  Set  <  Integer>  columnsToDrop  =  new  LinkedList  <  Integer>(columnLabels.size());  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	Set  <  Integer>  columnsToDrop  =  new  LinkedList  <  Integer>(columnLabels.size());	  List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(columnLabels.size());    Set    <    Integer>    columnsToDrop    =    new    LinkedList    <    Integer>(columnLabels.size());    	non-compiled	[CE]  ')'  expected	124	None	replace
349	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)matrix.clone();  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)matrix.clone();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)matrix.clone();	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)math.clone();    	non-compiled	[CE]  ')'  expected	45	None	replace
350	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.worker.getObjectiveFunction(0,  getNumObjectiveFunctions());  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.worker.getObjectiveFunction(0,  getNumObjectiveFunctions());  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.worker.getObjectiveFunction(0,  getNumObjectiveFunctions());	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)mapper.getObjectiveFunction(0,    getNumObjectiveFunctions());    	non-compiled	[CE]  ')'  expected	73	None	replace
351	[BUG]  [BUGGY]  LinearObjectiveFunction  columnLabels  =(LinearObjectiveFunction)this.columnLabels;  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  columnLabels  =(LinearObjectiveFunction)this.columnLabels;  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  columnLabels  =(LinearObjectiveFunction)this.columnLabels;	  LinearObjectiveFunction    columnLabels    =(LinearObjectiveFunction)getColumnLabels();    	non-compiled	[CE]  ')'  expected	56	None	replace
352	[BUG]  [BUGGY]  SimplexTableau.this.setPhase1Objective(null);  [CE]  ')'  expected  [FE]              StackOverflowError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  SimplexTableau.this.setPhase1Objective(null);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	SimplexTableau.this.setPhase1Objective(null);	          SimplexTableau.this.dropPhase1Objective();    SimplexTableau.this.setPhase1Objective(null);    	non-compiled	[CE]  ')'  expected	61	None	replace
353	[BUG]  [BUGGY]  SimplexTableau.this.setPhase0Objective(null);  [CE]  ')'  expected  [FE]                StackOverflowError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  SimplexTableau.this.setPhase0Objective(null);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	SimplexTableau.this.setPhase0Objective(null);	          SimplexTableau.this.dropPhase1Objective();    SimplexTableau.this.setPhase1Objective(null);    	non-compiled	[CE]  ')'  expected	61	None	replace
354	[BUG]  [BUGGY]  if(getNumObjectiveFunctions()  >  1)  {  SimplexTableau.this.dropPhase1Objective();  SimplexTableau.this.dropPhase0Objective();  }  else  {  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  [CE]  illegal  start  of  expression  [FE]        StackOverflowError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  if(getNumObjectiveFunctions()  >  1)  {  SimplexTableau.this.dropPhase1Objective();  SimplexTableau.this.dropPhase0Objective();  }  else  {  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	if(getNumObjectiveFunctions()  >  1)  {  SimplexTableau.this.dropPhase1Objective();  SimplexTableau.this.dropPhase0Objective();  }  else  {  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();	          SimplexTableau.this.dropPhase1Objective();    SimplexTableau.this.dropPhase0Objective();    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
355	[BUG]  [BUGGY]  LinearObjectiveFunction  table  =(LinearObjectiveFunction)this.table.getData();  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  table  =(LinearObjectiveFunction)this.table.getData();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  table  =(LinearObjectiveFunction)this.table.getData();	  LinearObjectiveFunction    table    =(LinearObjectiveFunction)this.table.clone();    	non-compiled	[CE]  ')'  expected	76	None	replace
356	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  matrix,  DEFAULT_ULPS);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  matrix,  DEFAULT_ULPS);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(getBase(),  matrix,  DEFAULT_ULPS);	  FontMetrics    fm    =    getFontMetrics(getBase(),    matrix);    	non-compiled	[CE]  ')'  expected	48	None	replace
357	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  this.margin);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  this.margin);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(getBase(),  this.margin);	  FontMetrics    fm    =    getFontMetrics(getBase(),    matrix);    	non-compiled	[CE]  ')'  expected	48	None	replace
358	[BUG]  [BUGGY]  LinearObjectiveFunction  columnLabels  =  getColumnLabels().iterator().next();  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  columnLabels  =  getColumnLabels().iterator().next();  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  columnLabels  =  getColumnLabels().iterator().next();	  LinearObjectiveFunction    columnLabels    =    getColumnLabels();    	non-compiled	[CE]  ')'  expected	53	None	replace
359	[BUG]  [BUGGY]  FontMetrics  fm  =  getFont();  [CE]  '.class'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFont();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFont();	  FontMetrics    fm    =    getPhase();    	non-compiled	[CE]  '.class'  expected	111	None	replace
360	[BUG]  [BUGGY]  FontMetrics  fm  =  getBase();  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getBase();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getBase();	  FontMetrics    fm    =    getPhase();    	non-compiled	[CE]  ')'  expected	111	None	replace
361	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(this,  column);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(this,  column);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(this,  column);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(this);    	non-compiled	[CE]  ')'  expected	63	None	replace
362	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  DEFAULT_ULPS);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  DEFAULT_ULPS);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  DEFAULT_ULPS);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(null,    columnLabels);    	non-compiled	[CE]  ')'  expected	64	None	replace
363	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  column,  DEFAULT_ULPS);  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  column,  DEFAULT_ULPS);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  column,  DEFAULT_ULPS);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(null,    column);    	non-compiled	[CE]  ')'  expected	72	None	replace
364	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  columnsToDrop);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  columnsToDrop);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  columnsToDrop);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(null,    null,    columnLabels);    	non-compiled	[CE]  ')'  expected	71	None	replace
365	[BUG]  [BUGGY]  List  columnsToDrop  =  getColumnsToDrop(1);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  List  columnsToDrop  =  getColumnsToDrop(1);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	List  columnsToDrop  =  getColumnsToDrop(1);	  List    columnsToDrop    =    getColumnsToDrop();    	non-compiled	[CE]  ')'  expected	102	None	replace
366	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  null,  null);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  null,  null);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  null,  null);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(null,    null,    null);    	non-compiled	[CE]  ')'  expected	70	None	replace
367	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  null,  DEFAULT_ULPS);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  null,  DEFAULT_ULPS);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  null,  DEFAULT_ULPS);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(null,    null,    null);    	non-compiled	[CE]  ')'  expected	70	None	replace
368	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  new  LinkedList  <  Integer>(columnLabels.size());  Integer[]  columnsToDrop  =  new  Integer[columnLabels.size()  ];  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  List  <  Integer>  columnsToDrop  =  new  LinkedList  <  Integer>(columnLabels.size());  Integer[]  columnsToDrop  =  new  Integer[columnLabels.size()  ];  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	List  <  Integer>  columnsToDrop  =  new  LinkedList  <  Integer>(columnLabels.size());  Integer[]  columnsToDrop  =  new  Integer[columnLabels.size()  ];	  List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(columnLabels.size());    Integer[]    columnsToDrop    =    new    Integer[columnLabels.size()    ];    	non-compiled	[CE]  ')'  expected	84	None	replace
369	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph.getPhase(),  graph);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph.getPhase(),  graph);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(graph.getPhase(),  graph);	  FontMetrics    fm    =    getFontMetrics(graph.getPhase());    	non-compiled	[CE]  ')'  expected	38	None	replace
370	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.get(getNumObjectiveFunctions(),  DEFAULT_ULPS);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.get(getNumObjectiveFunctions(),  DEFAULT_ULPS);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.get(getNumObjectiveFunctions(),  DEFAULT_ULPS);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.table.get(getNumObjectiveFunctions());    	non-compiled	[CE]  ')'  expected	28	None	replace
371	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.map.get(getNumObjectiveFunctions(),  getArtificialVariableOffset(),  DEFAULT_ULPS);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.map.get(getNumObjectiveFunctions(),  getArtificialVariableOffset(),  DEFAULT_ULPS);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.map.get(getNumObjectiveFunctions(),  getArtificialVariableOffset(),  DEFAULT_ULPS);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.map.get(getNumObjectiveFunctions(),    getArtificialVariableOffset());    	non-compiled	[CE]  ')'  expected	115	None	replace
372	[BUG]  [BUGGY]  SimplexTableau.this.pushPhase1Objective();  [CE]  ')'  expected  [FE]            StackOverflowError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  SimplexTableau.this.pushPhase1Objective();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	SimplexTableau.this.pushPhase1Objective();	          SimplexTableau.this.dropPhase1Objective();    SimplexTableau.this.popPhase1Objective();    	non-compiled	[CE]  ')'  expected	60	None	replace
373	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.math.get(getNumObjectiveFunctions(),  getArtificialVariableOffset(),  DEFAULT_ULPS);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.math.get(getNumObjectiveFunctions(),  getArtificialVariableOffset(),  DEFAULT_ULPS);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.math.get(getNumObjectiveFunctions(),  getArtificialVariableOffset(),  DEFAULT_ULPS);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.math.get(getNumObjectiveFunctions(),    getArtificialVariableOffset());    	non-compiled	[CE]  ')'  expected	119	None	replace
374	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(DEFAULT_ULPS,  DEFAULT_VAR);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(DEFAULT_ULPS,  DEFAULT_VAR);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(DEFAULT_ULPS,  DEFAULT_VAR);	  FontMetrics    fm    =    getFontMetrics(DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	110	None	replace
375	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.graph;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.graph;  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.graph;	  LinearObjectiveFunction    graph    =(LinearObjectiveFunction)getGraph();    	non-compiled	[CE]  ')'  expected	87	None	replace
376	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.worker.get(getNumObjectiveFunctions());  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.worker.get(getNumObjectiveFunctions());  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.worker.get(getNumObjectiveFunctions());	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)map.get(getNumObjectiveFunctions());    	non-compiled	[CE]  ')'  expected	6	None	replace
377	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  DEFAULT_ULPS,  DEFAULT_VAR);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  DEFAULT_ULPS,  DEFAULT_VAR);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  DEFAULT_ULPS,  DEFAULT_VAR);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(null,    null,    DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	106	None	replace
378	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  DEFAULT_ULPS,  DEFAULT_COLUMN_LABEL);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  DEFAULT_ULPS,  DEFAULT_COLUMN_LABEL);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null,  DEFAULT_ULPS,  DEFAULT_COLUMN_LABEL);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(null,    null,    DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	106	None	replace
379	[BUG]  [BUGGY]  if(getNumObjectiveFunctions()  >  1)  {  SimplexTableau.this.dropPhase1Objective();  SimplexTableau.this.dropPhase1Objective();  }  else  {  List  <  Integer>  columns  =  new  ArrayList  <  Integer>();  [CE]  illegal  start  of  expression  [FE]        StackOverflowError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  if(getNumObjectiveFunctions()  >  1)  {  SimplexTableau.this.dropPhase1Objective();  SimplexTableau.this.dropPhase1Objective();  }  else  {  List  <  Integer>  columns  =  new  ArrayList  <  Integer>();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	if(getNumObjectiveFunctions()  >  1)  {  SimplexTableau.this.dropPhase1Objective();  SimplexTableau.this.dropPhase1Objective();  }  else  {  List  <  Integer>  columns  =  new  ArrayList  <  Integer>();	          SimplexTableau.this.dropPhase1Objective();    SimplexTableau.this.dropPhase1Objective();    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
380	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  graph,  DEFAULT_ULPS);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  graph,  DEFAULT_ULPS);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(getBase(),  graph,  DEFAULT_ULPS);	  FontMetrics    fm    =    getFontMetrics(getBase(),    graph);    	non-compiled	[CE]  ')'  expected	80	None	replace
381	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  this,  DEFAULT_ULPS);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  this,  DEFAULT_ULPS);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(getBase(),  this,  DEFAULT_ULPS);	  FontMetrics    fm    =    getFontMetrics(getBase(),    this);    	non-compiled	[CE]  ')'  expected	81	None	replace
382	[BUG]  [BUGGY]  List  columnsToDrop  =  getColumnLabels().toArray(new  java.util.ArrayList());  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  List  columnsToDrop  =  getColumnLabels().toArray(new  java.util.ArrayList());  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	List  columnsToDrop  =  getColumnLabels().toArray(new  java.util.ArrayList());	  List    columnsToDrop    =    getColumnLabels();    	non-compiled	[CE]  ')'  expected	104	None	replace
383	[BUG]  [BUGGY]  List  columnsToDrop  =  getColumnLabels().toArray(new  Double[columnLabels.size()  ]);  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  List  columnsToDrop  =  getColumnLabels().toArray(new  Double[columnLabels.size()  ]);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	List  columnsToDrop  =  getColumnLabels().toArray(new  Double[columnLabels.size()  ]);	  List    columnsToDrop    =    getColumnLabels();    	non-compiled	[CE]  ')'  expected	104	None	replace
384	[BUG]  [BUGGY]  SimplexTableau.this.setPhase1Objective(true);  [CE]  ')'  expected  [FE]        StackOverflowError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  SimplexTableau.this.setPhase1Objective(true);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	SimplexTableau.this.setPhase1Objective(true);	          SimplexTableau.this.dropPhase1Objective();    SimplexTableau.this.setPhase1Objective(true);    	non-compiled	[CE]  ')'  expected	126	None	replace
385	[BUG]  [BUGGY]  SimplexTableau.this.setPhase1Objective(false);  [CE]  ')'  expected  [FE]          StackOverflowError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  SimplexTableau.this.setPhase1Objective(false);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	SimplexTableau.this.setPhase1Objective(false);	          SimplexTableau.this.dropPhase1Objective();    SimplexTableau.this.setPhase1Objective(true);    	non-compiled	[CE]  ')'  expected	126	None	replace
386	[BUG]  [BUGGY]  SimplexTableau.this.removePhase2Objective();  [CE]  ')'  expected  [FE]        StackOverflowError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  SimplexTableau.this.removePhase2Objective();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	SimplexTableau.this.removePhase2Objective();	  SimplexTableau.this.dropPhase2Objective();    	non-compiled	[CE]  ')'  expected	25	None	replace
387	[BUG]  [BUGGY]  Table  table  =  findTable();  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  Table  table  =  findTable();  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	Table  table  =  findTable();	  Table    table    =    getTable();    	non-compiled	[CE]  ')'  expected	112	None	replace
388	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps()  /  DEFAULT_ULPS  +  1;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  int  maxUlps  =  getMaximumUlps()  /  DEFAULT_ULPS  +  1;  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	int  maxUlps  =  getMaximumUlps()  /  DEFAULT_ULPS  +  1;	  int    maxUlps    =    getMaximumUlps()    /    DEFAULT_ULPS;    	non-compiled	[CE]  ';'  expected	94	None	replace
389	[BUG]  [BUGGY]  SimplexTableau.this.dropPhase1Objective(1);  [CE]  ')'  expected  [FE]            StackOverflowError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  SimplexTableau.this.dropPhase1Objective(1);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	SimplexTableau.this.dropPhase1Objective(1);	  SimplexTableau.this.dropPhase1Objective(0);    	non-compiled	[CE]  ')'  expected	27	None	replace
390	[BUG]  [BUGGY]  SimplexTableau.this.dropPhase2Objective(0);  [CE]  ')'  expected  [FE]              StackOverflowError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  SimplexTableau.this.dropPhase2Objective(0);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	SimplexTableau.this.dropPhase2Objective(0);	  SimplexTableau.this.dropPhase1Objective(0);    	non-compiled	[CE]  ')'  expected	27	None	replace
391	[BUG]  [BUGGY]  SimplexTableau.this.removePhase1Objective();  [CE]  ')'  expected  [FE]          StackOverflowError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  SimplexTableau.this.removePhase1Objective();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	SimplexTableau.this.removePhase1Objective();	  SimplexTableau.this.dropPhase0Objective();    	non-compiled	[CE]  ')'  expected	26	None	replace
392	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.graph.get(0);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.graph.get(0);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.graph.get(0);	  LinearObjectiveFunction    graph    =(LinearObjectiveFunction)this.graph.clone();    	non-compiled	[CE]  ')'  expected	35	None	replace
393	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.graph.remove(0);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.graph.remove(0);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.graph.remove(0);	  LinearObjectiveFunction    graph    =(LinearObjectiveFunction)this.graph.clone();    	non-compiled	[CE]  ')'  expected	35	None	replace
394	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph,  DEFAULT_ULPS);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(graph,  DEFAULT_ULPS);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(graph,  DEFAULT_ULPS);	  FontMetrics    fm    =    getFontMetrics(graph);    	non-compiled	[CE]  ')'  expected	9	None	replace
395	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.margin.clone();  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.margin.clone();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.margin.clone();	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.matrix.clone();    	non-compiled	[CE]  ')'  expected	127	None	replace
396	[BUG]  [BUGGY]  if(getNumObjectiveFunctions()  >  1)  {  SimplexTableau.this.dropPhase1Objective();  SimplexTableau.this.dropPhase2Objective();  }  else  {  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  [CE]  illegal  start  of  expression  [FE]          StackOverflowError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  if(getNumObjectiveFunctions()  >  1)  {  SimplexTableau.this.dropPhase1Objective();  SimplexTableau.this.dropPhase2Objective();  }  else  {  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	if(getNumObjectiveFunctions()  >  1)  {  SimplexTableau.this.dropPhase1Objective();  SimplexTableau.this.dropPhase2Objective();  }  else  {  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();	          SimplexTableau.this.dropPhase1Objective();    SimplexTableau.this.dropPhase2Objective();    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
397	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.paint.get(getNumObjectiveFunctions(),  DEFAULT_ULPS);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.paint.get(getNumObjectiveFunctions(),  DEFAULT_ULPS);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.paint.get(getNumObjectiveFunctions(),  DEFAULT_ULPS);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.paint.get(getNumObjectiveFunctions());    	non-compiled	[CE]  ')'  expected	29	None	replace
398	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.plots.remove(0);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.plots.remove(0);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.plots.remove(0);	  LinearObjectiveFunction    graph    =(LinearObjectiveFunction)this.plots.clone();    	non-compiled	[CE]  ')'  expected	37	None	replace
399	[BUG]  [BUGGY]  FontMetrics  fontMetrics  =  getFontMetrics(getBase(),  getPhase());  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fontMetrics  =  getFontMetrics(getBase(),  getPhase());  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fontMetrics  =  getFontMetrics(getBase(),  getPhase());	  FontMetrics    fontMetrics    =    getFontMetrics(getBase());    	non-compiled	[CE]  ')'  expected	49	None	replace
400	[BUG]  [BUGGY]  LinearObjectiveFunction  table  =(LinearObjectiveFunction)this.table;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  table  =(LinearObjectiveFunction)this.table;  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  table  =(LinearObjectiveFunction)this.table;	  LinearObjectiveFunction    table    =(LinearObjectiveFunction)getTable();    	non-compiled	[CE]  ')'  expected	15	None	replace
401	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(index,  DEFAULT_ULPS);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(index,  DEFAULT_ULPS);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(index,  DEFAULT_ULPS);	  FontMetrics    fm    =    getFontMetrics(null,    DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	90	None	replace
402	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  DEFAULT_ULPS,  NEGATIVE_VAR_COLUMN_LABEL);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(getBase(),  DEFAULT_ULPS,  NEGATIVE_VAR_COLUMN_LABEL);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(getBase(),  DEFAULT_ULPS,  NEGATIVE_VAR_COLUMN_LABEL);	  FontMetrics    fm    =    getFontMetrics(getBase(),    DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	79	None	replace
403	[BUG]  [BUGGY]  List  columnsToDrop  =  getColumnsToDrop(columnLabels,  DEFAULT_ULPS);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  List  columnsToDrop  =  getColumnsToDrop(columnLabels,  DEFAULT_ULPS);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	List  columnsToDrop  =  getColumnsToDrop(columnLabels,  DEFAULT_ULPS);	  List    columnsToDrop    =    getColumnsToDrop(columnLabels);    	non-compiled	[CE]  ')'  expected	103	None	replace
404	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(map,  graph);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(map,  graph);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(map,  graph);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(map,    null);    	non-compiled	[CE]  ')'  expected	96	None	replace
405	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(getPhase());  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(getPhase());  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(getPhase());	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.get(getNumObjectiveFunctions());    	non-compiled	[CE]  ')'  expected	30	None	replace
406	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps()  *  DEFAULT_ULPS  +  1;  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  int  maxUlps  =  getMaximumUlps()  *  DEFAULT_ULPS  +  1;  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	int  maxUlps  =  getMaximumUlps()  *  DEFAULT_ULPS  +  1;	  int    maxUlps    =    getMaximumUlps()    *    DEFAULT_ULPS;    	non-compiled	[CE]  ')'  expected	109	None	replace
407	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.getObjectiveFunction(0,  getNumObjectiveFunctions());  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.getObjectiveFunction(0,  getNumObjectiveFunctions());  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.getObjectiveFunction(0,  getNumObjectiveFunctions());	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)list.getObjectiveFunction(0,    getNumObjectiveFunctions());    	non-compiled	[CE]  ')'  expected	108	None	replace
408	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.clone();  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.clone();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.clone();	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)super.clone();    	non-compiled	[CE]  ')'  expected	44	None	replace
409	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.objects.clone();  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.objects.clone();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.objects.clone();	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)super.clone();    	non-compiled	[CE]  ')'  expected	44	None	replace
410	[BUG]  [BUGGY]  if(getNumObjectiveFunctions()  >  0)  {  SimplexTableau.this.dropPhase1Objective();  Tableau.this.dropPhase1Objective();  }  [CE]  ')'  expected  [FE]                StackOverflowError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  if(getNumObjectiveFunctions()  >  0)  {  SimplexTableau.this.dropPhase1Objective();  Tableau.this.dropPhase1Objective();  }  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	if(getNumObjectiveFunctions()  >  0)  {  SimplexTableau.this.dropPhase1Objective();  Tableau.this.dropPhase1Objective();  }	          SimplexTableau.this.dropPhase1Objective();    Tableau.this.dropPhase1Objective();    	non-compiled	[CE]  ')'  expected	62	None	replace
411	[BUG]  [BUGGY]  if(getNumObjectiveFunctions()  >  1)  {  SimplexTableau.this.dropPhase1Objective();  Tableau.this.dropPhase1Objective();  }  else  {  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  [CE]  illegal  start  of  expression  [FE]                  StackOverflowError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  if(getNumObjectiveFunctions()  >  1)  {  SimplexTableau.this.dropPhase1Objective();  Tableau.this.dropPhase1Objective();  }  else  {  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	if(getNumObjectiveFunctions()  >  1)  {  SimplexTableau.this.dropPhase1Objective();  Tableau.this.dropPhase1Objective();  }  else  {  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();	          SimplexTableau.this.dropPhase1Objective();    Tableau.this.dropPhase1Objective();    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
412	[BUG]  [BUGGY]  FontMetrics  fm  =  getFontMetrics(text,  null);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }      [BUGGY]  FontMetrics  fm  =  getFontMetrics(text,  null);  [BUGGY]      List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	332	332	1	replace	FontMetrics  fm  =  getFontMetrics(text,  null);	  FontMetrics    fm    =    getFontMetrics(null,    null);    	non-compiled	[CE]  ')'  expected	7	None	replace
