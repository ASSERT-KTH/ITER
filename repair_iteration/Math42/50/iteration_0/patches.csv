bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(getNumObjectiveFunctions()  >  1)  {  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]  protected  void  dropPhase1Objective()  {  [BUGGY]  if(getNumObjectiveFunctions()  >  1)  {  [BUGGY]  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(getNumObjectiveFunctions()  >  1)  {	if  (getNumObjectiveFunctions()  ==  1)  {  	non-compiled	[CE]  illegal  start  of  type	99	None	replace
2	[BUG]  [BUGGY]  if(getNumObjectiveFunctions()  ==  0)  {  [CE]  illegal  start  of  type  [FE]      AssertionError  [CONTEXT]  protected  void  dropPhase1Objective()  {  [BUGGY]  if(getNumObjectiveFunctions()  ==  0)  {  [BUGGY]  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(getNumObjectiveFunctions()  ==  0)  {	if  (getNumObjectiveFunctions()  ==  1)  {  	non-compiled	[CE]  illegal  start  of  type	99	None	replace
3	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]        AssertionError  [CONTEXT]  protected  void  dropPhase1Objective()  {  [BUGGY]    [BUGGY]  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	  	if  (getNumObjectiveFunctions()  ==  1)  {  	non-compiled	[CE]  illegal  start  of  type	99	None	replace
4	[BUG]  [BUGGY]    SimplexTableau.this.dropPhase1Objective();  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]  protected  void  dropPhase1Objective()  {  [BUGGY]    SimplexTableau.this.dropPhase1Objective();  [BUGGY]  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	    SimplexTableau.this.dropPhase1Objective();		non-compiled	[CE]  illegal  start  of  type	100	None	add
5	[BUG]  [BUGGY]    if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  type  [FE]      AssertionError  [CONTEXT]  protected  void  dropPhase1Objective()  {  [BUGGY]    if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	    if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i);  }		non-compiled	[CE]  illegal  start  of  type	100	None	add
6	[BUG]  [BUGGY]    if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels[i]);  }  [CE]  illegal  start  of  type  [FE]        AssertionError  [CONTEXT]  protected  void  dropPhase1Objective()  {  [BUGGY]    if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels[i]);  }  [BUGGY]  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	    if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels[i]);  }		non-compiled	[CE]  illegal  start  of  type	100	None	add
7	[BUG]  [BUGGY]    if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(i);  }  [CE]  illegal  start  of  type  [FE]          AssertionError  [CONTEXT]  protected  void  dropPhase1Objective()  {  [BUGGY]    if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(i);  }  [BUGGY]  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	    if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(i);  }		non-compiled	[CE]  illegal  start  of  type	100	None	add
8	[BUG]  [BUGGY]    if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabelsToDrop.add(i);  }  [CE]  illegal  start  of  type  [FE]            AssertionError  [CONTEXT]  protected  void  dropPhase1Objective()  {  [BUGGY]    if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabelsToDrop.add(i);  }  [BUGGY]  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	    if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabelsToDrop.add(i);  }		non-compiled	[CE]  illegal  start  of  type	100	None	add
9	[BUG]  [BUGGY]    if(getNumObjectiveFunctions()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels[i]);  }  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]  protected  void  dropPhase1Objective()  {  [BUGGY]    if(getNumObjectiveFunctions()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels[i]);  }  [BUGGY]  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	    if(getNumObjectiveFunctions()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels[i]);  }		non-compiled	[CE]  illegal  start  of  type	100	None	add
10	[BUG]  [BUGGY]    if(getNumObjectiveFunctions()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels[i]);  [CE]  illegal  start  of  type  [FE]      AssertionError  [CONTEXT]  protected  void  dropPhase1Objective()  {  [BUGGY]    if(getNumObjectiveFunctions()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels[i]);  [BUGGY]  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	    if(getNumObjectiveFunctions()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels[i]);		non-compiled	[CE]  illegal  start  of  type	100	None	add
11	[BUG]  [BUGGY]    SimplexTableau.dropPhase1Objective();  [CE]  illegal  start  of  type  [FE]        AssertionError  [CONTEXT]  protected  void  dropPhase1Objective()  {  [BUGGY]    SimplexTableau.dropPhase1Objective();  [BUGGY]  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	    SimplexTableau.dropPhase1Objective();		non-compiled	[CE]  illegal  start  of  type	100	None	add
12	[BUG]  [BUGGY]    if(getNumObjectiveFunctions()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveFunction(i  [CE]  illegal  start  of  type  [FE]          AssertionError  [CONTEXT]  protected  void  dropPhase1Objective()  {  [BUGGY]    if(getNumObjectiveFunctions()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveFunction(i  [BUGGY]  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	    if(getNumObjectiveFunctions()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveFunction(i		non-compiled	[CE]  illegal  start  of  type	100	None	add
13	[BUG]  [BUGGY]    if(getNumObjectiveFunctions()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  table.clear();  }  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]  protected  void  dropPhase1Objective()  {  [BUGGY]    if(getNumObjectiveFunctions()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  table.clear();  }  [BUGGY]  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	    if(getNumObjectiveFunctions()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  table.clear();  }		non-compiled	[CE]  illegal  start  of  type	100	None	add
14	[BUG]  [BUGGY]    if(getNumObjectiveFunctions()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnToDrop);  }  [CE]  illegal  start  of  type  [FE]      AssertionError  [CONTEXT]  protected  void  dropPhase1Objective()  {  [BUGGY]    if(getNumObjectiveFunctions()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnToDrop);  }  [BUGGY]  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	    if(getNumObjectiveFunctions()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnToDrop);  }		non-compiled	[CE]  illegal  start  of  type	100	None	add
15	[BUG]  [BUGGY]  if(getNumObjectiveFunctions()  <  1)  {  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]  protected  void  dropPhase1Objective()  {  [BUGGY]  if(getNumObjectiveFunctions()  <  1)  {  [BUGGY]  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(getNumObjectiveFunctions()  <  1)  {	if  (getNumObjectiveFunctions()  ==  1)  {  	non-compiled	[CE]  illegal  start  of  type	99	None	replace
