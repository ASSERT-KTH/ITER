bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  SimplexTableau.this.dropPhase2Objective();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  SimplexTableau.this.dropPhase2Objective();  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	SimplexTableau.this.dropPhase2Objective();	      SimplexTableau.this.dropPhase1Objective();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
2	[BUG]  [BUGGY]  SimplexTableau.this.dropPhase1Objective(null);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  SimplexTableau.this.dropPhase1Objective(null);  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	SimplexTableau.this.dropPhase1Objective(null);	      SimplexTableau.this.dropPhase1Objective();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
3	[BUG]  [BUGGY]  SimplexTableau.this.dropPhase1Objective(f);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  SimplexTableau.this.dropPhase1Objective(f);  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	SimplexTableau.this.dropPhase1Objective(f);	      SimplexTableau.this.dropPhase1Objective();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
4	[BUG]  [BUGGY]  SimplexTableau.dropPhase2Objective();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  SimplexTableau.dropPhase2Objective();  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	SimplexTableau.dropPhase2Objective();	      SimplexTableau.dropPhase1Objective();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
5	[BUG]  [BUGGY]  SimplexTableau.dropPhase1Objective(this);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  SimplexTableau.dropPhase1Objective(this);  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	SimplexTableau.dropPhase1Objective(this);	      SimplexTableau.dropPhase1Objective();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
6	[BUG]  [BUGGY]  if(getNumObjectiveFunctions()  <  =  1)  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  if(getNumObjectiveFunctions()  <  =  1)  {  [BUGGY]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(getNumObjectiveFunctions()  <  =  1)  {	  if(getNumObjectiveFunctions()    <    1)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
7	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i);  }	      if(getNumObjectiveFunctions()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
8	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i);  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i);	      if(getNumObjectiveFunctions()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
9	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.remove(i);  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.remove(i);  }  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.remove(i);  }	      if(getNumObjectiveFunctions()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
10	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(0);  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(0);  }  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(0);  }	      if(getNumObjectiveFunctions()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
11	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnToDrop);  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnToDrop);  }  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnToDrop);  }	      if(getNumObjectiveFunctions()    >    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(columnToDrop);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
12	[BUG]  [BUGGY]  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnToDrop);  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnToDrop);  }  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnToDrop);  }	      if(getNumObjectiveFunctions()    >    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(columnToDrop);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
13	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.add(columnToDrop);  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.add(columnToDrop);  }  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.add(columnToDrop);  }	      if(getNumObjectiveFunctions()    >    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(columnToDrop);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
14	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(columnToDrop);  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(columnToDrop);  }  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(columnToDrop);  }	      if(getNumObjectiveFunctions()    >    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(columnToDrop);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
15	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabelsToDrop.add(i);  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabelsToDrop.add(i);  }  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabelsToDrop.add(i);  }	      if(getNumObjectiveFunctions()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabelsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
16	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabelsToDrop.add(i);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabelsToDrop.add(i);  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabelsToDrop.add(i);	      if(getNumObjectiveFunctions()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabelsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
17	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabelsToDrop.remove(i);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabelsToDrop.remove(i);  }  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabelsToDrop.remove(i);  }	      if(getNumObjectiveFunctions()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabelsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
18	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(i);  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(i);  }  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(i);  }	      if(getNumObjectiveFunctions()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
19	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.add(i);  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.add(i);  }  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.add(i);  }	      if(getNumObjectiveFunctions()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
20	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(i);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(i);  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(i);	      if(getNumObjectiveFunctions()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
21	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.columnLabels.get(columnsToDrop);  graph.clear();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.columnLabels.get(columnsToDrop);  graph.clear();  [BUGGY]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.columnLabels.get(columnsToDrop);  graph.clear();	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
22	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.columnLabels.get(columnsToDrop);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.columnLabels.get(columnsToDrop);  [BUGGY]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.columnLabels.get(columnsToDrop);	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
23	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.columnLabels.get(columnsToDrop);  graph.setPhase(p);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.columnLabels.get(columnsToDrop);  graph.setPhase(p);  [BUGGY]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.columnLabels.get(columnsToDrop);  graph.setPhase(p);	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
24	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)super.dropPhase1Objective();  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)super.dropPhase1Objective();  [BUGGY]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)super.dropPhase1Objective();	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
25	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels[i]);  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels[i]);  }  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels[i]);  }	      if(getNumObjectiveFunctions()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(columnLabels[i]);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
26	[BUG]  [BUGGY]  if(getNumObjectiveFunctions()  ==  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels[i]);  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  if(getNumObjectiveFunctions()  ==  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels[i]);  }  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(getNumObjectiveFunctions()  ==  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels[i]);  }	      if(getNumObjectiveFunctions()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(columnLabels[i]);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
27	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.add(columnLabels[i]);  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.add(columnLabels[i]);  }  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.add(columnLabels[i]);  }	      if(getNumObjectiveFunctions()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(columnLabels[i]);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
28	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  table.clear();  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  table.clear();  }  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  table.clear();  }	      if(getNumObjectiveFunctions()    >    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    table.clear();    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
29	[BUG]  [BUGGY]  For(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  table.clear();  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  For(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  table.clear();  }  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	For(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  table.clear();  }	      if(getNumObjectiveFunctions()    >    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    table.clear();    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
30	[BUG]  [BUGGY]  For(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  table.clear();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  For(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  table.clear();  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	For(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  table.clear();	      if(getNumObjectiveFunctions()    >    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    table.clear();    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
31	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  table.clear();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  table.clear();  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  table.clear();	      if(getNumObjectiveFunctions()    >    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    table.clear();    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
32	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels[i]);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels[i]);  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels[i]);	      if(getNumObjectiveFunctions()    >    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(columnLabels[i]);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
33	[BUG]  [BUGGY]  if(getNumObjectiveFunctions()  ==  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels[i]);  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  if(getNumObjectiveFunctions()  ==  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels[i]);  }  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(getNumObjectiveFunctions()  ==  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels[i]);  }	      if(getNumObjectiveFunctions()    >    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(columnLabels[i]);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
34	[BUG]  [BUGGY]  if(getNumObjectiveFunctions()  >  0)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  if(getNumObjectiveFunctions()  >  0)  {  [BUGGY]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(getNumObjectiveFunctions()  >  0)  {	  if(getNumObjectiveFunctions()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
35	[BUG]  [BUGGY]  if(getPhase1Objective()  ==  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  if(getPhase1Objective()  ==  0)  {  [BUGGY]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(getPhase1Objective()  ==  0)  {	  if(getNumObjectiveFunctions()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
36	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveFunction(i  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveFunction(i  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveFunction(i	      if(getNumObjectiveFunctions()    >    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(new    LinearObjectiveFunction(i    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
37	[BUG]  [BUGGY]  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveFunction(i  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveFunction(i  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveFunction(i	      if(getNumObjectiveFunctions()    >    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(new    LinearObjectiveFunction(i    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
38	[BUG]  [BUGGY]  ||  getNumObjectiveFunctions()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveF  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  ||  getNumObjectiveFunctions()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveF  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	||  getNumObjectiveFunctions()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveF	      if(getNumObjectiveFunctions()    >    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(new    LinearObjectiveFunction(i    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
39	[BUG]  [BUGGY]  ||  getNumObjectiveFunctions()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObject  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  ||  getNumObjectiveFunctions()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObject  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	||  getNumObjectiveFunctions()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObject	      if(getNumObjectiveFunctions()    >    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(new    LinearObjectiveFunction(i    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
40	[BUG]  [BUGGY]  For(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels[i]);  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  For(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels[i]);  }  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	For(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels[i]);  }	      if(getNumObjectiveFunctions()    >    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(columnLabels[i]);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
41	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i  +  1);  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i  +  1);  }  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i  +  1);  }	      if(getNumObjectiveFunctions()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
42	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(i);  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(i);  }  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(i);  }	      if(getNumObjectiveFunctions()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
43	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add	      if(getNumObjectiveFunctions()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
44	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.	      if(getNumObjectiveFunctions()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
45	[BUG]  [BUGGY]  Tableau.this.dropPhase1Objective();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  Tableau.this.dropPhase1Objective();  [BUGGY]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	Tableau.this.dropPhase1Objective();	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
46	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(	      if(getNumObjectiveFunctions()    >    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(columnLabels[i]);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
47	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels	      if(getNumObjectiveFunctions()    >    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(columnLabels[i]);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
48	[BUG]  [BUGGY]  if(precision.compareTo(entry,  0d,  maxUlps)>  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  Line  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  if(precision.compareTo(entry,  0d,  maxUlps)>  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  Line  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(precision.compareTo(entry,  0d,  maxUlps)>  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  Line	      if(getNumObjectiveFunctions()    >    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(new    LinearObjectiveFunction(i    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
49	[BUG]  [BUGGY]  if(getNumObjectiveFunctions()  ==  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveFunction(i  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  if(getNumObjectiveFunctions()  ==  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveFunction(i  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(getNumObjectiveFunctions()  ==  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveFunction(i	      if(getNumObjectiveFunctions()    >    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(new    LinearObjectiveFunction(i    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
50	[BUG]  [BUGGY]  if(getPhase()  ==  0)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  if(getPhase()  ==  0)  {  [BUGGY]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(getPhase()  ==  0)  {	  if(getNumObjectiveFunctions()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
51	[BUG]  [BUGGY]  if(getNumObjectiveFunctions()!=  1)  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  if(getNumObjectiveFunctions()!=  1)  {  [BUGGY]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(getNumObjectiveFunctions()!=  1)  {	  if(getNumObjectiveFunctions()    <    1)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
52	[BUG]  [BUGGY]  if(columnLabelsToDrop!=  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabelsToD  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  if(columnLabelsToDrop!=  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabelsToD  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabelsToDrop!=  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabelsToD	      if(getNumObjectiveFunctions()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabelsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
53	[BUG]  [BUGGY]  if(columnLabelsToDrop!=  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabelsTo  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  if(columnLabelsToDrop!=  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabelsTo  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabelsToDrop!=  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabelsTo	      if(getNumObjectiveFunctions()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabelsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
54	[BUG]  [BUGGY]  if(columnLabelsToDrop  ==  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabelsToD  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  if(columnLabelsToDrop  ==  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabelsToD  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabelsToDrop  ==  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabelsToD	      if(getNumObjectiveFunctions()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabelsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
55	[BUG]  [BUGGY]  if(getNumObjectiveFunctions()  ==  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnToDrop);  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  if(getNumObjectiveFunctions()  ==  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnToDrop);  }  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(getNumObjectiveFunctions()  ==  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnToDrop);  }	      if(getNumObjectiveFunctions()    >    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(columnToDrop);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
56	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  table.remove();  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  table.remove();  }  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  table.remove();  }	      if(getNumObjectiveFunctions()    >    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    table.clear();    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
57	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions().size();  i  <  getArtificialVariableOffset();  i++)  {  table.clear();  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  for(int  i  =  getNumObjectiveFunctions().size();  i  <  getArtificialVariableOffset();  i++)  {  table.clear();  }  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions().size();  i  <  getArtificialVariableOffset();  i++)  {  table.clear();  }	      if(getNumObjectiveFunctions()    >    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    table.clear();    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
58	[BUG]  [BUGGY]  SimplexTableau.dropPhase1Objective(f);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  SimplexTableau.dropPhase1Objective(f);  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	SimplexTableau.dropPhase1Objective(f);	      SimplexTableau.dropPhase1Objective();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
59	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(	      if(getNumObjectiveFunctions()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(columnLabels[i]);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
60	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels[i]  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels[i]  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels[i]	      if(getNumObjectiveFunctions()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(columnLabels[i]);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
61	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(i);  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(i);  }  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels!=  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(i);  }	      if(getNumObjectiveFunctions()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
62	[BUG]  [BUGGY]  if(columnLabels.size()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(i);  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  if(columnLabels.size()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(i);  }  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels.size()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(i);  }	      if(getNumObjectiveFunctions()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
63	[BUG]  [BUGGY]  if(getNumObjectiveFunctions()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(i);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  if(getNumObjectiveFunctions()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(i);  }  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(getNumObjectiveFunctions()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(i);  }	      if(getNumObjectiveFunctions()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
64	[BUG]  [BUGGY]  if(columnLabelsToDrop!=  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabelsToDrop.add(i);  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  if(columnLabelsToDrop!=  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabelsToDrop.add(i);  }  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabelsToDrop!=  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabelsToDrop.add(i);  }	      if(getNumObjectiveFunctions()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabelsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
65	[BUG]  [BUGGY]  if(columnLabelsToDrop  ==  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabelsToDrop.add(i);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  if(columnLabelsToDrop  ==  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabelsToDrop.add(i);  }  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabelsToDrop  ==  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabelsToDrop.add(i);  }	      if(getNumObjectiveFunctions()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabelsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
66	[BUG]  [BUGGY]  if(columnLabelsToDrop!=  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabelsToDrop.add  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  if(columnLabelsToDrop!=  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabelsToDrop.add  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabelsToDrop!=  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabelsToDrop.add	      if(getNumObjectiveFunctions()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabelsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
67	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveFunction(i  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveFunction(i  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels!=  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveFunction(i	      if(getNumObjectiveFunctions()    >    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(new    LinearObjectiveFunction(i    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
68	[BUG]  [BUGGY]  if(getNumObjectiveFunctions()  ==  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveFunction(i  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  if(getNumObjectiveFunctions()  ==  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveFunction(i  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(getNumObjectiveFunctions()  ==  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveFunction(i	      if(getNumObjectiveFunctions()    >    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(new    LinearObjectiveFunction(i    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
69	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnToDrop);  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnToDrop);  }  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels!=  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnToDrop);  }	      if(getNumObjectiveFunctions()    >    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(columnToDrop);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
70	[BUG]  [BUGGY]  if(columnLabels.size()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnToDrop);  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  if(columnLabels.size()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnToDrop);  }  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels.size()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnToDrop);  }	      if(getNumObjectiveFunctions()    >    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(columnToDrop);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
71	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  int  maxUlps  =  getMaximumUlps();  [BUGGY]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	int  maxUlps  =  getMaximumUlps();	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
72	[BUG]  [BUGGY]  int  maxUlps  =  getMaxUlps();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  int  maxUlps  =  getMaxUlps();  [BUGGY]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	int  maxUlps  =  getMaxUlps();	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
73	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null);  [BUGGY]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null);	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
74	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels[i]);  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels[i]);  }  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels!=  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels[i]);  }	      if(getNumObjectiveFunctions()    >    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(columnLabels[i]);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
75	[BUG]  [BUGGY]  SimplexTableau.this.dropPhase0Objective();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  SimplexTableau.this.dropPhase0Objective();  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	SimplexTableau.this.dropPhase0Objective();	      SimplexTableau.this.dropPhase1Objective();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
76	[BUG]  [BUGGY]  if(getNumObjectiveFunctions()  <  =  0)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  if(getNumObjectiveFunctions()  <  =  0)  {  [BUGGY]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(getNumObjectiveFunctions()  <  =  0)  {	  if(getNumObjectiveFunctions()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
77	[BUG]  [BUGGY]  Table  <  NEGATIVE_VAR_COLUMN_LABEL,  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  table.clear();  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  Table  <  NEGATIVE_VAR_COLUMN_LABEL,  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  table.clear();  }  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	Table  <  NEGATIVE_VAR_COLUMN_LABEL,  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  table.clear();  }	      if(getNumObjectiveFunctions()    >    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    table.clear();    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
78	[BUG]  [BUGGY]  Table  <  NEGATIVE_VAR_COLUMN_LABEL,  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  table.clear()  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  Table  <  NEGATIVE_VAR_COLUMN_LABEL,  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  table.clear()  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	Table  <  NEGATIVE_VAR_COLUMN_LABEL,  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  table.clear()	      if(getNumObjectiveFunctions()    >    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    table.clear();    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
79	[BUG]  [BUGGY]  Table  <  NEGATIVE_VAR_COLUMN_LABEL,  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  table.remove();  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  Table  <  NEGATIVE_VAR_COLUMN_LABEL,  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  table.remove();  }  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	Table  <  NEGATIVE_VAR_COLUMN_LABEL,  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  table.remove();  }	      if(getNumObjectiveFunctions()    >    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    table.clear();    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
80	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels[i]  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels[i]  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels[i]	      if(getNumObjectiveFunctions()    >    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(columnLabels[i]);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
81	[BUG]  [BUGGY]  if(columnLabels.size()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  if(columnLabels.size()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels.size()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i);  }	      if(getNumObjectiveFunctions()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
82	[BUG]  [BUGGY]  if(columnLabels.size()  <  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  if(columnLabels.size()  <  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels.size()  <  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i);  }	      if(getNumObjectiveFunctions()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
83	[BUG]  [BUGGY]  if(columnLabels.size()  <  2)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  if(columnLabels.size()  <  2)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels.size()  <  2)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i);  }	      if(getNumObjectiveFunctions()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
84	[BUG]  [BUGGY]  if(columnLabels.size()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(1);  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {    [BUGGY]  if(columnLabels.size()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(1);  }  [BUGGY]    if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels.size()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(1);  }	      if(getNumObjectiveFunctions()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
