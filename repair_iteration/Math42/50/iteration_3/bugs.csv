bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(columnLabels  ==  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(columnLabels  ==  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels  ==  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add	  if(columnLabels!=    null)    {    if(getNumObjectiveFunctions()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
2	[BUG]  [BUGGY]  if(columnLabels  ==  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(columnLabels  ==  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels  ==  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.	  if(columnLabels!=    null)    {    if(getNumObjectiveFunctions()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
3	[BUG]  [BUGGY]  int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnToDrop);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnToDrop);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnToDrop);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(columnToDrop);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
4	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  columnLabels.add(columnToDrop);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  columnLabels.add(columnToDrop);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  columnLabels.add(columnToDrop);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(columnToDrop);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
5	[BUG]  [BUGGY]  int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
6	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  columnsToDrop.add(i);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
7	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getColumnLabels();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getColumnLabels();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getColumnLabels();  i++)  {  columnsToDrop.add(i);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
8	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  columnLabels.add(columnLabels[i]);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  columnLabels.add(columnLabels[i]);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  columnLabels.add(columnLabels[i]);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(columnLabels[i]);    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
9	[BUG]  [BUGGY]  int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels[i]);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels[i]);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels[i]);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(columnLabels[i]);    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
10	[BUG]  [BUGGY]  int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.remove(i);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.remove(i);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.remove(i);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.remove(i);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
11	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  columnsToDrop.remove(i);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  columnsToDrop.remove(i);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  columnsToDrop.remove(i);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.remove(i);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
12	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  columnLabelsToDrop.add(i);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  columnLabelsToDrop.add(i);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  columnLabelsToDrop.add(i);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabelsToDrop.add(i);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
13	[BUG]  [BUGGY]  if(getPhase2Objective()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(getPhase2Objective()  ==  0)  {  [BUGGY]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(getPhase2Objective()  ==  0)  {	  if(getPhase1Objective()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
14	[BUG]  [BUGGY]  if(getPhase1Objective()  ==  1)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(getPhase1Objective()  ==  1)  {  [BUGGY]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(getPhase1Objective()  ==  1)  {	  if(getPhase1Objective()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
15	[BUG]  [BUGGY]  if(getPhase1Objective()!=  0)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(getPhase1Objective()!=  0)  {  [BUGGY]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(getPhase1Objective()!=  0)  {	  if(getPhase1Objective()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
16	[BUG]  [BUGGY]  if(columnLabelsToDrop  ==  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabelsTo  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(columnLabelsToDrop  ==  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabelsTo  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabelsToDrop  ==  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabelsTo	  if(columnLabelsToDrop!=    null)    {    if(getNumObjectiveFunctions()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabelsTo    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
17	[BUG]  [BUGGY]  if(columnLabelsToDrop  ==  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(columnLabelsToDrop  ==  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabelsToDrop  ==  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels	  if(columnLabelsToDrop!=    null)    {    if(getNumObjectiveFunctions()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabelsTo    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
18	[BUG]  [BUGGY]  if(columnLabelsToDrop  ==  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsTo  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(columnLabelsToDrop  ==  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsTo  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabelsToDrop  ==  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsTo	  if(columnLabelsToDrop!=    null)    {    if(getNumObjectiveFunctions()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabelsTo    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
19	[BUG]  [BUGGY]  SimplexTableau.dropPhase1Objective(f,  column);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  SimplexTableau.dropPhase1Objective(f,  column);  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	SimplexTableau.dropPhase1Objective(f,  column);	  SimplexTableau.dropPhase1Objective(f);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
20	[BUG]  [BUGGY]  SimplexTableau.dropPhase2Objective(f);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  SimplexTableau.dropPhase2Objective(f);  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	SimplexTableau.dropPhase2Objective(f);	  SimplexTableau.dropPhase1Objective(f);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
21	[BUG]  [BUGGY]  SimplexTableau.dropPhase1Objective(f,  false);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  SimplexTableau.dropPhase1Objective(f,  false);  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	SimplexTableau.dropPhase1Objective(f,  false);	  SimplexTableau.dropPhase1Objective(f);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
22	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null);  [BUGGY]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  null);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(null);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
23	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(this);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(this);  [BUGGY]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(this);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(null);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
24	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  columnLabels);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  columnLabels);  [BUGGY]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  columnLabels);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(null);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
25	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  table.clear();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  table.clear();  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  table.clear();  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    table.clear();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
26	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  table.clear();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  table.clear();  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  table.clear();	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    table.clear();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
27	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getMask();  i++)  {  table.clear();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getMask();  i++)  {  table.clear();  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getMask();  i++)  {  table.clear();  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    table.clear();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
28	[BUG]  [BUGGY]  SimplexTableau.this.dropPhase1Objective(this);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  SimplexTableau.this.dropPhase1Objective(this);  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	SimplexTableau.this.dropPhase1Objective(this);	  SimplexTableau.this.dropPhase1Objective(null);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
29	[BUG]  [BUGGY]  SimplexTableau.this.dropPhase1Objective(null,  null);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  SimplexTableau.this.dropPhase1Objective(null,  null);  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	SimplexTableau.this.dropPhase1Objective(null,  null);	  SimplexTableau.this.dropPhase1Objective(null);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
30	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels	  if(columnLabels!=    null)    {    if(getNumObjectiveFunctions()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
31	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.	  if(columnLabels!=    null)    {    if(getNumObjectiveFunctions()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
32	[BUG]  [BUGGY]  Table  <  NEGATIVE_VAR_COLUMN_LABEL,  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  table.clear()  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  Table  <  NEGATIVE_VAR_COLUMN_LABEL,  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  table.clear()  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	Table  <  NEGATIVE_VAR_COLUMN_LABEL,  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  table.clear()	  Table    <    NEGATIVE_VAR_COLUMN_LABEL,    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    table.clear()    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
33	[BUG]  [BUGGY]  Table  <  NEGATIVE_VAR_COLUMN_LABEL,  2)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  table.clear()  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  Table  <  NEGATIVE_VAR_COLUMN_LABEL,  2)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  table.clear()  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	Table  <  NEGATIVE_VAR_COLUMN_LABEL,  2)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  table.clear()	  Table    <    NEGATIVE_VAR_COLUMN_LABEL,    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    table.clear()    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
34	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps()  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  int  maxUlps  =  getMaximumUlps()  +  1;  [BUGGY]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	int  maxUlps  =  getMaximumUlps()  +  1;	  int    maxUlps    =    getMaximumUlps();    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
35	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps()  -  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  int  maxUlps  =  getMaximumUlps()  -  1;  [BUGGY]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	int  maxUlps  =  getMaximumUlps()  -  1;	  int    maxUlps    =    getMaximumUlps();    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
36	[BUG]  [BUGGY]  int  maxUlps  =  getMinimumUlps();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  int  maxUlps  =  getMinimumUlps();  [BUGGY]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	int  maxUlps  =  getMinimumUlps();	  int    maxUlps    =    getMaximumUlps();    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
37	[BUG]  [BUGGY]  ColumnLabels.size()  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  ColumnLabels.size()  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	ColumnLabels.size()  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i);  }	  if(columnLabels.size()    <    2)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
38	[BUG]  [BUGGY]  ColumnLabels.size()  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  ColumnLabels.size()  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i);  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	ColumnLabels.size()  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i);	  if(columnLabels.size()    <    2)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
39	[BUG]  [BUGGY]  ColumnLabels.size()  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  ColumnLabels.size()  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	ColumnLabels.size()  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add	  if(columnLabels.size()    <    2)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
40	[BUG]  [BUGGY]  ColumnLabels.size()  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.remove(i);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  ColumnLabels.size()  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.remove(i);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	ColumnLabels.size()  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.remove(i);  }	  if(columnLabels.size()    <    2)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
41	[BUG]  [BUGGY]  ColumnLabels  columnsToDrop.add(columnLabels.size()  -  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  ColumnLabels  columnsToDrop.add(columnLabels.size()  -  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	ColumnLabels  columnsToDrop.add(columnLabels.size()  -  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i);  }	  if(columnLabels.size()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
42	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  columnLabels.add(i);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  columnLabels.add(i);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  columnLabels.add(i);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(i);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
43	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(i  +  1);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(i  +  1);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(i  +  1);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(i);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
44	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  columnLabels.add(i);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  columnLabels.add(i);  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  columnLabels.add(i);	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(i);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
45	[BUG]  [BUGGY]  ||  getNumObjectiveFunctions()  ==  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveF  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  ||  getNumObjectiveFunctions()  ==  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveF  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	||  getNumObjectiveFunctions()  ==  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveF	  if(getNumObjectiveFunctions()    ==    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(new    LinearObjectiveFunction(i    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
46	[BUG]  [BUGGY]  int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabelsToDrop.add(i);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabelsToDrop.add(i);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabelsToDrop.add(i);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabelsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
47	[BUG]  [BUGGY]  ColumnLabels.size()  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(i);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  ColumnLabels.size()  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(i);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	ColumnLabels.size()  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(i);  }	  if(columnLabels.size()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
48	[BUG]  [BUGGY]  ColumnLabels.size()  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.add(i);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  ColumnLabels.size()  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.add(i);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	ColumnLabels.size()  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.add(i);  }	  if(columnLabels.size()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
49	[BUG]  [BUGGY]  int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.add(columnToDrop);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.add(columnToDrop);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.add(columnToDrop);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columns.add(columnToDrop);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
50	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  columns.add(columnToDrop);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  columns.add(columnToDrop);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  columns.add(columnToDrop);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columns.add(columnToDrop);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
51	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.add(0,  columnToDrop);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.add(0,  columnToDrop);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.add(0,  columnToDrop);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columns.add(columnToDrop);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
52	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.add(i);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.add(i);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels!=  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.add(i);  }	  if(columnLabels!=    null)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
53	[BUG]  [BUGGY]  SimplexTableau.this.dropPhase0Objective(f);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  SimplexTableau.this.dropPhase0Objective(f);  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	SimplexTableau.this.dropPhase0Objective(f);	  SimplexTableau.this.dropPhase0Objective();    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
54	[BUG]  [BUGGY]  int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.add(i);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.add(i);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.add(i);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columns.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
55	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  columns.add(i);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  columns.add(i);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  columns.add(i);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columns.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
56	[BUG]  [BUGGY]  For(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.add(i);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  For(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.add(i);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	For(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.add(i);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columns.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
57	[BUG]  [BUGGY]  ColumnLabels.size()  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(1);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  ColumnLabels.size()  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(1);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	ColumnLabels.size()  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(1);  }	  if(columnLabels.size()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(1);    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
58	[BUG]  [BUGGY]  Columns.size()  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(1);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  Columns.size()  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(1);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	Columns.size()  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(1);  }	  if(columnLabels.size()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(1);    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
59	[BUG]  [BUGGY]  ColumnLabels  columnsToDrop.add(columnLabels.size()  -  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(1);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  ColumnLabels  columnsToDrop.add(columnLabels.size()  -  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(1);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	ColumnLabels  columnsToDrop.add(columnLabels.size()  -  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(1);  }	  if(columnLabels.size()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(1);    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
60	[BUG]  [BUGGY]  ColumnLabels.size()  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(0);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  ColumnLabels.size()  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(0);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	ColumnLabels.size()  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(0);  }	  if(columnLabels.size()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(1);    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
61	[BUG]  [BUGGY]  Table  <  NEGATIVE_VAR_COLUMN_LABEL,  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  table.clear();  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  Table  <  NEGATIVE_VAR_COLUMN_LABEL,  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  table.clear();  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	Table  <  NEGATIVE_VAR_COLUMN_LABEL,  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  table.clear();  }	  Table    <    NEGATIVE_VAR_COLUMN_LABEL,    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    table.clear();    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
62	[BUG]  [BUGGY]  Table  <  NEGATIVE_VAR_COLUMN_LABEL,  2)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  table.clear();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  Table  <  NEGATIVE_VAR_COLUMN_LABEL,  2)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  table.clear();  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	Table  <  NEGATIVE_VAR_COLUMN_LABEL,  2)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  table.clear();  }	  Table    <    NEGATIVE_VAR_COLUMN_LABEL,    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    table.clear();    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
63	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels[i]  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels[i]  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels[i]	  if(columnLabels!=    null)    {    if(getNumObjectiveFunctions()    >    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(columnLabels[i]    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
64	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(col  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(col  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(col	  if(columnLabels!=    null)    {    if(getNumObjectiveFunctions()    >    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(columnLabels[i]    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
65	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  columnLabels.add(new  LinearObjectiveFunction(i  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  columnLabels.add(new  LinearObjectiveFunction(i  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  columnLabels.add(new  LinearObjectiveFunction(i	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(new    LinearObjectiveFunction(i    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
66	[BUG]  [BUGGY]  for(int  i  =  getNumArtificialVariables();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveFunction(i  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumArtificialVariables();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveFunction(i  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumArtificialVariables();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveFunction(i	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(new    LinearObjectiveFunction(i    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
67	[BUG]  [BUGGY]  for(int  i  =  getPhase();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveFunction(i  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getPhase();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveFunction(i  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getPhase();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveFunction(i	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(new    LinearObjectiveFunction(i    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
68	[BUG]  [BUGGY]  if(getNumObjectiveFunctions()  ==  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnToDrop);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(getNumObjectiveFunctions()  ==  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnToDrop);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(getNumObjectiveFunctions()  ==  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnToDrop);  }	  if(getNumObjectiveFunctions()    ==    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(columnToDrop);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
69	[BUG]  [BUGGY]  if(columnLabels  ==  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveFunction(i  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(columnLabels  ==  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveFunction(i  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels  ==  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveFunction(i	  if(columnLabels!=    null)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(new    LinearObjectiveFunction(i    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
70	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  getArtificialVariableOffset();  i  <  getNumObjectiveFunctions();  i++)  {  columnLabels.add(new  LinearObjectiveFunction(i  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  getArtificialVariableOffset();  i  <  getNumObjectiveFunctions();  i++)  {  columnLabels.add(new  LinearObjectiveFunction(i  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels!=  null)  {  for(int  i  =  getArtificialVariableOffset();  i  <  getNumObjectiveFunctions();  i++)  {  columnLabels.add(new  LinearObjectiveFunction(i	  if(columnLabels!=    null)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(new    LinearObjectiveFunction(i    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
71	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions().size()  -  1;  i  <  getArtificialVariableOffset();  i++)  {  table.clear();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions().size()  -  1;  i  <  getArtificialVariableOffset();  i++)  {  table.clear();  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions().size()  -  1;  i  <  getArtificialVariableOffset();  i++)  {  table.clear();  }	  for(int    i    =    getNumObjectiveFunctions().size();    i    <    getArtificialVariableOffset();    i++)    {    table.clear();    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
72	[BUG]  [BUGGY]  int  i  =  getNumObjectiveFunctions().size();  i  <  getArtificialVariableOffset();  i++)  {  table.clear();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  int  i  =  getNumObjectiveFunctions().size();  i  <  getArtificialVariableOffset();  i++)  {  table.clear();  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	int  i  =  getNumObjectiveFunctions().size();  i  <  getArtificialVariableOffset();  i++)  {  table.clear();  }	  for(int    i    =    getNumObjectiveFunctions().size();    i    <    getArtificialVariableOffset();    i++)    {    table.clear();    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
73	[BUG]  [BUGGY]  int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  table.remove();  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  table.remove();  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  table.remove();  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    table.remove();    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
74	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  table.remove();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  table.remove();  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  table.remove();  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    table.remove();    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
75	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getMask();  i++)  {  table.remove();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getMask();  i++)  {  table.remove();  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getMask();  i++)  {  table.remove();  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    table.remove();    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
76	[BUG]  [BUGGY]  SimplexTableau.this.dropPhase1Objective(f,  column);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  SimplexTableau.this.dropPhase1Objective(f,  column);  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	SimplexTableau.this.dropPhase1Objective(f,  column);	  SimplexTableau.this.dropPhase1Objective(f);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
77	[BUG]  [BUGGY]  SimplexTableau.this.dropPhase1Objective(f,  columnsToDrop);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  SimplexTableau.this.dropPhase1Objective(f,  columnsToDrop);  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	SimplexTableau.this.dropPhase1Objective(f,  columnsToDrop);	  SimplexTableau.this.dropPhase1Objective(f);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
78	[BUG]  [BUGGY]  SimplexTableau.this.dropPhase1Objective(f,  this);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  SimplexTableau.this.dropPhase1Objective(f,  this);  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	SimplexTableau.this.dropPhase1Objective(f,  this);	  SimplexTableau.this.dropPhase1Objective(f);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
79	[BUG]  [BUGGY]  ||  getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveF  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  ||  getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveF  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	||  getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveF	  if(getNumObjectiveFunctions()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(new    LinearObjectiveFunction(i    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
80	[BUG]  [BUGGY]  ||  getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveFunction(  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  ||  getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveFunction(  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	||  getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveFunction(	  if(getNumObjectiveFunctions()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(new    LinearObjectiveFunction(i    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
81	[BUG]  [BUGGY]  if(columnLabelsToDrop!=  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabelsToDrop.  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(columnLabelsToDrop!=  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabelsToDrop.  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabelsToDrop!=  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabelsToDrop.	  if(columnLabelsToDrop!=    null)    {    if(getNumObjectiveFunctions()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabelsToDrop.add    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
82	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.columnLabels.get(columnsToDrop  -  1);  graph.clear();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.columnLabels.get(columnsToDrop  -  1);  graph.clear();  [BUGGY]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.columnLabels.get(columnsToDrop  -  1);  graph.clear();	  LinearObjectiveFunction    graph    =(LinearObjectiveFunction)this.columnLabels.get(columnsToDrop);    graph.clear();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
83	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.columnLabels.get(columnsToDrop  +  1);  graph.clear();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.columnLabels.get(columnsToDrop  +  1);  graph.clear();  [BUGGY]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.columnLabels.get(columnsToDrop  +  1);  graph.clear();	  LinearObjectiveFunction    graph    =(LinearObjectiveFunction)this.columnLabels.get(columnsToDrop);    graph.clear();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
84	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.columnsToDrop.get(columnsToDrop);  graph.clear();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.columnsToDrop.get(columnsToDrop);  graph.clear();  [BUGGY]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.columnsToDrop.get(columnsToDrop);  graph.clear();	  LinearObjectiveFunction    graph    =(LinearObjectiveFunction)this.columnLabels.get(columnsToDrop);    graph.clear();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
85	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.columnLabels.get(columnsToDrop,  columnsToDrop);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.columnLabels.get(columnsToDrop,  columnsToDrop);  [BUGGY]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.columnLabels.get(columnsToDrop,  columnsToDrop);	  LinearObjectiveFunction    graph    =(LinearObjectiveFunction)this.columnLabels.get(columnsToDrop);    graph.clear();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
86	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)columnsToDrop.get(columnsToDrop);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)columnsToDrop.get(columnsToDrop);  [BUGGY]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)columnsToDrop.get(columnsToDrop);	  LinearObjectiveFunction    graph    =(LinearObjectiveFunction)this.columnLabels.get(columnsToDrop);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
87	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.columnLabels.get(columnsToDrop  -  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.columnLabels.get(columnsToDrop  -  1);  [BUGGY]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.columnLabels.get(columnsToDrop  -  1);	  LinearObjectiveFunction    graph    =(LinearObjectiveFunction)this.columnLabels.get(columnsToDrop);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
88	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.columnsToDrop.get(columnsToDrop);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.columnsToDrop.get(columnsToDrop);  [BUGGY]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.columnsToDrop.get(columnsToDrop);	  LinearObjectiveFunction    graph    =(LinearObjectiveFunction)this.columnLabels.get(columnsToDrop);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
89	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.columnLabels.get(columnsToDrop  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.columnLabels.get(columnsToDrop  +  1);  [BUGGY]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.columnLabels.get(columnsToDrop  +  1);	  LinearObjectiveFunction    graph    =(LinearObjectiveFunction)this.columnLabels.get(columnsToDrop);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
90	[BUG]  [BUGGY]  Table  <  NEGATIVE_VAR_COLUMN_LABEL,  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  table.remov  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  Table  <  NEGATIVE_VAR_COLUMN_LABEL,  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  table.remov  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	Table  <  NEGATIVE_VAR_COLUMN_LABEL,  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  table.remov	  Table    <    NEGATIVE_VAR_COLUMN_LABEL,    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    table.remove();    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
91	[BUG]  [BUGGY]  Table  <  NEGATIVE_VAR_COLUMN_LABEL,  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  table.remove();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  Table  <  NEGATIVE_VAR_COLUMN_LABEL,  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  table.remove();  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	Table  <  NEGATIVE_VAR_COLUMN_LABEL,  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  table.remove();  }	  Table    <    NEGATIVE_VAR_COLUMN_LABEL,    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    table.remove();    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
92	[BUG]  [BUGGY]  if(columnLabelsToDrop!=  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(columnLabelsToDrop!=  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabelsToDrop!=  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i);  }	  if(columnLabelsToDrop!=    null)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabelsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
93	[BUG]  [BUGGY]  int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i  +  1);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i  +  1);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i  +  1);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(i    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
94	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  columnsToDrop.add(i  +  1);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  columnsToDrop.add(i  +  1);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  columnsToDrop.add(i  +  1);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(i    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
95	[BUG]  [BUGGY]  For(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i  +  1);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  For(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i  +  1);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	For(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i  +  1);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(i    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
96	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.add(columnLabels[i]);  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.add(columnLabels[i]);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels!=  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.add(columnLabels[i]);  }	  if(columnLabels!=    null)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(columnLabels[i]);    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
97	[BUG]  [BUGGY]  SimplexTableau.dropPhase2Objective(this);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  SimplexTableau.dropPhase2Objective(this);  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	SimplexTableau.dropPhase2Objective(this);	  SimplexTableau.dropPhase2Objective();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
98	[BUG]  [BUGGY]  if(columnLabelsToDrop  ==  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToD  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(columnLabelsToDrop  ==  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToD  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabelsToDrop  ==  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToD	  if(columnLabelsToDrop    ==    null)    {    if(getNumObjectiveFunctions()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabelsToD    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
99	[BUG]  [BUGGY]  if(precision.compareTo(entry,  0,  maxUlps)>  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  Line  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(precision.compareTo(entry,  0,  maxUlps)>  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  Line  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(precision.compareTo(entry,  0,  maxUlps)>  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  Line	  if(precision.compareTo(entry,    0d,    maxUlps)>    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(new    Line    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
100	[BUG]  [BUGGY]  if(precision.compareTo(entry,  0,  col)>  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  Line  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(precision.compareTo(entry,  0,  col)>  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  Line  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(precision.compareTo(entry,  0,  col)>  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  Line	  if(precision.compareTo(entry,    0d,    maxUlps)>    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(new    Line    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
101	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  Line  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  Line  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  Line	  if(precision.compareTo(entry,    0d,    maxUlps)>    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(new    Line    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
102	[BUG]  [BUGGY]  if(precision.compareTo(entry,  0,  maxUlps)>  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(precision.compareTo(entry,  0,  maxUlps)>  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(precision.compareTo(entry,  0,  maxUlps)>  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new	  if(precision.compareTo(entry,    0d,    maxUlps)>    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(new    Line    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
103	[BUG]  [BUGGY]  ColumnLabels.size()  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnToDrop);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  ColumnLabels.size()  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnToDrop);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	ColumnLabels.size()  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnToDrop);  }	  if(columnLabels.size()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(columnToDrop);    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
104	[BUG]  [BUGGY]  ColumnLabels.size()  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.add(columnToDrop);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  ColumnLabels.size()  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.add(columnToDrop);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	ColumnLabels.size()  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.add(columnToDrop);  }	  if(columnLabels.size()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(columnToDrop);    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
105	[BUG]  [BUGGY]  ||  getNumObjectiveFunctions()  ==  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveF  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  ||  getNumObjectiveFunctions()  ==  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveF  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	||  getNumObjectiveFunctions()  ==  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveF	  if(getNumObjectiveFunctions()    ==    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(new    LinearObjectiveFunction(i    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
106	[BUG]  [BUGGY]  if(getNumObjectiveFunctions()  ==  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveFunction(  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(getNumObjectiveFunctions()  ==  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveFunction(  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(getNumObjectiveFunctions()  ==  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveFunction(	  if(getNumObjectiveFunctions()    ==    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(new    LinearObjectiveFunction(i    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
107	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.add(columnToDrop);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.add(columnToDrop);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels!=  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.add(columnToDrop);  }	  if(columnLabels!=    null)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(columnToDrop);    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
108	[BUG]  [BUGGY]  if(getNumObjectiveFunctions()!=  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(getNumObjectiveFunctions()!=  0)  {  [BUGGY]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(getNumObjectiveFunctions()!=  0)  {	  if(getNumObjectiveFunctions()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
109	[BUG]  [BUGGY]  int  maxUlps  =  getMaxUlps()  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  int  maxUlps  =  getMaxUlps()  +  1;  [BUGGY]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	int  maxUlps  =  getMaxUlps()  +  1;	  int    maxUlps    =    getMaxUlps();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
110	[BUG]  [BUGGY]  int  maxUlps  =  getMaxUlps()  -  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  int  maxUlps  =  getMaxUlps()  -  1;  [BUGGY]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	int  maxUlps  =  getMaxUlps()  -  1;	  int    maxUlps    =    getMaxUlps();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
111	[BUG]  [BUGGY]  int  maxUlps  =  getMaxUlps()  -  2;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  int  maxUlps  =  getMaxUlps()  -  2;  [BUGGY]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	int  maxUlps  =  getMaxUlps()  -  2;	  int    maxUlps    =    getMaxUlps();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
112	[BUG]  [BUGGY]  ||  getArtificialVariableOffset()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObject  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  ||  getArtificialVariableOffset()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObject  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	||  getArtificialVariableOffset()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObject	  ||    getNumObjectiveFunctions()    >    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(new    LinearObject    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
113	[BUG]  [BUGGY]  ||  getNumObjectiveFunctions()  ==  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObject  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  ||  getNumObjectiveFunctions()  ==  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObject  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	||  getNumObjectiveFunctions()  ==  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObject	  ||    getNumObjectiveFunctions()    >    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(new    LinearObject    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
114	[BUG]  [BUGGY]  ||  getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObject  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  ||  getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObject  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	||  getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObject	  ||    getNumObjectiveFunctions()    >    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(new    LinearObject    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
115	[BUG]  [BUGGY]  ||  getArtificialVariableOffset()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  Line  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  ||  getArtificialVariableOffset()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  Line  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	||  getArtificialVariableOffset()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  Line	  ||    getNumObjectiveFunctions()    >    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(new    LinearObject    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
116	[BUG]  [BUGGY]  SimplexTableau.this.dropPhase2Objective(null);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  SimplexTableau.this.dropPhase2Objective(null);  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	SimplexTableau.this.dropPhase2Objective(null);	  SimplexTableau.this.dropPhase2Objective();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
117	[BUG]  [BUGGY]  SimplexTableau.this.dropPhase2Objective(f);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  SimplexTableau.this.dropPhase2Objective(f);  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	SimplexTableau.this.dropPhase2Objective(f);	  SimplexTableau.this.dropPhase2Objective();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
118	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)columnsToDrop.get(columnsToDrop);  graph.setPhase(p);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)columnsToDrop.get(columnsToDrop);  graph.setPhase(p);  [BUGGY]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)columnsToDrop.get(columnsToDrop);  graph.setPhase(p);	  LinearObjectiveFunction    graph    =(LinearObjectiveFunction)this.columnLabels.get(columnsToDrop);    graph.setPhase(p);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
119	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.columnLabels.get(columnsToDrop  -  1);  graph.setPhase(p);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.columnLabels.get(columnsToDrop  -  1);  graph.setPhase(p);  [BUGGY]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.columnLabels.get(columnsToDrop  -  1);  graph.setPhase(p);	  LinearObjectiveFunction    graph    =(LinearObjectiveFunction)this.columnLabels.get(columnsToDrop);    graph.setPhase(p);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
120	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.columnsToDrop.get(columnsToDrop);  graph.setPhase(p);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.columnsToDrop.get(columnsToDrop);  graph.setPhase(p);  [BUGGY]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.columnsToDrop.get(columnsToDrop);  graph.setPhase(p);	  LinearObjectiveFunction    graph    =(LinearObjectiveFunction)this.columnLabels.get(columnsToDrop);    graph.setPhase(p);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
121	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.columnLabels.get(columnsToDrop  +  1);  graph.setPhase(p);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.columnLabels.get(columnsToDrop  +  1);  graph.setPhase(p);  [BUGGY]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.columnLabels.get(columnsToDrop  +  1);  graph.setPhase(p);	  LinearObjectiveFunction    graph    =(LinearObjectiveFunction)this.columnLabels.get(columnsToDrop);    graph.setPhase(p);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
122	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  columnsToDrop.add(i);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  columnsToDrop.add(i);  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  columnsToDrop.add(i);	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(i);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
123	[BUG]  [BUGGY]  For(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(i);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  For(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(i);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	For(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(i);  }	  if(getNumObjectiveFunctions()    >    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
124	[BUG]  [BUGGY]  ||  getArtificialVariableOffset()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveF  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  ||  getArtificialVariableOffset()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveF  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	||  getArtificialVariableOffset()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveF	  ||    getNumObjectiveFunctions()    >    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(new    LinearObjectiveF    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
125	[BUG]  [BUGGY]  ||  getBase()  >  0)  {  for(int  i  =  getBase();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveF  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  ||  getBase()  >  0)  {  for(int  i  =  getBase();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveF  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	||  getBase()  >  0)  {  for(int  i  =  getBase();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveF	  ||    getNumObjectiveFunctions()    >    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(new    LinearObjectiveF    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
126	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)super.dropPhase2Objective();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)super.dropPhase2Objective();  [BUGGY]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)super.dropPhase2Objective();	  LinearObjectiveFunction    graph    =(LinearObjectiveFunction)super.dropPhase1Objective();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
127	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)super.getPhase1Objective();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)super.getPhase1Objective();  [BUGGY]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)super.getPhase1Objective();	  LinearObjectiveFunction    graph    =(LinearObjectiveFunction)super.dropPhase1Objective();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
128	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.plotPhase1Objective();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.plotPhase1Objective();  [BUGGY]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.plotPhase1Objective();	  LinearObjectiveFunction    graph    =(LinearObjectiveFunction)super.dropPhase1Objective();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
129	[BUG]  [BUGGY]  Tableau.this.dropPhase2Objective();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  Tableau.this.dropPhase2Objective();  [BUGGY]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	Tableau.this.dropPhase2Objective();	  Tableau.this.dropPhase1Objective();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
130	[BUG]  [BUGGY]  Tableau.this.dropPhase1Objective(null);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  Tableau.this.dropPhase1Objective(null);  [BUGGY]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	Tableau.this.dropPhase1Objective(null);	  Tableau.this.dropPhase1Objective();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
131	[BUG]  [BUGGY]  int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(1);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(1);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(1);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(0);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
132	[BUG]  [BUGGY]  For(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  For(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	For(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(0);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
133	[BUG]  [BUGGY]  if(columnLabels  ==  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(columnLabels  ==  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels  ==  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels	  if(columnLabels!=    null)    {    if(getNumObjectiveFunctions()    >    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
134	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels	  if(columnLabels!=    null)    {    if(getNumObjectiveFunctions()    >    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
135	[BUG]  [BUGGY]  SimplexTableau.dropPhase1Objective(this,  columnsToDrop);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  SimplexTableau.dropPhase1Objective(this,  columnsToDrop);  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	SimplexTableau.dropPhase1Objective(this,  columnsToDrop);	  SimplexTableau.dropPhase1Objective(this);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
136	[BUG]  [BUGGY]  if(getNumObjectiveFunctions()  ==  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.add(columnLabels[i]);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(getNumObjectiveFunctions()  ==  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.add(columnLabels[i]);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(getNumObjectiveFunctions()  ==  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.add(columnLabels[i]);  }	  if(getNumObjectiveFunctions()    ==    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(columnLabels[i]);    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
137	[BUG]  [BUGGY]  int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(columnToDrop);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(columnToDrop);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(columnToDrop);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(columnToDrop);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
138	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  columnsToDrop.add(columnToDrop);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  columnsToDrop.add(columnToDrop);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  columnsToDrop.add(columnToDrop);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(columnToDrop);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
139	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(0,  columnToDrop);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(0,  columnToDrop);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(0,  columnToDrop);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(columnToDrop);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
140	[BUG]  [BUGGY]  For(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  columnLabels.add(columnLabels[i]);  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  For(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  columnLabels.add(columnLabels[i]);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	For(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  columnLabels.add(columnLabels[i]);  }	  For(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(columnLabels[i]);    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
141	[BUG]  [BUGGY]  if(getNumObjectiveFunctions()  <  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(getNumObjectiveFunctions()  <  0)  {  [BUGGY]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(getNumObjectiveFunctions()  <  0)  {	  if(getNumObjectiveFunctions()    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
142	[BUG]  [BUGGY]  int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(i);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(i);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(i);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
143	[BUG]  [BUGGY]  int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.add(columnLabels[i]);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.add(columnLabels[i]);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.add(columnLabels[i]);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columns.add(columnLabels[i]);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
144	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  columns.add(columnLabels[i]);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  columns.add(columnLabels[i]);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  columns.add(columnLabels[i]);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columns.add(columnLabels[i]);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
145	[BUG]  [BUGGY]  For(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.add(columnLabels[i]);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  For(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.add(columnLabels[i]);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	For(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.add(columnLabels[i]);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columns.add(columnLabels[i]);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
146	[BUG]  [BUGGY]  if(getPhase()  ==  1)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(getPhase()  ==  1)  {  [BUGGY]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(getPhase()  ==  1)  {	  if(getPhase()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
147	[BUG]  [BUGGY]  if(getPhase()  >  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(getPhase()  >  0)  {  [BUGGY]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(getPhase()  >  0)  {	  if(getPhase()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
148	[BUG]  [BUGGY]  if(getPhase()!=  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(getPhase()!=  0)  {  [BUGGY]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(getPhase()!=  0)  {	  if(getPhase()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
149	[BUG]  [BUGGY]  int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  table.clear();  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  table.clear();  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  table.clear();  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    table.clear();    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
150	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  columnLabels.add(columnLabels[i]);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  columnLabels.add(columnLabels[i]);  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  columnLabels.add(columnLabels[i]);	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(columnLabels[i]);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
151	[BUG]  [BUGGY]  For(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  table.clear();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  For(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  table.clear();  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	For(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  table.clear();	  For(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    table.clear();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
152	[BUG]  [BUGGY]  For(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  table.clear();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  For(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  table.clear();  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	For(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  table.clear();  }	  For(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    table.clear();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
153	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  columnLabelsToDrop.remove(i);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  columnLabelsToDrop.remove(i);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  columnLabelsToDrop.remove(i);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabelsToDrop.remove(i);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
154	[BUG]  [BUGGY]  int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabelsToDrop.remove(i);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabelsToDrop.remove(i);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabelsToDrop.remove(i);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabelsToDrop.remove(i);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
155	[BUG]  [BUGGY]  Integer  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  table.clear();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  Integer  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  table.clear();  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	Integer  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  table.clear();  }	  For(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    table.clear();    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
156	[BUG]  [BUGGY]  Integer  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i  +  1);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  Integer  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i  +  1);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	Integer  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i  +  1);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(i    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
157	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getScale();  i++)  {  columnsToDrop.add(i  +  1);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getScale();  i++)  {  columnsToDrop.add(i  +  1);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getScale();  i++)  {  columnsToDrop.add(i  +  1);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(i    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
158	[BUG]  [BUGGY]  if(columnLabels  ==  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(i);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(columnLabels  ==  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(i);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels  ==  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(i);  }	  if(columnLabels!=    null)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
159	[BUG]  [BUGGY]  col.size()  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(i);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  col.size()  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(i);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	col.size()  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(i);  }	  if(columnLabels.size()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
160	[BUG]  [BUGGY]  ColumnLabels.this.remove(columnLabels.size()  -  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(i);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  ColumnLabels.this.remove(columnLabels.size()  -  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(i);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	ColumnLabels.this.remove(columnLabels.size()  -  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(i);  }	  if(columnLabels.size()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
161	[BUG]  [BUGGY]  col.size()  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.add(i);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  col.size()  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.add(i);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	col.size()  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.add(i);  }	  if(columnLabels.size()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
162	[BUG]  [BUGGY]  ColumnLabels.this.remove(columnLabels.size()  -  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(i  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  ColumnLabels.this.remove(columnLabels.size()  -  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(i  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	ColumnLabels.this.remove(columnLabels.size()  -  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(i	  if(columnLabels.size()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
163	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size());  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size());	  if(columnLabels.size()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(1);    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
164	[BUG]  [BUGGY]  ColumnLabels  columnsToDrop  =  new  ColumnLabels(columnLabels.size());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  ColumnLabels  columnsToDrop  =  new  ColumnLabels(columnLabels.size());  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	ColumnLabels  columnsToDrop  =  new  ColumnLabels(columnLabels.size());	  if(columnLabels.size()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(1);    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
165	[BUG]  [BUGGY]  ColumnLabels  columnsToDrop  =  columnLabels.get(columns.size()  -  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  ColumnLabels  columnsToDrop  =  columnLabels.get(columns.size()  -  1);  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	ColumnLabels  columnsToDrop  =  columnLabels.get(columns.size()  -  1);	  if(columnLabels.size()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(1);    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
166	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>();	  if(columnLabels.size()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(1);    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
167	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.	  if(columnLabels!=    null)    {    if(getNumObjectiveFunctions()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
168	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  =  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels[i]);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  =  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels[i]);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  =  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels[i]);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(columnLabels[i]);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
169	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  columnLabels.length;  i++)  {  columnLabels.add(columnLabels[i]);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  columnLabels.length;  i++)  {  columnLabels.add(columnLabels[i]);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  columnLabels.length;  i++)  {  columnLabels.add(columnLabels[i]);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(columnLabels[i]);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
170	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  =  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels[i]);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  =  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels[i]);  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  =  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels[i]);	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(columnLabels[i]);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
171	[BUG]  [BUGGY]  if(columnLabels  ==  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels[i]);  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(columnLabels  ==  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels[i]);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels  ==  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels[i]);  }	  if(columnLabels!=    null)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(columnLabels[i]);    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
172	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getPhaseLength();  i++)  {  columns.add(columnLabels[i]);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getPhaseLength();  i++)  {  columns.add(columnLabels[i]);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getPhaseLength();  i++)  {  columns.add(columnLabels[i]);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columns.add(columnLabels[i]);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
173	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getItemCount();  i++)  {  columns.add(columnLabels[i]);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getItemCount();  i++)  {  columns.add(columnLabels[i]);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getItemCount();  i++)  {  columns.add(columnLabels[i]);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columns.add(columnLabels[i]);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
174	[BUG]  [BUGGY]  if(columnLabels.size()  ==  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnToDrop);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(columnLabels.size()  ==  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnToDrop);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels.size()  ==  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnToDrop);  }	  if(columnLabels.size()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(columnToDrop);    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
175	[BUG]  [BUGGY]  if(columnLabels.size()  >=  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnToDrop);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(columnLabels.size()  >=  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnToDrop);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels.size()  >=  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnToDrop);  }	  if(columnLabels.size()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(columnToDrop);    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
176	[BUG]  [BUGGY]  SimplexTableau.this.dropPhase1Objective(f,  0);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  SimplexTableau.this.dropPhase1Objective(f,  0);  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	SimplexTableau.this.dropPhase1Objective(f,  0);	  SimplexTableau.this.dropPhase1Objective(f);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
177	[BUG]  [BUGGY]  if(getPhase()  ==  null)  {  for(int  i  =  getPhase();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveFunction(i  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(getPhase()  ==  null)  {  for(int  i  =  getPhase();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveFunction(i  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(getPhase()  ==  null)  {  for(int  i  =  getPhase();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveFunction(i	  if(getNumObjectiveFunctions()    ==    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(new    LinearObjectiveFunction(i    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
178	[BUG]  [BUGGY]  if(getPhase()  ==  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveFunction(i  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(getPhase()  ==  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveFunction(i  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(getPhase()  ==  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveFunction(i	  if(getNumObjectiveFunctions()    ==    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(new    LinearObjectiveFunction(i    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
179	[BUG]  [BUGGY]  For(int  i  =  getPhase();  i  <  getArtificialVariableOffset();  i++)  {  table.clear();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  For(int  i  =  getPhase();  i  <  getArtificialVariableOffset();  i++)  {  table.clear();  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	For(int  i  =  getPhase();  i  <  getArtificialVariableOffset();  i++)  {  table.clear();	  For(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    table.clear();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
180	[BUG]  [BUGGY]  For(int  i  =  getNumObjectiveFunctions();  i  <  getPhaseLength();  i++)  {  table.clear();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  For(int  i  =  getNumObjectiveFunctions();  i  <  getPhaseLength();  i++)  {  table.clear();  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	For(int  i  =  getNumObjectiveFunctions();  i  <  getPhaseLength();  i++)  {  table.clear();	  For(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    table.clear();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
181	[BUG]  [BUGGY]  if(getNumObjectiveFunctions()  >=  1)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(getNumObjectiveFunctions()  >=  1)  {  [BUGGY]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(getNumObjectiveFunctions()  >=  1)  {	  if(getNumObjectiveFunctions()!=    1)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
182	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getNumObjectiveFunctions();  i++)  {  table.clear();  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getNumObjectiveFunctions();  i++)  {  table.clear();  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getNumObjectiveFunctions();  i++)  {  table.clear();  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    table.clear();    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
183	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getPhaseLength();  i++)  {  table.clear();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getPhaseLength();  i++)  {  table.clear();  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getPhaseLength();  i++)  {  table.clear();  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    table.clear();    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
184	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getItemCount();  i++)  {  table.clear();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getItemCount();  i++)  {  table.clear();  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getItemCount();  i++)  {  table.clear();  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    table.clear();    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
185	[BUG]  [BUGGY]  if(getNumObjectiveFunctions()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.add(columnToDrop);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(getNumObjectiveFunctions()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.add(columnToDrop);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(getNumObjectiveFunctions()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.add(columnToDrop);  }	  if(getNumObjectiveFunctions()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(columnToDrop);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
186	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getPhaseLength();  i++)  {  columns.add(columnToDrop);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getPhaseLength();  i++)  {  columns.add(columnToDrop);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getPhaseLength();  i++)  {  columns.add(columnToDrop);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columns.add(columnToDrop);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
187	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getNumObjectiveFunctions();  i++)  {  columnLabels.add(i);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getNumObjectiveFunctions();  i++)  {  columnLabels.add(i);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getNumObjectiveFunctions();  i++)  {  columnLabels.add(i);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
188	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getPhaseLength();  i++)  {  columnLabels.add(i);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getPhaseLength();  i++)  {  columnLabels.add(i);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getPhaseLength();  i++)  {  columnLabels.add(i);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
189	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  Line  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  Line  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  Line	  if(getNumObjectiveFunctions()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(new    LinearObjectiveFunction(i    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
190	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObject  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObject  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObject	  if(getNumObjectiveFunctions()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(new    LinearObjectiveFunction(i    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
191	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getNumObjectiveFunctions();  i++)  {  columnLabelsToDrop.add(i);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getNumObjectiveFunctions();  i++)  {  columnLabelsToDrop.add(i);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getNumObjectiveFunctions();  i++)  {  columnLabelsToDrop.add(i);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabelsToDrop.add(i);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
192	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getPhaseLength();  i++)  {  columnLabelsToDrop.add(i);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getPhaseLength();  i++)  {  columnLabelsToDrop.add(i);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getPhaseLength();  i++)  {  columnLabelsToDrop.add(i);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabelsToDrop.add(i);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
193	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getScale();  i++)  {  columnLabelsToDrop.add(i);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getScale();  i++)  {  columnLabelsToDrop.add(i);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getScale();  i++)  {  columnLabelsToDrop.add(i);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabelsToDrop.add(i);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
194	[BUG]  [BUGGY]  ||  getBase()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveF  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  ||  getBase()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveF  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	||  getBase()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveF	  ||    getNumObjectiveFunctions()    >    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(new    LinearObjectiveF    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
195	[BUG]  [BUGGY]  ||  getPhase()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveF  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  ||  getPhase()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveF  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	||  getPhase()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveF	  ||    getNumObjectiveFunctions()    >    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(new    LinearObjectiveF    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
196	[BUG]  [BUGGY]  Integer  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels[i]);  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  Integer  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels[i]);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	Integer  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels[i]);  }	  For(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(columnLabels[i]);    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
197	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getPhaseCount();  i++)  {  table.clear();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getPhaseCount();  i++)  {  table.clear();  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getPhaseCount();  i++)  {  table.clear();  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    table.clear();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
198	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(i);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
199	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getScale();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getScale();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getScale();  i++)  {  columnsToDrop.add(i);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(i);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
200	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getPhaseCount();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getPhaseCount();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getPhaseCount();  i++)  {  columnsToDrop.add(i);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(i);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
201	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getPhaseLength();  i++)  {  columnLabels.add(columnLabels[i]);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getPhaseLength();  i++)  {  columnLabels.add(columnLabels[i]);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getPhaseLength();  i++)  {  columnLabels.add(columnLabels[i]);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(columnLabels[i]);    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
202	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  columnLabels.get(columns.size()  -  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  List  <  Integer>  columnsToDrop  =  columnLabels.get(columns.size()  -  1);  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	List  <  Integer>  columnsToDrop  =  columnLabels.get(columns.size()  -  1);	  if(columnLabels.size()    <    2)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
203	[BUG]  [BUGGY]  ColumnLabels  columnsToDrop  =  columnLabels.get(columns.size()  -  2);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  ColumnLabels  columnsToDrop  =  columnLabels.get(columns.size()  -  2);  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	ColumnLabels  columnsToDrop  =  columnLabels.get(columns.size()  -  2);	  if(columnLabels.size()    <    2)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
204	[BUG]  [BUGGY]  Integer  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  Integer  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	Integer  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
205	[BUG]  [BUGGY]  ColumnLabels  columnsToDrop  =  new  ColumnLabels(columnLabels.size()  -  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  ColumnLabels  columnsToDrop  =  new  ColumnLabels(columnLabels.size()  -  1);  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	ColumnLabels  columnsToDrop  =  new  ColumnLabels(columnLabels.size()  -  1);	  if(columnLabels.size()    <    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
206	[BUG]  [BUGGY]  Table  <  NEGATIVE_VAR_COLUMN_LABEL,  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  table.remove  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  Table  <  NEGATIVE_VAR_COLUMN_LABEL,  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  table.remove  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	Table  <  NEGATIVE_VAR_COLUMN_LABEL,  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  table.remove	  Table    <    NEGATIVE_VAR_COLUMN_LABEL,    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    table.remove();    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
207	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getPhaseLength();  i++)  {  columnLabels.add(columnToDrop);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getPhaseLength();  i++)  {  columnLabels.add(columnToDrop);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getPhaseLength();  i++)  {  columnLabels.add(columnToDrop);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(columnToDrop);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
208	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  getNumColumns();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveFunction(i  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  getNumColumns();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveFunction(i  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels!=  null)  {  for(int  i  =  getNumColumns();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveFunction(i	  if(columnLabels!=    null)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(new    LinearObjectiveFunction(i    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
209	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.add(new  LinearObjectiveFunction(i  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.add(new  LinearObjectiveFunction(i  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels!=  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.add(new  LinearObjectiveFunction(i	  if(columnLabels!=    null)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(new    LinearObjectiveFunction(i    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
210	[BUG]  [BUGGY]  int  maxUlps  =  getMaxUlps()  /  DEFAULT_ULPS;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  int  maxUlps  =  getMaxUlps()  /  DEFAULT_ULPS;  [BUGGY]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	int  maxUlps  =  getMaxUlps()  /  DEFAULT_ULPS;	  int    maxUlps    =    getMaxUlps();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
211	[BUG]  [BUGGY]  if(columnLabels  ==  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnToDrop);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(columnLabels  ==  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnToDrop);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels  ==  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnToDrop);  }	  if(columnLabels!=    null)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(columnToDrop);    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
212	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(0,  columnToDrop);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(0,  columnToDrop);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels!=  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(0,  columnToDrop);  }	  if(columnLabels!=    null)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(columnToDrop);    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
213	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  0);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  0);  [BUGGY]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  0);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(null);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
214	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  false);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  false);  [BUGGY]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(null,  false);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(null);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
215	[BUG]  [BUGGY]  if(entry!=  null)  {  if(precision.compareTo(entry,  0d,  maxUlps)>  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(entry!=  null)  {  if(precision.compareTo(entry,  0d,  maxUlps)>  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(entry!=  null)  {  if(precision.compareTo(entry,  0d,  maxUlps)>  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.	  if(precision.compareTo(entry,    0d,    maxUlps)>    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(new    Line    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
216	[BUG]  [BUGGY]  if(precision.compareTo(entry,  0,  maxUlps)>  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  Line  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(precision.compareTo(entry,  0,  maxUlps)>  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  Line  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(precision.compareTo(entry,  0,  maxUlps)>  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  Line	  if(precision.compareTo(entry,    0d,    maxUlps)>    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(new    Line    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
217	[BUG]  [BUGGY]  int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(0);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(0);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(0);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(0);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
218	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  ==  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels[i]  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  ==  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels[i]  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  ==  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels[i]	  if(getNumObjectiveFunctions()    ==    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(columnLabels[i]);    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
219	[BUG]  [BUGGY]  if(getPhase()  ==  null)  {  for(int  i  =  getPhase();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels[i]);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(getPhase()  ==  null)  {  for(int  i  =  getPhase();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels[i]);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(getPhase()  ==  null)  {  for(int  i  =  getPhase();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels[i]);  }	  if(getNumObjectiveFunctions()    ==    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(columnLabels[i]);    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
220	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  ==  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels[i]);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  ==  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels[i]);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  ==  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels[i]);  }	  if(getNumObjectiveFunctions()    ==    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(columnLabels[i]);    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
221	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  ==  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  ==  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  ==  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(	  if(getNumObjectiveFunctions()    ==    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(columnLabels[i]);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
222	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getPhaseLength();  i++)  {  columnLabelsToDrop.remove(i);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getPhaseLength();  i++)  {  columnLabelsToDrop.remove(i);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getPhaseLength();  i++)  {  columnLabelsToDrop.remove(i);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabelsToDrop.remove(i);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
223	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getScale();  i++)  {  columnLabelsToDrop.remove(i);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getScale();  i++)  {  columnLabelsToDrop.remove(i);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getScale();  i++)  {  columnLabelsToDrop.remove(i);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabelsToDrop.remove(i);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
224	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps()  /  DEFAULT_ULPS;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  int  maxUlps  =  getMaximumUlps()  /  DEFAULT_ULPS;  [BUGGY]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	int  maxUlps  =  getMaximumUlps()  /  DEFAULT_ULPS;	  int    maxUlps    =    getMaximumUlps();    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
225	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(0,  column);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(0,  column);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(0,  column);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(columnToDrop);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
226	[BUG]  [BUGGY]  int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(0,  column);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(0,  column);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(0,  column);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(columnToDrop);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
227	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getPhaseLength();  i++)  {  columnsToDrop.remove(i);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getPhaseLength();  i++)  {  columnsToDrop.remove(i);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getPhaseLength();  i++)  {  columnsToDrop.remove(i);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.remove(i);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
228	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getPhaseCount();  i++)  {  columnsToDrop.remove(i);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getPhaseCount();  i++)  {  columnsToDrop.remove(i);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getPhaseCount();  i++)  {  columnsToDrop.remove(i);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.remove(i);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
229	[BUG]  [BUGGY]  ColumnLabelsToDrop  <  NEGATIVE_VAR_COLUMN_LABEL)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabelsToDrop.add  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  ColumnLabelsToDrop  <  NEGATIVE_VAR_COLUMN_LABEL)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabelsToDrop.add  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	ColumnLabelsToDrop  <  NEGATIVE_VAR_COLUMN_LABEL)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabelsToDrop.add	  if(columnLabelsToDrop    ==    null)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabelsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
230	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add	  if(columnLabels!=    null)    {    if(getNumObjectiveFunctions()    >    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
231	[BUG]  [BUGGY]  if(columnLabelsToDrop!=  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(columnLabelsToDrop!=  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabelsToDrop!=  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels	  if(columnLabelsToDrop!=    null)    {    if(getNumObjectiveFunctions()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabelsTo    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
232	[BUG]  [BUGGY]  if(columnLabels  ==  null)  {  if(getNumObjectiveFunctions()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(columnLabels  ==  null)  {  if(getNumObjectiveFunctions()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels  ==  null)  {  if(getNumObjectiveFunctions()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels	  if(columnLabels!=    null)    {    if(getNumObjectiveFunctions()    >    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
233	[BUG]  [BUGGY]  SimplexTableau.dropPhase1Objective(f,  this);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  SimplexTableau.dropPhase1Objective(f,  this);  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	SimplexTableau.dropPhase1Objective(f,  this);	  SimplexTableau.dropPhase1Objective(f);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
234	[BUG]  [BUGGY]  SimplexTableau.dropPhase1Objective(null);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  SimplexTableau.dropPhase1Objective(null);  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	SimplexTableau.dropPhase1Objective(null);	  SimplexTableau.dropPhase1Objective(this);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
235	[BUG]  [BUGGY]  SimplexTableau.this.dropPhase0Objective(null);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  SimplexTableau.this.dropPhase0Objective(null);  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	SimplexTableau.this.dropPhase0Objective(null);	  SimplexTableau.this.dropPhase0Objective();    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
236	[BUG]  [BUGGY]  ||  getBase()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObject  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  ||  getBase()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObject  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	||  getBase()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObject	  ||    getNumObjectiveFunctions()    >    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(new    LinearObject    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
237	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getPhaseLength();  i++)  {  table.remove();  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getPhaseLength();  i++)  {  table.remove();  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getPhaseLength();  i++)  {  table.remove();  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    table.remove();    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
238	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getNumObjectiveFunctions();  i++)  {  table.remove();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getNumObjectiveFunctions();  i++)  {  table.remove();  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getNumObjectiveFunctions();  i++)  {  table.remove();  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    table.remove();    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
239	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getPhaseCount();  i++)  {  table.remove();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getPhaseCount();  i++)  {  table.remove();  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getPhaseCount();  i++)  {  table.remove();  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    table.remove();    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
240	[BUG]  [BUGGY]  Integer  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.add(i);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  Integer  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.add(i);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	Integer  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.add(i);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columns.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
241	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getScale();  i++)  {  columns.add(i);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getScale();  i++)  {  columns.add(i);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getScale();  i++)  {  columns.add(i);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columns.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
242	[BUG]  [BUGGY]  for(int  i  =  getNumSlackVariables();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveFunction(i  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumSlackVariables();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveFunction(i  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumSlackVariables();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveFunction(i	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(new    LinearObjectiveFunction(i    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
243	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getScale();  i++)  {  columnLabels.add(new  LinearObjectiveFunction(i  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getScale();  i++)  {  columnLabels.add(new  LinearObjectiveFunction(i  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getScale();  i++)  {  columnLabels.add(new  LinearObjectiveFunction(i	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(new    LinearObjectiveFunction(i    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
244	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getPhaseLength();  i++)  {  columnLabels.add(new  LinearObjectiveFunction(i  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getPhaseLength();  i++)  {  columnLabels.add(new  LinearObjectiveFunction(i  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getPhaseLength();  i++)  {  columnLabels.add(new  LinearObjectiveFunction(i	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(new    LinearObjectiveFunction(i    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
245	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)super.dropPhase0Objective();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)super.dropPhase0Objective();  [BUGGY]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)super.dropPhase0Objective();	  LinearObjectiveFunction    graph    =(LinearObjectiveFunction)super.dropPhase1Objective();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
246	[BUG]  [BUGGY]  For(int  i  =  getNumObjectiveFunctions();  i  <  getPhaseLength();  i++)  {  table.clear();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  For(int  i  =  getNumObjectiveFunctions();  i  <  getPhaseLength();  i++)  {  table.clear();  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	For(int  i  =  getNumObjectiveFunctions();  i  <  getPhaseLength();  i++)  {  table.clear();  }	  For(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    table.clear();    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
247	[BUG]  [BUGGY]  For(int  i  =  getNumObjectiveFunctions();  i  <  getNumObjectiveFunctions();  i++)  {  table.clear();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  For(int  i  =  getNumObjectiveFunctions();  i  <  getNumObjectiveFunctions();  i++)  {  table.clear();  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	For(int  i  =  getNumObjectiveFunctions();  i  <  getNumObjectiveFunctions();  i++)  {  table.clear();  }	  For(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    table.clear();    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
248	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions().size()  -  2;  i  <  getArtificialVariableOffset();  i++)  {  table.clear();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions().size()  -  2;  i  <  getArtificialVariableOffset();  i++)  {  table.clear();  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions().size()  -  2;  i  <  getArtificialVariableOffset();  i++)  {  table.clear();  }	  for(int    i    =    getNumObjectiveFunctions().size();    i    <    getArtificialVariableOffset();    i++)    {    table.clear();    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
249	[BUG]  [BUGGY]  for(int  i  =  getPhase().size();  i  <  getArtificialVariableOffset();  i++)  {  table.clear();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getPhase().size();  i  <  getArtificialVariableOffset();  i++)  {  table.clear();  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getPhase().size();  i  <  getArtificialVariableOffset();  i++)  {  table.clear();  }	  for(int    i    =    getNumObjectiveFunctions().size();    i    <    getArtificialVariableOffset();    i++)    {    table.clear();    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
250	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getScale();  i++)  {  columnLabels.add(i);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getScale();  i++)  {  columnLabels.add(i);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getScale();  i++)  {  columnLabels.add(i);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(i);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
251	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getMaximumSlackVariables();  i++)  {  table.clear();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getMaximumSlackVariables();  i++)  {  table.clear();  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getMaximumSlackVariables();  i++)  {  table.clear();  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    table.clear();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
252	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getColumnLabels();  i++)  {  columnLabels.add(i);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getColumnLabels();  i++)  {  columnLabels.add(i);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getColumnLabels();  i++)  {  columnLabels.add(i);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
253	[BUG]  [BUGGY]  Tableau.this.dropPhase1Objective(Tableau.this);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  Tableau.this.dropPhase1Objective(Tableau.this);  [BUGGY]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	Tableau.this.dropPhase1Objective(Tableau.this);	  Tableau.this.dropPhase1Objective();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
254	[BUG]  [BUGGY]  For(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  table.remove();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  For(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  table.remove();  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	For(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  table.remove();  }	  For(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    table.clear();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
255	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps()  *  DEFAULT_ULPS;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  int  maxUlps  =  getMaximumUlps()  *  DEFAULT_ULPS;  [BUGGY]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	int  maxUlps  =  getMaximumUlps()  *  DEFAULT_ULPS;	  int    maxUlps    =    getMaximumUlps();    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
256	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  ==  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  ==  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  ==  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels	  if(getNumObjectiveFunctions()    ==    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(columnLabels[i]);    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
257	[BUG]  [BUGGY]  SimplexTableau.dropPhase(this);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  SimplexTableau.dropPhase(this);  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	SimplexTableau.dropPhase(this);	  SimplexTableau.dropPhase1Objective(this);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
258	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels[i]  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels[i]  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels!=  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabels[i]	  if(columnLabels!=    null)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(columnLabels[i]);    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
259	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabel[i]);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabel[i]);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels!=  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnLabel[i]);  }	  if(columnLabels!=    null)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(columnLabels[i]);    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
260	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnToDrop);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnToDrop);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnToDrop);  }	  if(getNumObjectiveFunctions()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(columnToDrop);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
261	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getMaximumSlackVariables();  i++)  {  columns.add(i);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getMaximumSlackVariables();  i++)  {  columns.add(i);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getMaximumSlackVariables();  i++)  {  columns.add(i);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columns.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
262	[BUG]  [BUGGY]  int  maxUlps  =  getMaxUlps()  *  DEFAULT_ULPS;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  int  maxUlps  =  getMaxUlps()  *  DEFAULT_ULPS;  [BUGGY]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	int  maxUlps  =  getMaxUlps()  *  DEFAULT_ULPS;	  int    maxUlps    =    getMaxUlps();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
263	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getColumnLabels();  i++)  {  columns.add(columnLabels[i]);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getColumnLabels();  i++)  {  columns.add(columnLabels[i]);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getColumnLabels();  i++)  {  columns.add(columnLabels[i]);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columns.add(columnLabels[i]);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
264	[BUG]  [BUGGY]  Table  <  NEGATIVE_VAR_COLUMN_LABEL,  Object>  columnLabels  =  table.getColumnLabels();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  Table  <  NEGATIVE_VAR_COLUMN_LABEL,  Object>  columnLabels  =  table.getColumnLabels();  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	Table  <  NEGATIVE_VAR_COLUMN_LABEL,  Object>  columnLabels  =  table.getColumnLabels();	  if(columnLabels.size()    <    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
265	[BUG]  [BUGGY]  Table  <  NEGATIVE_VAR_COLUMN_LABEL,  Object>  table  =  table.getTable();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  Table  <  NEGATIVE_VAR_COLUMN_LABEL,  Object>  table  =  table.getTable();  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	Table  <  NEGATIVE_VAR_COLUMN_LABEL,  Object>  table  =  table.getTable();	  if(columnLabels.size()    <    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
266	[BUG]  [BUGGY]  Table  <  NEGATIVE_VAR_COLUMN_LABEL,  Object>  table  =  getTable();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  Table  <  NEGATIVE_VAR_COLUMN_LABEL,  Object>  table  =  getTable();  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	Table  <  NEGATIVE_VAR_COLUMN_LABEL,  Object>  table  =  getTable();	  if(columnLabels.size()    <    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
267	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(colum  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(colum  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(colum	  if(columnLabels!=    null)    {    if(getNumObjectiveFunctions()    >    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(columnLabels[i]    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
268	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.columnLabels.get(columnsToDrop,  columnsToDrop);  graph.setPhase(p);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.columnLabels.get(columnsToDrop,  columnsToDrop);  graph.setPhase(p);  [BUGGY]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.columnLabels.get(columnsToDrop,  columnsToDrop);  graph.setPhase(p);	  LinearObjectiveFunction    graph    =(LinearObjectiveFunction)this.columnLabels.get(columnsToDrop);    graph.setPhase(p);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
269	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getColumnLabels();  i++)  {  columnLabelsToDrop.add(i);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getColumnLabels();  i++)  {  columnLabelsToDrop.add(i);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getColumnLabels();  i++)  {  columnLabelsToDrop.add(i);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabelsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
270	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  table.getColumns();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  List  <  Integer>  columnsToDrop  =  table.getColumns();  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	List  <  Integer>  columnsToDrop  =  table.getColumns();	  if(columnLabels.size()    <    2)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
271	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(graph,  null);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(graph,  null);  [BUGGY]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(graph,  null);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(null);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
272	[BUG]  [BUGGY]  SimplexTableau.dropPhase1Objective(this,  f);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  SimplexTableau.dropPhase1Objective(this,  f);  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	SimplexTableau.dropPhase1Objective(this,  f);	  SimplexTableau.dropPhase1Objective(f);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
273	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.columnLabels.get(columnsToDrop,  columnsToDrop);  graph.clear();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.columnLabels.get(columnsToDrop,  columnsToDrop);  graph.clear();  [BUGGY]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.columnLabels.get(columnsToDrop,  columnsToDrop);  graph.clear();	  LinearObjectiveFunction    graph    =(LinearObjectiveFunction)this.columnLabels.get(columnsToDrop);    graph.clear();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
274	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getColumnLabels();  i++)  {  columnsToDrop.remove(i);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getColumnLabels();  i++)  {  columnsToDrop.remove(i);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getColumnLabels();  i++)  {  columnsToDrop.remove(i);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.remove(i);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
275	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getScale();  i++)  {  columnsToDrop.remove(i);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getScale();  i++)  {  columnsToDrop.remove(i);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getScale();  i++)  {  columnsToDrop.remove(i);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.remove(i);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
276	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getMaximumSlackVariables();  i++)  {  columnsToDrop.remove(i);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getMaximumSlackVariables();  i++)  {  columnsToDrop.remove(i);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getMaximumSlackVariables();  i++)  {  columnsToDrop.remove(i);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.remove(i);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
277	[BUG]  [BUGGY]  if(columnLabels.contains(entry))  {  if(precision.compareTo(entry,  0,  maxUlps)>  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(columnLabels.contains(entry))  {  if(precision.compareTo(entry,  0,  maxUlps)>  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels.contains(entry))  {  if(precision.compareTo(entry,  0,  maxUlps)>  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();	  if(precision.compareTo(entry,    0d,    maxUlps)>    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(new    Line    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
278	[BUG]  [BUGGY]  if(columnLabels.contains(entry))  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  Line  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(columnLabels.contains(entry))  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  Line  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels.contains(entry))  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  Line	  if(precision.compareTo(entry,    0d,    maxUlps)>    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(new    Line    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
279	[BUG]  [BUGGY]  ||  getPhase()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObject  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  ||  getPhase()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObject  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	||  getPhase()  >  0)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObject	  ||    getNumObjectiveFunctions()    >    0)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(new    LinearObject    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
280	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getColumnLabels();  i++)  {  columnLabelsToDrop.remove(i);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getColumnLabels();  i++)  {  columnLabelsToDrop.remove(i);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getColumnLabels();  i++)  {  columnLabelsToDrop.remove(i);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabelsToDrop.remove(i);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
281	[BUG]  [BUGGY]  if(columnLabels.size()  ==  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(i);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(columnLabels.size()  ==  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(i);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels.size()  ==  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(i);  }	  if(columnLabels.size()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
282	[BUG]  [BUGGY]  if(columnLabels.size()  <  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(i);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(columnLabels.size()  <  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(i);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels.size()  <  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(i);  }	  if(columnLabels.size()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
283	[BUG]  [BUGGY]  if(columnLabels.size()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.add(i);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(columnLabels.size()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.add(i);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels.size()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.add(i);  }	  if(columnLabels.size()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
284	[BUG]  [BUGGY]  SimplexTableau.this.popPhase2Objective();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  SimplexTableau.this.popPhase2Objective();  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	SimplexTableau.this.popPhase2Objective();	  SimplexTableau.this.dropPhase2Objective();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
285	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getMaximumSlackVariables();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getMaximumSlackVariables();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getMaximumSlackVariables();  i++)  {  columnsToDrop.add(i);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(i);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
286	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions().size();  i  <  getMaxUlps();  i++)  {  table.clear();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions().size();  i  <  getMaxUlps();  i++)  {  table.clear();  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions().size();  i  <  getMaxUlps();  i++)  {  table.clear();  }	  for(int    i    =    getNumObjectiveFunctions().size();    i    <    getArtificialVariableOffset();    i++)    {    table.clear();    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
287	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions().size();  i  <  getMask();  i++)  {  table.clear();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions().size();  i  <  getMask();  i++)  {  table.clear();  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions().size();  i  <  getMask();  i++)  {  table.clear();  }	  for(int    i    =    getNumObjectiveFunctions().size();    i    <    getArtificialVariableOffset();    i++)    {    table.clear();    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
288	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions().size();  i  <  getMaximumSlackVariables();  i++)  {  table.clear();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions().size();  i  <  getMaximumSlackVariables();  i++)  {  table.clear();  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions().size();  i  <  getMaximumSlackVariables();  i++)  {  table.clear();  }	  for(int    i    =    getNumObjectiveFunctions().size();    i    <    getArtificialVariableOffset();    i++)    {    table.clear();    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
289	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getColumnLabels();  i++)  {  columnsToDrop.add(i  +  1);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getColumnLabels();  i++)  {  columnsToDrop.add(i  +  1);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getColumnLabels();  i++)  {  columnsToDrop.add(i  +  1);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(i    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
290	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getMaximumSlackVariables();  i++)  {  columnsToDrop.add(i  +  1);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getMaximumSlackVariables();  i++)  {  columnsToDrop.add(i  +  1);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getMaximumSlackVariables();  i++)  {  columnsToDrop.add(i  +  1);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(i    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
291	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getColumnLabels();  i++)  {  columnsToDrop.add(columnToDrop);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getColumnLabels();  i++)  {  columnsToDrop.add(columnToDrop);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getColumnLabels();  i++)  {  columnsToDrop.add(columnToDrop);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(columnToDrop);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
292	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getItemCount();  i++)  {  columnsToDrop.add(columnToDrop);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getItemCount();  i++)  {  columnsToDrop.add(columnToDrop);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getItemCount();  i++)  {  columnsToDrop.add(columnToDrop);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(columnToDrop);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
293	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)columnLabels.get(columnsToDrop  -  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)columnLabels.get(columnsToDrop  -  1);  [BUGGY]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)columnLabels.get(columnsToDrop  -  1);	  LinearObjectiveFunction    graph    =(LinearObjectiveFunction)this.columnLabels.get(columnsToDrop);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
294	[BUG]  [BUGGY]  if(columnLabelsToDrop  ==  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabelsToDrop.  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(columnLabelsToDrop  ==  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabelsToDrop.  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabelsToDrop  ==  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabelsToDrop.	  if(columnLabelsToDrop!=    null)    {    if(getNumObjectiveFunctions()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabelsToDrop.add    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
295	[BUG]  [BUGGY]  if(graph!=  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(graph!=  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(graph!=  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.	  if(columnLabels!=    null)    {    if(getNumObjectiveFunctions()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
296	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels!=  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.	  if(columnLabels!=    null)    {    if(getNumObjectiveFunctions()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
297	[BUG]  [BUGGY]  for(int  i  =  getNumDecisionVariables();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveFunction(i  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumDecisionVariables();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveFunction(i  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumDecisionVariables();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveFunction(i	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(new    LinearObjectiveFunction(i    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
298	[BUG]  [BUGGY]  if(columnLabels.size()  <  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnToDrop);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(columnLabels.size()  <  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnToDrop);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels.size()  <  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(columnToDrop);  }	  if(columnLabels.size()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(columnToDrop);    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
299	[BUG]  [BUGGY]  if(columnLabels.size()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.add(columnToDrop);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(columnLabels.size()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.add(columnToDrop);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels.size()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columns.add(columnToDrop);  }	  if(columnLabels.size()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(columnToDrop);    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
300	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  ==  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObject  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  ==  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObject  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels!=  null)  {  if(getNumObjectiveFunctions()  ==  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObject	  if(getNumObjectiveFunctions()    ==    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(new    LinearObjectiveFunction(i    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
301	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getColumnLabels();  i++)  {  columnLabels.add(columnLabels[i]);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getColumnLabels();  i++)  {  columnLabels.add(columnLabels[i]);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getColumnLabels();  i++)  {  columnLabels.add(columnLabels[i]);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(columnLabels[i]);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
302	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getSize();  i++)  {  columnLabels.add(columnLabels[i]);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getSize();  i++)  {  columnLabels.add(columnLabels[i]);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getSize();  i++)  {  columnLabels.add(columnLabels[i]);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(columnLabels[i]);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
303	[BUG]  [BUGGY]  if(columnLabels  ==  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(i);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(columnLabels  ==  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(i);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels  ==  null)  {  if(getNumObjectiveFunctions()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(i);  }	  if(columnLabels!=    null)    {    if(getNumObjectiveFunctions()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
304	[BUG]  [BUGGY]  Integer  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  table.remove();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  Integer  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  table.remove();  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	Integer  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  table.remove();  }	  For(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    table.clear();    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
305	[BUG]  [BUGGY]  if(getPhase()  <  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(getPhase()  <  0)  {  [BUGGY]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(getPhase()  <  0)  {	  if(getPhase()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
306	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getScale();  i++)  {  table.remove();  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getScale();  i++)  {  table.remove();  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getScale();  i++)  {  table.remove();  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    table.remove();    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
307	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getColumnLabels();  i++)  {  columns.add(columnToDrop);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getColumnLabels();  i++)  {  columns.add(columnToDrop);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getColumnLabels();  i++)  {  columns.add(columnToDrop);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columns.add(columnToDrop);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
308	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.plotPhase1.dropPhase1Objective();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.plotPhase1.dropPhase1Objective();  [BUGGY]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.plotPhase1.dropPhase1Objective();	  LinearObjectiveFunction    graph    =(LinearObjectiveFunction)super.dropPhase1Objective();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
309	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  getNumColumnFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveFunction(i  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  getNumColumnFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveFunction(i  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels!=  null)  {  for(int  i  =  getNumColumnFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(new  LinearObjectiveFunction(i	  if(columnLabels!=    null)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(new    LinearObjectiveFunction(i    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
310	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels!=  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add(	  if(columnLabels!=    null)    {    if(getNumObjectiveFunctions()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add(    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
311	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels!=  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabels.add	  if(columnLabels!=    null)    {    if(getNumObjectiveFunctions()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabels.add    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
312	[BUG]  [BUGGY]  int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(0,  i);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(0,  i);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(0,  i);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(0);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
313	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  columnsToDrop.add(0,  i);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  columnsToDrop.add(0,  i);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getMaxUlps();  i++)  {  columnsToDrop.add(0,  i);  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(0);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
314	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getScale();  i++)  {  table.clear();  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getScale();  i++)  {  table.clear();  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getScale();  i++)  {  table.clear();  }	  for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    table.clear();    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
315	[BUG]  [BUGGY]  if(columnLabels.size()  ==  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(1);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(columnLabels.size()  ==  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(1);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels.size()  ==  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(1);  }	  if(columnLabels.size()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(1);    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
316	[BUG]  [BUGGY]  if(columnLabels.size()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(0);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {      [BUGGY]  if(columnLabels.size()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(0);  }  [BUGGY]      if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.22360679774997896	328	328	1	replace	if(columnLabels.size()  >  1)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(0);  }	  if(columnLabels.size()    >    1)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(1);    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
