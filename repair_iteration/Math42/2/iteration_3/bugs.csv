bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ArrayList  <  Integer>  columnsToDrop  =  Lists.newArrayList(columnLabels);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  ArrayList  <  Integer>  columnsToDrop  =  Lists.newArrayList(columnLabels);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	ArrayList  <  Integer>  columnsToDrop  =  Lists.newArrayList(columnLabels);	  ArrayList    <    Integer>    columnsToDrop    =    Lists.newArrayList();    	non-compiled	[CE]  ')'  expected	30	None	replace
2	[BUG]  [BUGGY]  int  maxUlps  =  columnLabels.getMaxUlps()  -  1;  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  int  maxUlps  =  columnLabels.getMaxUlps()  -  1;  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	int  maxUlps  =  columnLabels.getMaxUlps()  -  1;	  int    maxUlps    =    matrix.getMaxUlps()    -    1;    	non-compiled	[CE]  ')'  expected	9	None	replace
3	[BUG]  [BUGGY]  int  maxUlps  =  matrix.getMaxUlps()  *  1;  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  int  maxUlps  =  matrix.getMaxUlps()  *  1;  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	int  maxUlps  =  matrix.getMaxUlps()  *  1;	  int    maxUlps    =    matrix.getMaxUlps()    -    1;    	non-compiled	[CE]  ')'  expected	9	None	replace
4	[BUG]  [BUGGY]  int  maxUlps  =  matrix.getMaximumUlps()  *  DEFAULT_ULPS;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  int  maxUlps  =  matrix.getMaximumUlps()  *  DEFAULT_ULPS;  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	int  maxUlps  =  matrix.getMaximumUlps()  *  DEFAULT_ULPS;	  int    maxUlps    =    matrix.getMaximumUlps()    /    DEFAULT_ULPS;    	non-compiled	[CE]  ')'  expected	63	None	replace
5	[BUG]  [BUGGY]  int  maxUlps  =  matrix.getMaximumUlps()  /  DEFAULT_ULPS  +  1;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  int  maxUlps  =  matrix.getMaximumUlps()  /  DEFAULT_ULPS  +  1;  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	int  maxUlps  =  matrix.getMaximumUlps()  /  DEFAULT_ULPS  +  1;	  int    maxUlps    =    matrix.getMaximumUlps()    /    DEFAULT_ULPS;    	non-compiled	[CE]  ')'  expected	63	None	replace
6	[BUG]  [BUGGY]  int  maxUlps  =  columnLabels.getMaximumUlps()  /  DEFAULT_ULPS;  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  int  maxUlps  =  columnLabels.getMaximumUlps()  /  DEFAULT_ULPS;  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	int  maxUlps  =  columnLabels.getMaximumUlps()  /  DEFAULT_ULPS;	  int    maxUlps    =    matrix.getMaximumUlps()    /    DEFAULT_ULPS;    	non-compiled	[CE]  ')'  expected	63	None	replace
7	[BUG]  [BUGGY]  int  maxUlps  =  table.getMaximumUlps()  /  DEFAULT_ULPS;  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  int  maxUlps  =  table.getMaximumUlps()  /  DEFAULT_ULPS;  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	int  maxUlps  =  table.getMaximumUlps()  /  DEFAULT_ULPS;	  int    maxUlps    =    matrix.getMaximumUlps()    /    DEFAULT_ULPS;    	non-compiled	[CE]  ')'  expected	63	None	replace
8	[BUG]  [BUGGY]  LinearObjectiveFunction  table  =(LinearObjectiveFunction)this.columnsToDrop.clone();  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  LinearObjectiveFunction  table  =(LinearObjectiveFunction)this.columnsToDrop.clone();  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	LinearObjectiveFunction  table  =(LinearObjectiveFunction)this.columnsToDrop.clone();	  LinearObjectiveFunction    table    =(LinearObjectiveFunction)getTable().clone();    	non-compiled	[CE]  ')'  expected	11	None	replace
9	[BUG]  [BUGGY]  ColumnLabels.add(0,  0);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  ColumnLabels.add(0,  0);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	ColumnLabels.add(0,  0);	  columnsToDrop.add(0,    0);    	non-compiled	[CE]  ')'  expected	38	None	replace
10	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps()  /  2;  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  int  maxUlps  =  getMaximumUlps()  /  2;  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	int  maxUlps  =  getMaximumUlps()  /  2;	  int    maxUlps    =    getMaximumUlps()    /    DEFAULT_ULPS;    	non-compiled	[CE]  ')'  expected	55	None	replace
11	[BUG]  [BUGGY]  int  maxUlps  =  getMinimumUlps()  /  DEFAULT_ULPS;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  int  maxUlps  =  getMinimumUlps()  /  DEFAULT_ULPS;  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	int  maxUlps  =  getMinimumUlps()  /  DEFAULT_ULPS;	  int    maxUlps    =    getMaximumUlps()    /    DEFAULT_ULPS;    	non-compiled	[CE]  ')'  expected	55	None	replace
12	[BUG]  [BUGGY]  columnsToDrop.add(new  Integer(getNumObjectiveFunctions(),  getArtificialVariableOffset()  +  1));  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(new  Integer(getNumObjectiveFunctions(),  getArtificialVariableOffset()  +  1));  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(new  Integer(getNumObjectiveFunctions(),  getArtificialVariableOffset()  +  1));	  columnsToDrop.add(new    Integer(getNumObjectiveFunctions(),    getArtificialVariableOffset()));    	non-compiled	[CE]  ')'  expected	78	None	replace
13	[BUG]  [BUGGY]  ColumnLabels.add(new  Integer(getNumObjectiveFunctions(),  getArtificialVariableOffset()));  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  ColumnLabels.add(new  Integer(getNumObjectiveFunctions(),  getArtificialVariableOffset()));  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	ColumnLabels.add(new  Integer(getNumObjectiveFunctions(),  getArtificialVariableOffset()));	  columnsToDrop.add(new    Integer(getNumObjectiveFunctions(),    getArtificialVariableOffset()));    	non-compiled	[CE]  ')'  expected	78	None	replace
14	[BUG]  [BUGGY]  columnsToDrop.add(new  Integer(getNumObjectiveFunctions(),  getArtificialVariableOffset()  -  1));  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(new  Integer(getNumObjectiveFunctions(),  getArtificialVariableOffset()  -  1));  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(new  Integer(getNumObjectiveFunctions(),  getArtificialVariableOffset()  -  1));	  columnsToDrop.add(new    Integer(getNumObjectiveFunctions(),    getArtificialVariableOffset()));    	non-compiled	[CE]  ')'  expected	78	None	replace
15	[BUG]  [BUGGY]  Collections.reverse(this.columnLabels,  columnsToDrop);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Collections.reverse(this.columnLabels,  columnsToDrop);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Collections.reverse(this.columnLabels,  columnsToDrop);	  Collections.reverse(this.columnLabels);    	non-compiled	[CE]  ')'  expected	51	None	replace
16	[BUG]  [BUGGY]  Collections.reverse(this.columnLabels,  columnLabels);  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Collections.reverse(this.columnLabels,  columnLabels);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Collections.reverse(this.columnLabels,  columnLabels);	  Collections.reverse(this.columnLabels);    	non-compiled	[CE]  ')'  expected	51	None	replace
17	[BUG]  [BUGGY]  ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size());  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size());  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size());	  List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(columnLabels.size()    -    1);    	non-compiled	[CE]  ')'  expected	19	None	replace
18	[BUG]  [BUGGY]  Collection  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size());  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Collection  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size());  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Collection  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size());	  List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(columnLabels.size()    -    1);    	non-compiled	[CE]  ')'  expected	19	None	replace
19	[BUG]  [BUGGY]  Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>(getArtificialVariableOffset());  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>(getArtificialVariableOffset());  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>(getArtificialVariableOffset());	  List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(getArtificialVariableOffset()    +    1);    	non-compiled	[CE]  ')'  expected	2	None	replace
20	[BUG]  [BUGGY]  columnsToDrop.add(0,  Integer.MAX_VALUE  -  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(0,  Integer.MAX_VALUE  -  1);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(0,  Integer.MAX_VALUE  -  1);	  columnsToDrop.add(0,    Integer.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
21	[BUG]  [BUGGY]  columnsToDrop.add(0,  Integer.MAX_VALUE  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(0,  Integer.MAX_VALUE  +  1);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(0,  Integer.MAX_VALUE  +  1);	  columnsToDrop.add(0,    Integer.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
22	[BUG]  [BUGGY]  columnsToDrop.add(0,  Integer.MIN_VALUE);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(0,  Integer.MIN_VALUE);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(0,  Integer.MIN_VALUE);	  columnsToDrop.add(0,    Integer.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
23	[BUG]  [BUGGY]  Collections.reverse(columnLabels,  columnLabels,  columnsToDrop);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Collections.reverse(columnLabels,  columnLabels,  columnsToDrop);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Collections.reverse(columnLabels,  columnLabels,  columnsToDrop);	  Collections.reverse(columnLabels,    columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
24	[BUG]  [BUGGY]  Collections.reverse(columnLabels,  matrix);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Collections.reverse(columnLabels,  matrix);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Collections.reverse(columnLabels,  matrix);	  Collections.reverse(columnLabels,    columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
25	[BUG]  [BUGGY]  columnsToDrop.add(getNumObjectiveFunctions()  -  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(getNumObjectiveFunctions()  -  1);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(getNumObjectiveFunctions()  -  1);	  columnsToDrop.add(intValue    -    1);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
26	[BUG]  [BUGGY]  columnsToDrop.add(columnLabels  -  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(columnLabels  -  1);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(columnLabels  -  1);	  columnsToDrop.add(intValue    -    1);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
27	[BUG]  [BUGGY]  columnsToDrop.add(intValue  /  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(intValue  /  1);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(intValue  /  1);	  columnsToDrop.add(intValue    -    1);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
28	[BUG]  [BUGGY]  columnsToDrop.add(new  Integer(columnLabels.size()));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(new  Integer(columnLabels.size()));  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(new  Integer(columnLabels.size()));	  columnsToDrop.add(new    Integer(columnLabels.size()    -    1));    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
29	[BUG]  [BUGGY]  ColumnLabels  columnsToDrop.add(new  Integer(columnLabels.size()));  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  ColumnLabels  columnsToDrop.add(new  Integer(columnLabels.size()));  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	ColumnLabels  columnsToDrop.add(new  Integer(columnLabels.size()));	  columnsToDrop.add(new    Integer(columnLabels.size()    -    1));    	non-compiled	[CE]  ';'  expected	37	None	replace
30	[BUG]  [BUGGY]  int  maxUlps  =  columnsToDrop.size()  -  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  int  maxUlps  =  columnsToDrop.size()  -  1;  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	int  maxUlps  =  columnsToDrop.size()  -  1;	  int    maxUlps    =    columnsToDrop.size();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
31	[BUG]  [BUGGY]  int  maxUlps  =  columnsToDrop.size()  +  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  int  maxUlps  =  columnsToDrop.size()  +  1;  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	int  maxUlps  =  columnsToDrop.size()  +  1;	  int    maxUlps    =    columnsToDrop.size();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
32	[BUG]  [BUGGY]  int  maxUlps  =  columnsToDrop.size()  -  2;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  int  maxUlps  =  columnsToDrop.size()  -  2;  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	int  maxUlps  =  columnsToDrop.size()  -  2;	  int    maxUlps    =    columnsToDrop.size();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
33	[BUG]  [BUGGY]  Integer[]  columnsToDrop  =  getRowLabels();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Integer[]  columnsToDrop  =  getRowLabels();  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Integer[]  columnsToDrop  =  getRowLabels();	  Integer[]    columnsToDrop    =    getColumnLabels();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
34	[BUG]  [BUGGY]  Integer[]  columnsToDrop  =  getColumnLabels().toArray(new  Integer[columnLabels.size()  ]);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Integer[]  columnsToDrop  =  getColumnLabels().toArray(new  Integer[columnLabels.size()  ]);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Integer[]  columnsToDrop  =  getColumnLabels().toArray(new  Integer[columnLabels.size()  ]);	  Integer[]    columnsToDrop    =    getColumnLabels();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
35	[BUG]  [BUGGY]  Integer[]  columnsToDrop  =  getColumns();  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Integer[]  columnsToDrop  =  getColumns();  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Integer[]  columnsToDrop  =  getColumns();	  Integer[]    columnsToDrop    =    getColumnLabels();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
36	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i);  }	  if(columnLabelsToDrop    ==    null)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabelsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
37	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabelsToDrop.add(i);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabelsToDrop.add(i);  }  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnLabelsToDrop.add(i);  }	  if(columnLabelsToDrop    ==    null)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabelsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
38	[BUG]  [BUGGY]  ColumnLabelsToDrop.add(columnLabelsToDrop);  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  ColumnLabelsToDrop.add(columnLabelsToDrop);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	ColumnLabelsToDrop.add(columnLabelsToDrop);	  if(columnLabelsToDrop    ==    null)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabelsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
39	[BUG]  [BUGGY]  Integer  columnLabelsToDrop  =  columnsToDrop.get(i);  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Integer  columnLabelsToDrop  =  columnsToDrop.get(i);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Integer  columnLabelsToDrop  =  columnsToDrop.get(i);	  if(columnLabelsToDrop    ==    null)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabelsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
40	[BUG]  [BUGGY]  Collections.sort(columnLabels,  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Collections.sort(columnLabels,  1);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Collections.sort(columnLabels,  1);	  Collections.sort(columnLabels,    0);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
41	[BUG]  [BUGGY]  Collections.sort(columnLabels,  0,  columnsToDrop.length);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Collections.sort(columnLabels,  0,  columnsToDrop.length);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Collections.sort(columnLabels,  0,  columnsToDrop.length);	  Collections.sort(columnLabels,    0);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
42	[BUG]  [BUGGY]  Collections.sort(columnLabels,  0,  columnLabels.length);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Collections.sort(columnLabels,  0,  columnLabels.length);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Collections.sort(columnLabels,  0,  columnLabels.length);	  Collections.sort(columnLabels,    0);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
43	[BUG]  [BUGGY]  Collections.sort(columnLabels,  0,  columnsToDrop.size());  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Collections.sort(columnLabels,  0,  columnsToDrop.size());  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Collections.sort(columnLabels,  0,  columnsToDrop.size());	  Collections.sort(columnLabels,    0);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
44	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.remove(i);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.remove(i);  }  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.remove(i);  }	  if(columnLabelsToDrop    ==    null)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
45	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i);	  if(columnLabelsToDrop    ==    null)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
46	[BUG]  [BUGGY]  Collections.sort(this.columnLabels,  matrix);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Collections.sort(this.columnLabels,  matrix);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Collections.sort(this.columnLabels,  matrix);	  Collections.sort(columnLabels,    matrix);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
47	[BUG]  [BUGGY]  Collections.sort(matrix,  columnLabels);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Collections.sort(matrix,  columnLabels);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Collections.sort(matrix,  columnLabels);	  Collections.sort(columnLabels,    matrix);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
48	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  Lists.newArrayList(this.columnLabels);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  List  <  Integer>  columnsToDrop  =  Lists.newArrayList(this.columnLabels);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	List  <  Integer>  columnsToDrop  =  Lists.newArrayList(this.columnLabels);	  List    <    Integer>    columnsToDrop    =    Lists.newArrayList(columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
49	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  Lists.newArrayList(columnLabels,  columnLabels);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  List  <  Integer>  columnsToDrop  =  Lists.newArrayList(columnLabels,  columnLabels);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	List  <  Integer>  columnsToDrop  =  Lists.newArrayList(columnLabels,  columnLabels);	  List    <    Integer>    columnsToDrop    =    Lists.newArrayList(columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
50	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  Lists.newArrayList(size);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  List  <  Integer>  columnsToDrop  =  Lists.newArrayList(size);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	List  <  Integer>  columnsToDrop  =  Lists.newArrayList(size);	  List    <    Integer>    columnsToDrop    =    Lists.newArrayList(columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
51	[BUG]  [BUGGY]  ColumnLabels.add(columnsToDrop,  columnLabels);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  ColumnLabels.add(columnsToDrop,  columnLabels);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	ColumnLabels.add(columnsToDrop,  columnLabels);	  ColumnLabels.add(columnsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
52	[BUG]  [BUGGY]  Collections.reverse(columnLabels,  DEFAULT_ULPS,  columnsToDrop);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Collections.reverse(columnLabels,  DEFAULT_ULPS,  columnsToDrop);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Collections.reverse(columnLabels,  DEFAULT_ULPS,  columnsToDrop);	  Collections.reverse(columnLabels,    DEFAULT_ULPS);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
53	[BUG]  [BUGGY]  Collections.reverse(columnLabels,  0,  columnsToDrop);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Collections.reverse(columnLabels,  0,  columnsToDrop);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Collections.reverse(columnLabels,  0,  columnsToDrop);	  Collections.reverse(columnLabels,    DEFAULT_ULPS);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
54	[BUG]  [BUGGY]  Collections.reverse(columnLabels,  DEFAULT_ULPS,  columnLabels);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Collections.reverse(columnLabels,  DEFAULT_ULPS,  columnLabels);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Collections.reverse(columnLabels,  DEFAULT_ULPS,  columnLabels);	  Collections.reverse(columnLabels,    DEFAULT_ULPS);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
55	[BUG]  [BUGGY]  columnsToDrop.add(0,  col  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(0,  col  +  1);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(0,  col  +  1);	  columnsToDrop.add(0,    columnLabels    +    1);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
56	[BUG]  [BUGGY]  ColumnLabels.add(0,  columnLabels  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  ColumnLabels.add(0,  columnLabels  +  1);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	ColumnLabels.add(0,  columnLabels  +  1);	  columnsToDrop.add(0,    columnLabels    +    1);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
57	[BUG]  [BUGGY]  columnsToDrop.add(0,  columnLabels  *  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(0,  columnLabels  *  1);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(0,  columnLabels  *  1);	  columnsToDrop.add(0,    columnLabels    +    1);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
58	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps()  /  1;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  int  maxUlps  =  getMaximumUlps()  /  1;  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	int  maxUlps  =  getMaximumUlps()  /  1;	  int    maxUlps    =    getMaximumUlps()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
59	[BUG]  [BUGGY]  int  maxUlps  =  table.getMaxUlps()  +  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  int  maxUlps  =  table.getMaxUlps()  +  1;  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	int  maxUlps  =  table.getMaxUlps()  +  1;	  int    maxUlps    =    table.getMaxUlps();    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
60	[BUG]  [BUGGY]  int  maxUlps  =  table.getMaxUlps()  -  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  int  maxUlps  =  table.getMaxUlps()  -  1;  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	int  maxUlps  =  table.getMaxUlps()  -  1;	  int    maxUlps    =    table.getMaxUlps();    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
61	[BUG]  [BUGGY]  ColumnLabelsToDrop  <  NEGATIVE_VAR_COLUMN_LABEL  ||  colLabelsToDrop!=  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToD  [CE]  >  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  ColumnLabelsToDrop  <  NEGATIVE_VAR_COLUMN_LABEL  ||  colLabelsToDrop!=  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToD  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	ColumnLabelsToDrop  <  NEGATIVE_VAR_COLUMN_LABEL  ||  colLabelsToDrop!=  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToD	  if(columnLabelsToDrop!=    null)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  >  expected	71	None	replace
62	[BUG]  [BUGGY]  ColumnLabelsToDrop  <  NEGATIVE_VAR_COLUMN_LABEL)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add  [CE]  >  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  ColumnLabelsToDrop  <  NEGATIVE_VAR_COLUMN_LABEL)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	ColumnLabelsToDrop  <  NEGATIVE_VAR_COLUMN_LABEL)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add	  if(columnLabelsToDrop!=    null)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  >  expected	71	None	replace
63	[BUG]  [BUGGY]  ColumnLabelsToDrop  <  NEGATIVE_VAR_COLUMN_LABEL  ||  colLabelsToDrop!=  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsTo  [CE]  >  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  ColumnLabelsToDrop  <  NEGATIVE_VAR_COLUMN_LABEL  ||  colLabelsToDrop!=  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsTo  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	ColumnLabelsToDrop  <  NEGATIVE_VAR_COLUMN_LABEL  ||  colLabelsToDrop!=  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsTo	  if(columnLabelsToDrop!=    null)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  >  expected	71	None	replace
64	[BUG]  [BUGGY]  columnsToDrop.add(0,  Math.min(columnLabels.size()  -  1,  intValue));  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(0,  Math.min(columnLabels.size()  -  1,  intValue));  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(0,  Math.min(columnLabels.size()  -  1,  intValue));	  columnsToDrop.add(0,    intValue);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
65	[BUG]  [BUGGY]  columnsToDrop.add(0,  getNumObjectiveFunctions());  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(0,  getNumObjectiveFunctions());  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(0,  getNumObjectiveFunctions());	  columnsToDrop.add(0,    intValue);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
66	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(getRowLabels());  [CE]  '.class'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(getRowLabels());  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(getRowLabels());	  List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(getColumnLabels());    	non-compiled	[CE]  '.class'  expected	1	None	replace
67	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(getColumnLength());  [CE]  '.class'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(getColumnLength());  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(getColumnLength());	  List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(getColumnLabels());    	non-compiled	[CE]  '.class'  expected	1	None	replace
68	[BUG]  [BUGGY]  columnsToDrop.add(entry);  [CE]  '.class'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(entry);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(entry);	  columnsToDrop.add(i);    	non-compiled	[CE]  '.class'  expected	66	None	replace
69	[BUG]  [BUGGY]  ColumnLabels.add(columnLabels);  [CE]  '.class'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  ColumnLabels.add(columnLabels);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	ColumnLabels.add(columnLabels);	  columnsToDrop.add(i);    	non-compiled	[CE]  '.class'  expected	66	None	replace
70	[BUG]  [BUGGY]  ColumnLabels.add(columnLabels,  i);  [CE]  '.class'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  ColumnLabels.add(columnLabels,  i);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	ColumnLabels.add(columnLabels,  i);	  columnsToDrop.add(i);    	non-compiled	[CE]  '.class'  expected	66	None	replace
71	[BUG]  [BUGGY]  ColumnLabels.add(columnLabelsToDrop,  columnLabelsToDrop);  [CE]  '.class'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  ColumnLabels.add(columnLabelsToDrop,  columnLabelsToDrop);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	ColumnLabels.add(columnLabelsToDrop,  columnLabelsToDrop);	  ColumnLabels.add(columnLabelsToDrop,    columnsToDrop);    	non-compiled	[CE]  '.class'  expected	32	None	replace
72	[BUG]  [BUGGY]  Collections.sort(columnLabels,  NEGATIVE_VAR_COLUMN_LABEL);  [CE]  '.class'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Collections.sort(columnLabels,  NEGATIVE_VAR_COLUMN_LABEL);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Collections.sort(columnLabels,  NEGATIVE_VAR_COLUMN_LABEL);	  Collections.sort(columnLabels,    columnLabels);    	non-compiled	[CE]  '.class'  expected	16	None	replace
73	[BUG]  [BUGGY]  Collections.sort(columnLabels,  col);  [CE]  '.class'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Collections.sort(columnLabels,  col);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Collections.sort(columnLabels,  col);	  Collections.sort(columnLabels,    columnLabels);    	non-compiled	[CE]  '.class'  expected	16	None	replace
74	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(getMaxUlps()  +  1);  [CE]  '.class'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(getMaxUlps()  +  1);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(getMaxUlps()  +  1);	  List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(getMaxUlps());    	non-compiled	[CE]  '.class'  expected	45	None	replace
75	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(getColumns());  [CE]  '.class'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(getColumns());  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(getColumns());	  List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(getMaxUlps());    	non-compiled	[CE]  '.class'  expected	45	None	replace
76	[BUG]  [BUGGY]  columnsToDrop.add(columnLabels.size()  -  1);  [CE]  '.class'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(columnLabels.size()  -  1);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(columnLabels.size()  -  1);	  columnsToDrop.remove(columnLabels.size());    	non-compiled	[CE]  '.class'  expected	42	None	replace
77	[BUG]  [BUGGY]  columnsToDrop.add(columnLabels.size());  [CE]  '.class'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(columnLabels.size());  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(columnLabels.size());	  columnsToDrop.remove(columnLabels.size());    	non-compiled	[CE]  '.class'  expected	42	None	replace
78	[BUG]  [BUGGY]  ColumnLabels.remove(columnLabels.size()  -  1);  [CE]  '.class'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  ColumnLabels.remove(columnLabels.size()  -  1);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	ColumnLabels.remove(columnLabels.size()  -  1);	  columnsToDrop.remove(columnLabels.size());    	non-compiled	[CE]  '.class'  expected	42	None	replace
79	[BUG]  [BUGGY]  Collections.reverse(columnLabels,  NEGATIVE_VAR_COLUMN_LABEL);  [CE]  '.class'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Collections.reverse(columnLabels,  NEGATIVE_VAR_COLUMN_LABEL);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Collections.reverse(columnLabels,  NEGATIVE_VAR_COLUMN_LABEL);	  Collections.reverse(columnLabels,    columnsToDrop);    	non-compiled	[CE]  '.class'  expected	49	None	replace
80	[BUG]  [BUGGY]  Collections.reverse(columnLabels,  columnsToDrop,  columnLabels);  [CE]  '.class'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Collections.reverse(columnLabels,  columnsToDrop,  columnLabels);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Collections.reverse(columnLabels,  columnsToDrop,  columnLabels);	  Collections.reverse(columnLabels,    columnsToDrop);    	non-compiled	[CE]  '.class'  expected	49	None	replace
81	[BUG]  [BUGGY]  LinearObjectiveFunction  table  =(LinearObjectiveFunction)this.table.getRow();  [CE]  '.class'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  LinearObjectiveFunction  table  =(LinearObjectiveFunction)this.table.getRow();  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	LinearObjectiveFunction  table  =(LinearObjectiveFunction)this.table.getRow();	  LinearObjectiveFunction    table    =(LinearObjectiveFunction)this.table.getTable();    	non-compiled	[CE]  '.class'  expected	58	None	replace
82	[BUG]  [BUGGY]  LinearObjectiveFunction  table  =(LinearObjectiveFunction)table.getTable();  [CE]  '.class'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  LinearObjectiveFunction  table  =(LinearObjectiveFunction)table.getTable();  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	LinearObjectiveFunction  table  =(LinearObjectiveFunction)table.getTable();	  LinearObjectiveFunction    table    =(LinearObjectiveFunction)this.table.getTable();    	non-compiled	[CE]  '.class'  expected	58	None	replace
83	[BUG]  [BUGGY]  ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(0);  [CE]  '.class'  expected  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(0);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(0);	  ArrayList    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>();    	non-compiled	[CE]  '.class'  expected	56	None	replace
84	[BUG]  [BUGGY]  ColumnLabels.add(new  Integer(getNumObjectiveFunctions()));  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  ColumnLabels.add(new  Integer(getNumObjectiveFunctions()));  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	ColumnLabels.add(new  Integer(getNumObjectiveFunctions()));	  columnsToDrop.add(new    Integer(getNumObjectiveFunctions()));    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
85	[BUG]  [BUGGY]  columnsToDrop.add(new  Integer(getNumObjectiveFunctions()  +  1));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(new  Integer(getNumObjectiveFunctions()  +  1));  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(new  Integer(getNumObjectiveFunctions()  +  1));	  columnsToDrop.add(new    Integer(getNumObjectiveFunctions()));    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
86	[BUG]  [BUGGY]  columnsToDrop.add(new  Integer(0));  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(new  Integer(0));  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(new  Integer(0));	  columnsToDrop.add(new    Integer(getNumObjectiveFunctions()));    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
87	[BUG]  [BUGGY]  Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>(getNumObjectiveFunctions());  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>(getNumObjectiveFunctions());  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>(getNumObjectiveFunctions());	  List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(getNumObjectiveFunctions()    +    1);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
88	[BUG]  [BUGGY]  columnsToDrop.add(0,  getArtificialVariableOffset()  -  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(0,  getArtificialVariableOffset()  -  1);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(0,  getArtificialVariableOffset()  -  1);	  columnsToDrop.add(0,    getArtificialVariableOffset());    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
89	[BUG]  [BUGGY]  columnsToDrop.add(0,  getNumArtificialVariables());  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(0,  getNumArtificialVariables());  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(0,  getNumArtificialVariables());	  columnsToDrop.add(0,    getArtificialVariableOffset());    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
90	[BUG]  [BUGGY]  columnsToDrop.add(0,  getArtificialVariableOffset()  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(0,  getArtificialVariableOffset()  +  1);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(0,  getArtificialVariableOffset()  +  1);	  columnsToDrop.add(0,    getArtificialVariableOffset());    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
91	[BUG]  [BUGGY]  Table  <  Integer>  table  =  getTable().getTableCount();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Table  <  Integer>  table  =  getTable().getTableCount();  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Table  <  Integer>  table  =  getTable().getTableCount();	  Table    <    Integer>    table    =    getTable().removeInteger(0);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
92	[BUG]  [BUGGY]  Table  <  Integer>  table  =  getTable().getInteger(0);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Table  <  Integer>  table  =  getTable().getInteger(0);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Table  <  Integer>  table  =  getTable().getInteger(0);	  Table    <    Integer>    table    =    getTable().removeInteger(0);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
93	[BUG]  [BUGGY]  Table  <  Integer>  table  =  getTable().getTable(0);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Table  <  Integer>  table  =  getTable().getTable(0);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Table  <  Integer>  table  =  getTable().getTable(0);	  Table    <    Integer>    table    =    getTable().removeInteger(0);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
94	[BUG]  [BUGGY]  columnsToDrop.add(new  Integer(getMaxUlps(),  getNumObjectiveFunctions()));  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(new  Integer(getMaxUlps(),  getNumObjectiveFunctions()));  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(new  Integer(getMaxUlps(),  getNumObjectiveFunctions()));	  columnsToDrop.add(new    Integer(getNumObjectiveFunctions(),    getMaxUlps()));    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
95	[BUG]  [BUGGY]  columnsToDrop.add(new  Integer(getNumObjectiveFunctions(),  getMaxUlps()  +  1));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(new  Integer(getNumObjectiveFunctions(),  getMaxUlps()  +  1));  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(new  Integer(getNumObjectiveFunctions(),  getMaxUlps()  +  1));	  columnsToDrop.add(new    Integer(getNumObjectiveFunctions(),    getMaxUlps()));    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
96	[BUG]  [BUGGY]  columnsToDrop.add(new  Integer(getNumObjectiveFunctions(),  getMinUlps()));  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(new  Integer(getNumObjectiveFunctions(),  getMinUlps()));  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(new  Integer(getNumObjectiveFunctions(),  getMinUlps()));	  columnsToDrop.add(new    Integer(getNumObjectiveFunctions(),    getMaxUlps()));    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
97	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(2);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(2);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(2);	  List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(1);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
98	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps()  *  2;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  int  maxUlps  =  getMaximumUlps()  *  2;  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	int  maxUlps  =  getMaximumUlps()  *  2;	  int    maxUlps    =    getMaximumUlps()    *    DEFAULT_ULPS;    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
99	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps()  *  height;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  int  maxUlps  =  getMaximumUlps()  *  height;  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	int  maxUlps  =  getMaximumUlps()  *  height;	  int    maxUlps    =    getMaximumUlps()    *    DEFAULT_ULPS;    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
100	[BUG]  [BUGGY]  ColumnLabels.add(columnLabelsToDrop,  column  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  ColumnLabels.add(columnLabelsToDrop,  column  +  1);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	ColumnLabels.add(columnLabelsToDrop,  column  +  1);	  ColumnLabels.add(columnLabelsToDrop,    column);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
101	[BUG]  [BUGGY]  ColumnLabels.add(columnLabelsToDrop,  matrix);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  ColumnLabels.add(columnLabelsToDrop,  matrix);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	ColumnLabels.add(columnLabelsToDrop,  matrix);	  ColumnLabels.add(columnLabelsToDrop,    column);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
102	[BUG]  [BUGGY]  Table  <  Integer>  table  =  this.table.getTable();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Table  <  Integer>  table  =  this.table.getTable();  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Table  <  Integer>  table  =  this.table.getTable();	  Table    <    Integer>    table    =    this.getTable();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
103	[BUG]  [BUGGY]  Table  <  Integer>  table  =(Table)this.getTable();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Table  <  Integer>  table  =(Table)this.getTable();  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Table  <  Integer>  table  =(Table)this.getTable();	  Table    <    Integer>    table    =    this.getTable();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
104	[BUG]  [BUGGY]  int  maxUlps  =  columnsToDrop.getMaxUlps();  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  int  maxUlps  =  columnsToDrop.getMaxUlps();  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	int  maxUlps  =  columnsToDrop.getMaxUlps();	  int    maxUlps    =    columnLabels.getMaxUlps();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
105	[BUG]  [BUGGY]  int  maxUlps  =  columnLabels.getMaxUlps()  +  1;  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  int  maxUlps  =  columnLabels.getMaxUlps()  +  1;  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	int  maxUlps  =  columnLabels.getMaxUlps()  +  1;	  int    maxUlps    =    columnLabels.getMaxUlps();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
106	[BUG]  [BUGGY]  Collections.reverse(columnLabels,  1);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Collections.reverse(columnLabels,  1);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Collections.reverse(columnLabels,  1);	  Collections.reverse(columnLabels,    0);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
107	[BUG]  [BUGGY]  Collections.reverse(columnLabels,  0,  columnsToDrop.length);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Collections.reverse(columnLabels,  0,  columnsToDrop.length);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Collections.reverse(columnLabels,  0,  columnsToDrop.length);	  Collections.reverse(columnLabels,    0);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
108	[BUG]  [BUGGY]  Collections.reverse(columnLabels,  0,  columnsToDrop.size());  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Collections.reverse(columnLabels,  0,  columnsToDrop.size());  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Collections.reverse(columnLabels,  0,  columnsToDrop.size());	  Collections.reverse(columnLabels,    0);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
109	[BUG]  [BUGGY]  columnsToDrop.add(0,  col  -  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(0,  col  -  1);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(0,  col  -  1);	  columnsToDrop.add(0,    columnLabels    -    1);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
110	[BUG]  [BUGGY]  columnsToDrop.add(0,  maxUlps  -  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(0,  maxUlps  -  1);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(0,  maxUlps  -  1);	  columnsToDrop.add(0,    columnLabels    -    1);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
111	[BUG]  [BUGGY]  ColumnLabels.add(0,  columnLabels  -  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  ColumnLabels.add(0,  columnLabels  -  1);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	ColumnLabels.add(0,  columnLabels  -  1);	  columnsToDrop.add(0,    columnLabels    -    1);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
112	[BUG]  [BUGGY]  int  maxUlps  =  matrix.getMaximumUlps()  *  1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  int  maxUlps  =  matrix.getMaximumUlps()  *  1;  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	int  maxUlps  =  matrix.getMaximumUlps()  *  1;	  int    maxUlps    =    matrix.getMaximumUlps()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
113	[BUG]  [BUGGY]  int  maxUlps  =  columnsToDrop.size();  columnsToDrop.add(maxUlps);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  int  maxUlps  =  columnsToDrop.size();  columnsToDrop.add(maxUlps);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	int  maxUlps  =  columnsToDrop.size();  columnsToDrop.add(maxUlps);	  int    maxUlps    =    columnLabels.size();    columnsToDrop.add(maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
114	[BUG]  [BUGGY]  Integer  maxUlps  =  columnsToDrop.size();  columnsToDrop.add(maxUlps);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Integer  maxUlps  =  columnsToDrop.size();  columnsToDrop.add(maxUlps);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Integer  maxUlps  =  columnsToDrop.size();  columnsToDrop.add(maxUlps);	  int    maxUlps    =    columnLabels.size();    columnsToDrop.add(maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
115	[BUG]  [BUGGY]  ColumnLabels.add(columnLabelsToDrop,  col);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  ColumnLabels.add(columnLabelsToDrop,  col);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	ColumnLabels.add(columnLabelsToDrop,  col);	  ColumnLabels.add(columnLabelsToDrop,    columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
116	[BUG]  [BUGGY]  columnsToDrop.add(0,  column);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(0,  column);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(0,  column);	  columnsToDrop.add(0,    col);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
117	[BUG]  [BUGGY]  Collections.sort(columnLabels,  DEFAULT_ULPS,  columnsToDrop);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Collections.sort(columnLabels,  DEFAULT_ULPS,  columnsToDrop);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Collections.sort(columnLabels,  DEFAULT_ULPS,  columnsToDrop);	  Collections.sort(columnLabels,    DEFAULT_ULPS);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
118	[BUG]  [BUGGY]  LinearObjectiveFunction  table  =(LinearObjectiveFunction)columnsToDrop.clone();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  LinearObjectiveFunction  table  =(LinearObjectiveFunction)columnsToDrop.clone();  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	LinearObjectiveFunction  table  =(LinearObjectiveFunction)columnsToDrop.clone();	  LinearObjectiveFunction    table    =(LinearObjectiveFunction)this.table.clone();    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
119	[BUG]  [BUGGY]  LinearObjectiveFunction  table  =(LinearObjectiveFunction)table.clone();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  LinearObjectiveFunction  table  =(LinearObjectiveFunction)table.clone();  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	LinearObjectiveFunction  table  =(LinearObjectiveFunction)table.clone();	  LinearObjectiveFunction    table    =(LinearObjectiveFunction)this.table.clone();    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
120	[BUG]  [BUGGY]  Integer[]  columnsToDrop  =  new  Integer[size()  -  1];  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Integer[]  columnsToDrop  =  new  Integer[size()  -  1];  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Integer[]  columnsToDrop  =  new  Integer[size()  -  1];	  Integer[]    columnsToDrop    =    new    Integer[size()    ];    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
121	[BUG]  [BUGGY]  Integer[]  columnsToDrop  =  new  Integer[size()  +  1];  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Integer[]  columnsToDrop  =  new  Integer[size()  +  1];  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Integer[]  columnsToDrop  =  new  Integer[size()  +  1];	  Integer[]    columnsToDrop    =    new    Integer[size()    ];    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
122	[BUG]  [BUGGY]  Integer[]  columnsToDrop  =  new  Integer[size()  *  2];  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Integer[]  columnsToDrop  =  new  Integer[size()  *  2];  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Integer[]  columnsToDrop  =  new  Integer[size()  *  2];	  Integer[]    columnsToDrop    =    new    Integer[size()    ];    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
123	[BUG]  [BUGGY]  ColumnLabels.add(columnsToDrop,  col);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  ColumnLabels.add(columnsToDrop,  col);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	ColumnLabels.add(columnsToDrop,  col);	  ColumnLabels.add(columnsToDrop,    columnsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
124	[BUG]  [BUGGY]  Integer  maxUlps  =  columnsToDrop.size();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Integer  maxUlps  =  columnsToDrop.size();  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Integer  maxUlps  =  columnsToDrop.size();	  int    maxUlps    =    columnLabels.size();    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
125	[BUG]  [BUGGY]  int  maxUlps  =  columnLabels.size()  -  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  int  maxUlps  =  columnLabels.size()  -  1;  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	int  maxUlps  =  columnLabels.size()  -  1;	  int    maxUlps    =    columnLabels.size();    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
126	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  Lists.newHashSet();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  List  <  Integer>  columnsToDrop  =  Lists.newHashSet();  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	List  <  Integer>  columnsToDrop  =  Lists.newHashSet();	  List    <    Integer>    columnsToDrop    =    Lists.newLinkedList();    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
127	[BUG]  [BUGGY]  Table  <  Integer>  table  =  getTable().getRows();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Table  <  Integer>  table  =  getTable().getRows();  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Table  <  Integer>  table  =  getTable().getRows();	  Table    <    Integer>    table    =    getTable().getTables();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
128	[BUG]  [BUGGY]  Table  <  Integer>  table  =  getTable().getColumns();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Table  <  Integer>  table  =  getTable().getColumns();  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Table  <  Integer>  table  =  getTable().getColumns();	  Table    <    Integer>    table    =    getTable().getTables();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
129	[BUG]  [BUGGY]  ColumnLabels.add(0,  Table.NONE);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  ColumnLabels.add(0,  Table.NONE);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	ColumnLabels.add(0,  Table.NONE);	  columnsToDrop.add(0,    Table.NONE);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
130	[BUG]  [BUGGY]  columnsToDrop.add(0,  Table.NONE  -  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(0,  Table.NONE  -  1);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(0,  Table.NONE  -  1);	  columnsToDrop.add(0,    Table.NONE);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
131	[BUG]  [BUGGY]  columnsToDrop.add(0,  Table.NONE,  columnLabels);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(0,  Table.NONE,  columnLabels);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(0,  Table.NONE,  columnLabels);	  columnsToDrop.add(0,    Table.NONE);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
132	[BUG]  [BUGGY]  Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>(columnLabels.size()  -  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>(columnLabels.size()  -  1);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>(columnLabels.size()  -  1);	  Set    <    Integer>    columnsToDrop    =    new    HashSet    <    Integer>(columnLabels.size());    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
133	[BUG]  [BUGGY]  Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>(columnLabels.size()  +  1);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>(columnLabels.size()  +  1);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>(columnLabels.size()  +  1);	  Set    <    Integer>    columnsToDrop    =    new    HashSet    <    Integer>(columnLabels.size());    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
134	[BUG]  [BUGGY]  columnsToDrop.add(getArtificialVariableOffset());  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(getArtificialVariableOffset());  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(getArtificialVariableOffset());	  columnsToDrop.add(getNumObjectiveFunctions());    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
135	[BUG]  [BUGGY]  ColumnLabels.add(getNumObjectiveFunctions());  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  ColumnLabels.add(getNumObjectiveFunctions());  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	ColumnLabels.add(getNumObjectiveFunctions());	  columnsToDrop.add(getNumObjectiveFunctions());    	non-compiled	[CE]  not  a  statement	65	None	replace
136	[BUG]  [BUGGY]  columnsToDrop.add(getNumObjectiveFunctions(),  getArtificialVariableOffset());  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(getNumObjectiveFunctions(),  getArtificialVariableOffset());  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(getNumObjectiveFunctions(),  getArtificialVariableOffset());	  columnsToDrop.add(getNumObjectiveFunctions());    	non-compiled	[CE]  not  a  statement	65	None	replace
137	[BUG]  [BUGGY]  columnsToDrop.add(getPhase1Objective());  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(getPhase1Objective());  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(getPhase1Objective());	  columnsToDrop.add(getNumObjectiveFunctions());    	non-compiled	[CE]  not  a  statement	65	None	replace
138	[BUG]  [BUGGY]  int  maxUlps  =  table.getMaximumUlps()  +  1;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  int  maxUlps  =  table.getMaximumUlps()  +  1;  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	int  maxUlps  =  table.getMaximumUlps()  +  1;	  int    maxUlps    =    table.getMaximumUlps();    	non-compiled	[CE]  not  a  statement	89	None	replace
139	[BUG]  [BUGGY]  int  maxUlps  =  table.getMaximumUlps()  -  1;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  int  maxUlps  =  table.getMaximumUlps()  -  1;  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	int  maxUlps  =  table.getMaximumUlps()  -  1;	  int    maxUlps    =    table.getMaximumUlps();    	non-compiled	[CE]  not  a  statement	89	None	replace
140	[BUG]  [BUGGY]  int  maxUlps  =  table.getMinimumUlps();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  int  maxUlps  =  table.getMinimumUlps();  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	int  maxUlps  =  table.getMinimumUlps();	  int    maxUlps    =    table.getMaximumUlps();    	non-compiled	[CE]  not  a  statement	89	None	replace
141	[BUG]  [BUGGY]  Collections.sort(columnLabels,  getArtificialVariableOffset(),  columnsToDrop);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Collections.sort(columnLabels,  getArtificialVariableOffset(),  columnsToDrop);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Collections.sort(columnLabels,  getArtificialVariableOffset(),  columnsToDrop);	  Collections.sort(columnLabels,    getArtificialVariableOffset());    	non-compiled	[CE]  not  a  statement	17	None	replace
142	[BUG]  [BUGGY]  Collections.sort(columnLabels,  getArtificialVariableOffset(),  columnLabels);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Collections.sort(columnLabels,  getArtificialVariableOffset(),  columnLabels);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Collections.sort(columnLabels,  getArtificialVariableOffset(),  columnLabels);	  Collections.sort(columnLabels,    getArtificialVariableOffset());    	non-compiled	[CE]  not  a  statement	17	None	replace
143	[BUG]  [BUGGY]  Collections.sort(columnLabels,  getArtificialVariableOffset()  +  1);  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Collections.sort(columnLabels,  getArtificialVariableOffset()  +  1);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Collections.sort(columnLabels,  getArtificialVariableOffset()  +  1);	  Collections.sort(columnLabels,    getArtificialVariableOffset());    	non-compiled	[CE]  not  a  statement	17	None	replace
144	[BUG]  [BUGGY]  Collections.sort(columnLabels,  getArtificialVariableOffset(),  col);  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Collections.sort(columnLabels,  getArtificialVariableOffset(),  col);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Collections.sort(columnLabels,  getArtificialVariableOffset(),  col);	  Collections.sort(columnLabels,    getArtificialVariableOffset());    	non-compiled	[CE]  not  a  statement	17	None	replace
145	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  Lists.newArrayList(1);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  List  <  Integer>  columnsToDrop  =  Lists.newArrayList(1);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	List  <  Integer>  columnsToDrop  =  Lists.newArrayList(1);	  List    <    Integer>    columnsToDrop    =    Lists.newArrayList(0);    	non-compiled	[CE]  not  a  statement	31	None	replace
146	[BUG]  [BUGGY]  columnsToDrop.add(0,  0,  0);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(0,  0,  0);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(0,  0,  0);	  columnsToDrop.add(0,    0,    1);    	non-compiled	[CE]  not  a  statement	54	None	replace
147	[BUG]  [BUGGY]  columnsToDrop.add(0,  0,  2);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(0,  0,  2);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(0,  0,  2);	  columnsToDrop.add(0,    0,    1);    	non-compiled	[CE]  not  a  statement	54	None	replace
148	[BUG]  [BUGGY]  columnsToDrop.add(0,  0,  3);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(0,  0,  3);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(0,  0,  3);	  columnsToDrop.add(0,    0,    1);    	non-compiled	[CE]  ';'  expected	54	None	replace
149	[BUG]  [BUGGY]  ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(getColumnLabels());  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(getColumnLabels());  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(getColumnLabels());	  ArrayList    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(getNumObjectiveFunctions());    	non-compiled	[CE]  ';'  expected	70	None	replace
150	[BUG]  [BUGGY]  ColumnLabels.remove(columnLabels.size());  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  ColumnLabels.remove(columnLabels.size());  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	ColumnLabels.remove(columnLabels.size());	  columnsToDrop.remove(columnLabels.size()    -    1);    	non-compiled	[CE]  ';'  expected	41	None	replace
151	[BUG]  [BUGGY]  ColumnLabels  columnsToDrop.remove(columnLabels.size());  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  ColumnLabels  columnsToDrop.remove(columnLabels.size());  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	ColumnLabels  columnsToDrop.remove(columnLabels.size());	  columnsToDrop.remove(columnLabels.size()    -    1);    	non-compiled	[CE]  ';'  expected	41	None	replace
152	[BUG]  [BUGGY]  Collections.sort(columnLabels,  columnsToDrop,  columnLabels);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Collections.sort(columnLabels,  columnsToDrop,  columnLabels);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Collections.sort(columnLabels,  columnsToDrop,  columnLabels);	  Collections.sort(columnLabels,    columnsToDrop);    	non-compiled	[CE]  ';'  expected	15	None	replace
153	[BUG]  [BUGGY]  Collections.reverse(columnLabels,  column);  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Collections.reverse(columnLabels,  column);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Collections.reverse(columnLabels,  column);	  Collections.reverse(columnLabels,    col);    	non-compiled	[CE]  ';'  expected	52	None	replace
154	[BUG]  [BUGGY]  ColumnLabels.remove(columnsToDrop);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  ColumnLabels.remove(columnsToDrop);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	ColumnLabels.remove(columnsToDrop);	  ColumnLabels.clear();    	non-compiled	[CE]  ';'  expected	40	None	replace
155	[BUG]  [BUGGY]  int  maxUlps  =  matrix.getMaxUlps()  /  1;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  int  maxUlps  =  matrix.getMaxUlps()  /  1;  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	int  maxUlps  =  matrix.getMaxUlps()  /  1;	  int    maxUlps    =    matrix.getMaxUlps()    +    1;    	non-compiled	[CE]  ';'  expected	8	None	replace
156	[BUG]  [BUGGY]  int  maxUlps  =  matrix.getMaximumUlps()  /  1;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  int  maxUlps  =  matrix.getMaximumUlps()  /  1;  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	int  maxUlps  =  matrix.getMaximumUlps()  /  1;	  int    maxUlps    =    matrix.getMaximumUlps()    +    1;    	non-compiled	[CE]  ';'  expected	46	None	replace
157	[BUG]  [BUGGY]  ColumnLabels.add(columnsToDrop,  1);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  ColumnLabels.add(columnsToDrop,  1);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	ColumnLabels.add(columnsToDrop,  1);	  ColumnLabels.add(columnsToDrop,    0);    	non-compiled	[CE]  ';'  expected	62	None	replace
158	[BUG]  [BUGGY]  ColumnLabels.add(columnsToDrop,  0,  columnsToDrop.length);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  ColumnLabels.add(columnsToDrop,  0,  columnsToDrop.length);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	ColumnLabels.add(columnsToDrop,  0,  columnsToDrop.length);	  ColumnLabels.add(columnsToDrop,    0);    	non-compiled	[CE]  ';'  expected	62	None	replace
159	[BUG]  [BUGGY]  int  maxUlps  =  columnsToDrop.getMaximumUlps();  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  int  maxUlps  =  columnsToDrop.getMaximumUlps();  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	int  maxUlps  =  columnsToDrop.getMaximumUlps();	  int    maxUlps    =    columnLabels.getMaximumUlps();    	non-compiled	[CE]  ';'  expected	48	None	replace
160	[BUG]  [BUGGY]  int  maxUlps  =  columnLabels.getMaximumUlps()  +  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  int  maxUlps  =  columnLabels.getMaximumUlps()  +  1;  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	int  maxUlps  =  columnLabels.getMaximumUlps()  +  1;	  int    maxUlps    =    columnLabels.getMaximumUlps();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
161	[BUG]  [BUGGY]  int  maxUlps  =  this.columnLabels.getMaximumUlps();  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  int  maxUlps  =  this.columnLabels.getMaximumUlps();  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	int  maxUlps  =  this.columnLabels.getMaximumUlps();	  int    maxUlps    =    columnLabels.getMaximumUlps();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
162	[BUG]  [BUGGY]  columnsToDrop.add(0,  table.size()  -  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(0,  table.size()  -  1);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(0,  table.size()  -  1);	  columnsToDrop.add(0,    table);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
163	[BUG]  [BUGGY]  columnsToDrop.add(0,  table.getColumnLength());  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(0,  table.getColumnLength());  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(0,  table.getColumnLength());	  columnsToDrop.add(0,    table);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
164	[BUG]  [BUGGY]  columnsToDrop.add(0,  table.getColumnLabels());  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(0,  table.getColumnLabels());  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(0,  table.getColumnLabels());	  columnsToDrop.add(0,    table);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
165	[BUG]  [BUGGY]  int  maxUlps  =  getMinimumUlps()  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  int  maxUlps  =  getMinimumUlps()  +  1;  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	int  maxUlps  =  getMinimumUlps()  +  1;	  int    maxUlps    =    getMinimumUlps();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
166	[BUG]  [BUGGY]  int  maxUlps  =  getMinimumUlps()  -  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  int  maxUlps  =  getMinimumUlps()  -  1;  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	int  maxUlps  =  getMinimumUlps()  -  1;	  int    maxUlps    =    getMinimumUlps();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
167	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(getArtificialVariables());  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(getArtificialVariables());  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(getArtificialVariables());	  List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(getNumArtificialVariables());    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
168	[BUG]  [BUGGY]  Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>(getNumArtificialVariables());  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>(getNumArtificialVariables());  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>(getNumArtificialVariables());	  List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(getNumArtificialVariables());    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
169	[BUG]  [BUGGY]  ColumnLabels.add(0,  columnsToDrop);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  ColumnLabels.add(0,  columnsToDrop);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	ColumnLabels.add(0,  columnsToDrop);	  ColumnLabels.add(0,    columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
170	[BUG]  [BUGGY]  ColumnLabels.add(0,  columnLabels,  columnsToDrop);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  ColumnLabels.add(0,  columnLabels,  columnsToDrop);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	ColumnLabels.add(0,  columnLabels,  columnsToDrop);	  ColumnLabels.add(0,    columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
171	[BUG]  [BUGGY]  ColumnLabels.add(columnsToDrop,  column);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  ColumnLabels.add(columnsToDrop,  column);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	ColumnLabels.add(columnsToDrop,  column);	  ColumnLabels.add(columnsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
172	[BUG]  [BUGGY]  columnsToDrop.add(0,  columnsToDrop  -  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(0,  columnsToDrop  -  1);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(0,  columnsToDrop  -  1);	  columnsToDrop.add(0,    columnLabels    -    1);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
173	[BUG]  [BUGGY]  columnsToDrop.add(0,  getPhase());  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(0,  getPhase());  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(0,  getPhase());	  columnsToDrop.add(0,    getArtificialVariableOffset());    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
174	[BUG]  [BUGGY]  columnsToDrop.add(0,  getNumberOfObjectiveFunctions());  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(0,  getNumberOfObjectiveFunctions());  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(0,  getNumberOfObjectiveFunctions());	  columnsToDrop.add(0,    getArtificialVariableOffset());    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
175	[BUG]  [BUGGY]  Integer[]  columnsToDrop  =  getColumnLabels().toArray(columnsToDrop);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Integer[]  columnsToDrop  =  getColumnLabels().toArray(columnsToDrop);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Integer[]  columnsToDrop  =  getColumnLabels().toArray(columnsToDrop);	  Integer[]    columnsToDrop    =    getColumnLabels();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
176	[BUG]  [BUGGY]  Table  <  Integer>  table  =  getTable().clone();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Table  <  Integer>  table  =  getTable().clone();  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Table  <  Integer>  table  =  getTable().clone();	  Table    <    Integer>    table    =    getTable().getTables();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
177	[BUG]  [BUGGY]  Collections.sort(columnLabels,  0,  col);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Collections.sort(columnLabels,  0,  col);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Collections.sort(columnLabels,  0,  col);	  Collections.sort(columnLabels,    DEFAULT_ULPS);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
178	[BUG]  [BUGGY]  Collections.sort(columnLabels,  0,  columnsToDrop);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Collections.sort(columnLabels,  0,  columnsToDrop);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Collections.sort(columnLabels,  0,  columnsToDrop);	  Collections.sort(columnLabels,    DEFAULT_ULPS);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
179	[BUG]  [BUGGY]  int  maxUlps  =  this.columnLabels.getMaxUlps();  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  int  maxUlps  =  this.columnLabels.getMaxUlps();  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	int  maxUlps  =  this.columnLabels.getMaxUlps();	  int    maxUlps    =    columnLabels.getMaxUlps();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
180	[BUG]  [BUGGY]  int  maxUlps  =  this.table.getMaximumUlps();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  int  maxUlps  =  this.table.getMaximumUlps();  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	int  maxUlps  =  this.table.getMaximumUlps();	  int    maxUlps    =    table.getMaximumUlps();    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
181	[BUG]  [BUGGY]  ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(getArtificialVariableOffset());  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(getArtificialVariableOffset());  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(getArtificialVariableOffset());	  List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(getArtificialVariableOffset()    +    1);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
182	[BUG]  [BUGGY]  columnsToDrop.add(0,  0,  col);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(0,  0,  col);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(0,  0,  col);	  columnsToDrop.add(0,    col);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
183	[BUG]  [BUGGY]  int  maxUlps  =  this.table.getMaxUlps();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  int  maxUlps  =  this.table.getMaxUlps();  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	int  maxUlps  =  this.table.getMaxUlps();	  int    maxUlps    =    table.getMaxUlps();    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
184	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(table.size());  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(table.size());  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(table.size());	  List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(columnLabels.size()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
185	[BUG]  [BUGGY]  ColumnLabels.add(columnsToDrop,  matrix);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  ColumnLabels.add(columnsToDrop,  matrix);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	ColumnLabels.add(columnsToDrop,  matrix);	  ColumnLabels.add(columnLabelsToDrop,    columnsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
186	[BUG]  [BUGGY]  Collections.reverse(columnLabels,  0,  columnLabels);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Collections.reverse(columnLabels,  0,  columnLabels);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Collections.reverse(columnLabels,  0,  columnLabels);	  Collections.reverse(columnLabels,    columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
187	[BUG]  [BUGGY]  int  maxUlps  =  matrix.getMaximumUlps()  /  2;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  int  maxUlps  =  matrix.getMaximumUlps()  /  2;  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	int  maxUlps  =  matrix.getMaximumUlps()  /  2;	  int    maxUlps    =    matrix.getMaximumUlps()    /    DEFAULT_ULPS;    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
188	[BUG]  [BUGGY]  int  maxUlps  =  this.columnLabels.size();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  int  maxUlps  =  this.columnLabels.size();  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	int  maxUlps  =  this.columnLabels.size();	  int    maxUlps    =    columnLabels.size();    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
189	[BUG]  [BUGGY]  ColumnLabelsToDrop  <  NEGATIVE_VAR_COLUMN_LABEL  ||  colLabelsToDrop!=  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  [CE]  >  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  ColumnLabelsToDrop  <  NEGATIVE_VAR_COLUMN_LABEL  ||  colLabelsToDrop!=  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	ColumnLabelsToDrop  <  NEGATIVE_VAR_COLUMN_LABEL  ||  colLabelsToDrop!=  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {	  if(columnLabelsToDrop!=    null)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabelsToDrop.add(i);    }    	non-compiled	[CE]  >  expected	73	None	replace
190	[BUG]  [BUGGY]  ColumnLabelsToDrop  <  NEGATIVE_VAR_COLUMN_LABEL)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.  [CE]  >  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  ColumnLabelsToDrop  <  NEGATIVE_VAR_COLUMN_LABEL)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	ColumnLabelsToDrop  <  NEGATIVE_VAR_COLUMN_LABEL)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.	  if(columnLabelsToDrop!=    null)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabelsToDrop.add(i);    }    	non-compiled	[CE]  >  expected	73	None	replace
191	[BUG]  [BUGGY]  ColumnLabelsToDrop  <  NEGATIVE_VAR_COLUMN_LABEL  ||  colLabelsToDrop  ==  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToD  [CE]  >  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  ColumnLabelsToDrop  <  NEGATIVE_VAR_COLUMN_LABEL  ||  colLabelsToDrop  ==  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToD  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	ColumnLabelsToDrop  <  NEGATIVE_VAR_COLUMN_LABEL  ||  colLabelsToDrop  ==  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToD	  if(columnLabelsToDrop    ==    null)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabelsToDrop.add(i);    }    	non-compiled	[CE]  >  expected	74	None	replace
192	[BUG]  [BUGGY]  ColumnLabelsToDrop  <  NEGATIVE_VAR_COLUMN_LABEL  ||  colLabelsToDrop  ==  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  [CE]  >  expected  [FE]                          AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  ColumnLabelsToDrop  <  NEGATIVE_VAR_COLUMN_LABEL  ||  colLabelsToDrop  ==  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	ColumnLabelsToDrop  <  NEGATIVE_VAR_COLUMN_LABEL  ||  colLabelsToDrop  ==  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {	  if(columnLabelsToDrop    ==    null)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabelsToDrop.add(i);    }    	non-compiled	[CE]  >  expected	74	None	replace
193	[BUG]  [BUGGY]  columnsToDrop.add(0,  Table.NONE)+  1;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(0,  Table.NONE)+  1;  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(0,  Table.NONE)+  1;	  columnsToDrop.add(0,    Table.NONE);    	non-compiled	[CE]  not  a  statement	80	None	replace
194	[BUG]  [BUGGY]  columnsToDrop.add(0,  Math.min(columnLabels.size()  -  2,  intValue));  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(0,  Math.min(columnLabels.size()  -  2,  intValue));  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(0,  Math.min(columnLabels.size()  -  2,  intValue));	  columnsToDrop.add(0,    intValue);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
195	[BUG]  [BUGGY]  ColumnLabels.add(columnsToDrop,  0,  columnsToDrop);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  ColumnLabels.add(columnsToDrop,  0,  columnsToDrop);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	ColumnLabels.add(columnsToDrop,  0,  columnsToDrop);	  ColumnLabels.add(columnsToDrop,    0);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
196	[BUG]  [BUGGY]  Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>();  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>();	  List    <    Integer>    columnsToDrop    =    new    LinkedList    <    Integer>();    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
197	[BUG]  [BUGGY]  Collections.sort(columnLabels,  columnsToDrop,  0);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Collections.sort(columnLabels,  columnsToDrop,  0);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Collections.sort(columnLabels,  columnsToDrop,  0);	  Collections.sort(columnLabels,    columnsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
198	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(getColumnUlps());  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(getColumnUlps());  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(getColumnUlps());	  List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(getMaxUlps());    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
199	[BUG]  [BUGGY]  Collections.reverse(columnLabels,  0,  col);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Collections.reverse(columnLabels,  0,  col);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Collections.reverse(columnLabels,  0,  col);	  Collections.reverse(columnLabels,    DEFAULT_ULPS);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
200	[BUG]  [BUGGY]  Collections.reverse(columnLabels,  0,  columnLabels.length);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Collections.reverse(columnLabels,  0,  columnLabels.length);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Collections.reverse(columnLabels,  0,  columnLabels.length);	  Collections.reverse(columnLabels,    DEFAULT_ULPS);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
201	[BUG]  [BUGGY]  Set  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size());  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Set  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size());  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Set  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(columnLabels.size());	  List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(columnLabels.size()    +    1);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
202	[BUG]  [BUGGY]  Collections.sort(columnLabels,  new  LinearObjectiveFunction[][]  {  matrix  }  );  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Collections.sort(columnLabels,  new  LinearObjectiveFunction[][]  {  matrix  }  );  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Collections.sort(columnLabels,  new  LinearObjectiveFunction[][]  {  matrix  }  );	  Collections.sort(columnLabels,    matrix);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
203	[BUG]  [BUGGY]  Collections.sort(columnLabels,  0,  matrix);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Collections.sort(columnLabels,  0,  matrix);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Collections.sort(columnLabels,  0,  matrix);	  Collections.sort(columnLabels,    matrix);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
204	[BUG]  [BUGGY]  Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>(columnLabels.size()  -  2);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>(columnLabels.size()  -  2);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Set  <  Integer>  columnsToDrop  =  new  HashSet  <  Integer>(columnLabels.size()  -  2);	  Set    <    Integer>    columnsToDrop    =    new    HashSet    <    Integer>(columnLabels.size());    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
205	[BUG]  [BUGGY]  columnsToDrop.add(0,  maxUlps  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(0,  maxUlps  +  1);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(0,  maxUlps  +  1);	  columnsToDrop.add(0,    columnLabels    +    1);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
206	[BUG]  [BUGGY]  columnsToDrop.add(i  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(i  +  1);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(i  +  1);	  columnsToDrop.add(i);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
207	[BUG]  [BUGGY]  columnsToDrop.add(i  -  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(i  -  1);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(i  -  1);	  columnsToDrop.add(i);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
208	[BUG]  [BUGGY]  ColumnLabels.add(column,  column);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  ColumnLabels.add(column,  column);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	ColumnLabels.add(column,  column);	  ColumnLabels.add(columnLabelsToDrop,    column);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
209	[BUG]  [BUGGY]  ColumnLabels.add(column,  columnsToDrop);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  ColumnLabels.add(column,  columnsToDrop);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	ColumnLabels.add(column,  columnsToDrop);	  ColumnLabels.add(columnLabelsToDrop,    column);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
210	[BUG]  [BUGGY]  ColumnLabels.add(columnToDrop,  column);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  ColumnLabels.add(columnToDrop,  column);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	ColumnLabels.add(columnToDrop,  column);	  ColumnLabels.add(columnLabelsToDrop,    column);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
211	[BUG]  [BUGGY]  ColumnLabelsToDrop  <  NEGATIVE_VAR_COLUMN_LABEL  ||  colLabelsToDrop  ==  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsTo  [CE]  >  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  ColumnLabelsToDrop  <  NEGATIVE_VAR_COLUMN_LABEL  ||  colLabelsToDrop  ==  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsTo  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	ColumnLabelsToDrop  <  NEGATIVE_VAR_COLUMN_LABEL  ||  colLabelsToDrop  ==  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsTo	  if(columnLabelsToDrop    ==    null)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  >  expected	72	None	replace
212	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  Lists.newArrayList(maxUlps);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  List  <  Integer>  columnsToDrop  =  Lists.newArrayList(maxUlps);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	List  <  Integer>  columnsToDrop  =  Lists.newArrayList(maxUlps);	  List    <    Integer>    columnsToDrop    =    Lists.newArrayList(columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
213	[BUG]  [BUGGY]  ColumnLabels.add(columnLabelsToDrop,  0);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  ColumnLabels.add(columnLabelsToDrop,  0);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	ColumnLabels.add(columnLabelsToDrop,  0);	  ColumnLabels.add(columnLabelsToDrop,    columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
214	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps()  *  4;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  int  maxUlps  =  getMaximumUlps()  *  4;  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	int  maxUlps  =  getMaximumUlps()  *  4;	  int    maxUlps    =    getMaximumUlps()    *    DEFAULT_ULPS;    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
215	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps()  *  1;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  int  maxUlps  =  getMaximumUlps()  *  1;  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	int  maxUlps  =  getMaximumUlps()  *  1;	  int    maxUlps    =    getMaximumUlps()    *    DEFAULT_ULPS;    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
216	[BUG]  [BUGGY]  Collections.reverse(this.columnLabels,  this.maxUlps);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Collections.reverse(this.columnLabels,  this.maxUlps);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Collections.reverse(this.columnLabels,  this.maxUlps);	  Collections.reverse(this.columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
217	[BUG]  [BUGGY]  Collections.reverse(this.columnLabels,  DEFAULT_ULPS);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Collections.reverse(this.columnLabels,  DEFAULT_ULPS);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Collections.reverse(this.columnLabels,  DEFAULT_ULPS);	  Collections.reverse(this.columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
218	[BUG]  [BUGGY]  Collections.sort(columnLabels,  getNegativeVariableOffset());  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Collections.sort(columnLabels,  getNegativeVariableOffset());  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Collections.sort(columnLabels,  getNegativeVariableOffset());	  Collections.sort(columnLabels,    getArtificialVariableOffset());    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
219	[BUG]  [BUGGY]  Collections.sort(columnLabels,  getBase());  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Collections.sort(columnLabels,  getBase());  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Collections.sort(columnLabels,  getBase());	  Collections.sort(columnLabels,    getArtificialVariableOffset());    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
220	[BUG]  [BUGGY]  Collections.sort(columnLabels,  getNumberOfFunctions());  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Collections.sort(columnLabels,  getNumberOfFunctions());  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Collections.sort(columnLabels,  getNumberOfFunctions());	  Collections.sort(columnLabels,    getArtificialVariableOffset());    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
221	[BUG]  [BUGGY]  columnsToDrop.add(new  Integer(getNumObjectiveFunctions()  -  1));  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(new  Integer(getNumObjectiveFunctions()  -  1));  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(new  Integer(getNumObjectiveFunctions()  -  1));	  columnsToDrop.add(new    Integer(getNumObjectiveFunctions()));    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
222	[BUG]  [BUGGY]  Collections.reverse(columnLabels,  columnsToDrop,  0);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Collections.reverse(columnLabels,  columnsToDrop,  0);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Collections.reverse(columnLabels,  columnsToDrop,  0);	  Collections.reverse(columnLabels,    columnsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
223	[BUG]  [BUGGY]  Collections.reverse(columnLabels,  columnsToDrop,  DEFAULT_ULPS);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Collections.reverse(columnLabels,  columnsToDrop,  DEFAULT_ULPS);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Collections.reverse(columnLabels,  columnsToDrop,  DEFAULT_ULPS);	  Collections.reverse(columnLabels,    columnsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
224	[BUG]  [BUGGY]  LinearObjectiveFunction  table  =(LinearObjectiveFunction)this.table.get();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  LinearObjectiveFunction  table  =(LinearObjectiveFunction)this.table.get();  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	LinearObjectiveFunction  table  =(LinearObjectiveFunction)this.table.get();	  LinearObjectiveFunction    table    =(LinearObjectiveFunction)this.table.clone();    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
225	[BUG]  [BUGGY]  Table  <  Integer>  table  =  getTable().getInteger(1);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Table  <  Integer>  table  =  getTable().getInteger(1);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Table  <  Integer>  table  =  getTable().getInteger(1);	  Table    <    Integer>    table    =    getTable().removeInteger(0);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
226	[BUG]  [BUGGY]  Table  <  Integer>  table  =  getTable().get(columnsToDrop);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Table  <  Integer>  table  =  getTable().get(columnsToDrop);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Table  <  Integer>  table  =  getTable().get(columnsToDrop);	  Table    <    Integer>    table    =    getTable().removeInteger(0);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
227	[BUG]  [BUGGY]  ColumnLabelsToDrop  <  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  ColumnLabelsToDrop  <  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	ColumnLabelsToDrop  <  null)  {  for(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i);  }	  if(columnLabelsToDrop!=    null)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
228	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  Lists.newLinkedList(columnLabels);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  List  <  Integer>  columnsToDrop  =  Lists.newLinkedList(columnLabels);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	List  <  Integer>  columnsToDrop  =  Lists.newLinkedList(columnLabels);	  List    <    Integer>    columnsToDrop    =    Lists.newLinkedList();    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
229	[BUG]  [BUGGY]  Table  <  Integer>  table  =(Table  <  Integer>)this.getTable();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Table  <  Integer>  table  =(Table  <  Integer>)this.getTable();  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Table  <  Integer>  table  =(Table  <  Integer>)this.getTable();	  Table    <    Integer>    table    =    this.getTable();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
230	[BUG]  [BUGGY]  LinearObjectiveFunction  table  =(LinearObjectiveFunction)this.table.getData();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  LinearObjectiveFunction  table  =(LinearObjectiveFunction)this.table.getData();  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	LinearObjectiveFunction  table  =(LinearObjectiveFunction)this.table.getData();	  LinearObjectiveFunction    table    =(LinearObjectiveFunction)this.table.getTable();    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
231	[BUG]  [BUGGY]  columnsToDrop.add(maxUlps  -  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(maxUlps  -  1);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(maxUlps  -  1);	  columnsToDrop.add(intValue    -    1);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
232	[BUG]  [BUGGY]  columnsToDrop.add(new  Integer(getNumObjectiveFunctions(),  getMinimumUlps()));  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(new  Integer(getNumObjectiveFunctions(),  getMinimumUlps()));  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(new  Integer(getNumObjectiveFunctions(),  getMinimumUlps()));	  columnsToDrop.add(new    Integer(getNumObjectiveFunctions(),    getMaxUlps()));    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
233	[BUG]  [BUGGY]  LinearObjectiveFunction  table  =(LinearObjectiveFunction)this.columnLabels.clone();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  LinearObjectiveFunction  table  =(LinearObjectiveFunction)this.columnLabels.clone();  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	LinearObjectiveFunction  table  =(LinearObjectiveFunction)this.columnLabels.clone();	  LinearObjectiveFunction    table    =(LinearObjectiveFunction)getTable().clone();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
234	[BUG]  [BUGGY]  Set  <  Integer>  columnsToDrop  =  new  TreeSet  <  Integer>(columnLabels.size());  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Set  <  Integer>  columnsToDrop  =  new  TreeSet  <  Integer>(columnLabels.size());  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Set  <  Integer>  columnsToDrop  =  new  TreeSet  <  Integer>(columnLabels.size());	  List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(columnLabels.size()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
235	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps()  /  DEFAULT_ULPS  +  1;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  int  maxUlps  =  getMaximumUlps()  /  DEFAULT_ULPS  +  1;  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	int  maxUlps  =  getMaximumUlps()  /  DEFAULT_ULPS  +  1;	  int    maxUlps    =    getMaximumUlps()    /    DEFAULT_ULPS;    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
236	[BUG]  [BUGGY]  Collections.sort(columnLabels,  columns);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Collections.sort(columnLabels,  columns);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Collections.sort(columnLabels,  columns);	  Collections.sort(columnLabels,    columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
237	[BUG]  [BUGGY]  Collections.sort(columnLabels,  columnsToDrop,  columnsToDrop);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Collections.sort(columnLabels,  columnsToDrop,  columnsToDrop);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Collections.sort(columnLabels,  columnsToDrop,  columnsToDrop);	  Collections.sort(columnLabels,    columnsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
238	[BUG]  [BUGGY]  Collections.sort(columnLabels,  columnsToDrop,  columnLength);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Collections.sort(columnLabels,  columnsToDrop,  columnLength);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Collections.sort(columnLabels,  columnsToDrop,  columnLength);	  Collections.sort(columnLabels,    columnsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
239	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  Lists.newArrayList(columnLabels,  columnsToDrop);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  List  <  Integer>  columnsToDrop  =  Lists.newArrayList(columnLabels,  columnsToDrop);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	List  <  Integer>  columnsToDrop  =  Lists.newArrayList(columnLabels,  columnsToDrop);	  List    <    Integer>    columnsToDrop    =    Lists.newArrayList(columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
240	[BUG]  [BUGGY]  Collections.sort(columnLabels,  DEFAULT_ULPS,  columnLabels);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Collections.sort(columnLabels,  DEFAULT_ULPS,  columnLabels);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Collections.sort(columnLabels,  DEFAULT_ULPS,  columnLabels);	  Collections.sort(columnLabels,    DEFAULT_ULPS);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
241	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(getColumnLabels(),  DEFAULT_ULPS);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(getColumnLabels(),  DEFAULT_ULPS);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(getColumnLabels(),  DEFAULT_ULPS);	  List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(getColumnLabels());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
242	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(getColumnLabels()  +  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(getColumnLabels()  +  1);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(getColumnLabels()  +  1);	  List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(getColumnLabels());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
243	[BUG]  [BUGGY]  Integer[]  columnsToDrop  =  getColumnLabels().toArray(columnLabels);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Integer[]  columnsToDrop  =  getColumnLabels().toArray(columnLabels);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Integer[]  columnsToDrop  =  getColumnLabels().toArray(columnLabels);	  Integer[]    columnsToDrop    =    getColumnLabels();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
244	[BUG]  [BUGGY]  ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(getMaxUlps());  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(getMaxUlps());  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	ArrayList  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(getMaxUlps());	  ArrayList    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(getNumObjectiveFunctions());    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
245	[BUG]  [BUGGY]  columnsToDrop.add(0,  table.getSegmentCount());  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(0,  table.getSegmentCount());  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(0,  table.getSegmentCount());	  columnsToDrop.add(0,    table);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
246	[BUG]  [BUGGY]  if(columnLabelsToDrop!=  null)  {  for(int  i  =  getNumObjectiveFunctions().size();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  if(columnLabelsToDrop!=  null)  {  for(int  i  =  getNumObjectiveFunctions().size();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	if(columnLabelsToDrop!=  null)  {  for(int  i  =  getNumObjectiveFunctions().size();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i);  }	  if(columnLabelsToDrop    ==    null)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabelsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
247	[BUG]  [BUGGY]  colLabelsToDrop.add(columnLabelsToDrop);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  colLabelsToDrop.add(columnLabelsToDrop);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	colLabelsToDrop.add(columnLabelsToDrop);	  if(columnLabelsToDrop    ==    null)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnLabelsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
248	[BUG]  [BUGGY]  Collections.sort(columnLabels,  getColumnLabels());  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Collections.sort(columnLabels,  getColumnLabels());  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Collections.sort(columnLabels,  getColumnLabels());	  Collections.sort(columnLabels,    getArtificialVariableOffset());    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
249	[BUG]  [BUGGY]  columnsToDrop.add(0,  columnsToDrop  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(0,  columnsToDrop  +  1);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(0,  columnsToDrop  +  1);	  columnsToDrop.add(0,    columnLabels    +    1);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
250	[BUG]  [BUGGY]  int  maxUlps  =  table.getMaxUlps()  /  DEFAULT_ULPS;  [CE]  '.class'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  int  maxUlps  =  table.getMaxUlps()  /  DEFAULT_ULPS;  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	int  maxUlps  =  table.getMaxUlps()  /  DEFAULT_ULPS;	  int    maxUlps    =    table.getMaxUlps();    	non-compiled	[CE]  '.class'  expected	53	None	replace
251	[BUG]  [BUGGY]  columnsToDrop.add(new  Integer(getPhase()));  [CE]  '.class'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(new  Integer(getPhase()));  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(new  Integer(getPhase()));	  columnsToDrop.add(new    Integer(getNumObjectiveFunctions()));    	non-compiled	[CE]  '.class'  expected	36	None	replace
252	[BUG]  [BUGGY]  columnsToDrop.add(new  Integer(getArtificialVariableOffset()));  [CE]  '.class'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(new  Integer(getArtificialVariableOffset()));  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(new  Integer(getArtificialVariableOffset()));	  columnsToDrop.add(new    Integer(getNumObjectiveFunctions()));    	non-compiled	[CE]  '.class'  expected	36	None	replace
253	[BUG]  [BUGGY]  columnsToDrop.add(new  Integer(getNumObjectiveFunctions(),  getMaxUlps()  -  1));  [CE]  '.class'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(new  Integer(getNumObjectiveFunctions(),  getMaxUlps()  -  1));  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(new  Integer(getNumObjectiveFunctions(),  getMaxUlps()  -  1));	  columnsToDrop.add(new    Integer(getNumObjectiveFunctions(),    getMaxUlps()));    	non-compiled	[CE]  '.class'  expected	79	None	replace
254	[BUG]  [BUGGY]  columnsToDrop.add(0,  0,  getArtificialVariableOffset());  [CE]  '.class'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(0,  0,  getArtificialVariableOffset());  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(0,  0,  getArtificialVariableOffset());	  columnsToDrop.add(0,    0);    	non-compiled	[CE]  '.class'  expected	38	None	replace
255	[BUG]  [BUGGY]  columnsToDrop.add(0,  columnsToDrop.size()  -  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(0,  columnsToDrop.size()  -  1);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(0,  columnsToDrop.size()  -  1);	  columnsToDrop.add(0,    columnLabels    -    1);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
256	[BUG]  [BUGGY]  columnsToDrop.add(0,  columnsToDrop.size  -  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(0,  columnsToDrop.size  -  1);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(0,  columnsToDrop.size  -  1);	  columnsToDrop.add(0,    columnLabels    -    1);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
257	[BUG]  [BUGGY]  Integer  maxUlps  =  getMaximumUlps();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Integer  maxUlps  =  getMaximumUlps();  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Integer  maxUlps  =  getMaximumUlps();	  int    maxUlps    =    getMaximumUlps()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
258	[BUG]  [BUGGY]  if(columnLabelsToDrop!=  null)  {  for(int  i  =  getNumIntegerFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  if(columnLabelsToDrop!=  null)  {  for(int  i  =  getNumIntegerFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	if(columnLabelsToDrop!=  null)  {  for(int  i  =  getNumIntegerFunctions();  i  <  getArtificialVariableOffset();  i++)  {  columnsToDrop.add(i);  }	  if(columnLabelsToDrop!=    null)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
259	[BUG]  [BUGGY]  int  maxUlps  =  table.getMaximumUlps()  *  DEFAULT_ULPS;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  int  maxUlps  =  table.getMaximumUlps()  *  DEFAULT_ULPS;  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	int  maxUlps  =  table.getMaximumUlps()  *  DEFAULT_ULPS;	  int    maxUlps    =    table.getMaximumUlps();    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
260	[BUG]  [BUGGY]  columnsToDrop.add(getPhase());  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(getPhase());  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(getPhase());	  columnsToDrop.add(getNumObjectiveFunctions());    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
261	[BUG]  [BUGGY]  Table  <  Integer>  table  =  getTable().get(0);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Table  <  Integer>  table  =  getTable().get(0);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Table  <  Integer>  table  =  getTable().get(0);	  Table    <    Integer>    table    =    getTable().removeInteger(0);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
262	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps()  *  DEFAULT_ULPS  +  1;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  int  maxUlps  =  getMaximumUlps()  *  DEFAULT_ULPS  +  1;  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	int  maxUlps  =  getMaximumUlps()  *  DEFAULT_ULPS  +  1;	  int    maxUlps    =    getMaximumUlps()    *    DEFAULT_ULPS;    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
263	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(4);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(4);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(4);	  List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(1);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
264	[BUG]  [BUGGY]  columnsToDrop.add(0,  Integer.MAX_VALUE,  DEFAULT_ULPS);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(0,  Integer.MAX_VALUE,  DEFAULT_ULPS);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(0,  Integer.MAX_VALUE,  DEFAULT_ULPS);	  columnsToDrop.add(0,    Integer.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
265	[BUG]  [BUGGY]  Table  <  Integer>  table  =  columnsToDrop.getTable();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Table  <  Integer>  table  =  columnsToDrop.getTable();  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Table  <  Integer>  table  =  columnsToDrop.getTable();	  Table    <    Integer>    table    =    this.getTable();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
266	[BUG]  [BUGGY]  columnsToDrop.add(0,  Table.NONE  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(0,  Table.NONE  +  1);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(0,  Table.NONE  +  1);	  columnsToDrop.add(0,    Table.NONE);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
267	[BUG]  [BUGGY]  columnsToDrop.add(new  Integer(table.size()));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(new  Integer(table.size()));  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(new  Integer(table.size()));	  columnsToDrop.add(new    Integer(columnLabels.size()    -    1));    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
268	[BUG]  [BUGGY]  ColumnLabels.this.add(columnLabelsToDrop);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  ColumnLabels.this.add(columnLabelsToDrop);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	ColumnLabels.this.add(columnLabelsToDrop);	  if(columnLabelsToDrop    ==    null)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
269	[BUG]  [BUGGY]  Integer  columnLabels  =  columnsToDrop.get(i);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Integer  columnLabels  =  columnsToDrop.get(i);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Integer  columnLabels  =  columnsToDrop.get(i);	  if(columnLabelsToDrop    ==    null)    {    for(int    i    =    getNumObjectiveFunctions();    i    <    getArtificialVariableOffset();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  ')'  expected	72	None	replace
270	[BUG]  [BUGGY]  columnsToDrop.add(0,  this.maxUlps);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(0,  this.maxUlps);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(0,  this.maxUlps);	  columnsToDrop.add(0,    intValue);    	non-compiled	[CE]  ')'  expected	81	None	replace
271	[BUG]  [BUGGY]  columnsToDrop.add(new  Integer(getMaxUlps()));  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(new  Integer(getMaxUlps()));  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(new  Integer(getMaxUlps()));	  columnsToDrop.add(i);    	non-compiled	[CE]  ')'  expected	66	None	replace
272	[BUG]  [BUGGY]  columnsToDrop.add(0,  1,  1);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(0,  1,  1);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(0,  1,  1);	  columnsToDrop.add(0,    0,    1);    	non-compiled	[CE]  ')'  expected	54	None	replace
273	[BUG]  [BUGGY]  columnsToDrop.add(0,  DEFAULT_ULPS);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  columnsToDrop.add(0,  DEFAULT_ULPS);  [BUGGY]        for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	columnsToDrop.add(0,  DEFAULT_ULPS);	  columnsToDrop.add(0,    col);    	non-compiled	[CE]  ')'  expected	23	None	replace
274	[BUG]  [BUGGY]  Collections.reverse(columnLabels,  2);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  Collections.reverse(columnLabels,  2);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	Collections.reverse(columnLabels,  2);	  Collections.reverse(columnLabels,    0);    	non-compiled	[CE]  ')'  expected	68	None	replace
275	[BUG]  [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(getNumArtificialVariables()  +  1);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();      [BUGGY]  List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(getNumArtificialVariables()  +  1);  [BUGGY]      columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math42/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.25	333	333	1	replace	List  <  Integer>  columnsToDrop  =  new  ArrayList  <  Integer>(getNumArtificialVariables()  +  1);	  List    <    Integer>    columnsToDrop    =    new    ArrayList    <    Integer>(getNumArtificialVariables());    	non-compiled	[CE]  ')'  expected	86	None	replace
