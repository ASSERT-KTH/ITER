bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ||  other.isNaN())  {  return  isNaN;  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]  ||  other.isNaN())  {  return  isNaN;  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	||  other.isNaN())  {  return  isNaN;	  ||    other.isInfinite())    {    return    isNaN;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
2	[BUG]  [BUGGY]  if(other  instanceof  Complex)  {  if(!(other  instanceof  Complex))  {  return  false;  }  [CE]  ';'  expected  [FE]                java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]  if(other  instanceof  Complex)  {  if(!(other  instanceof  Complex))  {  return  false;  }  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	if(other  instanceof  Complex)  {  if(!(other  instanceof  Complex))  {  return  false;  }	  if(!(other    instanceof    Complex))    {    if(other    instanceof    Complex)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	7	None	replace
3	[BUG]  [BUGGY]  Class  <?>  other  =  getClass();  [CE]  variable  other  is  already  defined  in  method  equals(Object)  [FE]        java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]  Class  <?>  other  =  getClass();  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	Class  <?>  other  =  getClass();	          if(other.getClass()!=    getClass())    {    throw    new    IllegalArgumentException(       "       ");    }    if(other.getClass()!=    getClass())    {    throw    new    IllegalArgumentException(   "   ".);    }    	non-compiled	[CE]  variable  other  is  already  defined  in  method  equals(Object)	29	None	replace
4	[BUG]  [BUGGY]  Class  <?>  other  =  this.getClass();  [CE]  variable  other  is  already  defined  in  method  equals(Object)  [FE]          java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]  Class  <?>  other  =  this.getClass();  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	Class  <?>  other  =  this.getClass();	          if(other.getClass()!=    getClass())    {    throw    new    IllegalArgumentException(       "       ");    }    if(other.getClass()!=    getClass())    {    throw    new    IllegalArgumentException(   "   ".);    }    	non-compiled	[CE]  variable  other  is  already  defined  in  method  equals(Object)	29	None	replace
5	[BUG]  [BUGGY]  if(!(other  instanceof  Complex))  {  [CE]  ';'  expected  [FE]              java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]  if(!(other  instanceof  Complex))  {  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	if(!(other  instanceof  Complex))  {	  if(other    instanceof    Complex)    {    	non-compiled	[CE]  ';'  expected	6	None	replace
6	[BUG]  [BUGGY]  if(other  instanceof  Complex  ==  false)  {  [CE]  ';'  expected  [FE]                java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]  if(other  instanceof  Complex  ==  false)  {  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	if(other  instanceof  Complex  ==  false)  {	  if(other    instanceof    Complex)    {    	non-compiled	[CE]  ';'  expected	6	None	replace
7	[BUG]  [BUGGY]  ||  isInfinite  ==  other.isInfinite())  {  return  isNaN;  [CE]  illegal  start  of  expression  [FE]            java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]  ||  isInfinite  ==  other.isInfinite())  {  return  isNaN;  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	||  isInfinite  ==  other.isInfinite())  {  return  isNaN;	  ||    isInfinite    ==    other.isInfinite())    {    return    isInfinite;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
8	[BUG]  [BUGGY]  ||  isNaN  ==  other.isNaN())  {  return  isInfinite;  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]  ||  isNaN  ==  other.isNaN())  {  return  isInfinite;  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	||  isNaN  ==  other.isNaN())  {  return  isInfinite;	  ||    isInfinite    ==    other.isInfinite())    {    return    isInfinite;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
9	[BUG]  [BUGGY]  ((  Complex)other).getClass()  ==  getClass())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]        java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]  ((  Complex)other).getClass()  ==  getClass())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	((  Complex)other).getClass()  ==  getClass())  {  throw  new  IllegalArgumentException( " ");  }	  ((    Complex)other).getClass()!=    getClass())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	8	None	replace
10	[BUG]  [BUGGY]  &&  isNaN.isInfinite())  {  return  isNaN  ||  isInfinite;  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]  &&  isNaN.isInfinite())  {  return  isNaN  ||  isInfinite;  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	&&  isNaN.isInfinite())  {  return  isNaN  ||  isInfinite;	  &&    isInfinite.isInfinite())    {    return    isInfinite    ||    isInfinite;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
11	[BUG]  [BUGGY]  &&  isInfinite.isNaN())  {  return  isInfinite  ||  isInfinite;  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]  &&  isInfinite.isNaN())  {  return  isInfinite  ||  isInfinite;  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	&&  isInfinite.isNaN())  {  return  isInfinite  ||  isInfinite;	  &&    isInfinite.isInfinite())    {    return    isInfinite    ||    isInfinite;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
12	[BUG]  [BUGGY]  if(!(other  instanceof  Complex))  {  if(other  instanceof  Complex)  {  return  isNaN;  }  [CE]  ';'  expected  [FE]                java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]  if(!(other  instanceof  Complex))  {  if(other  instanceof  Complex)  {  return  isNaN;  }  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	if(!(other  instanceof  Complex))  {  if(other  instanceof  Complex)  {  return  isNaN;  }	  if(other    instanceof    Complex)    {    Complex    c    =(Complex)other;    if(!isInfinite)    {    return    isNaN;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
13	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(-0.5  [FE]    java.lang.AssertionError:  expected:<(-0.5    [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]          if(other.getClass()!=    getClass())    {    return    false;    }    if(other.getClass()  ==  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	add	                if(other.getClass()!=        getClass())        {        return        false;        }        if(other.getClass()    ==    getClass())    {    return    false;    }    if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(-0.5  	20	16	add
14	[BUG]  [BUGGY]          if(other.getClass()!=    getClass())    {    return    false;    }    if(other.getClass()  ==  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }  [FE]  java.lang.AssertionError:  expected:<(-0.5  [FE]    java.lang.AssertionError:  expected:<(-0.5    [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]          if(other.getClass()!=    getClass())    {    return    false;    }    if(other.getClass()  ==  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	                if(other.getClass()!=        getClass())        {        return        false;        }        if(other.getClass()    ==    getClass())    {    return    false;    }    if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(-0.5  	20	16	add
15	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(-0.5  [FE]      java.lang.AssertionError:  expected:<(-0.5    [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]          if(other.getClass()!=    getClass())    {    return    false;    }    if(other.getClass()  ==  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	add	                if(other.getClass()!=        getClass())        {        return        false;        }        if(other.getClass()    ==    getClass())    {    return    false;    }    if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(-0.5  	20	16	add
16	[BUG]  [BUGGY]          if(other.getClass()!=    getClass())    {    return    false;    }    if(other.getClass()  ==  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }  [FE]  java.lang.AssertionError:  expected:<(-0.5  [FE]      java.lang.AssertionError:  expected:<(-0.5    [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]          if(other.getClass()!=    getClass())    {    return    false;    }    if(other.getClass()  ==  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	                if(other.getClass()!=        getClass())        {        return        false;        }        if(other.getClass()    ==    getClass())    {    return    false;    }    if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(-0.5  	20	16	add
17	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(-0.5  [FE]        java.lang.AssertionError:  expected:<(-0.5    [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]          if(other.getClass()!=    getClass())    {    return    false;    }    if(other.getClass()  ==  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()  ==  getClass())  {  return  false;  }  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	add	                if(other.getClass()!=        getClass())        {        return        false;        }        if(other.getClass()    ==    getClass())    {    return    false;    }    if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()  ==  getClass())  {  return  false;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(-0.5  	20	16	add
18	[BUG]  [BUGGY]          if(other.getClass()!=    getClass())    {    return    false;    }    if(other.getClass()  ==  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()  ==  getClass())  {  return  false;  }  [FE]  java.lang.AssertionError:  expected:<(-0.5  [FE]        java.lang.AssertionError:  expected:<(-0.5    [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]          if(other.getClass()!=    getClass())    {    return    false;    }    if(other.getClass()  ==  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()  ==  getClass())  {  return  false;  }  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	                if(other.getClass()!=        getClass())        {        return        false;        }        if(other.getClass()    ==    getClass())    {    return    false;    }    if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()  ==  getClass())  {  return  false;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(-0.5  	20	16	add
19	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]          if(other.getClass()!=    getClass())    {    return    true;    }    if(other.getClass()  ==  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	add	                if(other.getClass()!=        getClass())        {        return        true;        }        if(other.getClass()    ==    getClass())    {    return    true;    }    if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }	  	compilable	  [FE]  AssertionError  	15	2	add
20	[BUG]  [BUGGY]          if(other.getClass()!=    getClass())    {    return    true;    }    if(other.getClass()  ==  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]          if(other.getClass()!=    getClass())    {    return    true;    }    if(other.getClass()  ==  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	                if(other.getClass()!=        getClass())        {        return        true;        }        if(other.getClass()    ==    getClass())    {    return    true;    }    if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }	  	compilable	  [FE]  AssertionError  	15	2	add
21	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]          if(other.getClass()!=    getClass())    {    return    true;    }    if(other.getClass()  ==  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	add	                if(other.getClass()!=        getClass())        {        return        true;        }        if(other.getClass()    ==    getClass())    {    return    true;    }    if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }	  	compilable	  [FE]  AssertionError  	15	2	add
22	[BUG]  [BUGGY]          if(other.getClass()!=    getClass())    {    return    true;    }    if(other.getClass()  ==  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]          if(other.getClass()!=    getClass())    {    return    true;    }    if(other.getClass()  ==  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	                if(other.getClass()!=        getClass())        {        return        true;        }        if(other.getClass()    ==    getClass())    {    return    true;    }    if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }	  	compilable	  [FE]  AssertionError  	15	2	add
23	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]          if(other.getClass()!=    getClass())    {    return    true;    }    if(other.getClass()  ==  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()  ==  getClass())  {  return  true;  }  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	add	                if(other.getClass()!=        getClass())        {        return        true;        }        if(other.getClass()    ==    getClass())    {    return    true;    }    if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()  ==  getClass())  {  return  true;  }	  	compilable	  [FE]  AssertionError  	15	2	add
24	[BUG]  [BUGGY]          if(other.getClass()!=    getClass())    {    return    true;    }    if(other.getClass()  ==  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()  ==  getClass())  {  return  true;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]          if(other.getClass()!=    getClass())    {    return    true;    }    if(other.getClass()  ==  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()  ==  getClass())  {  return  true;  }  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	                if(other.getClass()!=        getClass())        {        return        true;        }        if(other.getClass()    ==    getClass())    {    return    true;    }    if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()  ==  getClass())  {  return  true;  }	  	compilable	  [FE]  AssertionError  	15	2	add
25	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]          if(other.getClass()!=    getClass())    {    return    true;    }    if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	add	                if(other.getClass()!=        getClass())        {        return        true;        }        if(other.getClass()!=    getClass())    {    return    true;    }    if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	13	1	add
26	[BUG]  [BUGGY]          if(other.getClass()!=    getClass())    {    return    true;    }    if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]          if(other.getClass()!=    getClass())    {    return    true;    }    if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	                if(other.getClass()!=        getClass())        {        return        true;        }        if(other.getClass()!=    getClass())    {    return    true;    }    if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	13	1	add
27	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]      java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]          if(other.getClass()!=    getClass())    {    return    true;    }    if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	add	                if(other.getClass()!=        getClass())        {        return        true;        }        if(other.getClass()!=    getClass())    {    return    true;    }    if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	13	1	add
28	[BUG]  [BUGGY]          if(other.getClass()!=    getClass())    {    return    true;    }    if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]      java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]          if(other.getClass()!=    getClass())    {    return    true;    }    if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	                if(other.getClass()!=        getClass())        {        return        true;        }        if(other.getClass()!=    getClass())    {    return    true;    }    if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	13	1	add
29	[BUG]  [BUGGY]          if(other.getClass()!=    getClass())    {    return    true;    }    if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true  [CE]  ';'  expected  [FE]        java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]          if(other.getClass()!=    getClass())    {    return    true;    }    if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	                if(other.getClass()!=        getClass())        {        return        true;        }        if(other.getClass()!=    getClass())    {    return    true;    }    if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true	  	non-compiled	[CE]  ';'  expected	13	None	add
30	[BUG]  [BUGGY]  if(other  instanceof  Complex)  {  if(other.getClass()!=  getClass())  {  return  false;  }  [CE]  ';'  expected  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]  if(other  instanceof  Complex)  {  if(other.getClass()!=  getClass())  {  return  false;  }  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	if(other  instanceof  Complex)  {  if(other.getClass()!=  getClass())  {  return  false;  }	          if(other.getClass()!=    getClass())    {    return    false;    }    if(other.getClass()!=    getClass())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	19	None	replace
31	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]          if(other.getClass()!=    getClass())    {    throw    new    IllegalArgumentException(     "     ");    }    if(other.getClass()!=  getClass())  {  throw  new  IllegalArgumentException(   "     ");  }  if(other.getClass()!=  getClass())  {  throw  new  IllegalArgumentException( " ");  }  if(other.getClass()!=  getClass())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	add	                if(other.getClass()!=        getClass())        {        throw        new        IllegalArgumentException(       "       ");        }        if(other.getClass()!=    getClass())    {    throw    new    IllegalArgumentException(   "       ");    }    if(other.getClass()!=  getClass())  {  throw  new  IllegalArgumentException( " ");  }  if(other.getClass()!=  getClass())  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	10	2	add
32	[BUG]  [BUGGY]          if(other.getClass()!=    getClass())    {    throw    new    IllegalArgumentException(     "     ");    }    if(other.getClass()!=  getClass())  {  throw  new  IllegalArgumentException(   "     ");  }  if(other.getClass()!=  getClass())  {  throw  new  IllegalArgumentException( " ");  }  if(other.getClass()!=  getClass())  {  throw  new  IllegalArgumentException( " ");  }  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]          if(other.getClass()!=    getClass())    {    throw    new    IllegalArgumentException(     "     ");    }    if(other.getClass()!=  getClass())  {  throw  new  IllegalArgumentException(   "     ");  }  if(other.getClass()!=  getClass())  {  throw  new  IllegalArgumentException( " ");  }  if(other.getClass()!=  getClass())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	                if(other.getClass()!=        getClass())        {        throw        new        IllegalArgumentException(       "       ");        }        if(other.getClass()!=    getClass())    {    throw    new    IllegalArgumentException(   "       ");    }    if(other.getClass()!=  getClass())  {  throw  new  IllegalArgumentException( " ");  }  if(other.getClass()!=  getClass())  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	10	2	add
33	[BUG]  [BUGGY]          if(other.getClass()!=    getClass())    {    throw    new    IllegalArgumentException(     "     ");    }    if(other.getClass()!=  getClass())  {  throw  new  IllegalArgumentException(   "     ");  }  if(other.getClass()!=  getClass())  {  throw  new  IllegalArgumentException( " ");  }  if(other.getClass()!=  getClass())  {  throw  new  IllegalArgumentException( " ");  }  if(other.getClass()!=  getClass())  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]      java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]          if(other.getClass()!=    getClass())    {    throw    new    IllegalArgumentException(     "     ");    }    if(other.getClass()!=  getClass())  {  throw  new  IllegalArgumentException(   "     ");  }  if(other.getClass()!=  getClass())  {  throw  new  IllegalArgumentException( " ");  }  if(other.getClass()!=  getClass())  {  throw  new  IllegalArgumentException( " ");  }  if(other.getClass()!=  getClass())  {  throw  new  Il  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	                if(other.getClass()!=        getClass())        {        throw        new        IllegalArgumentException(       "       ");        }        if(other.getClass()!=    getClass())    {    throw    new    IllegalArgumentException(   "       ");    }    if(other.getClass()!=  getClass())  {  throw  new  IllegalArgumentException( " ");  }  if(other.getClass()!=  getClass())  {  throw  new  IllegalArgumentException( " ");  }  if(other.getClass()!=  getClass())  {  throw  new  Il	  	non-compiled	[CE]  '('  or  '['  expected	10	None	add
34	[BUG]  [BUGGY]  ||  other.isInfinite())  {  return  isNaN  ||  denominator;  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]  ||  other.isInfinite())  {  return  isNaN  ||  denominator;  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	||  other.isInfinite())  {  return  isNaN  ||  denominator;	  ||    other.isInfinite())    {    return    isInfinite    ||    isNaN;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
35	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]          if(other.getClass()!=    getClass())    {    return    false;    }    if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	add	                if(other.getClass()!=        getClass())        {        return        false;        }        if(other.getClass()!=    getClass())    {    return    false;    }    if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	18	2	add
36	[BUG]  [BUGGY]          if(other.getClass()!=    getClass())    {    return    false;    }    if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]          if(other.getClass()!=    getClass())    {    return    false;    }    if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	                if(other.getClass()!=        getClass())        {        return        false;        }        if(other.getClass()!=    getClass())    {    return    false;    }    if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	18	2	add
37	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]      java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]          if(other.getClass()!=    getClass())    {    return    false;    }    if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	add	                if(other.getClass()!=        getClass())        {        return        false;        }        if(other.getClass()!=    getClass())    {    return    false;    }    if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	18	2	add
38	[BUG]  [BUGGY]          if(other.getClass()!=    getClass())    {    return    false;    }    if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]      java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]          if(other.getClass()!=    getClass())    {    return    false;    }    if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	                if(other.getClass()!=        getClass())        {        return        false;        }        if(other.getClass()!=    getClass())    {    return    false;    }    if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	18	2	add
39	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]        java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]          if(other.getClass()!=    getClass())    {    return    false;    }    if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }  else  if(other.getClass()!=  getClass())  {  return  false;  }  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	add	                if(other.getClass()!=        getClass())        {        return        false;        }        if(other.getClass()!=    getClass())    {    return    false;    }    if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }  else  if(other.getClass()!=  getClass())  {  return  false;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	18	2	add
40	[BUG]  [BUGGY]          if(other.getClass()!=    getClass())    {    return    false;    }    if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }  else  if(other.getClass()!=  getClass())  {  return  false;  }  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]        java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]          if(other.getClass()!=    getClass())    {    return    false;    }    if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }  else  if(other.getClass()!=  getClass())  {  return  false;  }  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	                if(other.getClass()!=        getClass())        {        return        false;        }        if(other.getClass()!=    getClass())    {    return    false;    }    if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }  else  if(other.getClass()!=  getClass())  {  return  false;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	18	2	add
41	[BUG]  [BUGGY]  ||  other.isNaN())  {  return  isInfinite;  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]  ||  other.isNaN())  {  return  isInfinite;  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	||  other.isNaN())  {  return  isInfinite;	  ||    other.isInfinite())    {    return    isInfinite;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
42	[BUG]  [BUGGY]  ||  other.isInfinite())  {  return  isNaN  ||  isInfinite;  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]  ||  other.isInfinite())  {  return  isNaN  ||  isInfinite;  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	||  other.isInfinite())  {  return  isNaN  ||  isInfinite;	  &&    other.isInfinite())    {    return    isNaN    ||    isInfinite;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
43	[BUG]  [BUGGY]  &&  other.isInfinite())  {  return  isNaN  ||  denominator;  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]  &&  other.isInfinite())  {  return  isNaN  ||  denominator;  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	&&  other.isInfinite())  {  return  isNaN  ||  denominator;	  &&    other.isInfinite())    {    return    isNaN    ||    isInfinite;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
44	[BUG]  [BUGGY]  if(other  ==  null)  {  if(other.getClass()!=  getClass())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]  if(other  ==  null)  {  if(other.getClass()!=  getClass())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	if(other  ==  null)  {  if(other.getClass()!=  getClass())  {  throw  new  IllegalArgumentException( " ");  }	          if(other.getClass()!=    getClass())    {    throw    new    IllegalArgumentException(       "       ");    }    if(other.getClass()!=    getClass())    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  ';'  expected	11	None	replace
45	[BUG]  [BUGGY]  if(other  ==  null)  {  if(other.getClass()!=  getClass())  {  throw  new  IllegalArgumentException( " ".equals(other.getClass()));  }  [CE]  ';'  expected  [FE]      java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]  if(other  ==  null)  {  if(other.getClass()!=  getClass())  {  throw  new  IllegalArgumentException( " ".equals(other.getClass()));  }  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	if(other  ==  null)  {  if(other.getClass()!=  getClass())  {  throw  new  IllegalArgumentException( " ".equals(other.getClass()));  }	          if(other.getClass()!=    getClass())    {    throw    new    IllegalArgumentException(       "       ");    }    if(other.getClass()!=    getClass())    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  ';'  expected	11	None	replace
46	[BUG]  [BUGGY]  &&  other.isInfinite())  {  return  isNaN  ||  real;  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]  &&  other.isInfinite())  {  return  isNaN  ||  real;  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	&&  other.isInfinite())  {  return  isNaN  ||  real;	  &&    other.isInfinite())    {    return    isNaN    ||    isInfinite;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
47	[BUG]  [BUGGY]  if(other  ==  null)  {  if(other.getClass()!=  getClass())  {  return  true;  }  [CE]  ';'  expected  [FE]            java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]  if(other  ==  null)  {  if(other.getClass()!=  getClass())  {  return  true;  }  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	if(other  ==  null)  {  if(other.getClass()!=  getClass())  {  return  true;  }	          if(other.getClass()!=    getClass())    {    return    true;    }    if(other.getClass()    >=    getClass())    {    return    true;    }    	non-compiled	[CE]  ';'  expected	17	None	replace
48	[BUG]  [BUGGY]  ||  other.isInfinite())  {  return  isNaN  +  1;  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]  ||  other.isInfinite())  {  return  isNaN  +  1;  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	||  other.isInfinite())  {  return  isNaN  +  1;	  ||    other.isInfinite())    {    return    isNaN;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
49	[BUG]  [BUGGY]  if(other  ==  null)  {  if(other.getClass()!=  getClass())  {  return  false;  }  [CE]  ';'  expected  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]  if(other  ==  null)  {  if(other.getClass()!=  getClass())  {  return  false;  }  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	if(other  ==  null)  {  if(other.getClass()!=  getClass())  {  return  false;  }	          if(other.getClass()!=    getClass())    {    return    false;    }    if(other.getClass()!=    getClass())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	19	None	replace
50	[BUG]  [BUGGY]  if(other  ==  null  ||  other.getClass()!=  getClass())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  c  [FE]          java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]  if(other  ==  null  ||  other.getClass()!=  getClass())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	if(other  ==  null  ||  other.getClass()!=  getClass())  {  throw  new  IllegalArgumentException( " ");  }	          if(other.getClass()!=    getClass())    {    throw    new    IllegalArgumentException(       "       ");    }    if(other.getClass()    >=    getClass())    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  cannot  find  symbol  c	12	None	replace
51	[BUG]  [BUGGY]  Class  <?>  other  =(Class  <?>)other;  [CE]  variable  other  is  already  defined  in  method  equals(Object)  [FE]        java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]  Class  <?>  other  =(Class  <?>)other;  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	Class  <?>  other  =(Class  <?>)other;	          if(other.getClass()!=    getClass())    {    throw    new    IllegalArgumentException(       "       ");    }    if(other.getClass()!=    getClass())    {    throw    new    IllegalArgumentException(   "   ".);    }    	non-compiled	[CE]  variable  other  is  already  defined  in  method  equals(Object)	29	None	replace
52	[BUG]  [BUGGY]  Class  <?>  other  =(Class  <?>)other.clone();  [CE]  variable  other  is  already  defined  in  method  equals(Object)  [FE]          java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]  Class  <?>  other  =(Class  <?>)other.clone();  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	Class  <?>  other  =(Class  <?>)other.clone();	          if(other.getClass()!=    getClass())    {    throw    new    IllegalArgumentException(       "       ");    }    if(other.getClass()!=    getClass())    {    throw    new    IllegalArgumentException(   "   ".);    }    	non-compiled	[CE]  variable  other  is  already  defined  in  method  equals(Object)	29	None	replace
53	[BUG]  [BUGGY]  if(other  instanceof  Complex)  {  Complex  c  =(Complex)other;  if(isInfinite  ||  isNaN)  {  return  true;  }  [CE]  ';'  expected  [FE]            java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]  if(other  instanceof  Complex)  {  Complex  c  =(Complex)other;  if(isInfinite  ||  isNaN)  {  return  true;  }  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	if(other  instanceof  Complex)  {  Complex  c  =(Complex)other;  if(isInfinite  ||  isNaN)  {  return  true;  }	  if(other    instanceof    Complex)    {    Complex    c    =(Complex)other;    if(isInfinite    ||    isNaN)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	26	None	replace
54	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(-0.5  [FE]    java.lang.AssertionError:  expected:<(-0.5    [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]          if(other.getClass()!=    getClass())    {    return    false;    }    if(other.getClass()  ==  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	add	                if(other.getClass()!=        getClass())        {        return        false;        }        if(other.getClass()    ==    getClass())    {    return    false;    }    if(other.getClass()!=  getClass())  {  return  false;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(-0.5  	20	16	add
55	[BUG]  [BUGGY]          if(other.getClass()!=    getClass())    {    return    false;    }    if(other.getClass()  ==  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }  [FE]  java.lang.AssertionError:  expected:<(-0.5  [FE]    java.lang.AssertionError:  expected:<(-0.5    [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]          if(other.getClass()!=    getClass())    {    return    false;    }    if(other.getClass()  ==  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	                if(other.getClass()!=        getClass())        {        return        false;        }        if(other.getClass()    ==    getClass())    {    return    false;    }    if(other.getClass()!=  getClass())  {  return  false;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(-0.5  	20	16	add
56	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(-0.5  [FE]      java.lang.AssertionError:  expected:<(-0.5    [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]          if(other.getClass()!=    getClass())    {    return    false;    }    if(other.getClass()  ==  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }  else  if(other.getClass()!=  getClass())  {  return  false;  }  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	add	                if(other.getClass()!=        getClass())        {        return        false;        }        if(other.getClass()    ==    getClass())    {    return    false;    }    if(other.getClass()!=  getClass())  {  return  false;  }  else  if(other.getClass()!=  getClass())  {  return  false;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(-0.5  	20	16	add
57	[BUG]  [BUGGY]          if(other.getClass()!=    getClass())    {    return    false;    }    if(other.getClass()  ==  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }  else  if(other.getClass()!=  getClass())  {  return  false;  }  [FE]  java.lang.AssertionError:  expected:<(-0.5  [FE]      java.lang.AssertionError:  expected:<(-0.5    [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]          if(other.getClass()!=    getClass())    {    return    false;    }    if(other.getClass()  ==  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }  else  if(other.getClass()!=  getClass())  {  return  false;  }  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	                if(other.getClass()!=        getClass())        {        return        false;        }        if(other.getClass()    ==    getClass())    {    return    false;    }    if(other.getClass()!=  getClass())  {  return  false;  }  else  if(other.getClass()!=  getClass())  {  return  false;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(-0.5  	20	16	add
58	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]          if(other.getClass()!=    getClass())    {    return    true;    }    if(other.getClass()  ==  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()  ==  getClass())  {  return  true;  }  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	add	                if(other.getClass()!=        getClass())        {        return        true;        }        if(other.getClass()    ==    getClass())    {    return    true;    }    if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()  ==  getClass())  {  return  true;  }	  	compilable	  [FE]  AssertionError  	15	2	add
59	[BUG]  [BUGGY]          if(other.getClass()!=    getClass())    {    return    true;    }    if(other.getClass()  ==  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()  ==  getClass())  {  return  true;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]          if(other.getClass()!=    getClass())    {    return    true;    }    if(other.getClass()  ==  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()  ==  getClass())  {  return  true;  }  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	                if(other.getClass()!=        getClass())        {        return        true;        }        if(other.getClass()    ==    getClass())    {    return    true;    }    if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()  ==  getClass())  {  return  true;  }	  	compilable	  [FE]  AssertionError  	15	2	add
60	[BUG]  [BUGGY]  &&  isNaN  ==  other.isInfinite())  {  return  isNaN;  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]  &&  isNaN  ==  other.isInfinite())  {  return  isNaN;  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	&&  isNaN  ==  other.isInfinite())  {  return  isNaN;	  &&    isInfinite    ==    other.isInfinite())    {    return    isNaN;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
61	[BUG]  [BUGGY]          if(other.getClass()!=    getClass())    {    return    true;    }    if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()  >=  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]          if(other.getClass()!=    getClass())    {    return    true;    }    if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()  >=  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	                if(other.getClass()!=        getClass())        {        return        true;        }        if(other.getClass()!=    getClass())    {    return    true;    }    if(other.getClass()  >=  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	13	None	add
62	[BUG]  [BUGGY]          if(other.getClass()!=    getClass())    {    return    true;    }    if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()  >=  getClass())  {  return  true;  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]      java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]          if(other.getClass()!=    getClass())    {    return    true;    }    if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()  >=  getClass())  {  return  true;  }  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	                if(other.getClass()!=        getClass())        {        return        true;        }        if(other.getClass()!=    getClass())    {    return    true;    }    if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()  >=  getClass())  {  return  true;  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	13	None	add
63	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]          if(other.getClass()!=    getClass())    {    return    false;    }    if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	add	                if(other.getClass()!=        getClass())        {        return        false;        }        if(other.getClass()!=    getClass())    {    return    false;    }    if(other.getClass()!=  getClass())  {  return  false;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	18	2	add
64	[BUG]  [BUGGY]          if(other.getClass()!=    getClass())    {    return    false;    }    if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]          if(other.getClass()!=    getClass())    {    return    false;    }    if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	                if(other.getClass()!=        getClass())        {        return        false;        }        if(other.getClass()!=    getClass())    {    return    false;    }    if(other.getClass()!=  getClass())  {  return  false;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	18	2	add
65	[BUG]  [BUGGY]          if(other.getClass()!=    getClass())    {    return    false;    }    if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()  >=  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]      java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]          if(other.getClass()!=    getClass())    {    return    false;    }    if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()  >=  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	                if(other.getClass()!=        getClass())        {        return        false;        }        if(other.getClass()!=    getClass())    {    return    false;    }    if(other.getClass()  >=  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	18	None	add
66	[BUG]  [BUGGY]  ||  other.isInfinite())  {  return  isNaN  ||  isNaN;  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]  ||  other.isInfinite())  {  return  isNaN  ||  isNaN;  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	||  other.isInfinite())  {  return  isNaN  ||  isNaN;	  ||    other.isInfinite())    {    return    isInfinite    ||    isNaN;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
67	[BUG]  [BUGGY]  ||  other.isInfinite())  {  return  isNaN  ||  addend;  [CE]  illegal  start  of  expression  [FE]                    java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]  ||  other.isInfinite())  {  return  isNaN  ||  addend;  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	||  other.isInfinite())  {  return  isNaN  ||  addend;	  ||    other.isInfinite())    {    return    isInfinite    ||    isNaN;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
68	[BUG]  [BUGGY]  &&  isInfinite.isInfinite())  {  return  isNaN  ||  isInfinite;  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]  &&  isInfinite.isInfinite())  {  return  isNaN  ||  isInfinite;  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	&&  isInfinite.isInfinite())  {  return  isNaN  ||  isInfinite;	  &&    isInfinite.isInfinite())    {    return    isInfinite    ||    isInfinite;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
69	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]          if(other.getClass()!=    getClass())    {    return    false;    }    if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }  else  if(other.getClass()!=  getClass())  {  return  false;  }  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	add	                if(other.getClass()!=        getClass())        {        return        false;        }        if(other.getClass()!=    getClass())    {    return    false;    }    if(other.getClass()!=  getClass())  {  return  false;  }  else  if(other.getClass()!=  getClass())  {  return  false;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	18	2	add
70	[BUG]  [BUGGY]          if(other.getClass()!=    getClass())    {    return    false;    }    if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }  else  if(other.getClass()!=  getClass())  {  return  false;  }  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]          if(other.getClass()!=    getClass())    {    return    false;    }    if(other.getClass()!=  getClass())  {  return  false;  }  if(other.getClass()!=  getClass())  {  return  false;  }  else  if(other.getClass()!=  getClass())  {  return  false;  }  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	                if(other.getClass()!=        getClass())        {        return        false;        }        if(other.getClass()!=    getClass())    {    return    false;    }    if(other.getClass()!=  getClass())  {  return  false;  }  else  if(other.getClass()!=  getClass())  {  return  false;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	18	2	add
71	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]          if(other.getClass()!=    getClass())    {    return    true;    }    if(other.getClass()  ==  getClass())  {  return  true;  }  if(other.getClass()  ==  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	add	                if(other.getClass()!=        getClass())        {        return        true;        }        if(other.getClass()    ==    getClass())    {    return    true;    }    if(other.getClass()  ==  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }	  	compilable	  [FE]  AssertionError  	15	2	add
72	[BUG]  [BUGGY]          if(other.getClass()!=    getClass())    {    return    true;    }    if(other.getClass()  ==  getClass())  {  return  true;  }  if(other.getClass()  ==  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]          if(other.getClass()!=    getClass())    {    return    true;    }    if(other.getClass()  ==  getClass())  {  return  true;  }  if(other.getClass()  ==  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	                if(other.getClass()!=        getClass())        {        return        true;        }        if(other.getClass()    ==    getClass())    {    return    true;    }    if(other.getClass()  ==  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }	  	compilable	  [FE]  AssertionError  	15	2	add
73	[BUG]  [BUGGY]  parent  ==  null  ||!(other  instanceof  Complex))  {  return  false;  }  [CE]  not  a  statement  [FE]                java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]  parent  ==  null  ||!(other  instanceof  Complex))  {  return  false;  }  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	parent  ==  null  ||!(other  instanceof  Complex))  {  return  false;  }	  if(!(other    instanceof    Complex))    {    if(other    instanceof    Complex)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	7	None	replace
74	[BUG]  [BUGGY]  [Delete]  [CE]  illegal  start  of  expression  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]  [Delete]  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	[Delete]	          if(other.getClass()!=    getClass())    {    throw    new    IllegalArgumentException(       "       ");    }    if(other.getClass()!=    getClass())    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
75	[BUG]  [BUGGY]  }  [CE]  illegal  start  of  type  [FE]      java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]  }  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	}	          if(other.getClass()!=    getClass())    {    throw    new    IllegalArgumentException(       "       ");    }    if(other.getClass()!=    getClass())    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
76	[BUG]  [BUGGY]  ||  other.isInfinite())  {  return  isInfinite  &&  isNaN;  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]  ||  other.isInfinite())  {  return  isInfinite  &&  isNaN;  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	||  other.isInfinite())  {  return  isInfinite  &&  isNaN;	  ||    other.isInfinite())    {    return    isInfinite    ||    isNaN;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
77	[BUG]  [BUGGY]  Class  <?>  c  =  other.getClass();  [CE]  cannot  find  symbol  isNaN  [FE]        java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]  Class  <?>  c  =  other.getClass();  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	Class  <?>  c  =  other.getClass();	          if(other.getClass()!=    getClass())    {    throw    new    IllegalArgumentException(       "       ");    }    if(other.getClass()!=    getClass())    {    throw    new    IllegalArgumentException(   "   ".);    }    	non-compiled	[CE]  cannot  find  symbol  isNaN	29	None	replace
78	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]          if(other.getClass()!=    getClass())    {    return    true;    }    if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()  ==  getClass())  {  return  true;  }  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	add	                if(other.getClass()!=        getClass())        {        return        true;        }        if(other.getClass()!=    getClass())    {    return    true;    }    if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()  ==  getClass())  {  return  true;  }	  	compilable	  [FE]  AssertionError  	13	2	add
79	[BUG]  [BUGGY]          if(other.getClass()!=    getClass())    {    return    true;    }    if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()  ==  getClass())  {  return  true;  }  [FE]  AssertionError  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]          if(other.getClass()!=    getClass())    {    return    true;    }    if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()  ==  getClass())  {  return  true;  }  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	                if(other.getClass()!=        getClass())        {        return        true;        }        if(other.getClass()!=    getClass())    {    return    true;    }    if(other.getClass()!=  getClass())  {  return  true;  }  if(other.getClass()  ==  getClass())  {  return  true;  }	  	compilable	  [FE]  AssertionError  	13	2	add
80	[BUG]  [BUGGY]  oricarors.equals(other.getAbsolutePosition());  [CE]  cannot  find  symbol  [FE]          java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]  oricarors.equals(other.getAbsolutePosition());  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	oricarors.equals(other.getAbsolutePosition());	          if(other.getClass()!=    getClass())    {    throw    new    IllegalArgumentException(       "       ");    }    if(other.getClass()    >=    getClass())    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
81	[BUG]  [BUGGY]  oricarors.equals(other.getAbsolutePath());  [CE]  cannot  find  symbol  [FE]            java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]  oricarors.equals(other.getAbsolutePath());  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	oricarors.equals(other.getAbsolutePath());	          if(other.getClass()!=    getClass())    {    throw    new    IllegalArgumentException(       "       ");    }    if(other.getClass()    >=    getClass())    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
82	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]          if(other.getClass()!=    getClass())    {    throw    new    IllegalArgumentException(     "     ");    }    if(other.getClass()!=  getClass())  {  throw  new  IllegalArgumentException(   "     ");  }  if(other.getClass()!=  getClass())  {  throw  new  IllegalArgumentException( ". ");  }  if(other.getClass()!=  getClass())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	add	                if(other.getClass()!=        getClass())        {        throw        new        IllegalArgumentException(       "       ");        }        if(other.getClass()!=    getClass())    {    throw    new    IllegalArgumentException(   "       ");    }    if(other.getClass()!=  getClass())  {  throw  new  IllegalArgumentException( ". ");  }  if(other.getClass()!=  getClass())  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	10	2	add
83	[BUG]  [BUGGY]          if(other.getClass()!=    getClass())    {    throw    new    IllegalArgumentException(     "     ");    }    if(other.getClass()!=  getClass())  {  throw  new  IllegalArgumentException(   "     ");  }  if(other.getClass()!=  getClass())  {  throw  new  IllegalArgumentException( ". ");  }  if(other.getClass()!=  getClass())  {  throw  new  IllegalArgumentException( " ");  }  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){      [BUGGY]          if(other.getClass()!=    getClass())    {    throw    new    IllegalArgumentException(     "     ");    }    if(other.getClass()!=  getClass())  {  throw  new  IllegalArgumentException(   "     ");  }  if(other.getClass()!=  getClass())  {  throw  new  IllegalArgumentException( ". ");  }  if(other.getClass()!=  getClass())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	                if(other.getClass()!=        getClass())        {        throw        new        IllegalArgumentException(       "       ");        }        if(other.getClass()!=    getClass())    {    throw    new    IllegalArgumentException(   "       ");    }    if(other.getClass()!=  getClass())  {  throw  new  IllegalArgumentException( ". ");  }  if(other.getClass()!=  getClass())  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	10	2	add
