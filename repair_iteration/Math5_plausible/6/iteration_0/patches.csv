bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN  [CONTEXT]  public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){  [BUGGY]    if(other.getClass()!=  getClass())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	add	    if(other.getClass()!=  getClass())  {  throw  new  IllegalArgumentException( " ");  }		compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	12	2	add
2	[BUG]  [BUGGY]    if(other.getClass()!=  getClass())  {  throw  new  IllegalArgumentException( " ");  }  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN  [CONTEXT]  public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){  [BUGGY]    if(other.getClass()!=  getClass())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	    if(other.getClass()!=  getClass())  {  throw  new  IllegalArgumentException( " ");  }		compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	12	2	add
3	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]      java.lang.AssertionError:  expected:<(NaN  [CONTEXT]  public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){  [BUGGY]    if(other.getClass()!=  getClass())  {  return  false;  }  [BUGGY]  Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	add	    if(other.getClass()!=  getClass())  {  return  false;  }		compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	12	2	add
4	[BUG]  [BUGGY]    if(other.getClass()!=  getClass())  {  return  false;  }  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]      java.lang.AssertionError:  expected:<(NaN  [CONTEXT]  public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){  [BUGGY]    if(other.getClass()!=  getClass())  {  return  false;  }  [BUGGY]  Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	    if(other.getClass()!=  getClass())  {  return  false;  }		compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	12	2	add
5	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]        java.lang.AssertionError:  expected:<(NaN  [CONTEXT]  public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){  [BUGGY]    if(other.getClass()!=  getClass())  {  return  true;  }  [BUGGY]  Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	add	    if(other.getClass()!=  getClass())  {  return  true;  }		compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	12	1	add
6	[BUG]  [BUGGY]    if(other.getClass()!=  getClass())  {  return  true;  }  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]        java.lang.AssertionError:  expected:<(NaN  [CONTEXT]  public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){  [BUGGY]    if(other.getClass()!=  getClass())  {  return  true;  }  [BUGGY]  Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	    if(other.getClass()!=  getClass())  {  return  true;  }		compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	12	1	add
7	[BUG]  [BUGGY]  Complex  c  =  other.get(this);  [CE]  cannot  find  symbol  [FE]    java.lang.AssertionError:  expected:<(NaN  [CONTEXT]  public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){  [BUGGY]  Complex  c  =  other.get(this);  [BUGGY]  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	Complex  c  =  other.get(this);	Complex  c  =  (Complex)other;  	non-compiled	[CE]  cannot  find  symbol	11	None	replace
8	[BUG]  [BUGGY]    if(other  instanceof  Complex)  {  Complex  c  =(Complex)other;  if(isNaN  ||  isInfinite)  {  return  false;  }  [CE]  ';'  expected  [FE]    java.lang.AssertionError:  expected:<(NaN  [CONTEXT]  public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){  [BUGGY]    if(other  instanceof  Complex)  {  Complex  c  =(Complex)other;  if(isNaN  ||  isInfinite)  {  return  false;  }  [BUGGY]  Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	    if(other  instanceof  Complex)  {  Complex  c  =(Complex)other;  if(isNaN  ||  isInfinite)  {  return  false;  }		non-compiled	[CE]  ';'  expected	12	None	add
9	[BUG]  [BUGGY]    if(other  instanceof  Complex)  {  Complex  c  =(Complex)other;  if(isNaN  ||  isInfinite)  {  return  true;  }  [CE]  ';'  expected  [FE]      java.lang.AssertionError:  expected:<(NaN  [CONTEXT]  public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){  [BUGGY]    if(other  instanceof  Complex)  {  Complex  c  =(Complex)other;  if(isNaN  ||  isInfinite)  {  return  true;  }  [BUGGY]  Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	    if(other  instanceof  Complex)  {  Complex  c  =(Complex)other;  if(isNaN  ||  isInfinite)  {  return  true;  }		non-compiled	[CE]  ';'  expected	12	None	add
10	[BUG]  [BUGGY]    if(other  instanceof  Complex)  {  Complex  c  =(Complex)other;  if(isInfinite)  {  return  isNaN;  }  [CE]  ';'  expected  [FE]        java.lang.AssertionError:  expected:<(NaN  [CONTEXT]  public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){  [BUGGY]    if(other  instanceof  Complex)  {  Complex  c  =(Complex)other;  if(isInfinite)  {  return  isNaN;  }  [BUGGY]  Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	    if(other  instanceof  Complex)  {  Complex  c  =(Complex)other;  if(isInfinite)  {  return  isNaN;  }		non-compiled	[CE]  ';'  expected	12	None	add
11	[BUG]  [BUGGY]    &&  isInfinite  ==  other.isInfinite())  {  return  isInfinite;  [CE]  illegal  start  of  expression  [FE]    java.lang.AssertionError:  expected:<(NaN  [CONTEXT]  public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){  [BUGGY]    &&  isInfinite  ==  other.isInfinite())  {  return  isInfinite;  [BUGGY]  Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	    &&  isInfinite  ==  other.isInfinite())  {  return  isInfinite;		non-compiled	[CE]  illegal  start  of  expression	12	None	add
12	[BUG]  [BUGGY]    &&  other.isInfinite())  {  return  isInfinite;  [CE]  illegal  start  of  expression  [FE]      java.lang.AssertionError:  expected:<(NaN  [CONTEXT]  public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){  [BUGGY]    &&  other.isInfinite())  {  return  isInfinite;  [BUGGY]  Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	    &&  other.isInfinite())  {  return  isInfinite;		non-compiled	[CE]  illegal  start  of  expression	12	None	add
13	[BUG]  [BUGGY]    &&  other.isInfinite())  {  return  isInfinite  ||  isInfinite;  [CE]  illegal  start  of  expression  [FE]        java.lang.AssertionError:  expected:<(NaN  [CONTEXT]  public  boolean  equals(Object  other)  {  if  (this  ==  other)  {  return  true;  }  if  (other  instanceof  Complex){  [BUGGY]    &&  other.isInfinite())  {  return  isInfinite  ||  isInfinite;  [BUGGY]  Complex  c  =  (Complex)other;  if  (c.isNaN)  {  return  isNaN;  }  else  {  return  (real  ==  c.real)  &&  (imaginary  ==  c.imaginary);  }  }  return  false;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.23570226039551587	344	344	1	replace	    &&  other.isInfinite())  {  return  isInfinite  ||  isInfinite;		non-compiled	[CE]  illegal  start  of  expression	12	None	add
