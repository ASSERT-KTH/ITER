bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  if(isInfinite  ||  isInfinite)  {  if(imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	add	if(isInfinite  ||  isInfinite)  {  if(imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  return  NaN;  }	  if(isNaN    ||    isInfinite)    {    if(imaginary    ==    0.0    ||    imaginary    ==    0.0)    {    return    NaN;    }    	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	16	2	replace
2	[BUG]  [BUGGY]  if(isInfinite  ||  isInfinite)  {  if(imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  return  NaN;  }  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  if(isInfinite  ||  isInfinite)  {  if(imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	if(isInfinite  ||  isInfinite)  {  if(imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  return  NaN;  }	  if(isNaN    ||    isInfinite)    {    if(imaginary    ==    0.0    ||    imaginary    ==    0.0)    {    return    NaN;    }    	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	16	2	replace
3	[BUG]  [BUGGY]  Real  real  =  imaginary.equals(divisor)?  Double.POSITIVE_INFINITY  :  double.doubleValue();  [CE]  class  expected  [FE]                java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  Real  real  =  imaginary.equals(divisor)?  Double.POSITIVE_INFINITY  :  double.doubleValue();  [BUGGY]      if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	Real  real  =  imaginary.equals(divisor)?  Double.POSITIVE_INFINITY  :  double.doubleValue();	  Real    real    =    imaginary.equals(real)?    Double.POSITIVE_INFINITY    :    double.doubleValue();    	non-compiled	[CE]  class  expected	19	None	replace
4	[BUG]  [BUGGY]  Real  real  =  double.equals(imaginary)?  Double.POSITIVE_INFINITY  :  Double.doubleValue();  [CE]  class  expected  [FE]                  java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  Real  real  =  double.equals(imaginary)?  Double.POSITIVE_INFINITY  :  Double.doubleValue();  [BUGGY]      if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	Real  real  =  double.equals(imaginary)?  Double.POSITIVE_INFINITY  :  Double.doubleValue();	  Real    real    =    imaginary.equals(real)?    Double.POSITIVE_INFINITY    :    double.doubleValue();    	non-compiled	[CE]  class  expected	19	None	replace
5	[BUG]  [BUGGY]  Real  real  =  realistic.evaluate(divisor);  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  Real  real  =  realistic.evaluate(divisor);  [BUGGY]      if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	Real  real  =  realistic.evaluate(divisor);	  Real    real    =    realistic.evaluate(real);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
6	[BUG]  [BUGGY]  Real  real  =  denominator.equals(divisor)?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  Real  real  =  denominator.equals(divisor)?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;  [BUGGY]      if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	Real  real  =  denominator.equals(divisor)?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;	  Real    real    =    denominator.equals(real)?    Double.POSITIVE_INFINITY    :    Double.POSITIVE_INFINITY;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
7	[BUG]  [BUGGY]  if(isNaN  ||  isInfinite)  {  if(imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  return  NaN;  }  if(isNaN  ||  isInfinite)  {  if(imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  if(isNaN  ||  isInfinite)  {  if(imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  return  NaN;  }  if(isNaN  ||  isInfinite)  {  if(imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	if(isNaN    ||    isInfinite)    {    if(imaginary    ==    0.0    ||    imaginary    ==    0.0)    {    return    NaN;    }    if(isNaN  ||  isInfinite)  {  if(imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  return  NaN;  }	  	non-compiled	[CE]  ';'  expected	15	None	add
8	[BUG]  [BUGGY]  if(isNaN  ||  isInfinite)  {  if(imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  return  NaN;  }  if(isInfinite  ||  isInfinite)  {  if(imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]      java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  if(isNaN  ||  isInfinite)  {  if(imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  return  NaN;  }  if(isInfinite  ||  isInfinite)  {  if(imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	if(isNaN    ||    isInfinite)    {    if(imaginary    ==    0.0    ||    imaginary    ==    0.0)    {    return    NaN;    }    if(isInfinite  ||  isInfinite)  {  if(imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  return  NaN;  }	  	non-compiled	[CE]  ';'  expected	15	None	add
9	[BUG]  [BUGGY]  if(isNaN  ||  isInfinite)  {  if(imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  return  NaN;  }  if(isInfinite)  {  if(imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]        java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  if(isNaN  ||  isInfinite)  {  if(imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  return  NaN;  }  if(isInfinite)  {  if(imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	if(isNaN    ||    isInfinite)    {    if(imaginary    ==    0.0    ||    imaginary    ==    0.0)    {    return    NaN;    }    if(isInfinite)  {  if(imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  return  NaN;  }	  	non-compiled	[CE]  ';'  expected	15	None	add
10	[BUG]  [BUGGY]  Real  real  =  denominator.doubleValue();  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  Real  real  =  denominator.doubleValue();  [BUGGY]      if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	Real  real  =  denominator.doubleValue();	  Real    real    =    divisor.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
11	[BUG]  [BUGGY]  Real  real  =  ONE.doubleValue();  [CE]  illegal  start  of  type  [FE]            java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  Real  real  =  ONE.doubleValue();  [BUGGY]      if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	Real  real  =  ONE.doubleValue();	  Real    real    =    ZERO.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
12	[BUG]  [BUGGY]  Real  real  =  scale.doubleValue();  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  Real  real  =  scale.doubleValue();  [BUGGY]      if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	Real  real  =  scale.doubleValue();	  Real    real    =    ZERO.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
13	[BUG]  [BUGGY]  Real  real  =  imaginaryNaN.evaluate(divisor);  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  Real  real  =  imaginaryNaN.evaluate(divisor);  [BUGGY]      if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	Real  real  =  imaginaryNaN.evaluate(divisor);	  Real    real    =    imaginaryNaN.evaluate(real);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
14	[BUG]  [BUGGY]  Real  real  =  isNaN?  Double.POSITIVE_INFINITY  :  Double.NaN;  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  Real  real  =  isNaN?  Double.POSITIVE_INFINITY  :  Double.NaN;  [BUGGY]      if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	Real  real  =  isNaN?  Double.POSITIVE_INFINITY  :  Double.NaN;	  Real    real    =    isNaN.equals(real)?    Double.POSITIVE_INFINITY    :    Double.NaN;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
15	[BUG]  [BUGGY]  Real  real  =  double.equals(Double.POSITIVE_INFINITY)?  Double.POSITIVE_INFINITY  :  double.doubleValue();  [CE]  class  expected  [FE]                java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  Real  real  =  double.equals(Double.POSITIVE_INFINITY)?  Double.POSITIVE_INFINITY  :  double.doubleValue();  [BUGGY]      if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	Real  real  =  double.equals(Double.POSITIVE_INFINITY)?  Double.POSITIVE_INFINITY  :  double.doubleValue();	  Real    real    =    imaginary.equals(Double.POSITIVE_INFINITY)?    Double.POSITIVE_INFINITY    :    double.doubleValue();    	non-compiled	[CE]  class  expected	25	None	replace
16	[BUG]  [BUGGY]  if  (imaginary  ==  0.0  ||  real  ==  0.0)  {  if  (imaginary  ==  0.0  ||  real  ==  0.0)  {  [CE]  ';'  expected  [FE]    java.lang.AssertionError:  expected:<(-0.5    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  if  (imaginary  ==  0.0  ||  real  ==  0.0)  {  if  (imaginary  ==  0.0  ||  real  ==  0.0)  {  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	if    (imaginary    ==    0.0    ||    real    ==    0.0)    {    if  (imaginary  ==  0.0  ||  real  ==  0.0)  {	  	non-compiled	[CE]  ';'  expected	6	None	add
17	[BUG]  [BUGGY]  if  (imaginary  ==  0.0  ||  real  ==  0.0)  {  if  (Imaginary  ==  0.0  ||  real  ==  0.0)  {  [CE]  ';'  expected  [FE]      java.lang.AssertionError:  expected:<(-0.5    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  if  (imaginary  ==  0.0  ||  real  ==  0.0)  {  if  (Imaginary  ==  0.0  ||  real  ==  0.0)  {  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	if    (imaginary    ==    0.0    ||    real    ==    0.0)    {    if  (Imaginary  ==  0.0  ||  real  ==  0.0)  {	  	non-compiled	[CE]  ';'  expected	6	None	add
18	[BUG]  [BUGGY]  Real  real  =  denominator.evaluate(imaginary);  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  Real  real  =  denominator.evaluate(imaginary);  [BUGGY]      if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	Real  real  =  denominator.evaluate(imaginary);	  Real    real    =    denominator.evaluate(real);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
19	[BUG]  [BUGGY]  Real  real  =  denominator.evaluate(divisor);  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  Real  real  =  denominator.evaluate(divisor);  [BUGGY]      if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	Real  real  =  denominator.evaluate(divisor);	  Real    real    =    denominator.evaluate(real);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
20	[BUG]  [BUGGY]  Real  real  =  imaginary.equals(Double.POSITIVE_INFINITY)?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;  [CE]  illegal  start  of  type  [FE]            java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  Real  real  =  imaginary.equals(Double.POSITIVE_INFINITY)?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;  [BUGGY]      if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	Real  real  =  imaginary.equals(Double.POSITIVE_INFINITY)?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;	  Real    real    =    imaginary.equals(real)?    Double.POSITIVE_INFINITY    :    Double.POSITIVE_INFINITY;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
21	[BUG]  [BUGGY]  if(divisor  ==  0.0  &&  real  ==  0.0)  {  [CE]  cannot  find  symbol  divisor  [FE]          java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  if(divisor  ==  0.0  &&  real  ==  0.0)  {  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	if(divisor  ==  0.0  &&  real  ==  0.0)  {	  if    (imaginary    ==    0.0    &&    real    ==    0.0)    {    if    (Imaginary    ==    0.0    &&    real    ==    0.0)    {    	non-compiled	[CE]  cannot  find  symbol  divisor	24	None	replace
22	[BUG]  [BUGGY]  if  (Divisor  ==  0.0  &&  real  ==  0.0)  {  [CE]  cannot  find  symbol  Divisor  [FE]            java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  if  (Divisor  ==  0.0  &&  real  ==  0.0)  {  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	if  (Divisor  ==  0.0  &&  real  ==  0.0)  {	  if    (imaginary    ==    0.0    &&    real    ==    0.0)    {    if    (Imaginary    ==    0.0    &&    real    ==    0.0)    {    	non-compiled	[CE]  cannot  find  symbol  Divisor	24	None	replace
23	[BUG]  [BUGGY]  if(isInfinite)  {  if(divisor  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  [CE]  cannot  find  symbol  divisor  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  if(isInfinite)  {  if(divisor  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	if(isInfinite)  {  if(divisor  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }	  if(isInfinite)    {    if(imaginary    ==    0.0    &&    imaginary    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  cannot  find  symbol  divisor	29	None	replace
24	[BUG]  [BUGGY]  if(isInfinite)  {  if(denominator  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  [CE]  cannot  find  symbol  denominator  [FE]      java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  if(isInfinite)  {  if(denominator  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	if(isInfinite)  {  if(denominator  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }	  if(isInfinite)    {    if(imaginary    ==    0.0    &&    imaginary    ==    0.0)    {    return    NaN;    }    	non-compiled	[CE]  cannot  find  symbol  denominator	29	None	replace
25	[BUG]  [BUGGY]  If  (imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  [CE]  ';'  expected  [FE]        java.lang.AssertionError:  expected:<(-0.5      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  If  (imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	If  (imaginary  ==  0.0  ||  imaginary  ==  0.0)  {	  if    (real    ==    0.0    ||    imaginary    ==    0.0)    {    If    (real    ==    0.0    ||    imaginary    ==    0.0)    {    	non-compiled	[CE]  ';'  expected	31	None	replace
26	[BUG]  [BUGGY]  If  (real  ==  0.0  ||  imaginary  ==  0.0)  {  [CE]  ';'  expected  [FE]          java.lang.AssertionError:  expected:<(-0.5      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  If  (real  ==  0.0  ||  imaginary  ==  0.0)  {  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	If  (real  ==  0.0  ||  imaginary  ==  0.0)  {	  if    (real    ==    0.0    ||    imaginary    ==    0.0)    {    If    (real    ==    0.0    ||    imaginary    ==    0.0)    {    	non-compiled	[CE]  ';'  expected	31	None	replace
27	[BUG]  [BUGGY]  if(isInfinite)  {  if(imaginary  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if(isInfinite)  {  if(imaginary  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  if(isInfinite)  {  if(imaginary  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if(isInfinite)  {  if(imaginary  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	if(isInfinite)    {    if(imaginary    ==    0.0    &&    imaginary    ==    0.0)    {    return    NaN;    }    if(isInfinite)  {  if(imaginary  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }	  	non-compiled	[CE]  ';'  expected	28	None	add
28	[BUG]  [BUGGY]  if(isInfinite)  {  if(imaginary  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if(isInfinite)  {  if(imaginary  ==  0.0  &&  imaginary!=  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]      java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  if(isInfinite)  {  if(imaginary  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if(isInfinite)  {  if(imaginary  ==  0.0  &&  imaginary!=  0.0)  {  return  NaN;  }  [BUGGY]      if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	if(isInfinite)    {    if(imaginary    ==    0.0    &&    imaginary    ==    0.0)    {    return    NaN;    }    if(isInfinite)  {  if(imaginary  ==  0.0  &&  imaginary!=  0.0)  {  return  NaN;  }	  	non-compiled	[CE]  ';'  expected	28	None	add
29	[BUG]  [BUGGY]  if(isInfinite)  {  if(imaginary  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if(isNaN)  {  if(imaginary  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]        java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  if(isInfinite)  {  if(imaginary  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if(isNaN)  {  if(imaginary  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	if(isInfinite)    {    if(imaginary    ==    0.0    &&    imaginary    ==    0.0)    {    return    NaN;    }    if(isNaN)  {  if(imaginary  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }	  	non-compiled	[CE]  ';'  expected	28	None	add
30	[BUG]  [BUGGY]  if(isInfinite  &&  isNaN)  {  return  NaN;  }  [CE]  illegal  start  of  type  [FE]        java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  if(isInfinite  &&  isNaN)  {  return  NaN;  }  [BUGGY]      if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	if(isInfinite  &&  isNaN)  {  return  NaN;  }	  if(isInfinite    ||    isNaN)    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
31	[BUG]  [BUGGY]  if(isInfinite  ||  isNaN)  {  return  ZERO;  }  [CE]  illegal  start  of  type  [FE]          java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  if(isInfinite  ||  isNaN)  {  return  ZERO;  }  [BUGGY]      if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	if(isInfinite  ||  isNaN)  {  return  ZERO;  }	  if(isInfinite    ||    isNaN)    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
32	[BUG]  [BUGGY]  Real  real  =  denominator.equals(divisor)?  Double.POSITIVE_INFINITY  :  Double.NaN;  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  Real  real  =  denominator.equals(divisor)?  Double.POSITIVE_INFINITY  :  Double.NaN;  [BUGGY]      if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	Real  real  =  denominator.equals(divisor)?  Double.POSITIVE_INFINITY  :  Double.NaN;	  Real    real    =    denominator.equals(real)?    Double.POSITIVE_INFINITY    :    Double.NaN;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
33	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]          if(isNaN    ||    isInfinite)    {    return    NaN;    }    if(isNaN  ||  isInfinite)  {  return  NaN;  }  if(isNaN  ||  isInfinite)  {  return  NaN;  }  [BUGGY]      if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	add	                if(isNaN        ||        isInfinite)        {        return        NaN;        }        if(isNaN    ||    isInfinite)    {    return    NaN;    }    if(isNaN  ||  isInfinite)  {  return  NaN;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	21	2	add
34	[BUG]  [BUGGY]          if(isNaN    ||    isInfinite)    {    return    NaN;    }    if(isNaN  ||  isInfinite)  {  return  NaN;  }  if(isNaN  ||  isInfinite)  {  return  NaN;  }  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]          if(isNaN    ||    isInfinite)    {    return    NaN;    }    if(isNaN  ||  isInfinite)  {  return  NaN;  }  if(isNaN  ||  isInfinite)  {  return  NaN;  }  [BUGGY]      if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	                if(isNaN        ||        isInfinite)        {        return        NaN;        }        if(isNaN    ||    isInfinite)    {    return    NaN;    }    if(isNaN  ||  isInfinite)  {  return  NaN;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	21	2	add
35	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]      java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]          if(isNaN    ||    isInfinite)    {    return    NaN;    }    if(isNaN  ||  isInfinite)  {  return  NaN;  }  if(isNaN  ||  isInfinite)  {  return  NaN;  }  if(isNaN  ||  isInfinite)  {  return  NaN;  }  [BUGGY]      if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	add	                if(isNaN        ||        isInfinite)        {        return        NaN;        }        if(isNaN    ||    isInfinite)    {    return    NaN;    }    if(isNaN  ||  isInfinite)  {  return  NaN;  }  if(isNaN  ||  isInfinite)  {  return  NaN;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	21	2	add
36	[BUG]  [BUGGY]          if(isNaN    ||    isInfinite)    {    return    NaN;    }    if(isNaN  ||  isInfinite)  {  return  NaN;  }  if(isNaN  ||  isInfinite)  {  return  NaN;  }  if(isNaN  ||  isInfinite)  {  return  NaN;  }  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]      java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]          if(isNaN    ||    isInfinite)    {    return    NaN;    }    if(isNaN  ||  isInfinite)  {  return  NaN;  }  if(isNaN  ||  isInfinite)  {  return  NaN;  }  if(isNaN  ||  isInfinite)  {  return  NaN;  }  [BUGGY]      if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	                if(isNaN        ||        isInfinite)        {        return        NaN;        }        if(isNaN    ||    isInfinite)    {    return    NaN;    }    if(isNaN  ||  isInfinite)  {  return  NaN;  }  if(isNaN  ||  isInfinite)  {  return  NaN;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	21	2	add
37	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]        java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]          if(isNaN    ||    isInfinite)    {    return    NaN;    }    if(isNaN  ||  isInfinite)  {  return  NaN;  }  if(isNaN  ||  isInfinite)  {  return  NaN;  }  if(isInfinite  ||  isInfinite)  {  return  NaN;  }  [BUGGY]      if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	add	                if(isNaN        ||        isInfinite)        {        return        NaN;        }        if(isNaN    ||    isInfinite)    {    return    NaN;    }    if(isNaN  ||  isInfinite)  {  return  NaN;  }  if(isInfinite  ||  isInfinite)  {  return  NaN;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	21	2	add
38	[BUG]  [BUGGY]          if(isNaN    ||    isInfinite)    {    return    NaN;    }    if(isNaN  ||  isInfinite)  {  return  NaN;  }  if(isNaN  ||  isInfinite)  {  return  NaN;  }  if(isInfinite  ||  isInfinite)  {  return  NaN;  }  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]        java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]          if(isNaN    ||    isInfinite)    {    return    NaN;    }    if(isNaN  ||  isInfinite)  {  return  NaN;  }  if(isNaN  ||  isInfinite)  {  return  NaN;  }  if(isInfinite  ||  isInfinite)  {  return  NaN;  }  [BUGGY]      if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	                if(isNaN        ||        isInfinite)        {        return        NaN;        }        if(isNaN    ||    isInfinite)    {    return    NaN;    }    if(isNaN  ||  isInfinite)  {  return  NaN;  }  if(isInfinite  ||  isInfinite)  {  return  NaN;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	21	2	add
39	[BUG]  [BUGGY]  Real  real  =  denominator.equals(divisor)?  Double.POSITIVE_INFINITY  :  double.doubleValue();  [CE]  class  expected  [FE]                  java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  Real  real  =  denominator.equals(divisor)?  Double.POSITIVE_INFINITY  :  double.doubleValue();  [BUGGY]      if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	Real  real  =  denominator.equals(divisor)?  Double.POSITIVE_INFINITY  :  double.doubleValue();	  Real    real    =    denominator.equals(real)?    Double.POSITIVE_INFINITY    :    double.doubleValue();    	non-compiled	[CE]  class  expected	20	None	replace
40	[BUG]  [BUGGY]  Real  real  =  imaginary.equals(divisor)?  Double.POSITIVE_INFINITY  :  Double.NaN;  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  Real  real  =  imaginary.equals(divisor)?  Double.POSITIVE_INFINITY  :  Double.NaN;  [BUGGY]      if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	Real  real  =  imaginary.equals(divisor)?  Double.POSITIVE_INFINITY  :  Double.NaN;	  Real    real    =    imaginary.equals(real)?    Double.POSITIVE_INFINITY    :    Double.NaN;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
41	[BUG]  [BUGGY]  Real  real  =  imaginary.evaluate(divisor);  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  Real  real  =  imaginary.evaluate(divisor);  [BUGGY]      if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	Real  real  =  imaginary.evaluate(divisor);	  Real    real    =    imaginary.evaluate(real);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
42	[BUG]  [BUGGY]  if  (imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  if  (imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  [CE]  ';'  expected  [FE]    java.lang.AssertionError:  expected:<(-0.5    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  if  (imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  if  (imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	if    (imaginary    ==    0.0    ||    imaginary    ==    0.0)    {    if  (imaginary  ==  0.0  ||  imaginary  ==  0.0)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
43	[BUG]  [BUGGY]  if  (imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  if  (Imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  [CE]  ';'  expected  [FE]      java.lang.AssertionError:  expected:<(-0.5    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  if  (imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  if  (Imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	if    (imaginary    ==    0.0    ||    imaginary    ==    0.0)    {    if  (Imaginary  ==  0.0  ||  imaginary  ==  0.0)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
44	[BUG]  [BUGGY]  if(isNaN)  {  return  NaN;  }  [CE]  illegal  start  of  type  [FE]          java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  if(isNaN)  {  return  NaN;  }  [BUGGY]      if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	if(isNaN)  {  return  NaN;  }	  if(isInfinite)    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
45	[BUG]  [BUGGY]  Real  real  =  double.equals(Double.POSITIVE_INFINITY)?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;  [CE]  class  expected  [FE]            java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  Real  real  =  double.equals(Double.POSITIVE_INFINITY)?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;  [BUGGY]      if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	Real  real  =  double.equals(Double.POSITIVE_INFINITY)?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;	  Real    real    =    real.equals(Double.POSITIVE_INFINITY)?    Double.POSITIVE_INFINITY    :    Double.POSITIVE_INFINITY;    	non-compiled	[CE]  class  expected	27	None	replace
46	[BUG]  [BUGGY]  Real  real  =  denominator.equals(imaginary)?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  Real  real  =  denominator.equals(imaginary)?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;  [BUGGY]      if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	Real  real  =  denominator.equals(imaginary)?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;	  Real    real    =    denominator.equals(real)?    Double.POSITIVE_INFINITY    :    Double.POSITIVE_INFINITY;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
47	[BUG]  [BUGGY]  Real  real  =  real.evaluate(real);  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  Real  real  =  real.evaluate(real);  [BUGGY]      if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	Real  real  =  real.evaluate(real);	  Real    real    =    realistic.evaluate(real);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
48	[BUG]  [BUGGY]  if(isInfinite)  {  return  ONE;  }  [CE]  illegal  start  of  type  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  if(isInfinite)  {  return  ONE;  }  [BUGGY]      if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	if(isInfinite)  {  return  ONE;  }	          if(isNaN    ||    isInfinite)    {    return    NaN;    }    if(isNaN    ||    isInfinite)    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
49	[BUG]  [BUGGY]  Real  real  =  denominator.equals(real)?  Double.POSITIVE_INFINITY  :  Double.NaN  +  1;  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  Real  real  =  denominator.equals(real)?  Double.POSITIVE_INFINITY  :  Double.NaN  +  1;  [BUGGY]      if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	Real  real  =  denominator.equals(real)?  Double.POSITIVE_INFINITY  :  Double.NaN  +  1;	  Real    real    =    denominator.equals(real)?    Double.POSITIVE_INFINITY    :    Double.NaN;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
50	[BUG]  [BUGGY]  Real  real  =  imaginary.equals(Double.POSITIVE_INFINITY)?  Double.POSITIVE_INFINITY  :  Double.NaN;  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  Real  real  =  imaginary.equals(Double.POSITIVE_INFINITY)?  Double.POSITIVE_INFINITY  :  Double.NaN;  [BUGGY]      if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	Real  real  =  imaginary.equals(Double.POSITIVE_INFINITY)?  Double.POSITIVE_INFINITY  :  Double.NaN;	  Real    real    =    imaginary.equals(real)?    Double.POSITIVE_INFINITY    :    Double.NaN;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
51	[BUG]  [BUGGY]  Real  real  =  imaginary.equals(Double.NaN)?  Double.POSITIVE_INFINITY  :  double.doubleValue();  [CE]  class  expected  [FE]                java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  Real  real  =  imaginary.equals(Double.NaN)?  Double.POSITIVE_INFINITY  :  double.doubleValue();  [BUGGY]      if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	Real  real  =  imaginary.equals(Double.NaN)?  Double.POSITIVE_INFINITY  :  double.doubleValue();	  Real    real    =    imaginary.equals(Double.POSITIVE_INFINITY)?    Double.POSITIVE_INFINITY    :    double.doubleValue();    	non-compiled	[CE]  class  expected	25	None	replace
52	[BUG]  [BUGGY]  Real  real  =  denominator.evaluate(real,  scale);  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  Real  real  =  denominator.evaluate(real,  scale);  [BUGGY]      if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	Real  real  =  denominator.evaluate(real,  scale);	  Real    real    =    denominator.evaluate(real);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
53	[BUG]  [BUGGY]  if(isNaN  ||  isInfinite)  {  if(imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  return  NaN;  }  if(isNaN  ||  isInfinite)  {  if(Imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  if(isNaN  ||  isInfinite)  {  if(imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  return  NaN;  }  if(isNaN  ||  isInfinite)  {  if(Imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	if(isNaN    ||    isInfinite)    {    if(imaginary    ==    0.0    ||    imaginary    ==    0.0)    {    return    NaN;    }    if(isNaN  ||  isInfinite)  {  if(Imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  return  NaN;  }	  	non-compiled	[CE]  ';'  expected	15	None	add
54	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]        java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  if  (real  ==  0.0  &&  real  ==  0.0)  {  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	add	if  (real  ==  0.0  &&  real  ==  0.0)  {	  if    (imaginary    ==    0.0    &&    real    ==    0.0)    {    if    (imaginary    ==    0.0    &&    real    ==    0.0)    {    	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	23	2	replace
55	[BUG]  [BUGGY]  if  (real  ==  0.0  &&  real  ==  0.0)  {  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]        java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  if  (real  ==  0.0  &&  real  ==  0.0)  {  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	if  (real  ==  0.0  &&  real  ==  0.0)  {	  if    (imaginary    ==    0.0    &&    real    ==    0.0)    {    if    (imaginary    ==    0.0    &&    real    ==    0.0)    {    	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	23	2	replace
56	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  if(isNaN)  {  if(imaginary  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	add	if(isNaN)  {  if(imaginary  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }	  if(isInfinite)    {    if(imaginary    ==    0.0    &&    imaginary    ==    0.0)    {    return    NaN;    }    	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	29	1	replace
57	[BUG]  [BUGGY]  if(isNaN)  {  if(imaginary  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  if(isNaN)  {  if(imaginary  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	if(isNaN)  {  if(imaginary  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }	  if(isInfinite)    {    if(imaginary    ==    0.0    &&    imaginary    ==    0.0)    {    return    NaN;    }    	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	29	1	replace
58	[BUG]  [BUGGY]  Real  real  =  denominator.equals(imaginary)?  Double.POSITIVE_INFINITY  :  double.doubleValue();  [CE]  class  expected  [FE]                  java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  Real  real  =  denominator.equals(imaginary)?  Double.POSITIVE_INFINITY  :  double.doubleValue();  [BUGGY]      if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	Real  real  =  denominator.equals(imaginary)?  Double.POSITIVE_INFINITY  :  double.doubleValue();	  Real    real    =    denominator.equals(real)?    Double.POSITIVE_INFINITY    :    double.doubleValue();    	non-compiled	[CE]  class  expected	20	None	replace
59	[BUG]  [BUGGY]  if(isInfinite)  {  if(imaginary  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if(isInfinite)  {  if(Imaginary  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  [CE]  ';'  expected  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  if(isInfinite)  {  if(imaginary  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if(isInfinite)  {  if(Imaginary  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	if(isInfinite)    {    if(imaginary    ==    0.0    &&    imaginary    ==    0.0)    {    return    NaN;    }    if(isInfinite)  {  if(Imaginary  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }	  	non-compiled	[CE]  ';'  expected	28	None	add
60	[BUG]  [BUGGY]  Real  real  =  divisor.doubleValue()  +  1;  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  Real  real  =  divisor.doubleValue()  +  1;  [BUGGY]      if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	Real  real  =  divisor.doubleValue()  +  1;	  Real    real    =    divisor.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
61	[BUG]  [BUGGY]  Real  real  =  real.equals(Double.NaN)?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;  [CE]  illegal  start  of  type  [FE]            java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  Real  real  =  real.equals(Double.NaN)?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;  [BUGGY]      if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	Real  real  =  real.equals(Double.NaN)?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;	  Real    real    =    real.equals(Double.POSITIVE_INFINITY)?    Double.POSITIVE_INFINITY    :    Double.POSITIVE_INFINITY;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
62	[BUG]  [BUGGY]  Real  real  =  isNaN  ||  isNaN?  Double.POSITIVE_INFINITY  :  Double.NaN;  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  Real  real  =  isNaN  ||  isNaN?  Double.POSITIVE_INFINITY  :  Double.NaN;  [BUGGY]      if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	Real  real  =  isNaN  ||  isNaN?  Double.POSITIVE_INFINITY  :  Double.NaN;	  Real    real    =    isNaN.equals(real)?    Double.POSITIVE_INFINITY    :    Double.NaN;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
63	[BUG]  [BUGGY]  Real  real  =  real.equals(Double.POSITIVE_INFINITY)?  Double.POSITIVE_INFINITY  :  Double.ONE;  [CE]  illegal  start  of  type  [FE]            java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  Real  real  =  real.equals(Double.POSITIVE_INFINITY)?  Double.POSITIVE_INFINITY  :  Double.ONE;  [BUGGY]      if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	Real  real  =  real.equals(Double.POSITIVE_INFINITY)?  Double.POSITIVE_INFINITY  :  Double.ONE;	  Real    real    =    real.equals(Double.POSITIVE_INFINITY)?    Double.POSITIVE_INFINITY    :    Double.POSITIVE_INFINITY;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
64	[BUG]  [BUGGY]  if(isInfinite  ||  isNaN  ||  imaginary)  {  return  NaN;  }  [CE]  illegal  start  of  type  [FE]        java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  if(isInfinite  ||  isNaN  ||  imaginary)  {  return  NaN;  }  [BUGGY]      if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	if(isInfinite  ||  isNaN  ||  imaginary)  {  return  NaN;  }	  if(isInfinite    ||    isNaN)    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
65	[BUG]  [BUGGY]  Real  real  =  imaginary.evaluate(Divisor.NaN);  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  Real  real  =  imaginary.evaluate(Divisor.NaN);  [BUGGY]      if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	Real  real  =  imaginary.evaluate(Divisor.NaN);	  Real    real    =    imaginary.evaluate(real);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
66	[BUG]  [BUGGY]  if(isInfinite  ||  isInfinite)  {  return  NaN;  }  [CE]  illegal  start  of  type  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  if(isInfinite  ||  isInfinite)  {  return  NaN;  }  [BUGGY]      if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	if(isInfinite  ||  isInfinite)  {  return  NaN;  }	          if(isNaN    ||    isInfinite)    {    return    NaN;    }    if(isNaN    ||    isInfinite)    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
67	[BUG]  [BUGGY]  Real  real  =  divisor.equals(real)?  Double.POSITIVE_INFINITY  :  double.doubleValue();  [CE]  class  expected  [FE]                  java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  Real  real  =  divisor.equals(real)?  Double.POSITIVE_INFINITY  :  double.doubleValue();  [BUGGY]      if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	Real  real  =  divisor.equals(real)?  Double.POSITIVE_INFINITY  :  double.doubleValue();	  Real    real    =    denominator.equals(real)?    Double.POSITIVE_INFINITY    :    double.doubleValue();    	non-compiled	[CE]  class  expected	20	None	replace
68	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(-0.5  [FE]          java.lang.AssertionError:  expected:<(-0.5      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  if(imaginary  >=  0.0  ||  imaginary  ==  0.0)  {  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	add	if(imaginary  >=  0.0  ||  imaginary  ==  0.0)  {	  if    (real    ==    0.0    ||    imaginary    ==    0.0)    {    if    (real    >=    0.0    ||    imaginary    ==    0.0)    {    	compilable	  [FE]  java.lang.AssertionError:  expected:<(-0.5  	3	4	replace
69	[BUG]  [BUGGY]  if(imaginary  >=  0.0  ||  imaginary  ==  0.0)  {  [FE]  java.lang.AssertionError:  expected:<(-0.5  [FE]          java.lang.AssertionError:  expected:<(-0.5      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  if(imaginary  >=  0.0  ||  imaginary  ==  0.0)  {  [BUGGY]      return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	if(imaginary  >=  0.0  ||  imaginary  ==  0.0)  {	  if    (real    ==    0.0    ||    imaginary    ==    0.0)    {    if    (real    >=    0.0    ||    imaginary    ==    0.0)    {    	compilable	  [FE]  java.lang.AssertionError:  expected:<(-0.5  	3	4	replace
70	[BUG]  [BUGGY]  Real  real  =  this.real.doubleValue();  [CE]  illegal  start  of  type  [FE]            java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  Real  real  =  this.real.doubleValue();  [BUGGY]      if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	Real  real  =  this.real.doubleValue();	  Real    real    =    ZERO.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
71	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  if(isNaN  ||  isInfinite)  {  if(imaginary  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	add	if(isNaN  ||  isInfinite)  {  if(imaginary  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }	  if(isNaN    ||    isInfinite)    {    if(imaginary    ==    0.0    ||    imaginary    ==    0.0)    {    return    NaN;    }    	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	16	2	replace
72	[BUG]  [BUGGY]  if(isNaN  ||  isInfinite)  {  if(imaginary  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  if(isNaN  ||  isInfinite)  {  if(imaginary  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  [BUGGY]      if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	if(isNaN  ||  isInfinite)  {  if(imaginary  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }	  if(isNaN    ||    isInfinite)    {    if(imaginary    ==    0.0    ||    imaginary    ==    0.0)    {    return    NaN;    }    	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	16	2	replace
73	[BUG]  [BUGGY]  Real  real  =  real.evaluate(Divisor.NaN);  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  Real  real  =  real.evaluate(Divisor.NaN);  [BUGGY]      if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	Real  real  =  real.evaluate(Divisor.NaN);	  Real    real    =    realistic.evaluate(real);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
74	[BUG]  [BUGGY]  Real  real  =  denominator.equals(real)?  Double.POSITIVE_INFINITY  :  Double.ONE;  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected:<(NaN      [CONTEXT]      public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }      [BUGGY]  Real  real  =  denominator.equals(real)?  Double.POSITIVE_INFINITY  :  Double.ONE;  [BUGGY]      if  (real  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	0.4472135954999579	304	304	1	replace	Real  real  =  denominator.equals(real)?  Double.POSITIVE_INFINITY  :  Double.ONE;	  Real    real    =    denominator.equals(real)?    Double.POSITIVE_INFINITY    :    Double.NaN;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
