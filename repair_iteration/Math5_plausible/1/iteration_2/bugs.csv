bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Real  =  imaginary.evaluate(real);  [CE]  cannot  find  symbol  Real  [FE]        java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {    [BUGGY]  Real  =  imaginary.evaluate(real);  [BUGGY]    return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	Real  =  imaginary.evaluate(real);	      Real    =    real.evaluate(imaginary);    	non-compiled	[CE]  cannot  find  symbol  Real	7	None	replace
2	[BUG]  [BUGGY]  Real  =  real.evaluate(divisor);  [CE]  cannot  find  symbol  Real  [FE]          java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {    [BUGGY]  Real  =  real.evaluate(divisor);  [BUGGY]    return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	Real  =  real.evaluate(divisor);	      Real    =    real.evaluate(imaginary);    	non-compiled	[CE]  cannot  find  symbol  Real	7	None	replace
3	[BUG]  [BUGGY]  double  denominator  =  Math.abs(imaginary)/  divisor;  [CE]  cannot  find  symbol  divisor  [FE]            java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {    [BUGGY]  double  denominator  =  Math.abs(imaginary)/  divisor;  [BUGGY]    return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	double  denominator  =  Math.abs(imaginary)/  divisor;	      double    denominator    =    Math.abs(imaginary)/    scale;    	non-compiled	[CE]  cannot  find  symbol  divisor	4	None	replace
4	[BUG]  [BUGGY]  double  denominator  =  Math.abs(imaginary)/  d;  [CE]  cannot  find  symbol  d  [FE]              java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {    [BUGGY]  double  denominator  =  Math.abs(imaginary)/  d;  [BUGGY]    return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	double  denominator  =  Math.abs(imaginary)/  d;	      double    denominator    =    Math.abs(imaginary)/    scale;    	non-compiled	[CE]  cannot  find  symbol  d	4	None	replace
5	[BUG]  [BUGGY]      double  denominator  =  Math.abs(imaginary);  double  denominator  =  Math.abs(imaginary);  [CE]  variable  denominator  is  already  defined  in  method  reciprocal()  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {    [BUGGY]      double  denominator  =  Math.abs(imaginary);  double  denominator  =  Math.abs(imaginary);  [BUGGY]    return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	        double    denominator    =    Math.abs(imaginary);    double  denominator  =  Math.abs(imaginary);	  	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  reciprocal()	2	None	add
6	[BUG]  [BUGGY]      double  denominator  =  Math.abs(imaginary);  java.lang.AssertionError:  expected  [CE]  not  a  statement  [FE]      java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {    [BUGGY]      double  denominator  =  Math.abs(imaginary);  java.lang.AssertionError:  expected  [BUGGY]    return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	        double    denominator    =    Math.abs(imaginary);    java.lang.AssertionError:  expected	  	non-compiled	[CE]  not  a  statement	2	None	add
7	[BUG]  [BUGGY]      double  denominator  =  Math.abs(imaginary);  Double  denominator  =  Math.abs(imaginary);  [CE]  variable  denominator  is  already  defined  in  method  reciprocal()  [FE]        java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {    [BUGGY]      double  denominator  =  Math.abs(imaginary);  Double  denominator  =  Math.abs(imaginary);  [BUGGY]    return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	        double    denominator    =    Math.abs(imaginary);    Double  denominator  =  Math.abs(imaginary);	  	non-compiled	[CE]  variable  denominator  is  already  defined  in  method  reciprocal()	2	None	add
8	[BUG]  [BUGGY]  return  ONE;  java.lang.AssertionError:  expected  [CE]  not  a  statement  [FE]    java.lang.AssertionError:  expected:<(1.0    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {    [BUGGY]  return  ONE;  java.lang.AssertionError:  expected  [BUGGY]    }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	return    ONE;    java.lang.AssertionError:  expected	  	non-compiled	[CE]  not  a  statement	5	None	add
9	[BUG]  [BUGGY]  return  ONE;  java.lang.AssertionError:  expected;  [CE]  not  a  statement  [FE]      java.lang.AssertionError:  expected:<(1.0    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {    [BUGGY]  return  ONE;  java.lang.AssertionError:  expected;  [BUGGY]    }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	return    ONE;    java.lang.AssertionError:  expected;	  	non-compiled	[CE]  not  a  statement	5	None	add
10	[BUG]  [BUGGY]  return  ONE;  java.lang.AssertionError:  expected  =  true;  [CE]  not  a  statement  [FE]        java.lang.AssertionError:  expected:<(1.0    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {    [BUGGY]  return  ONE;  java.lang.AssertionError:  expected  =  true;  [BUGGY]    }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	return    ONE;    java.lang.AssertionError:  expected  =  true;	  	non-compiled	[CE]  not  a  statement	5	None	add
11	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {    [BUGGY]  if(imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  return  NaN;  }  [BUGGY]    return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	add	if(imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  return  NaN;  }	      if(imaginary    ==    0.0)    {    return    NaN;    }    	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	11	1	replace
12	[BUG]  [BUGGY]  if(imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  return  NaN;  }  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {    [BUGGY]  if(imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  return  NaN;  }  [BUGGY]    return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	if(imaginary  ==  0.0  ||  imaginary  ==  0.0)  {  return  NaN;  }	      if(imaginary    ==    0.0)    {    return    NaN;    }    	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	11	1	replace
13	[BUG]  [BUGGY]  Real  c  =  imaginary.getINF();  [CE]  cannot  find  symbol  [FE]          java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {    [BUGGY]  Real  c  =  imaginary.getINF();  [BUGGY]    return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	Real  c  =  imaginary.getINF();	      Real    c    =    real.getINF();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
14	[BUG]  [BUGGY]  double  denominator  =  getDenominator().denominator;  [CE]  cannot  find  symbol  [FE]        java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {    [BUGGY]  double  denominator  =  getDenominator().denominator;  [BUGGY]    return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	double  denominator  =  getDenominator().denominator;	      double    denominator    =    getDenominator();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
15	[BUG]  [BUGGY]  return  Negative.NaN;  [CE]  cannot  find  symbol  Negative  [FE]    java.lang.AssertionError:  expected:<(1.0    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {    [BUGGY]  return  Negative.NaN;  [BUGGY]    }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	return  Negative.NaN;	  return    ONE;    	non-compiled	[CE]  cannot  find  symbol  Negative	6	None	replace
16	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {    [BUGGY]  double  denominator  =  Math.abs(imaginary  -  1);  [BUGGY]    return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	add	double  denominator  =  Math.abs(imaginary  -  1);	      double    denominator    =    Math.abs(imaginary);    	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	3	1	replace
17	[BUG]  [BUGGY]  double  denominator  =  Math.abs(imaginary  -  1);  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {    [BUGGY]  double  denominator  =  Math.abs(imaginary  -  1);  [BUGGY]    return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	double  denominator  =  Math.abs(imaginary  -  1);	      double    denominator    =    Math.abs(imaginary);    	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	3	1	replace
18	[BUG]  [BUGGY]  double  denominator  =  Math.abs(divisor);  [CE]  cannot  find  symbol  divisor  [FE]      java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {    [BUGGY]  double  denominator  =  Math.abs(divisor);  [BUGGY]    return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	double  denominator  =  Math.abs(divisor);	      double    denominator    =    Math.abs(imaginary);    	non-compiled	[CE]  cannot  find  symbol  divisor	3	None	replace
19	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {    [BUGGY]      if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  [BUGGY]    return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	add	        if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary  ==  0.0)  {  return  NaN;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	10	1	add
20	[BUG]  [BUGGY]      if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {    [BUGGY]      if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  ==  0.0)  {  return  NaN;  }  [BUGGY]    return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	        if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary  ==  0.0)  {  return  NaN;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	10	1	add
21	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]      java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {    [BUGGY]      if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary!=  0.0)  {  return  NaN;  }  [BUGGY]    return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	add	        if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary!=  0.0)  {  return  NaN;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	10	1	add
22	[BUG]  [BUGGY]      if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary!=  0.0)  {  return  NaN;  }  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]      java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {    [BUGGY]      if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary!=  0.0)  {  return  NaN;  }  [BUGGY]    return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	        if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary!=  0.0)  {  return  NaN;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	10	1	add
23	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]        java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {    [BUGGY]      if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  >=  0.0)  {  return  NaN;  }  [BUGGY]    return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	add	        if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary  >=  0.0)  {  return  NaN;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	10	1	add
24	[BUG]  [BUGGY]      if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  >=  0.0)  {  return  NaN;  }  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]        java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {    [BUGGY]      if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  >=  0.0)  {  return  NaN;  }  [BUGGY]    return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	        if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary  >=  0.0)  {  return  NaN;  }	  	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	10	1	add
25	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {    [BUGGY]  if(imaginary  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  [BUGGY]    return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	add	if(imaginary  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }	      if(imaginary    ==    0.0)    {    return    NaN;    }    	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	11	1	replace
26	[BUG]  [BUGGY]  if(imaginary  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {    [BUGGY]  if(imaginary  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }  [BUGGY]    return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	if(imaginary  ==  0.0  &&  imaginary  ==  0.0)  {  return  NaN;  }	      if(imaginary    ==    0.0)    {    return    NaN;    }    	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	11	1	replace
27	[BUG]  [BUGGY]      if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  {  0.0)  {  return  NaN;  }  [CE]  ')'  expected  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {    [BUGGY]      if(imaginary  ==  0.0)  {  return  NaN;  }  if(imaginary  {  0.0)  {  return  NaN;  }  [BUGGY]    return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	        if(imaginary    ==    0.0)    {    return    NaN;    }    if(imaginary  {  0.0)  {  return  NaN;  }	  	non-compiled	[CE]  ')'  expected	10	None	add
28	[BUG]  [BUGGY]  double  denominator  =  Math.abs(imaginary)/  ZERO;  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]            java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {    [BUGGY]  double  denominator  =  Math.abs(imaginary)/  ZERO;  [BUGGY]    return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	double  denominator  =  Math.abs(imaginary)/  ZERO;	      double    denominator    =    Math.abs(imaginary)/    scale;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	4	None	replace
29	[BUG]  [BUGGY]  double  denominator  =  getDenominator()  -  imaginary;  [CE]  cannot  find  symbol  [FE]        java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {    [BUGGY]  double  denominator  =  getDenominator()  -  imaginary;  [BUGGY]    return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	double  denominator  =  getDenominator()  -  imaginary;	      double    denominator    =    getDenominator();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
30	[BUG]  [BUGGY]  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {    [BUGGY]  double  denominator  =  Math.abs(imaginary  +  1);  [BUGGY]    return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	add	double  denominator  =  Math.abs(imaginary  +  1);	      double    denominator    =    Math.abs(imaginary);    	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	3	1	replace
31	[BUG]  [BUGGY]  double  denominator  =  Math.abs(imaginary  +  1);  [FE]  java.lang.AssertionError:  expected:<(NaN  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {    [BUGGY]  double  denominator  =  Math.abs(imaginary  +  1);  [BUGGY]    return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	double  denominator  =  Math.abs(imaginary  +  1);	      double    denominator    =    Math.abs(imaginary);    	compilable	  [FE]  java.lang.AssertionError:  expected:<(NaN  	3	1	replace
32	[BUG]  [BUGGY]  return  ONE;  if(imaginary  ==  0.0)  {  return  ONE;  }  [CE]  unreachable  statement  [FE]    java.lang.AssertionError:  expected:<(1.0    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {    [BUGGY]  return  ONE;  if(imaginary  ==  0.0)  {  return  ONE;  }  [BUGGY]    }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	return    ONE;    if(imaginary  ==  0.0)  {  return  ONE;  }	  	non-compiled	[CE]  unreachable  statement	5	None	add
33	[BUG]  [BUGGY]  if(imaginary  ==  null)  {  return  INF;  }  [CE]  incomparable  types:  double  and  <null>  [FE]            java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {    [BUGGY]  if(imaginary  ==  null)  {  return  INF;  }  [BUGGY]    return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	if(imaginary  ==  null)  {  return  INF;  }	      if(imaginary    ==    null)    {    return    NaN;    }    	non-compiled	[CE]  incomparable  types:  double  and  <null>	13	None	replace
34	[BUG]  [BUGGY]      double  denominator  =  Math.abs(imaginary);  java.lang.AssertionError:  expected;  [CE]  not  a  statement  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {    [BUGGY]      double  denominator  =  Math.abs(imaginary);  java.lang.AssertionError:  expected;  [BUGGY]    return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	        double    denominator    =    Math.abs(imaginary);    java.lang.AssertionError:  expected;	  	non-compiled	[CE]  not  a  statement	2	None	add
35	[BUG]  [BUGGY]      if(imaginary  ==  0.0)  {  return  NaN;  }  if(Imaginary  ==  0.0)  {  return  NaN;  }  [CE]  cannot  find  symbol  Imaginary  [FE]    java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {    [BUGGY]      if(imaginary  ==  0.0)  {  return  NaN;  }  if(Imaginary  ==  0.0)  {  return  NaN;  }  [BUGGY]    return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	        if(imaginary    ==    0.0)    {    return    NaN;    }    if(Imaginary  ==  0.0)  {  return  NaN;  }	  	non-compiled	[CE]  cannot  find  symbol  Imaginary	10	None	add
36	[BUG]  [BUGGY]  return  ONE;  if(isInfinite)  {  return  ONE;  }  [CE]  unreachable  statement  [FE]    java.lang.AssertionError:  expected:<(1.0    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {    [BUGGY]  return  ONE;  if(isInfinite)  {  return  ONE;  }  [BUGGY]    }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	return    ONE;    if(isInfinite)  {  return  ONE;  }	  	non-compiled	[CE]  unreachable  statement	5	None	add
37	[BUG]  [BUGGY]  double  denominator  =  getDenominator().denominator();  [CE]  cannot  find  symbol  [FE]        java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {    [BUGGY]  double  denominator  =  getDenominator().denominator();  [BUGGY]    return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	double  denominator  =  getDenominator().denominator();	      double    denominator    =    getDenominator();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
38	[BUG]  [BUGGY]  Real  =  real.evaluate(Divisor.NaN);  [CE]  cannot  find  symbol  Real  [FE]        java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {    [BUGGY]  Real  =  real.evaluate(Divisor.NaN);  [BUGGY]    return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	Real  =  real.evaluate(Divisor.NaN);	      Real    =    real.evaluate(imaginary);    	non-compiled	[CE]  cannot  find  symbol  Real	7	None	replace
39	[BUG]  [BUGGY]  double  denominator  =  Math.abs(imaginary)/  c;  [CE]  cannot  find  symbol  c  [FE]            java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {    [BUGGY]  double  denominator  =  Math.abs(imaginary)/  c;  [BUGGY]    return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	double  denominator  =  Math.abs(imaginary)/  c;	      double    denominator    =    Math.abs(imaginary)/    scale;    	non-compiled	[CE]  cannot  find  symbol  c	4	None	replace
40	[BUG]  [BUGGY]  if(imaginary  ==  null  ||  imaginary.equals(NaN))  {  return  NaN;  }  [CE]  incomparable  types:  double  and  <null>  [FE]            java.lang.AssertionError:  expected:<(NaN    [CONTEXT]    public  Complex  reciprocal()  {  if  (isNaN)  {  return  NaN;  }  if  (real  ==  0.0  &&  imaginary  ==  0.0)  {    [BUGGY]  if(imaginary  ==  null  ||  imaginary.equals(NaN))  {  return  NaN;  }  [BUGGY]    return  NaN;  }  if  (isInfinite)  {  return  ZERO;  }  if  (FastMath.abs(real)  <  FastMath.abs(imaginary))  {  double  q  =  real  /  imaginary;  double  scale  =  1.  /  (real  *  q  +  imaginary);  return  createComplex(scale  *  q,  -scale);  [CLASS]  Complex  [METHOD]  reciprocal  [RETURN_TYPE]  Complex  [VARIABLES]  boolean  isInfinite  isNaN  double  addend  c  d  denominator  divisor  imaginary  q  real  scale  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math5/src/main/java/org/apache/commons/math3/complex/Complex.java	1.0	305	305	1	replace	if(imaginary  ==  null  ||  imaginary.equals(NaN))  {  return  NaN;  }	      if(imaginary    ==    null)    {    return    NaN;    }    	non-compiled	[CE]  incomparable  types:  double  and  <null>	13	None	replace
