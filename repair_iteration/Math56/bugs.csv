bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] final int[] indices = new int[dimension]; [FE] AssertionError [CONTEXT] public int[] getCounts(int index) { if (index < 0 || index >= totalSize) { throw new OutOfRangeException(index, 0, totalSize); } [BUGGY] final int[] indices = new int[dimension]; [BUGGY]  int count = 0; for (int i = 0; i < last; i++) { int idx = 0; final int offset = uniCounterOffset[i]; while (count <= index) { count += offset; ++idx; } --idx; [CLASS] MultidimensionalCounter Iterator [METHOD] getCounts [RETURN_TYPE] int[]  int index [VARIABLES] int[] counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	1.0	222	222	1	replace	
2	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public int[] getCounts(int index) { if (index < 0 || index >= totalSize) { throw new OutOfRangeException(index, 0, totalSize); } [BUGGY] [BUGGY] final int[] indices = new int[dimension]; int count = 0; for (int i = 0; i < last; i++) { int idx = 0; final int offset = uniCounterOffset[i]; while (count <= index) { count += offset; ++idx; } --idx; [CLASS] MultidimensionalCounter Iterator [METHOD] getCounts [RETURN_TYPE] int[]  int index [VARIABLES] int[] counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	1.0	222	222	1	add	
3	[BUG] [BUGGY] int count = 0; [FE] AssertionError [CONTEXT] public int[] getCounts(int index) { if (index < 0 || index >= totalSize) { throw new OutOfRangeException(index, 0, totalSize); } final int[] indices = new int[dimension]; [BUGGY] int count = 0; [BUGGY] for (int i = 0; i < last; i++) { int idx = 0; final int offset = uniCounterOffset[i]; while (count <= index) { count += offset; ++idx; } --idx; count -= offset; indices[i] = idx; [CLASS] MultidimensionalCounter Iterator [METHOD] getCounts [RETURN_TYPE] int[]  int index [VARIABLES] int[] counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	1.0	224	224	1	replace	
4	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public int[] getCounts(int index) { if (index < 0 || index >= totalSize) { throw new OutOfRangeException(index, 0, totalSize); } final int[] indices = new int[dimension]; [BUGGY] [BUGGY] int count = 0; for (int i = 0; i < last; i++) { int idx = 0; final int offset = uniCounterOffset[i]; while (count <= index) { count += offset; ++idx; } --idx; count -= offset; indices[i] = idx; [CLASS] MultidimensionalCounter Iterator [METHOD] getCounts [RETURN_TYPE] int[]  int index [VARIABLES] int[] counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	1.0	224	224	1	add	
5	[BUG] [BUGGY] for (int i = 0; i < last; i++) { [FE] AssertionError [CONTEXT] public int[] getCounts(int index) { if (index < 0 || index >= totalSize) { throw new OutOfRangeException(index, 0, totalSize); } final int[] indices = new int[dimension]; int count = 0; [BUGGY] for (int i = 0; i < last; i++) { [BUGGY] int idx = 0; final int offset = uniCounterOffset[i]; while (count <= index) { count += offset; ++idx; } --idx; count -= offset; indices[i] = idx; } [CLASS] MultidimensionalCounter Iterator [METHOD] getCounts [RETURN_TYPE] int[]  int index [VARIABLES] int[] counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	1.0	225	225	1	replace	
6	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public int[] getCounts(int index) { if (index < 0 || index >= totalSize) { throw new OutOfRangeException(index, 0, totalSize); } final int[] indices = new int[dimension]; int count = 0; [BUGGY] [BUGGY] for (int i = 0; i < last; i++) { int idx = 0; final int offset = uniCounterOffset[i]; while (count <= index) { count += offset; ++idx; } --idx; count -= offset; indices[i] = idx; } [CLASS] MultidimensionalCounter Iterator [METHOD] getCounts [RETURN_TYPE] int[]  int index [VARIABLES] int[] counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	1.0	225	225	1	add	
7	[BUG] [BUGGY] int idx = 0; [FE] AssertionError [CONTEXT] public int[] getCounts(int index) { if (index < 0 || index >= totalSize) { throw new OutOfRangeException(index, 0, totalSize); } final int[] indices = new int[dimension]; int count = 0; for (int i = 0; i < last; i++) { [BUGGY] int idx = 0; [BUGGY] final int offset = uniCounterOffset[i]; while (count <= index) { count += offset; ++idx; } --idx; count -= offset; indices[i] = idx; }  [CLASS] MultidimensionalCounter Iterator [METHOD] getCounts [RETURN_TYPE] int[]  int index [VARIABLES] int[] counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	1.0	226	226	1	replace	
8	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public int[] getCounts(int index) { if (index < 0 || index >= totalSize) { throw new OutOfRangeException(index, 0, totalSize); } final int[] indices = new int[dimension]; int count = 0; for (int i = 0; i < last; i++) { [BUGGY] [BUGGY] int idx = 0; final int offset = uniCounterOffset[i]; while (count <= index) { count += offset; ++idx; } --idx; count -= offset; indices[i] = idx; }  [CLASS] MultidimensionalCounter Iterator [METHOD] getCounts [RETURN_TYPE] int[]  int index [VARIABLES] int[] counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	1.0	226	226	1	add	
9	[BUG] [BUGGY] final int offset = uniCounterOffset[i]; [FE] AssertionError [CONTEXT] if (index < 0 || index >= totalSize) { throw new OutOfRangeException(index, 0, totalSize); } final int[] indices = new int[dimension]; int count = 0; for (int i = 0; i < last; i++) { int idx = 0; [BUGGY] final int offset = uniCounterOffset[i]; [BUGGY] while (count <= index) { count += offset; ++idx; } --idx; count -= offset; indices[i] = idx; } int idx = 1; [CLASS] MultidimensionalCounter Iterator [METHOD] getCounts [RETURN_TYPE] int[]  int index [VARIABLES] int[] counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	1.0	227	227	1	replace	
10	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (index < 0 || index >= totalSize) { throw new OutOfRangeException(index, 0, totalSize); } final int[] indices = new int[dimension]; int count = 0; for (int i = 0; i < last; i++) { int idx = 0; [BUGGY] [BUGGY] final int offset = uniCounterOffset[i]; while (count <= index) { count += offset; ++idx; } --idx; count -= offset; indices[i] = idx; } int idx = 1; [CLASS] MultidimensionalCounter Iterator [METHOD] getCounts [RETURN_TYPE] int[]  int index [VARIABLES] int[] counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	1.0	227	227	1	add	
11	[BUG] [BUGGY] while (count <= index) { [FE] AssertionError [CONTEXT] index >= totalSize) { throw new OutOfRangeException(index, 0, totalSize); } final int[] indices = new int[dimension]; int count = 0; for (int i = 0; i < last; i++) { int idx = 0; final int offset = uniCounterOffset[i]; [BUGGY] while (count <= index) { [BUGGY] count += offset; ++idx; } --idx; count -= offset; indices[i] = idx; } int idx = 1; while (count < index) { [CLASS] MultidimensionalCounter Iterator [METHOD] getCounts [RETURN_TYPE] int[]  int index [VARIABLES] int[] counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	1.0	228	228	1	replace	
12	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] index >= totalSize) { throw new OutOfRangeException(index, 0, totalSize); } final int[] indices = new int[dimension]; int count = 0; for (int i = 0; i < last; i++) { int idx = 0; final int offset = uniCounterOffset[i]; [BUGGY] [BUGGY] while (count <= index) { count += offset; ++idx; } --idx; count -= offset; indices[i] = idx; } int idx = 1; while (count < index) { [CLASS] MultidimensionalCounter Iterator [METHOD] getCounts [RETURN_TYPE] int[]  int index [VARIABLES] int[] counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	1.0	228	228	1	add	
13	[BUG] [BUGGY] count += offset; [FE] AssertionError [CONTEXT] throw new OutOfRangeException(index, 0, totalSize); } final int[] indices = new int[dimension]; int count = 0; for (int i = 0; i < last; i++) { int idx = 0; final int offset = uniCounterOffset[i]; while (count <= index) { [BUGGY] count += offset; [BUGGY] ++idx; } --idx; count -= offset; indices[i] = idx; } int idx = 1; while (count < index) { count += idx; [CLASS] MultidimensionalCounter Iterator [METHOD] getCounts [RETURN_TYPE] int[]  int index [VARIABLES] int[] counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	1.0	229	229	1	replace	
14	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throw new OutOfRangeException(index, 0, totalSize); } final int[] indices = new int[dimension]; int count = 0; for (int i = 0; i < last; i++) { int idx = 0; final int offset = uniCounterOffset[i]; while (count <= index) { [BUGGY] [BUGGY] count += offset; ++idx; } --idx; count -= offset; indices[i] = idx; } int idx = 1; while (count < index) { count += idx; [CLASS] MultidimensionalCounter Iterator [METHOD] getCounts [RETURN_TYPE] int[]  int index [VARIABLES] int[] counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	1.0	229	229	1	add	
15	[BUG] [BUGGY] ++idx; [FE] AssertionError [CONTEXT] } final int[] indices = new int[dimension]; int count = 0; for (int i = 0; i < last; i++) { int idx = 0; final int offset = uniCounterOffset[i]; while (count <= index) { count += offset; [BUGGY] ++idx; [BUGGY] } --idx; count -= offset; indices[i] = idx; } int idx = 1; while (count < index) { count += idx; ++idx; [CLASS] MultidimensionalCounter Iterator [METHOD] getCounts [RETURN_TYPE] int[]  int index [VARIABLES] int[] counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	1.0	230	230	1	replace	
16	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } final int[] indices = new int[dimension]; int count = 0; for (int i = 0; i < last; i++) { int idx = 0; final int offset = uniCounterOffset[i]; while (count <= index) { count += offset; [BUGGY] [BUGGY] ++idx; } --idx; count -= offset; indices[i] = idx; } int idx = 1; while (count < index) { count += idx; ++idx; [CLASS] MultidimensionalCounter Iterator [METHOD] getCounts [RETURN_TYPE] int[]  int index [VARIABLES] int[] counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	1.0	230	230	1	add	
17	[BUG] [BUGGY] --idx; [FE] AssertionError [CONTEXT] final int[] indices = new int[dimension]; int count = 0; for (int i = 0; i < last; i++) { int idx = 0; final int offset = uniCounterOffset[i]; while (count <= index) { count += offset; ++idx; } [BUGGY] --idx; [BUGGY] count -= offset; indices[i] = idx; } int idx = 1; while (count < index) { count += idx; ++idx; } --idx; [CLASS] MultidimensionalCounter Iterator [METHOD] getCounts [RETURN_TYPE] int[]  int index [VARIABLES] int[] counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	1.0	232	232	1	replace	
18	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] final int[] indices = new int[dimension]; int count = 0; for (int i = 0; i < last; i++) { int idx = 0; final int offset = uniCounterOffset[i]; while (count <= index) { count += offset; ++idx; } [BUGGY] [BUGGY] --idx; count -= offset; indices[i] = idx; } int idx = 1; while (count < index) { count += idx; ++idx; } --idx; [CLASS] MultidimensionalCounter Iterator [METHOD] getCounts [RETURN_TYPE] int[]  int index [VARIABLES] int[] counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	1.0	232	232	1	add	
19	[BUG] [BUGGY] count -= offset; [FE] AssertionError [CONTEXT] int count = 0; for (int i = 0; i < last; i++) { int idx = 0; final int offset = uniCounterOffset[i]; while (count <= index) { count += offset; ++idx; } --idx; [BUGGY] count -= offset; [BUGGY] indices[i] = idx; } int idx = 1; while (count < index) { count += idx; ++idx; } --idx; indices[last] = idx; [CLASS] MultidimensionalCounter Iterator [METHOD] getCounts [RETURN_TYPE] int[]  int index [VARIABLES] int[] counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	1.0	233	233	1	replace	
20	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] int count = 0; for (int i = 0; i < last; i++) { int idx = 0; final int offset = uniCounterOffset[i]; while (count <= index) { count += offset; ++idx; } --idx; [BUGGY] [BUGGY] count -= offset; indices[i] = idx; } int idx = 1; while (count < index) { count += idx; ++idx; } --idx; indices[last] = idx; [CLASS] MultidimensionalCounter Iterator [METHOD] getCounts [RETURN_TYPE] int[]  int index [VARIABLES] int[] counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	1.0	233	233	1	add	
21	[BUG] [BUGGY] indices[i] = idx; [FE] AssertionError [CONTEXT] int count = 0; for (int i = 0; i < last; i++) { int idx = 0; final int offset = uniCounterOffset[i]; while (count <= index) { count += offset; ++idx; } --idx; count -= offset; [BUGGY] indices[i] = idx; [BUGGY] } int idx = 1; while (count < index) { count += idx; ++idx; } --idx; indices[last] = idx;  [CLASS] MultidimensionalCounter Iterator [METHOD] getCounts [RETURN_TYPE] int[]  int index [VARIABLES] int[] counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	1.0	234	234	1	replace	
22	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] int count = 0; for (int i = 0; i < last; i++) { int idx = 0; final int offset = uniCounterOffset[i]; while (count <= index) { count += offset; ++idx; } --idx; count -= offset; [BUGGY] [BUGGY] indices[i] = idx; } int idx = 1; while (count < index) { count += idx; ++idx; } --idx; indices[last] = idx;  [CLASS] MultidimensionalCounter Iterator [METHOD] getCounts [RETURN_TYPE] int[]  int index [VARIABLES] int[] counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	1.0	234	234	1	add	
23	[BUG] [BUGGY] int idx = 1; [FE] AssertionError [CONTEXT] final int offset = uniCounterOffset[i]; while (count <= index) { count += offset; ++idx; } --idx; count -= offset; indices[i] = idx; } [BUGGY] int idx = 1; [BUGGY] while (count < index) { count += idx; ++idx; } --idx; indices[last] = idx; return indices; } [CLASS] MultidimensionalCounter Iterator [METHOD] getCounts [RETURN_TYPE] int[]  int index [VARIABLES] int[] counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	1.0	237	237	1	replace	
24	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] final int offset = uniCounterOffset[i]; while (count <= index) { count += offset; ++idx; } --idx; count -= offset; indices[i] = idx; } [BUGGY] [BUGGY] int idx = 1; while (count < index) { count += idx; ++idx; } --idx; indices[last] = idx; return indices; } [CLASS] MultidimensionalCounter Iterator [METHOD] getCounts [RETURN_TYPE] int[]  int index [VARIABLES] int[] counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	1.0	237	237	1	add	
25	[BUG] [BUGGY] while (count < index) { [FE] AssertionError [CONTEXT] while (count <= index) { count += offset; ++idx; } --idx; count -= offset; indices[i] = idx; } int idx = 1; [BUGGY] while (count < index) { [BUGGY] count += idx; ++idx; } --idx; indices[last] = idx; return indices; } [CLASS] MultidimensionalCounter Iterator [METHOD] getCounts [RETURN_TYPE] int[]  int index [VARIABLES] int[] counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	1.0	238	238	1	replace	
26	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] while (count <= index) { count += offset; ++idx; } --idx; count -= offset; indices[i] = idx; } int idx = 1; [BUGGY] [BUGGY] while (count < index) { count += idx; ++idx; } --idx; indices[last] = idx; return indices; } [CLASS] MultidimensionalCounter Iterator [METHOD] getCounts [RETURN_TYPE] int[]  int index [VARIABLES] int[] counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	1.0	238	238	1	add	
27	[BUG] [BUGGY] count += idx; [FE] AssertionError [CONTEXT] count += offset; ++idx; } --idx; count -= offset; indices[i] = idx; } int idx = 1; while (count < index) { [BUGGY] count += idx; [BUGGY] ++idx; } --idx; indices[last] = idx; return indices; } [CLASS] MultidimensionalCounter Iterator [METHOD] getCounts [RETURN_TYPE] int[]  int index [VARIABLES] int[] counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	1.0	239	239	1	replace	
28	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] count += offset; ++idx; } --idx; count -= offset; indices[i] = idx; } int idx = 1; while (count < index) { [BUGGY] [BUGGY] count += idx; ++idx; } --idx; indices[last] = idx; return indices; } [CLASS] MultidimensionalCounter Iterator [METHOD] getCounts [RETURN_TYPE] int[]  int index [VARIABLES] int[] counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	1.0	239	239	1	add	
29	[BUG] [BUGGY] ++idx; [FE] AssertionError [CONTEXT] ++idx; } --idx; count -= offset; indices[i] = idx; } int idx = 1; while (count < index) { count += idx; [BUGGY] ++idx; [BUGGY] } --idx; indices[last] = idx; return indices; } [CLASS] MultidimensionalCounter Iterator [METHOD] getCounts [RETURN_TYPE] int[]  int index [VARIABLES] int[] counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	1.0	240	240	1	replace	
30	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] ++idx; } --idx; count -= offset; indices[i] = idx; } int idx = 1; while (count < index) { count += idx; [BUGGY] [BUGGY] ++idx; } --idx; indices[last] = idx; return indices; } [CLASS] MultidimensionalCounter Iterator [METHOD] getCounts [RETURN_TYPE] int[]  int index [VARIABLES] int[] counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	1.0	240	240	1	add	
31	[BUG] [BUGGY] --idx; [FE] AssertionError [CONTEXT] --idx; count -= offset; indices[i] = idx; } int idx = 1; while (count < index) { count += idx; ++idx; } [BUGGY] --idx; [BUGGY] indices[last] = idx; return indices; } [CLASS] MultidimensionalCounter Iterator [METHOD] getCounts [RETURN_TYPE] int[]  int index [VARIABLES] int[] counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	1.0	242	242	1	replace	
32	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] --idx; count -= offset; indices[i] = idx; } int idx = 1; while (count < index) { count += idx; ++idx; } [BUGGY] [BUGGY] --idx; indices[last] = idx; return indices; } [CLASS] MultidimensionalCounter Iterator [METHOD] getCounts [RETURN_TYPE] int[]  int index [VARIABLES] int[] counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	1.0	242	242	1	add	
33	[BUG] [BUGGY] indices[last] = idx; [FE] AssertionError [CONTEXT] count -= offset; indices[i] = idx; } int idx = 1; while (count < index) { count += idx; ++idx; } --idx; [BUGGY] indices[last] = idx; [BUGGY]  return indices; } [CLASS] MultidimensionalCounter Iterator [METHOD] getCounts [RETURN_TYPE] int[]  int index [VARIABLES] int[] counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	1.0	243	243	1	replace	
34	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] count -= offset; indices[i] = idx; } int idx = 1; while (count < index) { count += idx; ++idx; } --idx; [BUGGY] [BUGGY] indices[last] = idx; return indices; } [CLASS] MultidimensionalCounter Iterator [METHOD] getCounts [RETURN_TYPE] int[]  int index [VARIABLES] int[] counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	1.0	243	243	1	add	
35	[BUG] [BUGGY] return indices; [FE] AssertionError [CONTEXT] } int idx = 1; while (count < index) { count += idx; ++idx; } --idx; indices[last] = idx; [BUGGY] return indices; [BUGGY] } [CLASS] MultidimensionalCounter Iterator [METHOD] getCounts [RETURN_TYPE] int[]  int index [VARIABLES] int[] counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	1.0	245	245	1	replace	
36	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } int idx = 1; while (count < index) { count += idx; ++idx; } --idx; indices[last] = idx; [BUGGY] [BUGGY] return indices; } [CLASS] MultidimensionalCounter Iterator [METHOD] getCounts [RETURN_TYPE] int[]  int index [VARIABLES] int[] counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	1.0	245	245	1	add	
37	[BUG] [BUGGY] return totalSize; [FE] AssertionError [CONTEXT] public int getSize() { [BUGGY] return totalSize; [BUGGY] } [CLASS] MultidimensionalCounter Iterator [METHOD] getSize [RETURN_TYPE] int  [VARIABLES] int[] c counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	1.0	281	281	1	replace	
38	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public int getSize() { [BUGGY] [BUGGY] return totalSize; } [CLASS] MultidimensionalCounter Iterator [METHOD] getSize [RETURN_TYPE] int  [VARIABLES] int[] c counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	1.0	281	281	1	add	
39	[BUG] [BUGGY] return new Iterator(); [FE] AssertionError [CONTEXT] public Iterator iterator() { [BUGGY] return new Iterator(); [BUGGY] } [CLASS] MultidimensionalCounter Iterator [METHOD] iterator [RETURN_TYPE] MultidimensionalCounter$Iterator  [VARIABLES] int[] counter size uniCounterOffset int count dim dimension i j last tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	0.7071067811865475	196	196	1	replace	
40	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public Iterator iterator() { [BUGGY] [BUGGY] return new Iterator(); } [CLASS] MultidimensionalCounter Iterator [METHOD] iterator [RETURN_TYPE] MultidimensionalCounter$Iterator  [VARIABLES] int[] counter size uniCounterOffset int count dim dimension i j last tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	0.7071067811865475	196	196	1	add	
41	[BUG] [BUGGY] return dimension; [FE] AssertionError [CONTEXT] public int getDimension() { [BUGGY] return dimension; [BUGGY] } [CLASS] MultidimensionalCounter Iterator [METHOD] getDimension [RETURN_TYPE] int  [VARIABLES] int[] counter size uniCounterOffset int count dim dimension i j last tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	0.7071067811865475	205	205	1	replace	
42	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public int getDimension() { [BUGGY] [BUGGY] return dimension; } [CLASS] MultidimensionalCounter Iterator [METHOD] getDimension [RETURN_TYPE] int  [VARIABLES] int[] counter size uniCounterOffset int count dim dimension i j last tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	0.7071067811865475	205	205	1	add	
43	[BUG] [BUGGY] if (index < 0 || index >= totalSize) { [FE] AssertionError [CONTEXT] public int[] getCounts(int index) { [BUGGY] if (index < 0 ||   index >= totalSize) { [BUGGY] index >= totalSize) { throw new OutOfRangeException(index, 0, totalSize); } final int[] indices = new int[dimension]; int count = 0; for (int i = 0; i < last; i++) { int idx = 0; final int offset = uniCounterOffset[i]; [CLASS] MultidimensionalCounter Iterator [METHOD] getCounts [RETURN_TYPE] int[]  int index [VARIABLES] int[] counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	0.7071067811865475	217	218	1	replace	
44	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public int[] getCounts(int index) { [BUGGY] [BUGGY] if (index < 0 ||   index >= totalSize) { index >= totalSize) { throw new OutOfRangeException(index, 0, totalSize); } final int[] indices = new int[dimension]; int count = 0; for (int i = 0; i < last; i++) { int idx = 0; final int offset = uniCounterOffset[i]; [CLASS] MultidimensionalCounter Iterator [METHOD] getCounts [RETURN_TYPE] int[]  int index [VARIABLES] int[] counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	0.7071067811865475	217	218	1	add	
45	[BUG] [BUGGY] return count + c[last]; [FE] AssertionError [CONTEXT] } int count = 0; for (int i = 0; i < dimension; i++) { final int index = c[i]; if (index < 0 || index >= size[i]) { throw new OutOfRangeException(index, 0, size[i] - 1); } count += uniCounterOffset[i] * c[i]; } [BUGGY] return count + c[last]; [BUGGY] } [CLASS] MultidimensionalCounter Iterator [METHOD] getCount [RETURN_TYPE] int  c [VARIABLES] int[] c counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	0.7071067811865475	272	272	1	replace	
46	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } int count = 0; for (int i = 0; i < dimension; i++) { final int index = c[i]; if (index < 0 || index >= size[i]) { throw new OutOfRangeException(index, 0, size[i] - 1); } count += uniCounterOffset[i] * c[i]; } [BUGGY] [BUGGY] return count + c[last]; } [CLASS] MultidimensionalCounter Iterator [METHOD] getCount [RETURN_TYPE] int  c [VARIABLES] int[] c counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	0.7071067811865475	272	272	1	add	
47	[BUG] [BUGGY] if (c.length != dimension) { [FE] AssertionError [CONTEXT] public int getCount(int ... c) throws OutOfRangeException { [BUGGY] if (c.length != dimension) { [BUGGY] throw new DimensionMismatchException(c.length, dimension); } int count = 0; for (int i = 0; i < dimension; i++) { final int index = c[i]; if (index < 0 || index >= size[i]) { throw new OutOfRangeException(index, 0, size[i] - 1); } count += uniCounterOffset[i] * c[i]; [CLASS] MultidimensionalCounter Iterator [METHOD] getCount [RETURN_TYPE] int  c [VARIABLES] int[] c counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	0.5773502691896258	260	260	1	replace	
48	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public int getCount(int ... c) throws OutOfRangeException { [BUGGY] [BUGGY] if (c.length != dimension) { throw new DimensionMismatchException(c.length, dimension); } int count = 0; for (int i = 0; i < dimension; i++) { final int index = c[i]; if (index < 0 || index >= size[i]) { throw new OutOfRangeException(index, 0, size[i] - 1); } count += uniCounterOffset[i] * c[i]; [CLASS] MultidimensionalCounter Iterator [METHOD] getCount [RETURN_TYPE] int  c [VARIABLES] int[] c counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	0.5773502691896258	260	260	1	add	
49	[BUG] [BUGGY] int count = 0; [FE] AssertionError [CONTEXT] public int getCount(int ... c) throws OutOfRangeException { if (c.length != dimension) { throw new DimensionMismatchException(c.length, dimension); } [BUGGY] int count = 0; [BUGGY] for (int i = 0; i < dimension; i++) { final int index = c[i]; if (index < 0 || index >= size[i]) { throw new OutOfRangeException(index, 0, size[i] - 1); } count += uniCounterOffset[i] * c[i]; } return count + c[last]; } [CLASS] MultidimensionalCounter Iterator [METHOD] getCount [RETURN_TYPE] int  c [VARIABLES] int[] c counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	0.5773502691896258	263	263	1	replace	
50	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public int getCount(int ... c) throws OutOfRangeException { if (c.length != dimension) { throw new DimensionMismatchException(c.length, dimension); } [BUGGY] [BUGGY] int count = 0; for (int i = 0; i < dimension; i++) { final int index = c[i]; if (index < 0 || index >= size[i]) { throw new OutOfRangeException(index, 0, size[i] - 1); } count += uniCounterOffset[i] * c[i]; } return count + c[last]; } [CLASS] MultidimensionalCounter Iterator [METHOD] getCount [RETURN_TYPE] int  c [VARIABLES] int[] c counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	0.5773502691896258	263	263	1	add	
51	[BUG] [BUGGY] for (int i = 0; i < dimension; i++) { [FE] AssertionError [CONTEXT] public int getCount(int ... c) throws OutOfRangeException { if (c.length != dimension) { throw new DimensionMismatchException(c.length, dimension); } int count = 0; [BUGGY] for (int i = 0; i < dimension; i++) { [BUGGY] final int index = c[i]; if (index < 0 || index >= size[i]) { throw new OutOfRangeException(index, 0, size[i] - 1); } count += uniCounterOffset[i] * c[i]; } return count + c[last]; } [CLASS] MultidimensionalCounter Iterator [METHOD] getCount [RETURN_TYPE] int  c [VARIABLES] int[] c counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	0.5773502691896258	264	264	1	replace	
52	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public int getCount(int ... c) throws OutOfRangeException { if (c.length != dimension) { throw new DimensionMismatchException(c.length, dimension); } int count = 0; [BUGGY] [BUGGY] for (int i = 0; i < dimension; i++) { final int index = c[i]; if (index < 0 || index >= size[i]) { throw new OutOfRangeException(index, 0, size[i] - 1); } count += uniCounterOffset[i] * c[i]; } return count + c[last]; } [CLASS] MultidimensionalCounter Iterator [METHOD] getCount [RETURN_TYPE] int  c [VARIABLES] int[] c counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	0.5773502691896258	264	264	1	add	
53	[BUG] [BUGGY] final int index = c[i]; [FE] AssertionError [CONTEXT] public int getCount(int ... c) throws OutOfRangeException { if (c.length != dimension) { throw new DimensionMismatchException(c.length, dimension); } int count = 0; for (int i = 0; i < dimension; i++) { [BUGGY] final int index = c[i]; [BUGGY] if (index < 0 || index >= size[i]) { throw new OutOfRangeException(index, 0, size[i] - 1); } count += uniCounterOffset[i] * c[i]; } return count + c[last]; } [CLASS] MultidimensionalCounter Iterator [METHOD] getCount [RETURN_TYPE] int  c [VARIABLES] int[] c counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	0.5773502691896258	265	265	1	replace	
54	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public int getCount(int ... c) throws OutOfRangeException { if (c.length != dimension) { throw new DimensionMismatchException(c.length, dimension); } int count = 0; for (int i = 0; i < dimension; i++) { [BUGGY] [BUGGY] final int index = c[i]; if (index < 0 || index >= size[i]) { throw new OutOfRangeException(index, 0, size[i] - 1); } count += uniCounterOffset[i] * c[i]; } return count + c[last]; } [CLASS] MultidimensionalCounter Iterator [METHOD] getCount [RETURN_TYPE] int  c [VARIABLES] int[] c counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	0.5773502691896258	265	265	1	add	
55	[BUG] [BUGGY] if (index < 0 || index >= size[i]) { [FE] AssertionError [CONTEXT] public int getCount(int ... c) throws OutOfRangeException { if (c.length != dimension) { throw new DimensionMismatchException(c.length, dimension); } int count = 0; for (int i = 0; i < dimension; i++) { final int index = c[i]; [BUGGY] if (index < 0 ||    index >= size[i]) { [BUGGY] index >= size[i]) { throw new OutOfRangeException(index, 0, size[i] - 1); } count += uniCounterOffset[i] * c[i]; } return count + c[last]; } [CLASS] MultidimensionalCounter Iterator [METHOD] getCount [RETURN_TYPE] int  c [VARIABLES] int[] c counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	0.5773502691896258	266	267	1	replace	
56	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public int getCount(int ... c) throws OutOfRangeException { if (c.length != dimension) { throw new DimensionMismatchException(c.length, dimension); } int count = 0; for (int i = 0; i < dimension; i++) { final int index = c[i]; [BUGGY] [BUGGY] if (index < 0 ||    index >= size[i]) { index >= size[i]) { throw new OutOfRangeException(index, 0, size[i] - 1); } count += uniCounterOffset[i] * c[i]; } return count + c[last]; } [CLASS] MultidimensionalCounter Iterator [METHOD] getCount [RETURN_TYPE] int  c [VARIABLES] int[] c counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	0.5773502691896258	266	267	1	add	
57	[BUG] [BUGGY] count += uniCounterOffset[i] * c[i]; [FE] AssertionError [CONTEXT] if (c.length != dimension) { throw new DimensionMismatchException(c.length, dimension); } int count = 0; for (int i = 0; i < dimension; i++) { final int index = c[i]; if (index < 0 || index >= size[i]) { throw new OutOfRangeException(index, 0, size[i] - 1); } [BUGGY] count += uniCounterOffset[i] * c[i]; [BUGGY] } return count + c[last]; } [CLASS] MultidimensionalCounter Iterator [METHOD] getCount [RETURN_TYPE] int  c [VARIABLES] int[] c counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	0.5773502691896258	270	270	1	replace	
58	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (c.length != dimension) { throw new DimensionMismatchException(c.length, dimension); } int count = 0; for (int i = 0; i < dimension; i++) { final int index = c[i]; if (index < 0 || index >= size[i]) { throw new OutOfRangeException(index, 0, size[i] - 1); } [BUGGY] [BUGGY] count += uniCounterOffset[i] * c[i]; } return count + c[last]; } [CLASS] MultidimensionalCounter Iterator [METHOD] getCount [RETURN_TYPE] int  c [VARIABLES] int[] c counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	0.5773502691896258	270	270	1	add	
59	[BUG] [BUGGY] public MultidimensionalCounter(int ... size) { [FE] AssertionError [CONTEXT] [BUGGY] public MultidimensionalCounter(int ... size) { [BUGGY] dimension = size.length; this.size = MathUtils.copyOf(size); uniCounterOffset = new int[dimension]; last = dimension - 1; int tS = size[last]; for (int i = 0; i < last; i++) { int count = 1; for (int j = i + 1; j < dimension; j++) { [CLASS] MultidimensionalCounter Iterator [METHOD] <init> [RETURN_TYPE] MultidimensionalCounter(int[])  size [VARIABLES] int[] counter size uniCounterOffset int count dimension i j last tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	0.4472135954999579	165	165	1	replace	
60	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] [BUGGY] [BUGGY] public MultidimensionalCounter(int ... size) { dimension = size.length; this.size = MathUtils.copyOf(size); uniCounterOffset = new int[dimension]; last = dimension - 1; int tS = size[last]; for (int i = 0; i < last; i++) { int count = 1; for (int j = i + 1; j < dimension; j++) { [CLASS] MultidimensionalCounter Iterator [METHOD] <init> [RETURN_TYPE] MultidimensionalCounter(int[])  size [VARIABLES] int[] counter size uniCounterOffset int count dimension i j last tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	0.4472135954999579	165	165	1	add	
61	[BUG] [BUGGY] dimension = size.length; [FE] AssertionError [CONTEXT] public MultidimensionalCounter(int ... size) { [BUGGY] dimension = size.length; [BUGGY] this.size = MathUtils.copyOf(size); uniCounterOffset = new int[dimension]; last = dimension - 1; int tS = size[last]; for (int i = 0; i < last; i++) { int count = 1; for (int j = i + 1; j < dimension; j++) { count *= size[j]; [CLASS] MultidimensionalCounter Iterator [METHOD] <init> [RETURN_TYPE] MultidimensionalCounter(int[])  size [VARIABLES] int[] counter size uniCounterOffset int count dimension i j last tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	0.4472135954999579	166	166	1	replace	
62	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public MultidimensionalCounter(int ... size) { [BUGGY] [BUGGY] dimension = size.length; this.size = MathUtils.copyOf(size); uniCounterOffset = new int[dimension]; last = dimension - 1; int tS = size[last]; for (int i = 0; i < last; i++) { int count = 1; for (int j = i + 1; j < dimension; j++) { count *= size[j]; [CLASS] MultidimensionalCounter Iterator [METHOD] <init> [RETURN_TYPE] MultidimensionalCounter(int[])  size [VARIABLES] int[] counter size uniCounterOffset int count dimension i j last tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	0.4472135954999579	166	166	1	add	
63	[BUG] [BUGGY] this.size = MathUtils.copyOf(size); [FE] AssertionError [CONTEXT] public MultidimensionalCounter(int ... size) { dimension = size.length; [BUGGY] this.size = MathUtils.copyOf(size); [BUGGY]  uniCounterOffset = new int[dimension]; last = dimension - 1; int tS = size[last]; for (int i = 0; i < last; i++) { int count = 1; for (int j = i + 1; j < dimension; j++) { count *= size[j]; } [CLASS] MultidimensionalCounter Iterator [METHOD] <init> [RETURN_TYPE] MultidimensionalCounter(int[])  size [VARIABLES] int[] counter size uniCounterOffset int count dimension i j last tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	0.4472135954999579	167	167	1	replace	
64	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public MultidimensionalCounter(int ... size) { dimension = size.length; [BUGGY] [BUGGY] this.size = MathUtils.copyOf(size); uniCounterOffset = new int[dimension]; last = dimension - 1; int tS = size[last]; for (int i = 0; i < last; i++) { int count = 1; for (int j = i + 1; j < dimension; j++) { count *= size[j]; } [CLASS] MultidimensionalCounter Iterator [METHOD] <init> [RETURN_TYPE] MultidimensionalCounter(int[])  size [VARIABLES] int[] counter size uniCounterOffset int count dimension i j last tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	0.4472135954999579	167	167	1	add	
65	[BUG] [BUGGY] uniCounterOffset = new int[dimension]; [FE] AssertionError [CONTEXT] public MultidimensionalCounter(int ... size) { dimension = size.length; this.size = MathUtils.copyOf(size); [BUGGY] uniCounterOffset = new int[dimension]; [BUGGY]  last = dimension - 1; int tS = size[last]; for (int i = 0; i < last; i++) { int count = 1; for (int j = i + 1; j < dimension; j++) { count *= size[j]; } uniCounterOffset[i] = count; tS *= size[i]; [CLASS] MultidimensionalCounter Iterator [METHOD] <init> [RETURN_TYPE] MultidimensionalCounter(int[])  size [VARIABLES] int[] counter size uniCounterOffset int count dimension i j last tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	0.4472135954999579	169	169	1	replace	
66	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public MultidimensionalCounter(int ... size) { dimension = size.length; this.size = MathUtils.copyOf(size); [BUGGY] [BUGGY] uniCounterOffset = new int[dimension]; last = dimension - 1; int tS = size[last]; for (int i = 0; i < last; i++) { int count = 1; for (int j = i + 1; j < dimension; j++) { count *= size[j]; } uniCounterOffset[i] = count; tS *= size[i]; [CLASS] MultidimensionalCounter Iterator [METHOD] <init> [RETURN_TYPE] MultidimensionalCounter(int[])  size [VARIABLES] int[] counter size uniCounterOffset int count dimension i j last tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	0.4472135954999579	169	169	1	add	
67	[BUG] [BUGGY] last = dimension - 1; [FE] AssertionError [CONTEXT] public MultidimensionalCounter(int ... size) { dimension = size.length; this.size = MathUtils.copyOf(size); uniCounterOffset = new int[dimension]; [BUGGY] last = dimension - 1; [BUGGY] int tS = size[last]; for (int i = 0; i < last; i++) { int count = 1; for (int j = i + 1; j < dimension; j++) { count *= size[j]; } uniCounterOffset[i] = count; tS *= size[i]; } uniCounterOffset[last] = 0; [CLASS] MultidimensionalCounter Iterator [METHOD] <init> [RETURN_TYPE] MultidimensionalCounter(int[])  size [VARIABLES] int[] counter size uniCounterOffset int count dimension i j last tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	0.4472135954999579	171	171	1	replace	
68	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public MultidimensionalCounter(int ... size) { dimension = size.length; this.size = MathUtils.copyOf(size); uniCounterOffset = new int[dimension]; [BUGGY] [BUGGY] last = dimension - 1; int tS = size[last]; for (int i = 0; i < last; i++) { int count = 1; for (int j = i + 1; j < dimension; j++) { count *= size[j]; } uniCounterOffset[i] = count; tS *= size[i]; } uniCounterOffset[last] = 0; [CLASS] MultidimensionalCounter Iterator [METHOD] <init> [RETURN_TYPE] MultidimensionalCounter(int[])  size [VARIABLES] int[] counter size uniCounterOffset int count dimension i j last tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	0.4472135954999579	171	171	1	add	
69	[BUG] [BUGGY] int tS = size[last]; [FE] AssertionError [CONTEXT] public MultidimensionalCounter(int ... size) { dimension = size.length; this.size = MathUtils.copyOf(size); uniCounterOffset = new int[dimension]; last = dimension - 1; [BUGGY] int tS = size[last]; [BUGGY] for (int i = 0; i < last; i++) { int count = 1; for (int j = i + 1; j < dimension; j++) { count *= size[j]; } uniCounterOffset[i] = count; tS *= size[i]; } uniCounterOffset[last] = 0;  [CLASS] MultidimensionalCounter Iterator [METHOD] <init> [RETURN_TYPE] MultidimensionalCounter(int[])  size [VARIABLES] int[] counter size uniCounterOffset int count dimension i j last tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	0.4472135954999579	172	172	1	replace	
70	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public MultidimensionalCounter(int ... size) { dimension = size.length; this.size = MathUtils.copyOf(size); uniCounterOffset = new int[dimension]; last = dimension - 1; [BUGGY] [BUGGY] int tS = size[last]; for (int i = 0; i < last; i++) { int count = 1; for (int j = i + 1; j < dimension; j++) { count *= size[j]; } uniCounterOffset[i] = count; tS *= size[i]; } uniCounterOffset[last] = 0;  [CLASS] MultidimensionalCounter Iterator [METHOD] <init> [RETURN_TYPE] MultidimensionalCounter(int[])  size [VARIABLES] int[] counter size uniCounterOffset int count dimension i j last tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	0.4472135954999579	172	172	1	add	
71	[BUG] [BUGGY] for (int i = 0; i < last; i++) { [FE] AssertionError [CONTEXT] public MultidimensionalCounter(int ... size) { dimension = size.length; this.size = MathUtils.copyOf(size); uniCounterOffset = new int[dimension]; last = dimension - 1; int tS = size[last]; [BUGGY] for (int i = 0; i < last; i++) { [BUGGY] int count = 1; for (int j = i + 1; j < dimension; j++) { count *= size[j]; } uniCounterOffset[i] = count; tS *= size[i]; } uniCounterOffset[last] = 0; if (tS <= 0) { [CLASS] MultidimensionalCounter Iterator [METHOD] <init> [RETURN_TYPE] MultidimensionalCounter(int[])  size [VARIABLES] int[] counter size uniCounterOffset int count dimension i j last tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	0.4472135954999579	173	173	1	replace	
72	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public MultidimensionalCounter(int ... size) { dimension = size.length; this.size = MathUtils.copyOf(size); uniCounterOffset = new int[dimension]; last = dimension - 1; int tS = size[last]; [BUGGY] [BUGGY] for (int i = 0; i < last; i++) { int count = 1; for (int j = i + 1; j < dimension; j++) { count *= size[j]; } uniCounterOffset[i] = count; tS *= size[i]; } uniCounterOffset[last] = 0; if (tS <= 0) { [CLASS] MultidimensionalCounter Iterator [METHOD] <init> [RETURN_TYPE] MultidimensionalCounter(int[])  size [VARIABLES] int[] counter size uniCounterOffset int count dimension i j last tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	0.4472135954999579	173	173	1	add	
73	[BUG] [BUGGY] int count = 1; [FE] AssertionError [CONTEXT] public MultidimensionalCounter(int ... size) { dimension = size.length; this.size = MathUtils.copyOf(size); uniCounterOffset = new int[dimension]; last = dimension - 1; int tS = size[last]; for (int i = 0; i < last; i++) { [BUGGY] int count = 1; [BUGGY] for (int j = i + 1; j < dimension; j++) { count *= size[j]; } uniCounterOffset[i] = count; tS *= size[i]; } uniCounterOffset[last] = 0; if (tS <= 0) { throw new NotStrictlyPositiveException(tS); [CLASS] MultidimensionalCounter Iterator [METHOD] <init> [RETURN_TYPE] MultidimensionalCounter(int[])  size [VARIABLES] int[] counter size uniCounterOffset int count dimension i j last tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	0.4472135954999579	174	174	1	replace	
74	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public MultidimensionalCounter(int ... size) { dimension = size.length; this.size = MathUtils.copyOf(size); uniCounterOffset = new int[dimension]; last = dimension - 1; int tS = size[last]; for (int i = 0; i < last; i++) { [BUGGY] [BUGGY] int count = 1; for (int j = i + 1; j < dimension; j++) { count *= size[j]; } uniCounterOffset[i] = count; tS *= size[i]; } uniCounterOffset[last] = 0; if (tS <= 0) { throw new NotStrictlyPositiveException(tS); [CLASS] MultidimensionalCounter Iterator [METHOD] <init> [RETURN_TYPE] MultidimensionalCounter(int[])  size [VARIABLES] int[] counter size uniCounterOffset int count dimension i j last tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	0.4472135954999579	174	174	1	add	
75	[BUG] [BUGGY] for (int j = i + 1; j < dimension; j++) { [FE] AssertionError [CONTEXT] public MultidimensionalCounter(int ... size) { dimension = size.length; this.size = MathUtils.copyOf(size); uniCounterOffset = new int[dimension]; last = dimension - 1; int tS = size[last]; for (int i = 0; i < last; i++) { int count = 1; [BUGGY] for (int j = i + 1; j < dimension; j++) { [BUGGY] count *= size[j]; } uniCounterOffset[i] = count; tS *= size[i]; } uniCounterOffset[last] = 0; if (tS <= 0) { throw new NotStrictlyPositiveException(tS); } [CLASS] MultidimensionalCounter Iterator [METHOD] <init> [RETURN_TYPE] MultidimensionalCounter(int[])  size [VARIABLES] int[] counter size uniCounterOffset int count dimension i j last tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	0.4472135954999579	175	175	1	replace	
76	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public MultidimensionalCounter(int ... size) { dimension = size.length; this.size = MathUtils.copyOf(size); uniCounterOffset = new int[dimension]; last = dimension - 1; int tS = size[last]; for (int i = 0; i < last; i++) { int count = 1; [BUGGY] [BUGGY] for (int j = i + 1; j < dimension; j++) { count *= size[j]; } uniCounterOffset[i] = count; tS *= size[i]; } uniCounterOffset[last] = 0; if (tS <= 0) { throw new NotStrictlyPositiveException(tS); } [CLASS] MultidimensionalCounter Iterator [METHOD] <init> [RETURN_TYPE] MultidimensionalCounter(int[])  size [VARIABLES] int[] counter size uniCounterOffset int count dimension i j last tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	0.4472135954999579	175	175	1	add	
77	[BUG] [BUGGY] count *= size[j]; [FE] AssertionError [CONTEXT] dimension = size.length; this.size = MathUtils.copyOf(size); uniCounterOffset = new int[dimension]; last = dimension - 1; int tS = size[last]; for (int i = 0; i < last; i++) { int count = 1; for (int j = i + 1; j < dimension; j++) { [BUGGY] count *= size[j]; [BUGGY] } uniCounterOffset[i] = count; tS *= size[i]; } uniCounterOffset[last] = 0; if (tS <= 0) { throw new NotStrictlyPositiveException(tS); }  [CLASS] MultidimensionalCounter Iterator [METHOD] <init> [RETURN_TYPE] MultidimensionalCounter(int[])  size [VARIABLES] int[] counter size uniCounterOffset int count dimension i j last tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	0.4472135954999579	176	176	1	replace	
78	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] dimension = size.length; this.size = MathUtils.copyOf(size); uniCounterOffset = new int[dimension]; last = dimension - 1; int tS = size[last]; for (int i = 0; i < last; i++) { int count = 1; for (int j = i + 1; j < dimension; j++) { [BUGGY] [BUGGY] count *= size[j]; } uniCounterOffset[i] = count; tS *= size[i]; } uniCounterOffset[last] = 0; if (tS <= 0) { throw new NotStrictlyPositiveException(tS); }  [CLASS] MultidimensionalCounter Iterator [METHOD] <init> [RETURN_TYPE] MultidimensionalCounter(int[])  size [VARIABLES] int[] counter size uniCounterOffset int count dimension i j last tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	0.4472135954999579	176	176	1	add	
79	[BUG] [BUGGY] uniCounterOffset[i] = count; [FE] AssertionError [CONTEXT] uniCounterOffset = new int[dimension]; last = dimension - 1; int tS = size[last]; for (int i = 0; i < last; i++) { int count = 1; for (int j = i + 1; j < dimension; j++) { count *= size[j]; } [BUGGY] uniCounterOffset[i] = count; [BUGGY] tS *= size[i]; } uniCounterOffset[last] = 0; if (tS <= 0) { throw new NotStrictlyPositiveException(tS); } totalSize = tS; } [CLASS] MultidimensionalCounter Iterator [METHOD] <init> [RETURN_TYPE] MultidimensionalCounter(int[])  size [VARIABLES] int[] counter size uniCounterOffset int count dimension i j last tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	0.4472135954999579	178	178	1	replace	
80	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] uniCounterOffset = new int[dimension]; last = dimension - 1; int tS = size[last]; for (int i = 0; i < last; i++) { int count = 1; for (int j = i + 1; j < dimension; j++) { count *= size[j]; } [BUGGY] [BUGGY] uniCounterOffset[i] = count; tS *= size[i]; } uniCounterOffset[last] = 0; if (tS <= 0) { throw new NotStrictlyPositiveException(tS); } totalSize = tS; } [CLASS] MultidimensionalCounter Iterator [METHOD] <init> [RETURN_TYPE] MultidimensionalCounter(int[])  size [VARIABLES] int[] counter size uniCounterOffset int count dimension i j last tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	0.4472135954999579	178	178	1	add	
81	[BUG] [BUGGY] tS *= size[i]; [FE] AssertionError [CONTEXT] uniCounterOffset = new int[dimension]; last = dimension - 1; int tS = size[last]; for (int i = 0; i < last; i++) { int count = 1; for (int j = i + 1; j < dimension; j++) { count *= size[j]; } uniCounterOffset[i] = count; [BUGGY] tS *= size[i]; [BUGGY] } uniCounterOffset[last] = 0; if (tS <= 0) { throw new NotStrictlyPositiveException(tS); } totalSize = tS; } [CLASS] MultidimensionalCounter Iterator [METHOD] <init> [RETURN_TYPE] MultidimensionalCounter(int[])  size [VARIABLES] int[] counter size uniCounterOffset int count dimension i j last tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	0.4472135954999579	179	179	1	replace	
82	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] uniCounterOffset = new int[dimension]; last = dimension - 1; int tS = size[last]; for (int i = 0; i < last; i++) { int count = 1; for (int j = i + 1; j < dimension; j++) { count *= size[j]; } uniCounterOffset[i] = count; [BUGGY] [BUGGY] tS *= size[i]; } uniCounterOffset[last] = 0; if (tS <= 0) { throw new NotStrictlyPositiveException(tS); } totalSize = tS; } [CLASS] MultidimensionalCounter Iterator [METHOD] <init> [RETURN_TYPE] MultidimensionalCounter(int[])  size [VARIABLES] int[] counter size uniCounterOffset int count dimension i j last tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	0.4472135954999579	179	179	1	add	
83	[BUG] [BUGGY] uniCounterOffset[last] = 0; [FE] AssertionError [CONTEXT] last = dimension - 1; int tS = size[last]; for (int i = 0; i < last; i++) { int count = 1; for (int j = i + 1; j < dimension; j++) { count *= size[j]; } uniCounterOffset[i] = count; tS *= size[i]; } [BUGGY] uniCounterOffset[last] = 0; [BUGGY]  if (tS <= 0) { throw new NotStrictlyPositiveException(tS); } totalSize = tS; } [CLASS] MultidimensionalCounter Iterator [METHOD] <init> [RETURN_TYPE] MultidimensionalCounter(int[])  size [VARIABLES] int[] counter size uniCounterOffset int count dimension i j last tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	0.4472135954999579	181	181	1	replace	
84	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] last = dimension - 1; int tS = size[last]; for (int i = 0; i < last; i++) { int count = 1; for (int j = i + 1; j < dimension; j++) { count *= size[j]; } uniCounterOffset[i] = count; tS *= size[i]; } [BUGGY] [BUGGY] uniCounterOffset[last] = 0; if (tS <= 0) { throw new NotStrictlyPositiveException(tS); } totalSize = tS; } [CLASS] MultidimensionalCounter Iterator [METHOD] <init> [RETURN_TYPE] MultidimensionalCounter(int[])  size [VARIABLES] int[] counter size uniCounterOffset int count dimension i j last tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	0.4472135954999579	181	181	1	add	
85	[BUG] [BUGGY] if (tS <= 0) { [FE] AssertionError [CONTEXT] for (int i = 0; i < last; i++) { int count = 1; for (int j = i + 1; j < dimension; j++) { count *= size[j]; } uniCounterOffset[i] = count; tS *= size[i]; } uniCounterOffset[last] = 0; [BUGGY] if (tS <= 0) { [BUGGY] throw new NotStrictlyPositiveException(tS); } totalSize = tS; } [CLASS] MultidimensionalCounter Iterator [METHOD] <init> [RETURN_TYPE] MultidimensionalCounter(int[])  size [VARIABLES] int[] counter size uniCounterOffset int count dimension i j last tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	0.4472135954999579	183	183	1	replace	
86	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] for (int i = 0; i < last; i++) { int count = 1; for (int j = i + 1; j < dimension; j++) { count *= size[j]; } uniCounterOffset[i] = count; tS *= size[i]; } uniCounterOffset[last] = 0; [BUGGY] [BUGGY] if (tS <= 0) { throw new NotStrictlyPositiveException(tS); } totalSize = tS; } [CLASS] MultidimensionalCounter Iterator [METHOD] <init> [RETURN_TYPE] MultidimensionalCounter(int[])  size [VARIABLES] int[] counter size uniCounterOffset int count dimension i j last tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	0.4472135954999579	183	183	1	add	
87	[BUG] [BUGGY] totalSize = tS; [FE] AssertionError [CONTEXT] } uniCounterOffset[i] = count; tS *= size[i]; } uniCounterOffset[last] = 0; if (tS <= 0) { throw new NotStrictlyPositiveException(tS); } [BUGGY] totalSize = tS; [BUGGY] } [CLASS] MultidimensionalCounter Iterator [METHOD] <init> [RETURN_TYPE] MultidimensionalCounter(int[])  size [VARIABLES] int[] counter size uniCounterOffset int count dimension i j last tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	0.4472135954999579	187	187	1	replace	
88	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } uniCounterOffset[i] = count; tS *= size[i]; } uniCounterOffset[last] = 0; if (tS <= 0) { throw new NotStrictlyPositiveException(tS); } [BUGGY] [BUGGY] totalSize = tS; } [CLASS] MultidimensionalCounter Iterator [METHOD] <init> [RETURN_TYPE] MultidimensionalCounter(int[])  size [VARIABLES] int[] counter size uniCounterOffset int count dimension i j last tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	0.4472135954999579	187	187	1	add	
89	[BUG] [BUGGY] } [FE] AssertionError [CONTEXT] uniCounterOffset[i] = count; tS *= size[i]; } uniCounterOffset[last] = 0; if (tS <= 0) { throw new NotStrictlyPositiveException(tS); } totalSize = tS; [BUGGY] } [BUGGY]  [CLASS] MultidimensionalCounter Iterator [METHOD] <init> [RETURN_TYPE] MultidimensionalCounter(int[])  size [VARIABLES] int[] counter size uniCounterOffset int count dimension i j last tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	0.4472135954999579	188	188	1	replace	
90	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] uniCounterOffset[i] = count; tS *= size[i]; } uniCounterOffset[last] = 0; if (tS <= 0) { throw new NotStrictlyPositiveException(tS); } totalSize = tS; [BUGGY] [BUGGY] } [CLASS] MultidimensionalCounter Iterator [METHOD] <init> [RETURN_TYPE] MultidimensionalCounter(int[])  size [VARIABLES] int[] counter size uniCounterOffset int count dimension i j last tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	0.4472135954999579	188	188	1	add	
