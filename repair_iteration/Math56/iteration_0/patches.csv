bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number
this_action2	[BUG]  [BUGGY]  [FE]  AssertionError  testIterationConsistency  [CONTEXT]  public  int[]  getCounts(int  index)  {  if  (index  <  0  ||  index  >=  totalSize)  {  throw  new  OutOfRangeException(index,  0,  totalSize);  }  final  int[]  indices  =  new  int[dimension];  int  count  =  0;  for  (int  i  =  0;  i  <  last;  i++)  {  [BUGGY]  int  idx  =(i  <  last)?  0  :  i;  [BUGGY]  final  int  offset  =  uniCounterOffset[i];  while  (count  <=  index)  {  count  +=  offset;  ++idx;  }  --idx;  count  -=  offset;  indices[i]  =  idx;  }  [CLASS]  MultidimensionalCounter  Iterator  [METHOD]  getCounts  [RETURN_TYPE]  int[]  int  index  [VARIABLES]  int[]  counter  indices  size  uniCounterOffset  int  count  dim  dimension  i  idx  index  j  last  offset  tS  totalSize  boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	1.0	226	226	1	add	int  idx  =(i  <  last)?  0  :  i;	int  idx  =  0;  	compilable	  [FE]  AssertionError  testIterationConsistency	7	1
3	[BUG]  [BUGGY]  int  idx  =(i  <  last)?  0  :  i;  [FE]  AssertionError  testIterationConsistency  [CONTEXT]  public  int[]  getCounts(int  index)  {  if  (index  <  0  ||  index  >=  totalSize)  {  throw  new  OutOfRangeException(index,  0,  totalSize);  }  final  int[]  indices  =  new  int[dimension];  int  count  =  0;  for  (int  i  =  0;  i  <  last;  i++)  {  [BUGGY]  int  idx  =(i  <  last)?  0  :  i;  [BUGGY]  final  int  offset  =  uniCounterOffset[i];  while  (count  <=  index)  {  count  +=  offset;  ++idx;  }  --idx;  count  -=  offset;  indices[i]  =  idx;  }  [CLASS]  MultidimensionalCounter  Iterator  [METHOD]  getCounts  [RETURN_TYPE]  int[]  int  index  [VARIABLES]  int[]  counter  indices  size  uniCounterOffset  int  count  dim  dimension  i  idx  index  j  last  offset  tS  totalSize  boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	1.0	226	226	1	replace	int  idx  =(i  <  last)?  0  :  i;	int  idx  =  0;  	compilable	  [FE]  AssertionError  testIterationConsistency	7	1	replace
3	[BUG]  [BUGGY]  [FE]  AssertionError  testIterationConsistency  [CONTEXT]  public  int[]  getCounts(int  index)  {  if  (index  <  0  ||  index  >=  totalSize)  {  throw  new  OutOfRangeException(index,  0,  totalSize);  }  final  int[]  indices  =  new  int[dimension];  int  count  =  0;  for  (int  i  =  0;  i  <  last;  i++)  {  [BUGGY]  int  idx  =(index  ==  0)?  0  :  indices[i];  [BUGGY]  final  int  offset  =  uniCounterOffset[i];  while  (count  <=  index)  {  count  +=  offset;  ++idx;  }  --idx;  count  -=  offset;  indices[i]  =  idx;  }  [CLASS]  MultidimensionalCounter  Iterator  [METHOD]  getCounts  [RETURN_TYPE]  int[]  int  index  [VARIABLES]  int[]  counter  indices  size  uniCounterOffset  int  count  dim  dimension  i  idx  index  j  last  offset  tS  totalSize  boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	1.0	226	226	1	add	int  idx  =(index  ==  0)?  0  :  indices[i];	int  idx  =  0;  	compilable	  [FE]  AssertionError  testIterationConsistency	7	1
4	[BUG]  [BUGGY]  int  idx  =(index  ==  0)?  0  :  indices[i];  [FE]  AssertionError  testIterationConsistency  [CONTEXT]  public  int[]  getCounts(int  index)  {  if  (index  <  0  ||  index  >=  totalSize)  {  throw  new  OutOfRangeException(index,  0,  totalSize);  }  final  int[]  indices  =  new  int[dimension];  int  count  =  0;  for  (int  i  =  0;  i  <  last;  i++)  {  [BUGGY]  int  idx  =(index  ==  0)?  0  :  indices[i];  [BUGGY]  final  int  offset  =  uniCounterOffset[i];  while  (count  <=  index)  {  count  +=  offset;  ++idx;  }  --idx;  count  -=  offset;  indices[i]  =  idx;  }  [CLASS]  MultidimensionalCounter  Iterator  [METHOD]  getCounts  [RETURN_TYPE]  int[]  int  index  [VARIABLES]  int[]  counter  indices  size  uniCounterOffset  int  count  dim  dimension  i  idx  index  j  last  offset  tS  totalSize  boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	1.0	226	226	1	replace	int  idx  =(index  ==  0)?  0  :  indices[i];	int  idx  =  0;  	compilable	  [FE]  AssertionError  testIterationConsistency	7	1	replace
