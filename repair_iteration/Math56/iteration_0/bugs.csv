bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] final int[] indices = new int[dimension]; [FE] AssertionError testIterationConsistency [CONTEXT] public int[] getCounts(int index) { if (index < 0 || index >= totalSize) { throw new OutOfRangeException(index, 0, totalSize); } [BUGGY] final int[] indices = new int[dimension]; [BUGGY]  int count = 0; for (int i = 0; i < last; i++) { int idx = 0; final int offset = uniCounterOffset[i]; while (count <= index) { count += offset; ++idx; } --idx; [CLASS] MultidimensionalCounter Iterator [METHOD] getCounts [RETURN_TYPE] int[]  int index [VARIABLES] int[] counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	1.0	222	222	1	replace	
2	[BUG] [BUGGY] [FE] AssertionError testIterationConsistency [CONTEXT] public int[] getCounts(int index) { if (index < 0 || index >= totalSize) { throw new OutOfRangeException(index, 0, totalSize); } [BUGGY] [BUGGY] final int[] indices = new int[dimension]; int count = 0; for (int i = 0; i < last; i++) { int idx = 0; final int offset = uniCounterOffset[i]; while (count <= index) { count += offset; ++idx; } --idx; [CLASS] MultidimensionalCounter Iterator [METHOD] getCounts [RETURN_TYPE] int[]  int index [VARIABLES] int[] counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	1.0	222	222	1	add	
3	[BUG] [BUGGY] int count = 0; [FE] AssertionError testIterationConsistency [CONTEXT] public int[] getCounts(int index) { if (index < 0 || index >= totalSize) { throw new OutOfRangeException(index, 0, totalSize); } final int[] indices = new int[dimension]; [BUGGY] int count = 0; [BUGGY] for (int i = 0; i < last; i++) { int idx = 0; final int offset = uniCounterOffset[i]; while (count <= index) { count += offset; ++idx; } --idx; count -= offset; indices[i] = idx; [CLASS] MultidimensionalCounter Iterator [METHOD] getCounts [RETURN_TYPE] int[]  int index [VARIABLES] int[] counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	1.0	224	224	1	replace	
4	[BUG] [BUGGY] [FE] AssertionError testIterationConsistency [CONTEXT] public int[] getCounts(int index) { if (index < 0 || index >= totalSize) { throw new OutOfRangeException(index, 0, totalSize); } final int[] indices = new int[dimension]; [BUGGY] [BUGGY] int count = 0; for (int i = 0; i < last; i++) { int idx = 0; final int offset = uniCounterOffset[i]; while (count <= index) { count += offset; ++idx; } --idx; count -= offset; indices[i] = idx; [CLASS] MultidimensionalCounter Iterator [METHOD] getCounts [RETURN_TYPE] int[]  int index [VARIABLES] int[] counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	1.0	224	224	1	add	
5	[BUG] [BUGGY] for (int i = 0; i < last; i++) { [FE] AssertionError testIterationConsistency [CONTEXT] public int[] getCounts(int index) { if (index < 0 || index >= totalSize) { throw new OutOfRangeException(index, 0, totalSize); } final int[] indices = new int[dimension]; int count = 0; [BUGGY] for (int i = 0; i < last; i++) { [BUGGY] int idx = 0; final int offset = uniCounterOffset[i]; while (count <= index) { count += offset; ++idx; } --idx; count -= offset; indices[i] = idx; } [CLASS] MultidimensionalCounter Iterator [METHOD] getCounts [RETURN_TYPE] int[]  int index [VARIABLES] int[] counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	1.0	225	225	1	replace	
6	[BUG] [BUGGY] [FE] AssertionError testIterationConsistency [CONTEXT] public int[] getCounts(int index) { if (index < 0 || index >= totalSize) { throw new OutOfRangeException(index, 0, totalSize); } final int[] indices = new int[dimension]; int count = 0; [BUGGY] [BUGGY] for (int i = 0; i < last; i++) { int idx = 0; final int offset = uniCounterOffset[i]; while (count <= index) { count += offset; ++idx; } --idx; count -= offset; indices[i] = idx; } [CLASS] MultidimensionalCounter Iterator [METHOD] getCounts [RETURN_TYPE] int[]  int index [VARIABLES] int[] counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	1.0	225	225	1	add	
7	[BUG] [BUGGY] int idx = 0; [FE] AssertionError testIterationConsistency [CONTEXT] public int[] getCounts(int index) { if (index < 0 || index >= totalSize) { throw new OutOfRangeException(index, 0, totalSize); } final int[] indices = new int[dimension]; int count = 0; for (int i = 0; i < last; i++) { [BUGGY] int idx = 0; [BUGGY] final int offset = uniCounterOffset[i]; while (count <= index) { count += offset; ++idx; } --idx; count -= offset; indices[i] = idx; }  [CLASS] MultidimensionalCounter Iterator [METHOD] getCounts [RETURN_TYPE] int[]  int index [VARIABLES] int[] counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	1.0	226	226	1	replace	
8	[BUG] [BUGGY] [FE] AssertionError testIterationConsistency [CONTEXT] public int[] getCounts(int index) { if (index < 0 || index >= totalSize) { throw new OutOfRangeException(index, 0, totalSize); } final int[] indices = new int[dimension]; int count = 0; for (int i = 0; i < last; i++) { [BUGGY] [BUGGY] int idx = 0; final int offset = uniCounterOffset[i]; while (count <= index) { count += offset; ++idx; } --idx; count -= offset; indices[i] = idx; }  [CLASS] MultidimensionalCounter Iterator [METHOD] getCounts [RETURN_TYPE] int[]  int index [VARIABLES] int[] counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	1.0	226	226	1	add	
9	[BUG] [BUGGY] final int offset = uniCounterOffset[i]; [FE] AssertionError testIterationConsistency [CONTEXT] if (index < 0 || index >= totalSize) { throw new OutOfRangeException(index, 0, totalSize); } final int[] indices = new int[dimension]; int count = 0; for (int i = 0; i < last; i++) { int idx = 0; [BUGGY] final int offset = uniCounterOffset[i]; [BUGGY] while (count <= index) { count += offset; ++idx; } --idx; count -= offset; indices[i] = idx; } int idx = 1; [CLASS] MultidimensionalCounter Iterator [METHOD] getCounts [RETURN_TYPE] int[]  int index [VARIABLES] int[] counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	1.0	227	227	1	replace	
10	[BUG] [BUGGY] [FE] AssertionError testIterationConsistency [CONTEXT] if (index < 0 || index >= totalSize) { throw new OutOfRangeException(index, 0, totalSize); } final int[] indices = new int[dimension]; int count = 0; for (int i = 0; i < last; i++) { int idx = 0; [BUGGY] [BUGGY] final int offset = uniCounterOffset[i]; while (count <= index) { count += offset; ++idx; } --idx; count -= offset; indices[i] = idx; } int idx = 1; [CLASS] MultidimensionalCounter Iterator [METHOD] getCounts [RETURN_TYPE] int[]  int index [VARIABLES] int[] counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	1.0	227	227	1	add	
11	[BUG] [BUGGY] while (count <= index) { [FE] AssertionError testIterationConsistency [CONTEXT] index >= totalSize) { throw new OutOfRangeException(index, 0, totalSize); } final int[] indices = new int[dimension]; int count = 0; for (int i = 0; i < last; i++) { int idx = 0; final int offset = uniCounterOffset[i]; [BUGGY] while (count <= index) { [BUGGY] count += offset; ++idx; } --idx; count -= offset; indices[i] = idx; } int idx = 1; while (count < index) { [CLASS] MultidimensionalCounter Iterator [METHOD] getCounts [RETURN_TYPE] int[]  int index [VARIABLES] int[] counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	1.0	228	228	1	replace	
12	[BUG] [BUGGY] [FE] AssertionError testIterationConsistency [CONTEXT] index >= totalSize) { throw new OutOfRangeException(index, 0, totalSize); } final int[] indices = new int[dimension]; int count = 0; for (int i = 0; i < last; i++) { int idx = 0; final int offset = uniCounterOffset[i]; [BUGGY] [BUGGY] while (count <= index) { count += offset; ++idx; } --idx; count -= offset; indices[i] = idx; } int idx = 1; while (count < index) { [CLASS] MultidimensionalCounter Iterator [METHOD] getCounts [RETURN_TYPE] int[]  int index [VARIABLES] int[] counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	1.0	228	228	1	add	
13	[BUG] [BUGGY] count += offset; [FE] AssertionError testIterationConsistency [CONTEXT] throw new OutOfRangeException(index, 0, totalSize); } final int[] indices = new int[dimension]; int count = 0; for (int i = 0; i < last; i++) { int idx = 0; final int offset = uniCounterOffset[i]; while (count <= index) { [BUGGY] count += offset; [BUGGY] ++idx; } --idx; count -= offset; indices[i] = idx; } int idx = 1; while (count < index) { count += idx; [CLASS] MultidimensionalCounter Iterator [METHOD] getCounts [RETURN_TYPE] int[]  int index [VARIABLES] int[] counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	1.0	229	229	1	replace	
14	[BUG] [BUGGY] [FE] AssertionError testIterationConsistency [CONTEXT] throw new OutOfRangeException(index, 0, totalSize); } final int[] indices = new int[dimension]; int count = 0; for (int i = 0; i < last; i++) { int idx = 0; final int offset = uniCounterOffset[i]; while (count <= index) { [BUGGY] [BUGGY] count += offset; ++idx; } --idx; count -= offset; indices[i] = idx; } int idx = 1; while (count < index) { count += idx; [CLASS] MultidimensionalCounter Iterator [METHOD] getCounts [RETURN_TYPE] int[]  int index [VARIABLES] int[] counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	1.0	229	229	1	add	
15	[BUG] [BUGGY] ++idx; [FE] AssertionError testIterationConsistency [CONTEXT] } final int[] indices = new int[dimension]; int count = 0; for (int i = 0; i < last; i++) { int idx = 0; final int offset = uniCounterOffset[i]; while (count <= index) { count += offset; [BUGGY] ++idx; [BUGGY] } --idx; count -= offset; indices[i] = idx; } int idx = 1; while (count < index) { count += idx; ++idx; [CLASS] MultidimensionalCounter Iterator [METHOD] getCounts [RETURN_TYPE] int[]  int index [VARIABLES] int[] counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	1.0	230	230	1	replace	
16	[BUG] [BUGGY] [FE] AssertionError testIterationConsistency [CONTEXT] } final int[] indices = new int[dimension]; int count = 0; for (int i = 0; i < last; i++) { int idx = 0; final int offset = uniCounterOffset[i]; while (count <= index) { count += offset; [BUGGY] [BUGGY] ++idx; } --idx; count -= offset; indices[i] = idx; } int idx = 1; while (count < index) { count += idx; ++idx; [CLASS] MultidimensionalCounter Iterator [METHOD] getCounts [RETURN_TYPE] int[]  int index [VARIABLES] int[] counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	1.0	230	230	1	add	
17	[BUG] [BUGGY] --idx; [FE] AssertionError testIterationConsistency [CONTEXT] final int[] indices = new int[dimension]; int count = 0; for (int i = 0; i < last; i++) { int idx = 0; final int offset = uniCounterOffset[i]; while (count <= index) { count += offset; ++idx; } [BUGGY] --idx; [BUGGY] count -= offset; indices[i] = idx; } int idx = 1; while (count < index) { count += idx; ++idx; } --idx; [CLASS] MultidimensionalCounter Iterator [METHOD] getCounts [RETURN_TYPE] int[]  int index [VARIABLES] int[] counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	1.0	232	232	1	replace	
18	[BUG] [BUGGY] [FE] AssertionError testIterationConsistency [CONTEXT] final int[] indices = new int[dimension]; int count = 0; for (int i = 0; i < last; i++) { int idx = 0; final int offset = uniCounterOffset[i]; while (count <= index) { count += offset; ++idx; } [BUGGY] [BUGGY] --idx; count -= offset; indices[i] = idx; } int idx = 1; while (count < index) { count += idx; ++idx; } --idx; [CLASS] MultidimensionalCounter Iterator [METHOD] getCounts [RETURN_TYPE] int[]  int index [VARIABLES] int[] counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	1.0	232	232	1	add	
19	[BUG] [BUGGY] count -= offset; [FE] AssertionError testIterationConsistency [CONTEXT] int count = 0; for (int i = 0; i < last; i++) { int idx = 0; final int offset = uniCounterOffset[i]; while (count <= index) { count += offset; ++idx; } --idx; [BUGGY] count -= offset; [BUGGY] indices[i] = idx; } int idx = 1; while (count < index) { count += idx; ++idx; } --idx; indices[last] = idx; [CLASS] MultidimensionalCounter Iterator [METHOD] getCounts [RETURN_TYPE] int[]  int index [VARIABLES] int[] counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	1.0	233	233	1	replace	
20	[BUG] [BUGGY] [FE] AssertionError testIterationConsistency [CONTEXT] int count = 0; for (int i = 0; i < last; i++) { int idx = 0; final int offset = uniCounterOffset[i]; while (count <= index) { count += offset; ++idx; } --idx; [BUGGY] [BUGGY] count -= offset; indices[i] = idx; } int idx = 1; while (count < index) { count += idx; ++idx; } --idx; indices[last] = idx; [CLASS] MultidimensionalCounter Iterator [METHOD] getCounts [RETURN_TYPE] int[]  int index [VARIABLES] int[] counter indices size uniCounterOffset int count dim dimension i idx index j last offset tS totalSize boolean  	projects/Math56/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java	1.0	233	233	1	add	
