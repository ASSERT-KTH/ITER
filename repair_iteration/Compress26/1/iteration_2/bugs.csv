bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  skip  =  available.skip(input);  [CE]  cannot  find  symbol  skip  [FE]          AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  skip  =  available.skip(input);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skip  =  available.skip(input);	  skip    =    input.skip(available);    	non-compiled	[CE]  cannot  find  symbol  skip	18	None	replace
2	[BUG]  [BUGGY]  timeout  [FE]            AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  skipped  =  input.skip(skipped);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped  =  input.skip(skipped);	  skip    =    input.skip(available);    	compilable	timeout	18	1	replace
3	[BUG]  [BUGGY]  skipped  =  input.skip(skipped);  timeout  [FE]            AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  skipped  =  input.skip(skipped);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped  =  input.skip(skipped);	  skip    =    input.skip(available);    	compilable	timeout	18	1	replace
4	[BUG]  [BUGGY]  int  skip  =  input.skip(available);  [CE]  possible  loss  of  precision  [FE]              AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  int  skip  =  input.skip(available);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	int  skip  =  input.skip(available);	  skip    =    input.skip(available);    	non-compiled	[CE]  possible  loss  of  precision	18	None	replace
5	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  throw  new  IllegalArgumentException(   "   ");  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException(   "   ");  throw  new  IllegalArgumentException(   "   ");  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalArgumentException(   "   ");    throw  new  IllegalArgumentException(   "   ");	  	non-compiled	[CE]  unreachable  statement	5	None	add
6	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throw  new  IllegalArgumentException(   "   ");  [CE]  not  a  statement  [FE]      IllegalArgumentException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throw  new  IllegalArgumentException(   "   ");  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalArgumentException(   "   ");    Throw  new  IllegalArgumentException(   "   ");	  	non-compiled	[CE]  not  a  statement	5	None	add
7	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  throw  new  IllegalArgumentException( ",   ");  [CE]  unreachable  statement  [FE]        IllegalArgumentException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException(   "   ");  throw  new  IllegalArgumentException( ",   ");  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalArgumentException(   "   ");    throw  new  IllegalArgumentException( ",   ");	  	non-compiled	[CE]  unreachable  statement	5	None	add
8	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  throw  new  IllegalArgumentException(, "   ");  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException(   "   ");  throw  new  IllegalArgumentException(, "   ");  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalArgumentException(   "   ");    throw  new  IllegalArgumentException(, "   ");	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
9	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  throw  new  IllegalArgumentException(. "   ");  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException(   "   ");  throw  new  IllegalArgumentException(. "   ");  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalArgumentException(   "   ");    throw  new  IllegalArgumentException(. "   ");	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
10	[BUG]  [BUGGY]  if(skipped  <  =  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(skipped  <  =  0)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  <  =  0)  {  break;  }	  if(skipped    >    0)    {    break;    }    timeout    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
11	[BUG]  [BUGGY]  if(skip  >  0)  {  break;  }  [CE]  cannot  find  symbol  skip  [FE]          AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(skip  >  0)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skip  >  0)  {  break;  }	  if(skipped    >    0)    {    break;    }    timeout    	non-compiled	[CE]  cannot  find  symbol  skip	2	None	replace
12	[BUG]  [BUGGY]  while(skipped  >  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  while(skipped  >  0)  {  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(skipped  >  0)  {	  if(skipped    >    0)    {    break;    }    timeout    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
13	[BUG]  [BUGGY]  continue;  long  skipped  =  input.skip(numToSkip);  [CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)  [FE]        AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  continue;  long  skipped  =  input.skip(numToSkip);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	continue;    long  skipped  =  input.skip(numToSkip);	  timeout    	non-compiled	[CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)	21	None	add
14	[BUG]  [BUGGY]  continue;  long  skipped  =  input.skip(numToSkip);  if(skipped  >  0)  {  continue;  }  [CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)  [FE]          AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  continue;  long  skipped  =  input.skip(numToSkip);  if(skipped  >  0)  {  continue;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	continue;    long  skipped  =  input.skip(numToSkip);  if(skipped  >  0)  {  continue;  }	  timeout    	non-compiled	[CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)	21	None	add
15	[BUG]  [BUGGY]  continue;  long  skipped  =  input.skip(skipped);  [CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)  [FE]            AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  continue;  long  skipped  =  input.skip(skipped);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	continue;    long  skipped  =  input.skip(skipped);	  timeout    	non-compiled	[CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)	21	None	add
16	[BUG]  [BUGGY]  continue;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  continue;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	continue;    if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	21	None	add
17	[BUG]  [BUGGY]  continue;  for(int  i  =  available;  i  <  numToSkip;  i++)  {  if(available  >  0)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  continue;  for(int  i  =  available;  i  <  numToSkip;  i++)  {  if(available  >  0)  {  continue;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	continue;    for(int  i  =  available;  i  <  numToSkip;  i++)  {  if(available  >  0)  {  continue;  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	21	None	add
18	[BUG]  [BUGGY]  continue;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  continue;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	continue;    if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	21	None	add
19	[BUG]  [BUGGY]  continue;  long  skipped  =  input.skip(skipped);  if(skipped  >  0)  {  continue;  }  [CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)  [FE]                    AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  continue;  long  skipped  =  input.skip(skipped);  if(skipped  >  0)  {  continue;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	continue;    long  skipped  =  input.skip(skipped);  if(skipped  >  0)  {  continue;  }	  timeout    	non-compiled	[CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)	21	None	add
20	[BUG]  [BUGGY]  continue;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  continue;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	continue;    if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	21	None	add
21	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "   ");  throw  new  IllegalStateException(   "   ");  [CE]  unreachable  statement  [FE]    IllegalStateException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IllegalStateException(   "   ");  throw  new  IllegalStateException(   "   ");  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalStateException(   "   ");    throw  new  IllegalStateException(   "   ");	  	non-compiled	[CE]  unreachable  statement	3	None	add
22	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "   ");  Throw  new  IllegalStateException(   "   ");  [CE]  not  a  statement  [FE]      IllegalStateException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IllegalStateException(   "   ");  Throw  new  IllegalStateException(   "   ");  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalStateException(   "   ");    Throw  new  IllegalStateException(   "   ");	  	non-compiled	[CE]  not  a  statement	3	None	add
23	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "   ");  throw  new  IllegalStateException( ",   ");  [CE]  unreachable  statement  [FE]        IllegalStateException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IllegalStateException(   "   ");  throw  new  IllegalStateException( ",   ");  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalStateException(   "   ");    throw  new  IllegalStateException( ",   ");	  	non-compiled	[CE]  unreachable  statement	3	None	add
24	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "   ");  throw  new  IllegalStateException(, "   ");  [CE]  illegal  start  of  expression  [FE]          IllegalStateException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IllegalStateException(   "   ");  throw  new  IllegalStateException(, "   ");  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalStateException(   "   ");    throw  new  IllegalStateException(, "   ");	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
25	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "   ");  throw  new  IllegalStateException(. "   ");  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IllegalStateException(   "   ");  throw  new  IllegalStateException(. "   ");  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalStateException(   "   ");    throw  new  IllegalStateException(. "   ");	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
26	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "   ");  throw  new  IllegalStateException( ".   ");  [CE]  unreachable  statement  [FE]              IllegalStateException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IllegalStateException(   "   ");  throw  new  IllegalStateException( ".   ");  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalStateException(   "   ");    throw  new  IllegalStateException( ".   ");	  	non-compiled	[CE]  unreachable  statement	3	None	add
27	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ");  [CE]  <identifier>  expected  [FE]    IllegalArgumentException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ");  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	Throwables.throw  new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	6	None	replace
28	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".getMessage());  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( " ".getMessage());  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException( " ".getMessage());	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
29	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "skipped: "  +  skipped);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalArgumentException( "skipped: "  +  skipped);	  throw    new    IllegalArgumentException(   "   ");    	compilable	  [FE]  IllegalArgumentException  	6	2	replace
30	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "skipped: "  +  skipped);  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "skipped: "  +  skipped);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException( "skipped: "  +  skipped);	  throw    new    IllegalArgumentException(   "   ");    	compilable	  [FE]  IllegalArgumentException  	6	2	replace
31	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Skipped: "  +  skipped);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalArgumentException( "Skipped: "  +  skipped);	  throw    new    IllegalArgumentException(   "   ");    	compilable	  [FE]  IllegalArgumentException  	6	2	replace
32	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Skipped: "  +  skipped);  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Skipped: "  +  skipped);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException( "Skipped: "  +  skipped);	  throw    new    IllegalArgumentException(   "   ");    	compilable	  [FE]  IllegalArgumentException  	6	2	replace
33	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Skip  is  less  than  1: ");  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalArgumentException( "Skip  is  less  than  1: ");	  throw    new    IllegalArgumentException(   "   ");    	compilable	  [FE]  IllegalArgumentException  	6	2	replace
34	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Skip  is  less  than  1: ");  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Skip  is  less  than  1: ");  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException( "Skip  is  less  than  1: ");	  throw    new    IllegalArgumentException(   "   ");    	compilable	  [FE]  IllegalArgumentException  	6	2	replace
35	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	11	2	add
36	[BUG]  [BUGGY]  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	11	2	add
37	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(skipped  >=  0)  {  break;  }  if(skipped!=  0)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped    >=    0)    {    break;    }    if(skipped!=  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	11	2	add
38	[BUG]  [BUGGY]  if(skipped  >=  0)  {  break;  }  if(skipped!=  0)  {  break;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(skipped  >=  0)  {  break;  }  if(skipped!=  0)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >=    0)    {    break;    }    if(skipped!=  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	11	2	add
39	[BUG]  [BUGGY]  if(skipped  >=  0)  {  break;  }  if(skipped  >>  0)  {  break;  }  [CE]  incompatible  types  [FE]        AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(skipped  >=  0)  {  break;  }  if(skipped  >>  0)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >=    0)    {    break;    }    if(skipped  >>  0)  {  break;  }	  	non-compiled	[CE]  incompatible  types	11	None	add
40	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(skipped  >=  0)  {  break;  }  if(skipped  ==  0)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped    >=    0)    {    break;    }    if(skipped  ==  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	11	2	add
41	[BUG]  [BUGGY]  if(skipped  >=  0)  {  break;  }  if(skipped  ==  0)  {  break;  }  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(skipped  >=  0)  {  break;  }  if(skipped  ==  0)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >=    0)    {    break;    }    if(skipped  ==  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	11	2	add
42	[BUG]  [BUGGY]  if(skipped  >=  0)  {  break;  }  if(skipped  [Delete]  0)  {  break;  }  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(skipped  >=  0)  {  break;  }  if(skipped  [Delete]  0)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >=    0)    {    break;    }    if(skipped  [Delete]  0)  {  break;  }	  	non-compiled	[CE]  ')'  expected	11	None	add
43	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(skipped  >=  0)  {  break;  }  if(skipped  <  0)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped    >=    0)    {    break;    }    if(skipped  <  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	11	2	add
44	[BUG]  [BUGGY]  if(skipped  >=  0)  {  break;  }  if(skipped  <  0)  {  break;  }  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(skipped  >=  0)  {  break;  }  if(skipped  <  0)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >=    0)    {    break;    }    if(skipped  <  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	11	2	add
45	[BUG]  [BUGGY]  if(skipped  >=  0)  {  break;  }  If(skipped  >=  0)  {  break;  }  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(skipped  >=  0)  {  break;  }  If(skipped  >=  0)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >=    0)    {    break;    }    If(skipped  >=  0)  {  break;  }	  	non-compiled	[CE]  ';'  expected	11	None	add
46	[BUG]  [BUGGY]  if(available  >  skip)  {  break;  }  [CE]  cannot  find  symbol  skip  [FE]                    AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(available  >  skip)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skip)  {  break;  }	  if(skipped    >    available)    {    break;    }    timeout    	non-compiled	[CE]  cannot  find  symbol  skip	14	None	replace
47	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                      AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(available  >  skipped)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  skipped)  {  break;  }	  if(skipped    >    available)    {    break;    }    timeout    	compilable	  [FE]  AssertionError  	14	2	replace
48	[BUG]  [BUGGY]  if(available  >  skipped)  {  break;  }  [FE]  AssertionError  [FE]                      AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(available  >  skipped)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skipped)  {  break;  }	  if(skipped    >    available)    {    break;    }    timeout    	compilable	  [FE]  AssertionError  	14	2	replace
49	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                        AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(skipped  <  available)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped  <  available)  {  break;  }	  if(skipped    >    available)    {    break;    }    timeout    	compilable	  [FE]  AssertionError  	14	2	replace
50	[BUG]  [BUGGY]  if(skipped  <  available)  {  break;  }  [FE]  AssertionError  [FE]                        AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(skipped  <  available)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  <  available)  {  break;  }	  if(skipped    >    available)    {    break;    }    timeout    	compilable	  [FE]  AssertionError  	14	2	replace
51	[BUG]  [BUGGY]  if(available  >  sink)  {  break;  }  [CE]  cannot  find  symbol  sink  [FE]                          AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(available  >  sink)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  sink)  {  break;  }	  if(skipped    >    available)    {    break;    }    timeout    	non-compiled	[CE]  cannot  find  symbol  sink	14	None	replace
52	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }	      timeout    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
53	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }	      timeout    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
54	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }	      timeout    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
55	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }	      timeout    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
56	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  i;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  i;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  i;  }	      timeout    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
57	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }	      timeout    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
58	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  skipped;  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  skipped;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  skipped;  }	      timeout    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
59	[BUG]  [BUGGY]  timeout  [FE]          AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  skipped  =  input.skip(available  +  numToSkip);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped  =  input.skip(available  +  numToSkip);	  skip    =    input.skip(available    +    numToSkip);    	compilable	timeout	23	1	replace
60	[BUG]  [BUGGY]  skipped  =  input.skip(available  +  numToSkip);  timeout  [FE]          AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  skipped  =  input.skip(available  +  numToSkip);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped  =  input.skip(available  +  numToSkip);	  skip    =    input.skip(available    +    numToSkip);    	compilable	timeout	23	1	replace
61	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  numToSkip  =  input.skip(available  +  numToSkip);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	numToSkip  =  input.skip(available  +  numToSkip);	  skip    =    input.skip(available    +    numToSkip);    	compilable	  [FE]  AssertionError  	23	2	replace
62	[BUG]  [BUGGY]  numToSkip  =  input.skip(available  +  numToSkip);  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  numToSkip  =  input.skip(available  +  numToSkip);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	numToSkip  =  input.skip(available  +  numToSkip);	  skip    =    input.skip(available    +    numToSkip);    	compilable	  [FE]  AssertionError  	23	2	replace
63	[BUG]  [BUGGY]  int  skip  =  input.skip(available  +  numToSkip);  [CE]  possible  loss  of  precision  [FE]              AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  int  skip  =  input.skip(available  +  numToSkip);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	int  skip  =  input.skip(available  +  numToSkip);	  skip    =    input.skip(available    +    numToSkip);    	non-compiled	[CE]  possible  loss  of  precision	23	None	replace
64	[BUG]  [BUGGY]  skip  =  input.skip(available  +  skipped);  [CE]  cannot  find  symbol  skip  [FE]                AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  skip  =  input.skip(available  +  skipped);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skip  =  input.skip(available  +  skipped);	  skip    =    input.skip(available    +    numToSkip);    	non-compiled	[CE]  cannot  find  symbol  skip	23	None	replace
65	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  skipped  =  input.skip(available);  skipped  =  input.skip(available);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped    =    input.skip(available);    skipped  =  input.skip(available);	  timeout    	compilable	  [FE]  AssertionError  	19	2	add
66	[BUG]  [BUGGY]  skipped  =  input.skip(available);  skipped  =  input.skip(available);  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  skipped  =  input.skip(available);  skipped  =  input.skip(available);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available);    skipped  =  input.skip(available);	  timeout    	compilable	  [FE]  AssertionError  	19	2	add
67	[BUG]  [BUGGY]  skipped  =  input.skip(available);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(available);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  skipped  =  input.skip(available);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(available);  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available);    if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(available);  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	19	None	add
68	[BUG]  [BUGGY]  skipped  =  input.skip(available);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(i);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  skipped  =  input.skip(available);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(i);  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available);    if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(i);  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	19	None	add
69	[BUG]  [BUGGY]  skipped  =  input.skip(available);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(available  +  i);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  skipped  =  input.skip(available);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(available  +  i);  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available);    if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(available  +  i);  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	19	None	add
70	[BUG]  [BUGGY]  skipped  =  input.skip(available);  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i--)  {  skipped  =  input.skip(available);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  skipped  =  input.skip(available);  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i--)  {  skipped  =  input.skip(available);  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available);    if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i--)  {  skipped  =  input.skip(available);  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	19	None	add
71	[BUG]  [BUGGY]  skipped  =  input.skip(available);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  skipped  =  input.skip(available);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.next();  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available);    if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.next();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	19	None	add
72	[BUG]  [BUGGY]  skipped  =  input.skip(available);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skip(available);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  skipped  =  input.skip(available);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skip(available);  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available);    if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skip(available);  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	19	None	add
73	[BUG]  [BUGGY]  skipped  =  input.skip(available);  if(available  >  0)  {  for(int  num  =  available;  num  <  0;  num++)  {  skipped  =  input.skip(available);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  skipped  =  input.skip(available);  if(available  >  0)  {  for(int  num  =  available;  num  <  0;  num++)  {  skipped  =  input.skip(available);  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available);    if(available  >  0)  {  for(int  num  =  available;  num  <  0;  num++)  {  skipped  =  input.skip(available);  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	19	None	add
74	[BUG]  [BUGGY]  timeout  [FE]            AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  skipped  =  input.skip(available  -  numToSkip);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped  =  input.skip(available  -  numToSkip);	  skipped    =    input.skip(available);    timeout    	compilable	timeout	20	1	replace
75	[BUG]  [BUGGY]  skipped  =  input.skip(available  -  numToSkip);  timeout  [FE]            AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  skipped  =  input.skip(available  -  numToSkip);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped  =  input.skip(available  -  numToSkip);	  skipped    =    input.skip(available);    timeout    	compilable	timeout	20	1	replace
76	[BUG]  [BUGGY]  timeout  [FE]              AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  skipped  =  input.skip(available  *  numToSkip);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped  =  input.skip(available  *  numToSkip);	  skipped    =    input.skip(available);    timeout    	compilable	timeout	20	1	replace
77	[BUG]  [BUGGY]  skipped  =  input.skip(available  *  numToSkip);  timeout  [FE]              AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  skipped  =  input.skip(available  *  numToSkip);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped  =  input.skip(available  *  numToSkip);	  skipped    =    input.skip(available);    timeout    	compilable	timeout	20	1	replace
78	[BUG]  [BUGGY]  timeout  [FE]                AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  skipped  =  input.skip(available  +  skipped);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped  =  input.skip(available  +  skipped);	  skipped    =    input.skip(available);    timeout    	compilable	timeout	20	1	replace
79	[BUG]  [BUGGY]  skipped  =  input.skip(available  +  skipped);  timeout  [FE]                AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  skipped  =  input.skip(available  +  skipped);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped  =  input.skip(available  +  skipped);	  skipped    =    input.skip(available);    timeout    	compilable	timeout	20	1	replace
80	[BUG]  [BUGGY]  timeout  [FE]                  AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  skipped  =  input.skip(numToSkip);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped  =  input.skip(numToSkip);	  skipped    =    input.skip(available);    timeout    	compilable	timeout	20	1	replace
81	[BUG]  [BUGGY]  skipped  =  input.skip(numToSkip);  timeout  [FE]                  AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  skipped  =  input.skip(numToSkip);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped  =  input.skip(numToSkip);	  skipped    =    input.skip(available);    timeout    	compilable	timeout	20	1	replace
82	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  }	  timeout    	compilable	  [FE]  AssertionError  	13	2	add
83	[BUG]  [BUGGY]  if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  [FE]  AssertionError  [FE]                    AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  }	  timeout    	compilable	  [FE]  AssertionError  	13	2	add
84	[BUG]  [BUGGY]  if(skipped  >  available)  {  break;  }  If(skipped  >  available)  {  break;  }  [CE]  ';'  expected  [FE]                      AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(skipped  >  available)  {  break;  }  If(skipped  >  available)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    available)    {    break;    }    If(skipped  >  available)  {  break;  }	  timeout    	non-compiled	[CE]  ';'  expected	13	None	add
85	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                        AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(skipped  >  available)  {  break;  }  while(skipped  >  available)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped    >    available)    {    break;    }    while(skipped  >  available)  {  break;  }	  timeout    	compilable	  [FE]  AssertionError  	13	2	add
86	[BUG]  [BUGGY]  if(skipped  >  available)  {  break;  }  while(skipped  >  available)  {  break;  }  [FE]  AssertionError  [FE]                        AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(skipped  >  available)  {  break;  }  while(skipped  >  available)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    available)    {    break;    }    while(skipped  >  available)  {  break;  }	  timeout    	compilable	  [FE]  AssertionError  	13	2	add
87	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                          AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(skipped  >  available)  {  break;  }  if(skipped  <  available)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped    >    available)    {    break;    }    if(skipped  <  available)  {  break;  }	  timeout    	compilable	  [FE]  AssertionError  	13	2	add
88	[BUG]  [BUGGY]  if(skipped  >  available)  {  break;  }  if(skipped  <  available)  {  break;  }  [FE]  AssertionError  [FE]                          AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(skipped  >  available)  {  break;  }  if(skipped  <  available)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    available)    {    break;    }    if(skipped  <  available)  {  break;  }	  timeout    	compilable	  [FE]  AssertionError  	13	2	add
89	[BUG]  [BUGGY]  if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  [CE]  illegal  start  of  expression  [FE]                            AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;	  timeout    	non-compiled	[CE]  illegal  start  of  expression	13	None	add
90	[BUG]  [BUGGY]  timeout  [FE]    AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  while(available  >  0)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	while(available  >  0)  {  break;  }	  if(available    >    0)    {    break;    }    	compilable	timeout	10	1	replace
91	[BUG]  [BUGGY]  while(available  >  0)  {  break;  }  timeout  [FE]    AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  while(available  >  0)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  break;  }	  if(available    >    0)    {    break;    }    	compilable	timeout	10	1	replace
92	[BUG]  [BUGGY]  if(available  <  =  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(available  <  =  0)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  =  0)  {  break;  }	  if(available    >    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
93	[BUG]  [BUGGY]  timeout  [FE]        AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(available  <  0)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  <  0)  {  break;  }	  if(available    >    0)    {    break;    }    	compilable	timeout	10	1	replace
94	[BUG]  [BUGGY]  if(available  <  0)  {  break;  }  timeout  [FE]        AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(available  <  0)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  0)  {  break;  }	  if(available    >    0)    {    break;    }    	compilable	timeout	10	1	replace
95	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(available  >=  0)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >=  0)  {  break;  }	  if(available    >    0)    {    break;    }    	compilable	  [FE]  AssertionError  	10	2	replace
96	[BUG]  [BUGGY]  if(available  >=  0)  {  break;  }  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(available  >=  0)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >=  0)  {  break;  }	  if(available    >    0)    {    break;    }    	compilable	  [FE]  AssertionError  	10	2	replace
97	[BUG]  [BUGGY]  while(available  >  0)  {  break;  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  while(available  >  0)  {  break;  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  break;	  if(available    >    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
98	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped    >    0)    {    break;    }    if(skipped  >  0)  {  break;  }	  timeout    	compilable	  [FE]  AssertionError  	1	2	add
99	[BUG]  [BUGGY]  if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    0)    {    break;    }    if(skipped  >  0)  {  break;  }	  timeout    	compilable	  [FE]  AssertionError  	1	2	add
100	[BUG]  [BUGGY]  if(skipped  >  0)  {  break;  }  If(skipped  >  0)  {  break;  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(skipped  >  0)  {  break;  }  If(skipped  >  0)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    0)    {    break;    }    If(skipped  >  0)  {  break;  }	  timeout    	non-compiled	[CE]  ';'  expected	1	None	add
101	[BUG]  [BUGGY]  if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    0)    {    break;    }    if(skipped  >  0)  {  break;	  timeout    	non-compiled	[CE]  illegal  start  of  expression	1	None	add
102	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(skipped  >  0)  {  break;  }  while(skipped  >  0)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped    >    0)    {    break;    }    while(skipped  >  0)  {  break;  }	  timeout    	compilable	  [FE]  AssertionError  	1	2	add
103	[BUG]  [BUGGY]  if(skipped  >  0)  {  break;  }  while(skipped  >  0)  {  break;  }  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(skipped  >  0)  {  break;  }  while(skipped  >  0)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    0)    {    break;    }    while(skipped  >  0)  {  break;  }	  timeout    	compilable	  [FE]  AssertionError  	1	2	add
104	[BUG]  [BUGGY]  if(skipped  >  0)  {  break;  }  when(skipped  >  0)  {  break;  }  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(skipped  >  0)  {  break;  }  when(skipped  >  0)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    0)    {    break;    }    when(skipped  >  0)  {  break;  }	  timeout    	non-compiled	[CE]  ';'  expected	1	None	add
105	[BUG]  [BUGGY]  if(skipped  >  0)  {  break;  }  if(skeipped  >  0)  {  break;  }  [CE]  cannot  find  symbol  skeipped  [FE]                  AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(skipped  >  0)  {  break;  }  if(skeipped  >  0)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    0)    {    break;    }    if(skeipped  >  0)  {  break;  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  skeipped	1	None	add
106	[BUG]  [BUGGY]  throw  new  IOException(   "   ");  throw  new  IOException(   "   ");  [CE]  unreachable  statement  [FE]    IOException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IOException(   "   ");  throw  new  IOException(   "   ");  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IOException(   "   ");    throw  new  IOException(   "   ");	  	non-compiled	[CE]  unreachable  statement	7	None	add
107	[BUG]  [BUGGY]  throw  new  IOException(   "   ");  Throw  new  IOException(   "   ");  [CE]  not  a  statement  [FE]      IOException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IOException(   "   ");  Throw  new  IOException(   "   ");  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IOException(   "   ");    Throw  new  IOException(   "   ");	  	non-compiled	[CE]  not  a  statement	7	None	add
108	[BUG]  [BUGGY]  throw  new  IOException(   "   ");  throw  new  IOException( ",   ");  [CE]  unreachable  statement  [FE]        IOException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IOException(   "   ");  throw  new  IOException( ",   ");  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IOException(   "   ");    throw  new  IOException( ",   ");	  	non-compiled	[CE]  unreachable  statement	7	None	add
109	[BUG]  [BUGGY]  throw  new  IOException(   "   ");  throw  new  IOException(, "   ");  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IOException(   "   ");  throw  new  IOException(, "   ");  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IOException(   "   ");    throw  new  IOException(, "   ");	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
110	[BUG]  [BUGGY]  throw  new  IOException(   "   ");  throw  new  IOException(. "   ");  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IOException(   "   ");  throw  new  IOException(. "   ");  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IOException(   "   ");    throw  new  IOException(. "   ");	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
111	[BUG]  [BUGGY]  timeout  [FE]    AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(available  ==  0)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  ==  0)  {  break;  }	  if(skipped    >=    0)    {    break;    }    	compilable	timeout	12	1	replace
112	[BUG]  [BUGGY]  if(available  ==  0)  {  break;  }  timeout  [FE]    AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(available  ==  0)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  ==  0)  {  break;  }	  if(skipped    >=    0)    {    break;    }    	compilable	timeout	12	1	replace
113	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(available!=  0)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available!=  0)  {  break;  }	  if(skipped    >=    0)    {    break;    }    	compilable	  [FE]  AssertionError  	12	2	replace
114	[BUG]  [BUGGY]  if(available!=  0)  {  break;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(available!=  0)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available!=  0)  {  break;  }	  if(skipped    >=    0)    {    break;    }    	compilable	  [FE]  AssertionError  	12	2	replace
115	[BUG]  [BUGGY]  skip  =  input.skip(numToSkip);  [CE]  cannot  find  symbol  skip  [FE]        AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  skip  =  input.skip(numToSkip);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skip  =  input.skip(numToSkip);	  skip    =    input.skip(skipped);    	non-compiled	[CE]  cannot  find  symbol  skip	17	None	replace
116	[BUG]  [BUGGY]  skip  =  input.skip(saved);  [CE]  cannot  find  symbol  skip  [FE]          AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  skip  =  input.skip(saved);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skip  =  input.skip(saved);	  skip    =    input.skip(skipped);    	non-compiled	[CE]  cannot  find  symbol  skip	17	None	replace
117	[BUG]  [BUGGY]  skip  =  input.skip(num);  [CE]  cannot  find  symbol  skip  [FE]            AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  skip  =  input.skip(num);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skip  =  input.skip(num);	  skip    =    input.skip(skipped);    	non-compiled	[CE]  cannot  find  symbol  skip	17	None	replace
118	[BUG]  [BUGGY]  skip  =  input.skip(offset);  [CE]  cannot  find  symbol  skip  [FE]              AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  skip  =  input.skip(offset);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skip  =  input.skip(offset);	  skip    =    input.skip(skipped);    	non-compiled	[CE]  cannot  find  symbol  skip	17	None	replace
119	[BUG]  [BUGGY]      if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available--;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]      if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available--;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	        if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available--;  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	15	None	add
120	[BUG]  [BUGGY]  throw  new  IOException( " ".getMessage());  [CE]  cannot  find  symbol  [FE]    IOException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IOException( " ".getMessage());  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( " ".getMessage());	  throw    new    IOException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
121	[BUG]  [BUGGY]  [FE]  IOException  [FE]      IOException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IOException( "skipped: "  +  skipped);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IOException( "skipped: "  +  skipped);	  throw    new    IOException(   "   ");    	compilable	  [FE]  IOException  	8	2	replace
122	[BUG]  [BUGGY]  throw  new  IOException( "skipped: "  +  skipped);  [FE]  IOException  [FE]      IOException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IOException( "skipped: "  +  skipped);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( "skipped: "  +  skipped);	  throw    new    IOException(   "   ");    	compilable	  [FE]  IOException  	8	2	replace
123	[BUG]  [BUGGY]  [FE]  IOException  [FE]        IOException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IOException( " "  +  skipped);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IOException( " "  +  skipped);	  throw    new    IOException(   "   ");    	compilable	  [FE]  IOException  	8	2	replace
124	[BUG]  [BUGGY]  throw  new  IOException( " "  +  skipped);  [FE]  IOException  [FE]        IOException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IOException( " "  +  skipped);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( " "  +  skipped);	  throw    new    IOException(   "   ");    	compilable	  [FE]  IOException  	8	2	replace
125	[BUG]  [BUGGY]  timeout  [FE]        AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(available  >  0)  {  continue;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  0)  {  continue;  }	  continue;    timeout    	compilable	timeout	22	1	replace
126	[BUG]  [BUGGY]  if(available  >  0)  {  continue;  }  timeout  [FE]        AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(available  >  0)  {  continue;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  continue;  }	  continue;    timeout    	compilable	timeout	22	1	replace
127	[BUG]  [BUGGY]  timeout  [FE]          AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(skipped  >  0)  {  continue;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped  >  0)  {  continue;  }	  continue;    timeout    	compilable	timeout	22	1	replace
128	[BUG]  [BUGGY]  if(skipped  >  0)  {  continue;  }  timeout  [FE]          AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(skipped  >  0)  {  continue;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  continue;  }	  continue;    timeout    	compilable	timeout	22	1	replace
129	[BUG]  [BUGGY]  timeout  [FE]            AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(available  >  numToSkip)  {  continue;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  numToSkip)  {  continue;  }	  continue;    timeout    	compilable	timeout	22	1	replace
130	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  continue;  }  timeout  [FE]            AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(available  >  numToSkip)  {  continue;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  numToSkip)  {  continue;  }	  continue;    timeout    	compilable	timeout	22	1	replace
131	[BUG]  [BUGGY]  long  skipped  =  input.skip(skipped);  [CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)  [FE]              AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  long  skipped  =  input.skip(skipped);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	long  skipped  =  input.skip(skipped);	  continue;    timeout    	non-compiled	[CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)	22	None	replace
132	[BUG]  [BUGGY]  if(available  <  =  0)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(available  <  =  0)  {  continue;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  =  0)  {  continue;  }	  continue;    timeout    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
133	[BUG]  [BUGGY]  timeout  [FE]                  AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(skipped  >  available)  {  continue;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped  >  available)  {  continue;  }	  continue;    timeout    	compilable	timeout	22	1	replace
134	[BUG]  [BUGGY]  if(skipped  >  available)  {  continue;  }  timeout  [FE]                  AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(skipped  >  available)  {  continue;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  available)  {  continue;  }	  continue;    timeout    	compilable	timeout	22	1	replace
135	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ".getMessage());  [CE]  cannot  find  symbol  [FE]    IllegalStateException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IllegalStateException( " ".getMessage());  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( " ".getMessage());	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
136	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ");  [CE]  <identifier>  expected  [FE]      IllegalStateException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  Throwables.throw  new  IllegalStateException( " ");  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	Throwables.throw  new  IllegalStateException( " ");	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	4	None	replace
137	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IllegalStateException( "skipped: "  +  skipped);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalStateException( "skipped: "  +  skipped);	  throw    new    IllegalStateException(   "   ");    	compilable	  [FE]  IllegalStateException  	4	2	replace
138	[BUG]  [BUGGY]  throw  new  IllegalStateException( "skipped: "  +  skipped);  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IllegalStateException( "skipped: "  +  skipped);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "skipped: "  +  skipped);	  throw    new    IllegalStateException(   "   ");    	compilable	  [FE]  IllegalStateException  	4	2	replace
139	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IllegalStateException( "skipped  =   "  +  skipped);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalStateException( "skipped  =   "  +  skipped);	  throw    new    IllegalStateException(   "   ");    	compilable	  [FE]  IllegalStateException  	4	2	replace
140	[BUG]  [BUGGY]  throw  new  IllegalStateException( "skipped  =   "  +  skipped);  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IllegalStateException( "skipped  =   "  +  skipped);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "skipped  =   "  +  skipped);	  throw    new    IllegalStateException(   "   ");    	compilable	  [FE]  IllegalStateException  	4	2	replace
141	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IllegalStateException( "skipped  =   "  +  available);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalStateException( "skipped  =   "  +  available);	  throw    new    IllegalStateException(   "   ");    	compilable	  [FE]  IllegalStateException  	4	2	replace
142	[BUG]  [BUGGY]  throw  new  IllegalStateException( "skipped  =   "  +  available);  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IllegalStateException( "skipped  =   "  +  available);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "skipped  =   "  +  available);	  throw    new    IllegalStateException(   "   ");    	compilable	  [FE]  IllegalStateException  	4	2	replace
143	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IllegalStateException( "skipped: "  +  available);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalStateException( "skipped: "  +  available);	  throw    new    IllegalStateException(   "   ");    	compilable	  [FE]  IllegalStateException  	4	2	replace
144	[BUG]  [BUGGY]  throw  new  IllegalStateException( "skipped: "  +  available);  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IllegalStateException( "skipped: "  +  available);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "skipped: "  +  available);	  throw    new    IllegalStateException(   "   ");    	compilable	  [FE]  IllegalStateException  	4	2	replace
145	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available    >    0)    {    break;    }    if(available  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	9	2	add
146	[BUG]  [BUGGY]  if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >    0)    {    break;    }    if(available  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	9	2	add
147	[BUG]  [BUGGY]  if(available  >  0)  {  break;  }  If(available  >  0)  {  break;  }  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(available  >  0)  {  break;  }  If(available  >  0)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >    0)    {    break;    }    If(available  >  0)  {  break;  }	  	non-compiled	[CE]  ';'  expected	9	None	add
148	[BUG]  [BUGGY]  if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >    0)    {    break;    }    if(available  >  0)  {  break;	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
149	[BUG]  [BUGGY]  if(available  >  0)  {  break;  }  when(available  >  0)  {  break;  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(available  >  0)  {  break;  }  when(available  >  0)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >    0)    {    break;    }    when(available  >  0)  {  break;  }	  	non-compiled	[CE]  ';'  expected	9	None	add
150	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(available  >  0)  {  break;  }  while(available  >  0)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available    >    0)    {    break;    }    while(available  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	9	2	add
151	[BUG]  [BUGGY]  if(available  >  0)  {  break;  }  while(available  >  0)  {  break;  }  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(available  >  0)  {  break;  }  while(available  >  0)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >    0)    {    break;    }    while(available  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	9	2	add
152	[BUG]  [BUGGY]  if(available  >  0)  {  break;  }  int  available  =  input.read(skipped);  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]              AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(available  >  0)  {  break;  }  int  available  =  input.read(skipped);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >    0)    {    break;    }    int  available  =  input.read(skipped);	  	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	9	None	add
153	[BUG]  [BUGGY]      if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]      if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	        if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	15	None	add
154	[BUG]  [BUGGY]      if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]      if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	        if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	15	None	add
155	[BUG]  [BUGGY]      if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]      if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getLength();  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	        if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getLength();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	15	None	add
156	[BUG]  [BUGGY]  throw  new  IOException( " "  +  input.getMillis());  [CE]  cannot  find  symbol  [FE]    IOException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IOException( " "  +  input.getMillis());  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( " "  +  input.getMillis());	  throw    new    IOException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
157	[BUG]  [BUGGY]  [FE]  IOException  [FE]      IOException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IOException( "skipped  =   "  +  available);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IOException( "skipped  =   "  +  available);	  throw    new    IOException(   "   ");    	compilable	  [FE]  IOException  	8	2	replace
158	[BUG]  [BUGGY]  throw  new  IOException( "skipped  =   "  +  available);  [FE]  IOException  [FE]      IOException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IOException( "skipped  =   "  +  available);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( "skipped  =   "  +  available);	  throw    new    IOException(   "   ");    	compilable	  [FE]  IOException  	8	2	replace
159	[BUG]  [BUGGY]  [FE]  IOException  [FE]        IOException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IOException( " "  +  available);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IOException( " "  +  available);	  throw    new    IOException(   "   ");    	compilable	  [FE]  IOException  	8	2	replace
160	[BUG]  [BUGGY]  throw  new  IOException( " "  +  available);  [FE]  IOException  [FE]        IOException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IOException( " "  +  available);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( " "  +  available);	  throw    new    IOException(   "   ");    	compilable	  [FE]  IOException  	8	2	replace
161	[BUG]  [BUGGY]  if(skipped  >  0)  {  break;  }  if(skip  >  0)  {  break;  }  [CE]  cannot  find  symbol  skip  [FE]        AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(skipped  >  0)  {  break;  }  if(skip  >  0)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    0)    {    break;    }    if(skip  >  0)  {  break;  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  skip	1	None	add
162	[BUG]  [BUGGY]  skip  =  input.skip(available  -  numToSkip);  [CE]  cannot  find  symbol  skip  [FE]          AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  skip  =  input.skip(available  -  numToSkip);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skip  =  input.skip(available  -  numToSkip);	  skip    =    input.skip(available    +    numToSkip);    	non-compiled	[CE]  cannot  find  symbol  skip	23	None	replace
163	[BUG]  [BUGGY]  skip  =  input.skip(available  *  numToSkip);  [CE]  cannot  find  symbol  skip  [FE]            AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  skip  =  input.skip(available  *  numToSkip);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skip  =  input.skip(available  *  numToSkip);	  skip    =    input.skip(available    +    numToSkip);    	non-compiled	[CE]  cannot  find  symbol  skip	23	None	replace
164	[BUG]  [BUGGY]  throw  new  IOException(   "   ");  new  IOException(   "   ");  [CE]  unreachable  statement  [FE]    IOException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IOException(   "   ");  new  IOException(   "   ");  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IOException(   "   ");    new  IOException(   "   ");	  	non-compiled	[CE]  unreachable  statement	7	None	add
165	[BUG]  [BUGGY]  skip  =  input.skip(buffersize);  [CE]  cannot  find  symbol  skip  [FE]        AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  skip  =  input.skip(buffersize);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skip  =  input.skip(buffersize);	  skip    =    input.skip(skipped);    	non-compiled	[CE]  cannot  find  symbol  skip	17	None	replace
166	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(available  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  throw    new    IllegalArgumentException(   "   ");    	compilable	  [FE]  IllegalArgumentException  	6	2	replace
167	[BUG]  [BUGGY]  if(available  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(available  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  throw    new    IllegalArgumentException(   "   ");    	compilable	  [FE]  IllegalArgumentException  	6	2	replace
168	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(available));  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(boolean)  [FE]      IllegalArgumentException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( " ".equals(available));  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException( " ".equals(available));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(boolean)	6	None	replace
169	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( " "  +  skipped);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalArgumentException( " "  +  skipped);	  throw    new    IllegalArgumentException(   "   ");    	compilable	  [FE]  IllegalArgumentException  	6	2	replace
170	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  skipped);  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( " "  +  skipped);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException( " "  +  skipped);	  throw    new    IllegalArgumentException(   "   ");    	compilable	  [FE]  IllegalArgumentException  	6	2	replace
171	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(available  >  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  0)  {  throw  new  IllegalStateException( " ");  }	  throw    new    IllegalStateException(   "   ");    	compilable	  [FE]  IllegalStateException  	4	2	replace
172	[BUG]  [BUGGY]  if(available  >  0)  {  throw  new  IllegalStateException( " ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(available  >  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  throw  new  IllegalStateException( " ");  }	  throw    new    IllegalStateException(   "   ");    	compilable	  [FE]  IllegalStateException  	4	2	replace
173	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IllegalStateException( " "  +  skipped);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalStateException( " "  +  skipped);	  throw    new    IllegalStateException(   "   ");    	compilable	  [FE]  IllegalStateException  	4	2	replace
174	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  skipped);  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IllegalStateException( " "  +  skipped);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( " "  +  skipped);	  throw    new    IllegalStateException(   "   ");    	compilable	  [FE]  IllegalStateException  	4	2	replace
175	[BUG]  [BUGGY]  skipped  =  input.skip(available);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  skipped  =  input.skip(available);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.next();  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available);    if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.next();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	19	None	add
176	[BUG]  [BUGGY]  skipped  =  input.skip(available);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  skipped  =  input.skip(available);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available);    if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	19	None	add
177	[BUG]  [BUGGY]  skipped  =  input.skip(available);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skip(i);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  skipped  =  input.skip(available);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skip(i);  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available);    if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skip(i);  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	19	None	add
178	[BUG]  [BUGGY]  skipped  =  input.skip(available);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  skipped  =  input.skip(available);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.next();  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available);    if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.next();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	19	None	add
179	[BUG]  [BUGGY]  skipped  =  input.skip(available);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.get(i);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  skipped  =  input.skip(available);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.get(i);  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available);    if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.get(i);  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	19	None	add
180	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  new  IllegalArgumentException(   "   ");  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException(   "   ");  new  IllegalArgumentException(   "   ");  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalArgumentException(   "   ");    new  IllegalArgumentException(   "   ");	  	non-compiled	[CE]  unreachable  statement	5	None	add
181	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(available  >  0  ||  skipped  >  0)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  0  ||  skipped  >  0)  {  break;  }	  if(available    >    0)    {    break;    }    	compilable	  [FE]  AssertionError  	10	2	replace
182	[BUG]  [BUGGY]  if(available  >  0  ||  skipped  >  0)  {  break;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(available  >  0  ||  skipped  >  0)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0  ||  skipped  >  0)  {  break;  }	  if(available    >    0)    {    break;    }    	compilable	  [FE]  AssertionError  	10	2	replace
183	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(available  >  0  ||  skipped  <  0)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  0  ||  skipped  <  0)  {  break;  }	  if(available    >    0)    {    break;    }    	compilable	  [FE]  AssertionError  	10	2	replace
184	[BUG]  [BUGGY]  if(available  >  0  ||  skipped  <  0)  {  break;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(available  >  0  ||  skipped  <  0)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0  ||  skipped  <  0)  {  break;  }	  if(available    >    0)    {    break;    }    	compilable	  [FE]  AssertionError  	10	2	replace
185	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(available  >=  numToSkip)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >=  numToSkip)  {  break;  }	  if(skipped    >=    0)    {    break;    }    	compilable	  [FE]  AssertionError  	12	2	replace
186	[BUG]  [BUGGY]  if(available  >=  numToSkip)  {  break;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(available  >=  numToSkip)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >=  numToSkip)  {  break;  }	  if(skipped    >=    0)    {    break;    }    	compilable	  [FE]  AssertionError  	12	2	replace
187	[BUG]  [BUGGY]  timeout  [FE]            AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  skipped  =  input.skip(available  -  skipped);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped  =  input.skip(available  -  skipped);	  skipped    =    input.skip(available);    timeout    	compilable	timeout	20	1	replace
188	[BUG]  [BUGGY]  skipped  =  input.skip(available  -  skipped);  timeout  [FE]            AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  skipped  =  input.skip(available  -  skipped);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped  =  input.skip(available  -  skipped);	  skipped    =    input.skip(available);    timeout    	compilable	timeout	20	1	replace
189	[BUG]  [BUGGY]  int  skipped  =  input.skip(available);  [CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)  [FE]          AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  int  skipped  =  input.skip(available);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	int  skipped  =  input.skip(available);	  skip    =    input.skip(available);    	non-compiled	[CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)	18	None	replace
190	[BUG]  [BUGGY]  continue;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  continue;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	continue;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	21	None	add
191	[BUG]  [BUGGY]  continue;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  continue;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	continue;    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	21	None	add
192	[BUG]  [BUGGY]  continue;  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  continue;  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	continue;    if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	21	None	add
193	[BUG]  [BUGGY]  continue;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  continue;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getLength();  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	continue;    if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getLength();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	21	None	add
194	[BUG]  [BUGGY]  continue;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  continue;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	continue;    if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	21	None	add
195	[BUG]  [BUGGY]  continue;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  continue;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	continue;    if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	21	None	add
196	[BUG]  [BUGGY]  continue;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  continue;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	continue;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	21	None	add
197	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "   ");  new  IllegalStateException(   "   ");  [CE]  unreachable  statement  [FE]    IllegalStateException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IllegalStateException(   "   ");  new  IllegalStateException(   "   ");  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalStateException(   "   ");    new  IllegalStateException(   "   ");	  	non-compiled	[CE]  unreachable  statement	3	None	add
198	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "   ");  System.err.println( "   ");  [CE]  unreachable  statement  [FE]      IllegalStateException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IllegalStateException(   "   ");  System.err.println( "   ");  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalStateException(   "   ");    System.err.println( "   ");	  	non-compiled	[CE]  unreachable  statement	3	None	add
199	[BUG]  [BUGGY]  if(skipped  >  0)  {  break  available;  }  [CE]  undefined  label:  available  [FE]        AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(skipped  >  0)  {  break  available;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  break  available;  }	  if(skipped    >    0)    {    break;    }    timeout    	non-compiled	[CE]  undefined  label:  available	2	None	replace
200	[BUG]  [BUGGY]  if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  numToSkip);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                    AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  numToSkip);  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  numToSkip);  }	  timeout    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	13	None	add
201	[BUG]  [BUGGY]  if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                      AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  }	  timeout    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	13	None	add
202	[BUG]  [BUGGY]  if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  numToSkip,  skipped);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                        AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  numToSkip,  skipped);  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  numToSkip,  skipped);  }	  timeout    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	13	None	add
203	[BUG]  [BUGGY]  if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  skipped);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                          AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  skipped);  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  skipped);  }	  timeout    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	13	None	add
204	[BUG]  [BUGGY]  if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  numToSkip  +  skipped);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                            AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  numToSkip  +  skipped);  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  numToSkip  +  skipped);  }	  timeout    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	13	None	add
205	[BUG]  [BUGGY]  if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  0,  available,  skipped,  numToSkip);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                              AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  0,  available,  skipped,  numToSkip);  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  System.arraycopy(input,  0,  available,  skipped,  numToSkip);  }	  timeout    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	13	None	add
206	[BUG]  [BUGGY]  if(available  >  0)  {  break;  }  InputStream  available  =  input.skip(skipped);  if(available  >  0)  {  break;  }  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]    AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(available  >  0)  {  break;  }  InputStream  available  =  input.skip(skipped);  if(available  >  0)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >    0)    {    break;    }    InputStream  available  =  input.skip(skipped);  if(available  >  0)  {  break;  }	  	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	9	None	add
207	[BUG]  [BUGGY]  if(available  >  0)  {  break;  }  int  available  =  input.read(skipped);  if(available  >  0)  {  break;  }  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]      AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(available  >  0)  {  break;  }  int  available  =  input.read(skipped);  if(available  >  0)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >    0)    {    break;    }    int  available  =  input.read(skipped);  if(available  >  0)  {  break;  }	  	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	9	None	add
208	[BUG]  [BUGGY]  if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  System.arraycopy(input,  numToSkip,  available,  skipped);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  System.arraycopy(input,  numToSkip,  available,  skipped);  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >    0)    {    break;    }    if(available  >  0)  {  break;  System.arraycopy(input,  numToSkip,  available,  skipped);  }	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	9	None	add
209	[BUG]  [BUGGY]  if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >    0)    {    break;    }    if(available  >  0)  {  break;  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  }	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	9	None	add
210	[BUG]  [BUGGY]  if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  System.arraycopy(input,  numToSkip,  available,  skipped);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  System.arraycopy(input,  numToSkip,  available,  skipped);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >    0)    {    break;    }    if(available  >  0)  {  break;  System.arraycopy(input,  numToSkip,  available,  skipped);	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
211	[BUG]  [BUGGY]  if(available  >  escape)  {  break;  }  [CE]  cannot  find  symbol  escape  [FE]                    AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(available  >  escape)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  escape)  {  break;  }	  if(skipped    >    available)    {    break;    }    timeout    	non-compiled	[CE]  cannot  find  symbol  escape	14	None	replace
212	[BUG]  [BUGGY]  int  skipped  =  input.skip(available  +  numToSkip);  [CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)  [FE]          AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  int  skipped  =  input.skip(available  +  numToSkip);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	int  skipped  =  input.skip(available  +  numToSkip);	  skip    =    input.skip(available    +    numToSkip);    	non-compiled	[CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)	23	None	replace
213	[BUG]  [BUGGY]  timeout  [FE]            AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  skipped  =  input.skip(skipped  -  numToSkip);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped  =  input.skip(skipped  -  numToSkip);	  skipped    =    input.skip(available);    timeout    	compilable	timeout	20	1	replace
214	[BUG]  [BUGGY]  skipped  =  input.skip(skipped  -  numToSkip);  timeout  [FE]            AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  skipped  =  input.skip(skipped  -  numToSkip);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped  =  input.skip(skipped  -  numToSkip);	  skipped    =    input.skip(available);    timeout    	compilable	timeout	20	1	replace
215	[BUG]  [BUGGY]  skip  =  input.skip(switch);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  skip  =  input.skip(switch);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skip  =  input.skip(switch);	  skip    =    input.skip(skipped);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
216	[BUG]  [BUGGY]  skip  =  input.skip(short);  [CE]  '.class'  expected  [FE]          AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  skip  =  input.skip(short);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skip  =  input.skip(short);	  skip    =    input.skip(skipped);    	non-compiled	[CE]  '.class'  expected	17	None	replace
217	[BUG]  [BUGGY]  if(skipped  >  0)  {  continue;  }  else  {  skip  =  input.read();  }  [CE]  cannot  find  symbol  skip  [FE]        AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(skipped  >  0)  {  continue;  }  else  {  skip  =  input.read();  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  continue;  }  else  {  skip  =  input.read();  }	  continue;    timeout    	non-compiled	[CE]  cannot  find  symbol  skip	22	None	replace
218	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IOException( "Skip  cannot  be  skipped. ");  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IOException( "Skip  cannot  be  skipped. ");	  throw    new    IOException(   "   ");    	compilable	  [FE]  IOException  	8	2	replace
219	[BUG]  [BUGGY]  throw  new  IOException( "Skip  cannot  be  skipped. ");  [FE]  IOException  [FE]    IOException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IOException( "Skip  cannot  be  skipped. ");  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( "Skip  cannot  be  skipped. ");	  throw    new    IOException(   "   ");    	compilable	  [FE]  IOException  	8	2	replace
220	[BUG]  [BUGGY]  throw  new  IOException( " "));  [CE]  [FE]      IOException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IOException( " "));  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( " "));	  throw    new    IOException(   "   ");    	non-compiled	[CE]  	8	None	replace
221	[BUG]  [BUGGY]  [FE]  IOException  [FE]        IOException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IOException( "skipped  in  the  stream. ");  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IOException( "skipped  in  the  stream. ");	  throw    new    IOException(   "   ");    	compilable	  [FE]  IOException  	8	2	replace
222	[BUG]  [BUGGY]  throw  new  IOException( "skipped  in  the  stream. ");  [FE]  IOException  [FE]        IOException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IOException( "skipped  in  the  stream. ");  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( "skipped  in  the  stream. ");	  throw    new    IOException(   "   ");    	compilable	  [FE]  IOException  	8	2	replace
223	[BUG]  [BUGGY]      System.arraycopy(input,  numToSkip,  available,  skipped);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                      AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]      System.arraycopy(input,  numToSkip,  available,  skipped);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	        System.arraycopy(input,  numToSkip,  available,  skipped);	  timeout    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	15	None	add
224	[BUG]  [BUGGY]      if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]      if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	        if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	15	None	add
225	[BUG]  [BUGGY]      if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]      if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.read();  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	        if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.read();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	15	None	add
226	[BUG]  [BUGGY]      if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getMillis();  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]      if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getMillis();  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	        if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getMillis();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	15	None	add
227	[BUG]  [BUGGY]      if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]      if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	        if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	15	None	add
228	[BUG]  [BUGGY]      if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.length();  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]      if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.length();  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	        if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.length();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	15	None	add
229	[BUG]  [BUGGY]      if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getBytes(i);  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]      if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getBytes(i);  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	        if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getBytes(i);  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	15	None	add
230	[BUG]  [BUGGY]  skipped  =  input.skip(available);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  skipped  =  input.skip(available);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read();  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available);    if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	19	None	add
231	[BUG]  [BUGGY]  skipped  =  input.skip(available);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.nextToken();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  skipped  =  input.skip(available);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.nextToken();  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available);    if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.nextToken();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	19	None	add
232	[BUG]  [BUGGY]  skipped  =  input.skip(available);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read(available);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  skipped  =  input.skip(available);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read(available);  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available);    if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read(available);  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	19	None	add
233	[BUG]  [BUGGY]  skipped  =  input.skip(available);  long  available  =  input.available();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                  AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  skipped  =  input.skip(available);  long  available  =  input.available();  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available);    long  available  =  input.available();	  timeout    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	19	None	add
234	[BUG]  [BUGGY]  n  =  input.skip(available);  [CE]  cannot  find  symbol  n  [FE]          AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  n  =  input.skip(available);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	n  =  input.skip(available);	  skip    =    input.skip(available);    	non-compiled	[CE]  cannot  find  symbol  n	18	None	replace
235	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "   ");  System.arraycopy(input,  numToSkip,  available,  skipped);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]    IllegalStateException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IllegalStateException(   "   ");  System.arraycopy(input,  numToSkip,  available,  skipped);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalStateException(   "   ");    System.arraycopy(input,  numToSkip,  available,  skipped);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	3	None	add
236	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "   ");  System.arraycopy(input,  numToSkip,  available,  skipd);  [CE]  cannot  find  symbol  skipd  [FE]      IllegalStateException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IllegalStateException(   "   ");  System.arraycopy(input,  numToSkip,  available,  skipd);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalStateException(   "   ");    System.arraycopy(input,  numToSkip,  available,  skipd);	  	non-compiled	[CE]  cannot  find  symbol  skipd	3	None	add
237	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  System.err.println( "Usage:  SKIP_BUF_SIZE   ");  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException(   "   ");  System.err.println( "Usage:  SKIP_BUF_SIZE   ");  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalArgumentException(   "   ");    System.err.println( "Usage:  SKIP_BUF_SIZE   ");	  	non-compiled	[CE]  unreachable  statement	5	None	add
238	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  System.err.println( "Usage:  SKIP   "  +  input.getName());  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException(   "   ");  System.err.println( "Usage:  SKIP   "  +  input.getName());  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalArgumentException(   "   ");    System.err.println( "Usage:  SKIP   "  +  input.getName());	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
239	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(available);  [CE]  [FE]    IllegalArgumentException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( " ".equals(available);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException( " ".equals(available);	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  	6	None	replace
240	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ".equals(available));  [CE]  no  suitable  constructor  found  for  IllegalStateException(boolean)  [FE]    IllegalStateException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IllegalStateException( " ".equals(available));  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( " ".equals(available));	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalStateException(boolean)	4	None	replace
241	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IllegalStateException( "InputStream  is  less  than  1: "  +  input.getClass());  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalStateException( "InputStream  is  less  than  1: "  +  input.getClass());	  throw    new    IllegalStateException(   "   ");    	compilable	  [FE]  IllegalStateException  	4	2	replace
242	[BUG]  [BUGGY]  throw  new  IllegalStateException( "InputStream  is  less  than  1: "  +  input.getClass());  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IllegalStateException( "InputStream  is  less  than  1: "  +  input.getClass());  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "InputStream  is  less  than  1: "  +  input.getClass());	  throw    new    IllegalStateException(   "   ");    	compilable	  [FE]  IllegalStateException  	4	2	replace
243	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ".equals(available);  [CE]  [FE]        IllegalStateException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IllegalStateException( " ".equals(available);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( " ".equals(available);	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  	4	None	replace
244	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Missing  input: "  +  input.getName());  [CE]  cannot  find  symbol  [FE]          IllegalStateException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IllegalStateException( "Missing  input: "  +  input.getName());  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "Missing  input: "  +  input.getName());	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
245	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IllegalStateException( "InputStream  is  less  than  1: ");  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalStateException( "InputStream  is  less  than  1: ");	  throw    new    IllegalStateException(   "   ");    	compilable	  [FE]  IllegalStateException  	4	2	replace
246	[BUG]  [BUGGY]  throw  new  IllegalStateException( "InputStream  is  less  than  1: ");  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IllegalStateException( "InputStream  is  less  than  1: ");  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "InputStream  is  less  than  1: ");	  throw    new    IllegalStateException(   "   ");    	compilable	  [FE]  IllegalStateException  	4	2	replace
247	[BUG]  [BUGGY]  if(skip  >=  0)  {  break;  }  [CE]  cannot  find  symbol  skip  [FE]    AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(skip  >=  0)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skip  >=  0)  {  break;  }	  if(skipped    >=    0)    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  skip	12	None	replace
248	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(skipped  ==  0)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped  ==  0)  {  break;  }	  if(skipped    >=    0)    {    break;    }    	compilable	  [FE]  AssertionError  	12	2	replace
249	[BUG]  [BUGGY]  if(skipped  ==  0)  {  break;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(skipped  ==  0)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  ==  0)  {  break;  }	  if(skipped    >=    0)    {    break;    }    	compilable	  [FE]  AssertionError  	12	2	replace
250	[BUG]  [BUGGY]  timeout  [FE]        AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(skipped  >  0  ||  available  >  numToSkip)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped  >  0  ||  available  >  numToSkip)  {  break;  }	  if(skipped    >    0)    {    break;    }    timeout    	compilable	timeout	2	1	replace
251	[BUG]  [BUGGY]  if(skipped  >  0  ||  available  >  numToSkip)  {  break;  }  timeout  [FE]        AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(skipped  >  0  ||  available  >  numToSkip)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0  ||  available  >  numToSkip)  {  break;  }	  if(skipped    >    0)    {    break;    }    timeout    	compilable	timeout	2	1	replace
252	[BUG]  [BUGGY]  timeout  [FE]          AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(skipped  >  0  ||  skipped  >  0)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped  >  0  ||  skipped  >  0)  {  break;  }	  if(skipped    >    0)    {    break;    }    timeout    	compilable	timeout	2	1	replace
253	[BUG]  [BUGGY]  if(skipped  >  0  ||  skipped  >  0)  {  break;  }  timeout  [FE]          AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(skipped  >  0  ||  skipped  >  0)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0  ||  skipped  >  0)  {  break;  }	  if(skipped    >    0)    {    break;    }    timeout    	compilable	timeout	2	1	replace
254	[BUG]  [BUGGY]  if(skipped  >  available)  {  break;  }  if(skip  >  available)  {  break;  }  [CE]  cannot  find  symbol  skip  [FE]                    AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(skipped  >  available)  {  break;  }  if(skip  >  available)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    available)    {    break;    }    if(skip  >  available)  {  break;  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  skip	13	None	add
255	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(available  >  0  ||  skipped  <  available)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  0  ||  skipped  <  available)  {  break;  }	  if(available    >    0)    {    break;    }    	compilable	  [FE]  AssertionError  	10	2	replace
256	[BUG]  [BUGGY]  if(available  >  0  ||  skipped  <  available)  {  break;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(available  >  0  ||  skipped  <  available)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0  ||  skipped  <  available)  {  break;  }	  if(available    >    0)    {    break;    }    	compilable	  [FE]  AssertionError  	10	2	replace
257	[BUG]  [BUGGY]  if(available  >  0  ||  skipped  <  =  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(available  >  0  ||  skipped  <  =  0)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0  ||  skipped  <  =  0)  {  break;  }	  if(available    >    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
258	[BUG]  [BUGGY]  if(skipped  >  0)  {  break;  }  if(Skipped  >  0)  {  break;  }  [CE]  cannot  find  symbol  Skipped  [FE]        AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(skipped  >  0)  {  break;  }  if(Skipped  >  0)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    0)    {    break;    }    if(Skipped  >  0)  {  break;  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  Skipped	1	None	add
259	[BUG]  [BUGGY]  timeout  [FE]                    AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(skipped  >  available  ||  skipped  >  0)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped  >  available  ||  skipped  >  0)  {  break;  }	  if(skipped    >    available)    {    break;    }    timeout    	compilable	timeout	14	1	replace
260	[BUG]  [BUGGY]  if(skipped  >  available  ||  skipped  >  0)  {  break;  }  timeout  [FE]                    AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(skipped  >  available  ||  skipped  >  0)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  available  ||  skipped  >  0)  {  break;  }	  if(skipped    >    available)    {    break;    }    timeout    	compilable	timeout	14	1	replace
261	[BUG]  [BUGGY]  timeout  [FE]                      AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(skipped  >  available  ||  skipped  >  numToSkip)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped  >  available  ||  skipped  >  numToSkip)  {  break;  }	  if(skipped    >    available)    {    break;    }    timeout    	compilable	timeout	14	1	replace
262	[BUG]  [BUGGY]  if(skipped  >  available  ||  skipped  >  numToSkip)  {  break;  }  timeout  [FE]                      AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  if(skipped  >  available  ||  skipped  >  numToSkip)  {  break;  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  available  ||  skipped  >  numToSkip)  {  break;  }	  if(skipped    >    available)    {    break;    }    timeout    	compilable	timeout	14	1	replace
263	[BUG]  [BUGGY]  throw  new  IOException(   "   ");  if(  available  >  0)  {  throw  new  IOException(   "   ");  }  [CE]  unreachable  statement  [FE]    IOException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IOException(   "   ");  if(  available  >  0)  {  throw  new  IOException(   "   ");  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IOException(   "   ");    if(  available  >  0)  {  throw  new  IOException(   "   ");  }	  	non-compiled	[CE]  unreachable  statement	7	None	add
264	[BUG]  [BUGGY]  throw  new  IOException(   "   ");  System.err.println( "Usage:  SKIP_BUF_SIZE   ");  [CE]  unreachable  statement  [FE]      IOException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IOException(   "   ");  System.err.println( "Usage:  SKIP_BUF_SIZE   ");  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IOException(   "   ");    System.err.println( "Usage:  SKIP_BUF_SIZE   ");	  	non-compiled	[CE]  unreachable  statement	7	None	add
265	[BUG]  [BUGGY]  throw  new  IOException(   "   ");  System.err.println( "Skip  skipped:   "  +  available);  [CE]  unreachable  statement  [FE]        IOException    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  throw  new  IOException(   "   ");  System.err.println( "Skip  skipped:   "  +  available);  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IOException(   "   ");    System.err.println( "Skip  skipped:   "  +  available);	  	non-compiled	[CE]  unreachable  statement	7	None	add
266	[BUG]  [BUGGY]  continue;  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  continue;  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	continue;    if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	21	None	add
267	[BUG]  [BUGGY]  continue;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  continue;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	continue;    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	21	None	add
268	[BUG]  [BUGGY]  continue;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  continue;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getLength();  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	continue;    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getLength();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	21	None	add
269	[BUG]  [BUGGY]  continue;  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getSize();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  continue;  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getSize();  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	continue;    if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getSize();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	21	None	add
270	[BUG]  [BUGGY]  continue;  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  continue;  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	continue;    if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	21	None	add
271	[BUG]  [BUGGY]  continue;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  continue;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	continue;    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	21	None	add
272	[BUG]  [BUGGY]  continue;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getMillis();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {    [BUGGY]  continue;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getMillis();  }  [BUGGY]    }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	continue;    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getMillis();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	21	None	add
