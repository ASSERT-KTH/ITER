bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }	  continue;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	195	None	replace
2	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skip  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skip  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }	  continue;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	195	None	replace
3	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [CE]  possible  loss  of  precision  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }	  continue;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.next();    }    	non-compiled	[CE]  possible  loss  of  precision	195	None	replace
4	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getValue();  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getValue();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getValue();  }	  continue;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	195	None	replace
5	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getRawOffset();  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getRawOffset();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getRawOffset();  }	  continue;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	195	None	replace
6	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getValue();  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skip  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getValue();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skip  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getValue();  }	  continue;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	195	None	replace
7	[BUG]  [BUGGY]  long  skipped  =  input.skip(numToSkip);  [CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  long  skipped  =  input.skip(numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	long  skipped  =  input.skip(numToSkip);	  continue;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.next();    }    	non-compiled	[CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)	195	None	replace
8	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  +  skipped);  skipped  =  input.skip(available  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped    =    input.skip(available    +    skipped);    skipped  =  input.skip(available  +  skipped);	  timeout    	compilable	  [FE]  AssertionError  	78	2	add
9	[BUG]  [BUGGY]  skipped  =  input.skip(available  +  skipped);  skipped  =  input.skip(available  +  skipped);  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  +  skipped);  skipped  =  input.skip(available  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    +    skipped);    skipped  =  input.skip(available  +  skipped);	  timeout    	compilable	  [FE]  AssertionError  	78	2	add
10	[BUG]  [BUGGY]  skipped  =  input.skip(available  +  skipped);  long  skipped  =  input.skip(available  +  skipped);  [CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  +  skipped);  long  skipped  =  input.skip(available  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    +    skipped);    long  skipped  =  input.skip(available  +  skipped);	  timeout    	non-compiled	[CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)	78	None	add
11	[BUG]  [BUGGY]  skipped  =  input.skip(available  +  skipped);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(available  +  i);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  +  skipped);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(available  +  i);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    +    skipped);    if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(available  +  i);  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	78	None	add
12	[BUG]  [BUGGY]  skipped  =  input.skip(available  +  skipped);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skip(available  +  i);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  +  skipped);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skip(available  +  i);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    +    skipped);    if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skip(available  +  i);  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	78	None	add
13	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  +  skipped);  if(available  >  0)  {  skipped  =  input.skip(available  +  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped    =    input.skip(available    +    skipped);    if(available  >  0)  {  skipped  =  input.skip(available  +  skipped);  }	  timeout    	compilable	  [FE]  AssertionError  	78	2	add
14	[BUG]  [BUGGY]  skipped  =  input.skip(available  +  skipped);  if(available  >  0)  {  skipped  =  input.skip(available  +  skipped);  }  [FE]  AssertionError  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  +  skipped);  if(available  >  0)  {  skipped  =  input.skip(available  +  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    +    skipped);    if(available  >  0)  {  skipped  =  input.skip(available  +  skipped);  }	  timeout    	compilable	  [FE]  AssertionError  	78	2	add
15	[BUG]  [BUGGY]  skipped  =  input.skip(available  +  skipped);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(available  +  skipped);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  +  skipped);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(available  +  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    +    skipped);    if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(available  +  skipped);  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	78	None	add
16	[BUG]  [BUGGY]  skipped  =  input.skip(available  +  skipped);  if(available  >  0)  {  for(int  num  =  available;  num  <  0;  num++)  {  skipped  =  input.skip(available  +  num);  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  +  skipped);  if(available  >  0)  {  for(int  num  =  available;  num  <  0;  num++)  {  skipped  =  input.skip(available  +  num);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    +    skipped);    if(available  >  0)  {  for(int  num  =  available;  num  <  0;  num++)  {  skipped  =  input.skip(available  +  num);  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	78	None	add
17	[BUG]  [BUGGY]  skipped  =  input.skip(available  +  skipped);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  i;  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  +  skipped);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  i;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    +    skipped);    if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  i;  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	78	None	add
18	[BUG]  [BUGGY]  throw  new  IOException(   "Skip  cannot  be  skipped.   ");  throw  new  IOException( "Skip  cannot  be  skipped.   ");  [CE]  unreachable  statement  [FE]    IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException(   "Skip  cannot  be  skipped.   ");  throw  new  IOException( "Skip  cannot  be  skipped.   ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IOException(   "Skip    cannot    be    skipped.   ");    throw  new  IOException( "Skip  cannot  be  skipped.   ");	  	non-compiled	[CE]  unreachable  statement	218	None	add
19	[BUG]  [BUGGY]  throw  new  IOException(   "Skip  cannot  be  skipped.   ");  Throw  new  IOException( "Skip  cannot  be  skipped.   ");  [CE]  not  a  statement  [FE]      IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException(   "Skip  cannot  be  skipped.   ");  Throw  new  IOException( "Skip  cannot  be  skipped.   ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IOException(   "Skip    cannot    be    skipped.   ");    Throw  new  IOException( "Skip  cannot  be  skipped.   ");	  	non-compiled	[CE]  not  a  statement	218	None	add
20	[BUG]  [BUGGY]  throw  new  IOException(   "Skip  cannot  be  skipped.   ");  throw  new  IOException(, "Skip  cannot  be  skipped.   ");  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException(   "Skip  cannot  be  skipped.   ");  throw  new  IOException(, "Skip  cannot  be  skipped.   ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IOException(   "Skip    cannot    be    skipped.   ");    throw  new  IOException(, "Skip  cannot  be  skipped.   ");	  	non-compiled	[CE]  illegal  start  of  expression	218	None	add
21	[BUG]  [BUGGY]  throw  new  IOException(   "Skip  cannot  be  skipped.   ");  throw  new  IOException( "Skip  cannot  be  skipped.. ");  [CE]  unreachable  statement  [FE]          IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException(   "Skip  cannot  be  skipped.   ");  throw  new  IOException( "Skip  cannot  be  skipped.. ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IOException(   "Skip    cannot    be    skipped.   ");    throw  new  IOException( "Skip  cannot  be  skipped.. ");	  	non-compiled	[CE]  unreachable  statement	218	None	add
22	[BUG]  [BUGGY]  throw  new  IOException(   "Skip  cannot  be  skipped.   ");  new  IOException( "Skip  cannot  be  skipped.   ");  [CE]  unreachable  statement  [FE]            IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException(   "Skip  cannot  be  skipped.   ");  new  IOException( "Skip  cannot  be  skipped.   ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IOException(   "Skip    cannot    be    skipped.   ");    new  IOException( "Skip  cannot  be  skipped.   ");	  	non-compiled	[CE]  unreachable  statement	218	None	add
23	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(numToSkip  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(numToSkip  >=  0)  {  break;  }	  if(skip    >=    0)    {    break;    }    	compilable	  [FE]  AssertionError  	247	2	replace
24	[BUG]  [BUGGY]  if(numToSkip  >=  0)  {  break;  }  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(numToSkip  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(numToSkip  >=  0)  {  break;  }	  if(skip    >=    0)    {    break;    }    	compilable	  [FE]  AssertionError  	247	2	replace
25	[BUG]  [BUGGY]  if(skipped  >  0)  {  if(available  >  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  if(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  if(available  >  0)  {  break;  }	  if(available    >    0)    {    break;    }    if(available    >    0)    {    break;    System.arraycopy(input,    numToSkip,    available,    skipped);    	non-compiled	[CE]  illegal  start  of  expression	210	None	replace
26	[BUG]  [BUGGY]  if(skip  >  0)  {  if(available  >  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skip  >  0)  {  if(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skip  >  0)  {  if(available  >  0)  {  break;  }	  if(available    >    0)    {    break;    }    if(available    >    0)    {    break;    System.arraycopy(input,    numToSkip,    available,    skipped);    	non-compiled	[CE]  illegal  start  of  expression	210	None	replace
27	[BUG]  [BUGGY]  if(available  <  =  0)  {  if(available  >  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  =  0)  {  if(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  =  0)  {  if(available  >  0)  {  break;  }	  if(available    >    0)    {    break;    }    if(available    >    0)    {    break;    System.arraycopy(input,    numToSkip,    available,    skipped);    	non-compiled	[CE]  illegal  start  of  expression	210	None	replace
28	[BUG]  [BUGGY]  if(skipped  <  0)  {  if(available  >  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  <  0)  {  if(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  <  0)  {  if(available  >  0)  {  break;  }	  if(available    >    0)    {    break;    }    if(available    >    0)    {    break;    System.arraycopy(input,    numToSkip,    available,    skipped);    	non-compiled	[CE]  illegal  start  of  expression	210	None	replace
29	[BUG]  [BUGGY]  if(skipped  >  0)  {  if(available  <  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  if(available  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  if(available  <  0)  {  break;  }	  if(available    >    0)    {    break;    }    if(available    >    0)    {    break;    System.arraycopy(input,    numToSkip,    available,    skipped);    	non-compiled	[CE]  illegal  start  of  expression	210	None	replace
30	[BUG]  [BUGGY]  if(skipped  >  0)  {  if(available  >=  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  if(available  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  if(available  >=  0)  {  break;  }	  if(available    >    0)    {    break;    }    if(available    >    0)    {    break;    System.arraycopy(input,    numToSkip,    available,    skipped);    	non-compiled	[CE]  illegal  start  of  expression	210	None	replace
31	[BUG]  [BUGGY]  if(skipped  >  0)  {  if(available  <  =  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  if(available  <  =  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  if(available  <  =  0)  {  break;  }	  if(available    >    0)    {    break;    }    if(available    >    0)    {    break;    System.arraycopy(input,    numToSkip,    available,    skipped);    	non-compiled	[CE]  illegal  start  of  expression	210	None	replace
32	[BUG]  [BUGGY]  System.arraycopy(input,  available,  numToSkip,  skipped);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.arraycopy(input,  available,  numToSkip,  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	System.arraycopy(input,  available,  numToSkip,  skipped);	          System.arraycopy(input,    numToSkip,    available,    skipped);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	223	None	replace
33	[BUG]  [BUGGY]  System.arraycopy(input,  numToSkip,  available,  skipped,  buffersize);  [CE]  cannot  find  symbol  buffersize  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.arraycopy(input,  numToSkip,  available,  skipped,  buffersize);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	System.arraycopy(input,  numToSkip,  available,  skipped,  buffersize);	          System.arraycopy(input,    numToSkip,    available,    skipped);    	non-compiled	[CE]  cannot  find  symbol  buffersize	223	None	replace
34	[BUG]  [BUGGY]  System.arraycopy(input,  numToSkip,  available,  skipped,  SKIP_BUF_SIZE);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.arraycopy(input,  numToSkip,  available,  skipped,  SKIP_BUF_SIZE);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	System.arraycopy(input,  numToSkip,  available,  skipped,  SKIP_BUF_SIZE);	          System.arraycopy(input,    numToSkip,    available,    skipped);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	223	None	replace
35	[BUG]  [BUGGY]  System.arraycopy(input,  numToSkip,  available,  skipd,  skipped);  [CE]  cannot  find  symbol  skipd  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.arraycopy(input,  numToSkip,  available,  skipd,  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	System.arraycopy(input,  numToSkip,  available,  skipd,  skipped);	          System.arraycopy(input,    numToSkip,    available,    skipped);    	non-compiled	[CE]  cannot  find  symbol  skipd	223	None	replace
36	[BUG]  [BUGGY]  System.arraycopy(input,  numToSkip,  available,  skipped,  0);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.arraycopy(input,  numToSkip,  available,  skipped,  0);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	System.arraycopy(input,  numToSkip,  available,  skipped,  0);	          System.arraycopy(input,    numToSkip,    available,    skipped);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	223	None	replace
37	[BUG]  [BUGGY]  System.arraycopy(input,  numToSkip,  available,  skipped,  skip);  [CE]  cannot  find  symbol  skip  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.arraycopy(input,  numToSkip,  available,  skipped,  skip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	System.arraycopy(input,  numToSkip,  available,  skipped,  skip);	          System.arraycopy(input,    numToSkip,    available,    skipped);    	non-compiled	[CE]  cannot  find  symbol  skip	223	None	replace
38	[BUG]  [BUGGY]  System.arraycopy(input,  numToSkip,  available,  skipped,  skipped);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.arraycopy(input,  numToSkip,  available,  skipped,  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	System.arraycopy(input,  numToSkip,  available,  skipped,  skipped);	          System.arraycopy(input,    numToSkip,    available,    skipped);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	223	None	replace
39	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ".longValue());  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( " ".longValue());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( " ".longValue());	  throw    new    IllegalStateException(       "       ");    throw    new    IllegalStateException(,   "       ");    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
40	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ".equals(numToSkip));  [CE]  no  suitable  constructor  found  for  IllegalStateException(boolean)  [FE]                IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( " ".equals(numToSkip));  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( " ".equals(numToSkip));	  throw    new    IllegalStateException(       "       ");    throw    new    IllegalStateException(,   "       ");    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalStateException(boolean)	24	None	replace
41	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( ".skipped= "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalStateException( ".skipped= "  +  skipped);	  throw    new    IllegalStateException(       "       ");    throw    new    IllegalStateException(.   "       ");    	compilable	  [FE]  IllegalStateException  	25	2	replace
42	[BUG]  [BUGGY]  throw  new  IllegalStateException( ".skipped= "  +  skipped);  [FE]  IllegalStateException  [FE]                IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( ".skipped= "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( ".skipped= "  +  skipped);	  throw    new    IllegalStateException(       "       ");    throw    new    IllegalStateException(.   "       ");    	compilable	  [FE]  IllegalStateException  	25	2	replace
43	[BUG]  [BUGGY]  throw  new  IllegalStateException( ".skipped  =  0;  [CE]  unclosed  string  literal  [FE]                  IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( ".skipped  =  0;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( ".skipped  =  0;	  throw    new    IllegalStateException(       "       ");    throw    new    IllegalStateException(.   "       ");    	non-compiled	[CE]  unclosed  string  literal	25	None	replace
44	[BUG]  [BUGGY]  bucket  <  0)  {  break;  }  while(skipped  >  0)  {  break;  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  bucket  <  0)  {  break;  }  while(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	bucket  <  0)  {  break;  }  while(skipped  >  0)  {  break;  }	  if(skipped    >    0)    {    break;    }    while(skipped    >    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
45	[BUG]  [BUGGY]  while(available  >  0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {	  if(skipped    >    0)    {    break;    }    while(skipped    >    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
46	[BUG]  [BUGGY]  bucket  <  0)  {  break;  }  while(skipped  >=  0)  {  break;  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  bucket  <  0)  {  break;  }  while(skipped  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	bucket  <  0)  {  break;  }  while(skipped  >=  0)  {  break;  }	  if(skipped    >    0)    {    break;    }    while(skipped    >    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
47	[BUG]  [BUGGY]  bucket  <  0)  {  break;  }  while(available  >  0)  {  break;  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  bucket  <  0)  {  break;  }  while(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	bucket  <  0)  {  break;  }  while(available  >  0)  {  break;  }	  if(skipped    >    0)    {    break;    }    while(skipped    >    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
48	[BUG]  [BUGGY]  bucket  <  0)  {  break;  }  while(skipped  ==  0)  {  break;  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  bucket  <  0)  {  break;  }  while(skipped  ==  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	bucket  <  0)  {  break;  }  while(skipped  ==  0)  {  break;  }	  if(skipped    >    0)    {    break;    }    while(skipped    >    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
49	[BUG]  [BUGGY]  bucket  <  0)  {  break;  }  while(skip  >  0)  {  break;  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  bucket  <  0)  {  break;  }  while(skip  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	bucket  <  0)  {  break;  }  while(skip  >  0)  {  break;  }	  if(skipped    >    0)    {    break;    }    while(skipped    >    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
50	[BUG]  [BUGGY]  timeout  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	while(available  <  0)  {  break;  }	  while(available    >    0)    {    break;    }    timeout    	compilable	timeout	91	1	replace
51	[BUG]  [BUGGY]  while(available  <  0)  {  break;  }  timeout  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  <  0)  {  break;  }	  while(available    >    0)    {    break;    }    timeout    	compilable	timeout	91	1	replace
52	[BUG]  [BUGGY]  timeout  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	while(skipped  >  0)  {  break;  }	  while(available    >    0)    {    break;    }    timeout    	compilable	timeout	91	1	replace
53	[BUG]  [BUGGY]  while(skipped  >  0)  {  break;  }  timeout  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(skipped  >  0)  {  break;  }	  while(available    >    0)    {    break;    }    timeout    	compilable	timeout	91	1	replace
54	[BUG]  [BUGGY]  while(available  <  =  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  <  =  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  <  =  0)  {  break;  }	  while(available    >    0)    {    break;    }    timeout    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
55	[BUG]  [BUGGY]  timeout  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	while(available  >=  0)  {  break;  }	  while(available    >    0)    {    break;    }    timeout    	compilable	timeout	91	1	replace
56	[BUG]  [BUGGY]  while(available  >=  0)  {  break;  }  timeout  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >=  0)  {  break;  }	  while(available    >    0)    {    break;    }    timeout    	compilable	timeout	91	1	replace
57	[BUG]  [BUGGY]  while(available  >  0)  {  skipped  =  input.skip(skipped);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  skipped  =  input.skip(skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  skipped  =  input.skip(skipped);	  while(available    >    0)    {    break;    }    timeout    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
58	[BUG]  [BUGGY]  timeout  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  ==  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	while(available  ==  0)  {  break;  }	  while(available    >    0)    {    break;    }    timeout    	compilable	timeout	91	1	replace
59	[BUG]  [BUGGY]  while(available  ==  0)  {  break;  }  timeout  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  ==  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  ==  0)  {  break;  }	  while(available    >    0)    {    break;    }    timeout    	compilable	timeout	91	1	replace
60	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  if(skipped  >  available)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  numToSkip)  {  if(skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  numToSkip)  {  if(skipped  >  available)  {  break;  }	  if(skipped    >    available)    {    break;    }    if(skipped    >    available)    {    break;    System.arraycopy(input,    0,    available,    skipped,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  expression	205	None	replace
61	[BUG]  [BUGGY]  if(available  >  skip)  {  break;  }  else  if(skipped  >  available)  {  break;  System.arraycopy(input,  0,  available,  skipped,  numToSkip);  }  [CE]  cannot  find  symbol  skip  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skip)  {  break;  }  else  if(skipped  >  available)  {  break;  System.arraycopy(input,  0,  available,  skipped,  numToSkip);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skip)  {  break;  }  else  if(skipped  >  available)  {  break;  System.arraycopy(input,  0,  available,  skipped,  numToSkip);  }	  if(skipped    >    available)    {    break;    }    if(skipped    >    available)    {    break;    System.arraycopy(input,    0,    available,    skipped,    numToSkip);    }    	non-compiled	[CE]  cannot  find  symbol  skip	205	None	replace
62	[BUG]  [BUGGY]  if(numToSkip  >  available)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  0,  available,  skipped,  numToSkip);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(numToSkip  >  available)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  0,  available,  skipped,  numToSkip);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(numToSkip  >  available)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  0,  available,  skipped,  numToSkip);  }	  if(skipped    >    available)    {    break;    }    if(skipped    >    available)    {    break;    System.arraycopy(input,    0,    available,    skipped,    numToSkip);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	205	None	replace
63	[BUG]  [BUGGY]  if(available  >  skipped)  {  break;  }  else  if(skipped  >  available)  {  break;  System.arraycopy(input,  0,  available,  skipped,  numToSkip);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  break;  }  else  if(skipped  >  available)  {  break;  System.arraycopy(input,  0,  available,  skipped,  numToSkip);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skipped)  {  break;  }  else  if(skipped  >  available)  {  break;  System.arraycopy(input,  0,  available,  skipped,  numToSkip);  }	  if(skipped    >    available)    {    break;    }    if(skipped    >    available)    {    break;    System.arraycopy(input,    0,    available,    skipped,    numToSkip);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	205	None	replace
64	[BUG]  [BUGGY]  if(numToSkip  >  available)  {  break;  }  else  if(skipped  >  available)  {  break;  System.arraycopy(input,  0,  available,  skipped,  numToSkip);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(numToSkip  >  available)  {  break;  }  else  if(skipped  >  available)  {  break;  System.arraycopy(input,  0,  available,  skipped,  numToSkip);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(numToSkip  >  available)  {  break;  }  else  if(skipped  >  available)  {  break;  System.arraycopy(input,  0,  available,  skipped,  numToSkip);  }	  if(skipped    >    available)    {    break;    }    if(skipped    >    available)    {    break;    System.arraycopy(input,    0,    available,    skipped,    numToSkip);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	205	None	replace
65	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read(available);  }  [CE]  no  suitable  method  found  for  read(long)  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read(available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read(available);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.read(available);    }    	non-compiled	[CE]  no  suitable  method  found  for  read(long)	232	None	replace
66	[BUG]  [BUGGY]  long  available  =  input.skip(numToSkip);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read(available);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  long  available  =  input.skip(numToSkip);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read(available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	long  available  =  input.skip(numToSkip);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read(available);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.read(available);    }    	non-compiled	[CE]  illegal  start  of  expression	232	None	replace
67	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read(available);  }  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read(available);  }  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read(available);  }  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.read(available);    }    	non-compiled	[CE]  illegal  start  of  expression	232	None	replace
68	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read(available);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read(available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read(available);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.read(available);    }    	non-compiled	[CE]  illegal  start  of  expression	232	None	replace
69	[BUG]  [BUGGY]  timeout  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  skipped  =  input.skip(available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped  >  0)  {  skipped  =  input.skip(available);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.read(available);    }    	compilable	timeout	232	1	replace
70	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  =  input.skip(available);  }  timeout  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  skipped  =  input.skip(available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  skipped  =  input.skip(available);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.read(available);    }    	compilable	timeout	232	1	replace
71	[BUG]  [BUGGY]  timeout  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  0)  {  skipped  =  input.skip(available);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.read(available);    }    	compilable	timeout	232	1	replace
72	[BUG]  [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  }  timeout  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  skipped  =  input.skip(available);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.read(available);    }    	compilable	timeout	232	1	replace
73	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  =  input.skip(available);  }  else  {  available  =  0;  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read(available);  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  skipped  =  input.skip(available);  }  else  {  available  =  0;  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read(available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  skipped  =  input.skip(available);  }  else  {  available  =  0;  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read(available);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.read(available);    }    	non-compiled	[CE]  illegal  start  of  expression	232	None	replace
74	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getMillis();  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getMillis();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getMillis();  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.getMillis();    }    	non-compiled	[CE]  illegal  start  of  expression	226	None	replace
75	[BUG]  [BUGGY]  while(available  >  0)  {  available  +=  input.getMillis();  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  available  +=  input.getMillis();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  available  +=  input.getMillis();	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.getMillis();    }    	non-compiled	[CE]  illegal  start  of  expression	226	None	replace
76	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  ++i)  {  available  +=  input.getMillis();  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  ++i)  {  available  +=  input.getMillis();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  ++i)  {  available  +=  input.getMillis();  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.getMillis();    }    	non-compiled	[CE]  illegal  start  of  expression	226	None	replace
77	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  available.size();  i  <  numToSkip;  ++i)  {  available  +=  input.getMillis();  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  available.size();  i  <  numToSkip;  ++i)  {  available  +=  input.getMillis();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  available.size();  i  <  numToSkip;  ++i)  {  available  +=  input.getMillis();  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.getMillis();    }    	non-compiled	[CE]  illegal  start  of  expression	226	None	replace
78	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  skipped;  ++i)  {  available  +=  input.getMillis();  }  [CE]  illegal  start  of  expression  [FE]                                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  skipped;  ++i)  {  available  +=  input.getMillis();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  available;  i  <  skipped;  ++i)  {  available  +=  input.getMillis();  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.getMillis();    }    	non-compiled	[CE]  illegal  start  of  expression	226	None	replace
79	[BUG]  [BUGGY]  while(skipped  >  0)  {  available  +=  input.getMillis();  [CE]  illegal  start  of  expression  [FE]                                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(skipped  >  0)  {  available  +=  input.getMillis();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(skipped  >  0)  {  available  +=  input.getMillis();	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.getMillis();    }    	non-compiled	[CE]  illegal  start  of  expression	226	None	replace
80	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  available)  {  continue;  }  if(skipped  >  available)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped    >    available)    {    continue;    }    if(skipped  >  available)  {  continue;  }	  timeout    	compilable	  [FE]  AssertionError  	133	2	add
81	[BUG]  [BUGGY]  if(skipped  >  available)  {  continue;  }  if(skipped  >  available)  {  continue;  }  [FE]  AssertionError  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  available)  {  continue;  }  if(skipped  >  available)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    available)    {    continue;    }    if(skipped  >  available)  {  continue;  }	  timeout    	compilable	  [FE]  AssertionError  	133	2	add
82	[BUG]  [BUGGY]  if(skipped  >  available)  {  continue;  }  If(skipped  >  available)  {  continue;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  available)  {  continue;  }  If(skipped  >  available)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    available)    {    continue;    }    If(skipped  >  available)  {  continue;  }	  timeout    	non-compiled	[CE]  ';'  expected	133	None	add
83	[BUG]  [BUGGY]  if(skipped  >  available)  {  continue;  }  if(skipped  >  available)  {  continue;  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  available)  {  continue;  }  if(skipped  >  available)  {  continue;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    available)    {    continue;    }    if(skipped  >  available)  {  continue;	  timeout    	non-compiled	[CE]  illegal  start  of  expression	133	None	add
84	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  available)  {  continue;  }  while(skipped  >  available)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped    >    available)    {    continue;    }    while(skipped  >  available)  {  continue;  }	  timeout    	compilable	  [FE]  AssertionError  	133	2	add
85	[BUG]  [BUGGY]  if(skipped  >  available)  {  continue;  }  while(skipped  >  available)  {  continue;  }  [FE]  AssertionError  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  available)  {  continue;  }  while(skipped  >  available)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    available)    {    continue;    }    while(skipped  >  available)  {  continue;  }	  timeout    	compilable	  [FE]  AssertionError  	133	2	add
86	[BUG]  [BUGGY]  if(skipped  >  available)  {  continue;  }  when(skipped  >  available)  {  continue;  }  [CE]  ';'  expected  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  available)  {  continue;  }  when(skipped  >  available)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    available)    {    continue;    }    when(skipped  >  available)  {  continue;  }	  timeout    	non-compiled	[CE]  ';'  expected	133	None	add
87	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  break;  }  while(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	while(available    >    0)    {    break;    }    while(available  >  0)  {  break;  }	  timeout    	compilable	  [FE]  AssertionError  	90	2	add
88	[BUG]  [BUGGY]  while(available  >  0)  {  break;  }  while(available  >  0)  {  break;  }  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  break;  }  while(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available    >    0)    {    break;    }    while(available  >  0)  {  break;  }	  timeout    	compilable	  [FE]  AssertionError  	90	2	add
89	[BUG]  [BUGGY]  while(available  >  0)  {  break;  }  while(available  >  0)  {  break;  System.arraycopy(input,  numToSkip,  available,  skipped);  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  break;  }  while(available  >  0)  {  break;  System.arraycopy(input,  numToSkip,  available,  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available    >    0)    {    break;    }    while(available  >  0)  {  break;  System.arraycopy(input,  numToSkip,  available,  skipped);	  timeout    	non-compiled	[CE]  illegal  start  of  expression	90	None	add
90	[BUG]  [BUGGY]  while(available  >  0)  {  break;  }  while(available  >  0)  {  break;  System.arraycopy(input,  numToSkip,  available,  numToSkip);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  break;  }  while(available  >  0)  {  break;  System.arraycopy(input,  numToSkip,  available,  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available    >    0)    {    break;    }    while(available  >  0)  {  break;  System.arraycopy(input,  numToSkip,  available,  numToSkip);	  timeout    	non-compiled	[CE]  illegal  start  of  expression	90	None	add
91	[BUG]  [BUGGY]  while(available  >  0)  {  break;  }  while(available  >  0)  {  break;  System.arraycopy(input,  numToSkip,  available,  skipped);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  break;  }  while(available  >  0)  {  break;  System.arraycopy(input,  numToSkip,  available,  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available    >    0)    {    break;    }    while(available  >  0)  {  break;  System.arraycopy(input,  numToSkip,  available,  skipped);  }	  timeout    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	90	None	add
92	[BUG]  [BUGGY]  while(available  >  0)  {  break;  }  while(available  >  0)  {  break;  System.arraycopy(input,  numToSkip,  available,  numToSkip);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  break;  }  while(available  >  0)  {  break;  System.arraycopy(input,  numToSkip,  available,  numToSkip);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available    >    0)    {    break;    }    while(available  >  0)  {  break;  System.arraycopy(input,  numToSkip,  available,  numToSkip);  }	  timeout    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	90	None	add
93	[BUG]  [BUGGY]  while(available  >  0)  {  break;  }  while(available  >  0)  {  break;  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  break;  }  while(available  >  0)  {  break;  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available    >    0)    {    break;    }    while(available  >  0)  {  break;  System.arraycopy(input,  0,  available,  numToSkip,  skipped);	  timeout    	non-compiled	[CE]  illegal  start  of  expression	90	None	add
94	[BUG]  [BUGGY]  while(available  >  0)  {  break;  }  while(available  >  0)  {  break;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  break;  }  while(available  >  0)  {  break;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available    >    0)    {    break;    }    while(available  >  0)  {  break;	  timeout    	non-compiled	[CE]  illegal  start  of  expression	90	None	add
95	[BUG]  [BUGGY]  while(available  >  0)  {  break;  }  while(available  >  0)  {  break;  System.arraycopy(numToSkip,  available,  numToSkip,  skipped);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  break;  }  while(available  >  0)  {  break;  System.arraycopy(numToSkip,  available,  numToSkip,  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available    >    0)    {    break;    }    while(available  >  0)  {  break;  System.arraycopy(numToSkip,  available,  numToSkip,  skipped);	  timeout    	non-compiled	[CE]  illegal  start  of  expression	90	None	add
96	[BUG]  [BUGGY]  throw  new  IOException(   "   "  +  skipped);  throw  new  IOException(   "   "  +  skipped);  [CE]  unreachable  statement  [FE]    IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException(   "   "  +  skipped);  throw  new  IOException(   "   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IOException(   "   "    +    skipped);    throw  new  IOException(   "   "  +  skipped);	  	non-compiled	[CE]  unreachable  statement	123	None	add
97	[BUG]  [BUGGY]  throw  new  IOException(   "   "  +  skipped);  throw  new  IOException(   "   "  +  skipd);  [CE]  cannot  find  symbol  skipd  [FE]      IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException(   "   "  +  skipped);  throw  new  IOException(   "   "  +  skipd);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IOException(   "   "    +    skipped);    throw  new  IOException(   "   "  +  skipd);	  	non-compiled	[CE]  cannot  find  symbol  skipd	123	None	add
98	[BUG]  [BUGGY]  throw  new  IOException(   "   "  +  skipped);  Throw  new  IOException(   "   "  +  skipped);  [CE]  not  a  statement  [FE]        IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException(   "   "  +  skipped);  Throw  new  IOException(   "   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IOException(   "   "    +    skipped);    Throw  new  IOException(   "   "  +  skipped);	  	non-compiled	[CE]  not  a  statement	123	None	add
99	[BUG]  [BUGGY]  throw  new  IOException(   "   "  +  skipped);  new  IOException(   "   "  +  skipped);  [CE]  unreachable  statement  [FE]          IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException(   "   "  +  skipped);  new  IOException(   "   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IOException(   "   "    +    skipped);    new  IOException(   "   "  +  skipped);	  	non-compiled	[CE]  unreachable  statement	123	None	add
100	[BUG]  [BUGGY]  long  skipped  =  input.skip(available);  [CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  long  skipped  =  input.skip(available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	long  skipped  =  input.skip(available);	  long    skipped    =    input.skip(skipped);    	non-compiled	[CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)	131	None	replace
101	[BUG]  [BUGGY]  long  skipped  =  input.skip(skipped  -  numToSkip);  [CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  long  skipped  =  input.skip(skipped  -  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	long  skipped  =  input.skip(skipped  -  numToSkip);	  long    skipped    =    input.skip(skipped);    	non-compiled	[CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)	131	None	replace
102	[BUG]  [BUGGY]  long  skipped  =  input.skip(skipped  +  numToSkip);  [CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  long  skipped  =  input.skip(skipped  +  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	long  skipped  =  input.skip(skipped  +  numToSkip);	  long    skipped    =    input.skip(skipped);    	non-compiled	[CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)	131	None	replace
103	[BUG]  [BUGGY]  int  skipped  =  input.skip(skipped);  [CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  int  skipped  =  input.skip(skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	int  skipped  =  input.skip(skipped);	  long    skipped    =    input.skip(skipped);    	non-compiled	[CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)	131	None	replace
104	[BUG]  [BUGGY]  long  skipped  =  input.skip(skipped  -  available);  [CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  long  skipped  =  input.skip(skipped  -  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	long  skipped  =  input.skip(skipped  -  available);	  long    skipped    =    input.skip(skipped);    	non-compiled	[CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)	131	None	replace
105	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IllegalStateException(   "   ");  }  if(available  >  0)  {  throw  new  IllegalStateException(   "   ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available    >    0)    {    throw    new    IllegalStateException(   "   ");    }    if(available  >  0)  {  throw  new  IllegalStateException(   "   ");  }	  	compilable	  [FE]  IllegalStateException  	171	2	add
106	[BUG]  [BUGGY]  if(available  >  0)  {  throw  new  IllegalStateException(   "   ");  }  if(available  >  0)  {  throw  new  IllegalStateException(   "   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IllegalStateException(   "   ");  }  if(available  >  0)  {  throw  new  IllegalStateException(   "   ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >    0)    {    throw    new    IllegalStateException(   "   ");    }    if(available  >  0)  {  throw  new  IllegalStateException(   "   ");  }	  	compilable	  [FE]  IllegalStateException  	171	2	add
107	[BUG]  [BUGGY]  if(available  >  0)  {  throw  new  IllegalStateException(   "   ");  }  If(available  >  0)  {  throw  new  IllegalStateException(   "   ");  }  [CE]  [FE]      IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IllegalStateException(   "   ");  }  If(available  >  0)  {  throw  new  IllegalStateException(   "   ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >    0)    {    throw    new    IllegalStateException(   "   ");    }    If(available  >  0)  {  throw  new  IllegalStateException(   "   ");  }	  	non-compiled	[CE]  	171	None	add
108	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IllegalStateException(   "   ");  }  if(available  >  0)  {  throw  new  IllegalStateException( ",   ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available    >    0)    {    throw    new    IllegalStateException(   "   ");    }    if(available  >  0)  {  throw  new  IllegalStateException( ",   ");  }	  	compilable	  [FE]  IllegalStateException  	171	2	add
109	[BUG]  [BUGGY]  if(available  >  0)  {  throw  new  IllegalStateException(   "   ");  }  if(available  >  0)  {  throw  new  IllegalStateException( ",   ");  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IllegalStateException(   "   ");  }  if(available  >  0)  {  throw  new  IllegalStateException( ",   ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >    0)    {    throw    new    IllegalStateException(   "   ");    }    if(available  >  0)  {  throw  new  IllegalStateException( ",   ");  }	  	compilable	  [FE]  IllegalStateException  	171	2	add
110	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IllegalStateException(   "   ");  }  if(available  >  0)  {  throw  new  IllegalStateException( ".   ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available    >    0)    {    throw    new    IllegalStateException(   "   ");    }    if(available  >  0)  {  throw  new  IllegalStateException( ".   ");  }	  	compilable	  [FE]  IllegalStateException  	171	2	add
111	[BUG]  [BUGGY]  if(available  >  0)  {  throw  new  IllegalStateException(   "   ");  }  if(available  >  0)  {  throw  new  IllegalStateException( ".   ");  }  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IllegalStateException(   "   ");  }  if(available  >  0)  {  throw  new  IllegalStateException( ".   ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >    0)    {    throw    new    IllegalStateException(   "   ");    }    if(available  >  0)  {  throw  new  IllegalStateException( ".   ");  }	  	compilable	  [FE]  IllegalStateException  	171	2	add
112	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Skip  skipped:   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IOException( "Skip  skipped:   "  +  skipped);	  throw    new    IOException(   "   "    +    skipped);    	compilable	  [FE]  IOException  	124	2	replace
113	[BUG]  [BUGGY]  throw  new  IOException( "Skip  skipped:   "  +  skipped);  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Skip  skipped:   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( "Skip  skipped:   "  +  skipped);	  throw    new    IOException(   "   "    +    skipped);    	compilable	  [FE]  IOException  	124	2	replace
114	[BUG]  [BUGGY]  [FE]  IOException  [FE]      IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Should  have  skipped: "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IOException( "Should  have  skipped: "  +  skipped);	  throw    new    IOException(   "   "    +    skipped);    	compilable	  [FE]  IOException  	124	2	replace
115	[BUG]  [BUGGY]  throw  new  IOException( "Should  have  skipped: "  +  skipped);  [FE]  IOException  [FE]      IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Should  have  skipped: "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( "Should  have  skipped: "  +  skipped);	  throw    new    IOException(   "   "    +    skipped);    	compilable	  [FE]  IOException  	124	2	replace
116	[BUG]  [BUGGY]  [FE]  IOException  [FE]        IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "'   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IOException( "'   "  +  available);	  throw    new    IOException(   "   "    +    skipped);    	compilable	  [FE]  IOException  	124	2	replace
117	[BUG]  [BUGGY]  throw  new  IOException( "'   "  +  available);  [FE]  IOException  [FE]        IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "'   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( "'   "  +  available);	  throw    new    IOException(   "   "    +    skipped);    	compilable	  [FE]  IOException  	124	2	replace
118	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "skipped:   "  +  available);  throw  new  IllegalStateException(   "skipped:   "  +  available);  [CE]  unreachable  statement  [FE]    IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "skipped:   "  +  available);  throw  new  IllegalStateException(   "skipped:   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalStateException(   "skipped:   "    +    available);    throw  new  IllegalStateException(   "skipped:   "  +  available);	  	non-compiled	[CE]  unreachable  statement	143	None	add
119	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "skipped:   "  +  available);  Throw  new  IllegalStateException(   "skipped:   "  +  available);  [CE]  not  a  statement  [FE]      IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "skipped:   "  +  available);  Throw  new  IllegalStateException(   "skipped:   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalStateException(   "skipped:   "    +    available);    Throw  new  IllegalStateException(   "skipped:   "  +  available);	  	non-compiled	[CE]  not  a  statement	143	None	add
120	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "skipped:   "  +  available);  new  IllegalStateException(   "skipped:   "  +  available);  [CE]  unreachable  statement  [FE]        IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "skipped:   "  +  available);  new  IllegalStateException(   "skipped:   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalStateException(   "skipped:   "    +    available);    new  IllegalStateException(   "skipped:   "  +  available);	  	non-compiled	[CE]  unreachable  statement	143	None	add
121	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "skipped:   "  +  available);  throw  new  IllegalStateException( ",skipped:   "  +  available);  [CE]  unreachable  statement  [FE]          IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "skipped:   "  +  available);  throw  new  IllegalStateException( ",skipped:   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalStateException(   "skipped:   "    +    available);    throw  new  IllegalStateException( ",skipped:   "  +  available);	  	non-compiled	[CE]  unreachable  statement	143	None	add
122	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Should  have  been  skipped: "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalStateException( "Should  have  been  skipped: "  +  available);	  throw    new    IllegalStateException(   "   ".equals(available);    	compilable	  [FE]  IllegalStateException  	243	2	replace
123	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Should  have  been  skipped: "  +  available);  [FE]  IllegalStateException  [FE]            IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Should  have  been  skipped: "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "Should  have  been  skipped: "  +  available);	  throw    new    IllegalStateException(   "   ".equals(available);    	compilable	  [FE]  IllegalStateException  	243	2	replace
124	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]              IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Missing  available  line: "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalStateException( "Missing  available  line: "  +  available);	  throw    new    IllegalStateException(   "   ".equals(available);    	compilable	  [FE]  IllegalStateException  	243	2	replace
125	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Missing  available  line: "  +  available);  [FE]  IllegalStateException  [FE]              IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Missing  available  line: "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "Missing  available  line: "  +  available);	  throw    new    IllegalStateException(   "   ".equals(available);    	compilable	  [FE]  IllegalStateException  	243	2	replace
126	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "skipped  =  ' "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalStateException( "skipped  =  ' "  +  available);	  throw    new    IllegalStateException(   "   ".equals(available);    	compilable	  [FE]  IllegalStateException  	243	2	replace
127	[BUG]  [BUGGY]  throw  new  IllegalStateException( "skipped  =  ' "  +  available);  [FE]  IllegalStateException  [FE]                IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "skipped  =  ' "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "skipped  =  ' "  +  available);	  throw    new    IllegalStateException(   "   ".equals(available);    	compilable	  [FE]  IllegalStateException  	243	2	replace
128	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                  IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Invalid  numToSkip,  available: "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalStateException( "Invalid  numToSkip,  available: "  +  available);	  throw    new    IllegalStateException(   "   ".equals(available);    	compilable	  [FE]  IllegalStateException  	243	2	replace
129	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Invalid  numToSkip,  available: "  +  available);  [FE]  IllegalStateException  [FE]                  IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Invalid  numToSkip,  available: "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "Invalid  numToSkip,  available: "  +  available);	  throw    new    IllegalStateException(   "   ".equals(available);    	compilable	  [FE]  IllegalStateException  	243	2	replace
130	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  ==  0)  {  break;  }  if(available  ==  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available    ==    0)    {    break;    }    if(available  ==  0)  {  break;  }	  timeout    	compilable	  [FE]  AssertionError  	111	2	add
131	[BUG]  [BUGGY]  if(available  ==  0)  {  break;  }  if(available  ==  0)  {  break;  }  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  ==  0)  {  break;  }  if(available  ==  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    ==    0)    {    break;    }    if(available  ==  0)  {  break;  }	  timeout    	compilable	  [FE]  AssertionError  	111	2	add
132	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  ==  0)  {  break;  }  if(available  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available    ==    0)    {    break;    }    if(available  >=  0)  {  break;  }	  timeout    	compilable	  [FE]  AssertionError  	111	2	add
133	[BUG]  [BUGGY]  if(available  ==  0)  {  break;  }  if(available  >=  0)  {  break;  }  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  ==  0)  {  break;  }  if(available  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    ==    0)    {    break;    }    if(available  >=  0)  {  break;  }	  timeout    	compilable	  [FE]  AssertionError  	111	2	add
134	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  ==  0)  {  break;  }  if(available!=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available    ==    0)    {    break;    }    if(available!=  0)  {  break;  }	  timeout    	compilable	  [FE]  AssertionError  	111	2	add
135	[BUG]  [BUGGY]  if(available  ==  0)  {  break;  }  if(available!=  0)  {  break;  }  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  ==  0)  {  break;  }  if(available!=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    ==    0)    {    break;    }    if(available!=  0)  {  break;  }	  timeout    	compilable	  [FE]  AssertionError  	111	2	add
136	[BUG]  [BUGGY]  if(available  ==  0)  {  break;  }  If(available  ==  0)  {  break;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  ==  0)  {  break;  }  If(available  ==  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    ==    0)    {    break;    }    If(available  ==  0)  {  break;  }	  timeout    	non-compiled	[CE]  ';'  expected	111	None	add
137	[BUG]  [BUGGY]  if(available  ==  0)  {  break;  }  if(available  >>  0)  {  break;  }  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  ==  0)  {  break;  }  if(available  >>  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    ==    0)    {    break;    }    if(available  >>  0)  {  break;  }	  timeout    	non-compiled	[CE]  incompatible  types	111	None	add
138	[BUG]  [BUGGY]  if(available  ==  0)  {  break;  }  if(available  ==  0)  {  break;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  ==  0)  {  break;  }  if(available  ==  0)  {  break;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    ==    0)    {    break;    }    if(available  ==  0)  {  break;	  timeout    	non-compiled	[CE]  illegal  start  of  expression	111	None	add
139	[BUG]  [BUGGY]  if(available  ==  0)  {  break;  }  when(available  ==  0)  {  break;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  ==  0)  {  break;  }  when(available  ==  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    ==    0)    {    break;    }    when(available  ==  0)  {  break;  }	  timeout    	non-compiled	[CE]  ';'  expected	111	None	add
140	[BUG]  [BUGGY]  while(available  <  0)  {  break;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  <  0)  {  break;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  <  0)  {  break;	  while(available    >    0)    {    break;    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
141	[BUG]  [BUGGY]  while(skipped  >  0)  {  break;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(skipped  >  0)  {  break;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(skipped  >  0)  {  break;	  while(available    >    0)    {    break;    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
142	[BUG]  [BUGGY]  while(available  >=  0)  {  break;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >=  0)  {  break;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >=  0)  {  break;	  while(available    >    0)    {    break;    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
143	[BUG]  [BUGGY]  while(available  <  =  0)  {  break;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  <  =  0)  {  break;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  <  =  0)  {  break;	  while(available    >    0)    {    break;    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
144	[BUG]  [BUGGY]  while(available  >  0)  {  skip  =  skipped;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  skip  =  skipped;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  skip  =  skipped;	  while(available    >    0)    {    break;    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
145	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(numToSkip  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(numToSkip  >  0)  {  break;  }	  if(available    >    0)    {    break;    }    if(available    >    0)    {    break;    	compilable	  [FE]  AssertionError  	148	2	replace
146	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  break;  }  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(numToSkip  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(numToSkip  >  0)  {  break;  }	  if(available    >    0)    {    break;    }    if(available    >    0)    {    break;    	compilable	  [FE]  AssertionError  	148	2	replace
147	[BUG]  [BUGGY]  while(available  >  0)  {  available  =  available;  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  available  =  available;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  available  =  available;	  if(available    >    0)    {    break;    }    if(available    >    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
148	[BUG]  [BUGGY]  while(available  <  numToSkip)  {  available  =  available;  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  <  numToSkip)  {  available  =  available;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  <  numToSkip)  {  available  =  available;	  if(available    >    0)    {    break;    }    if(available    >    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
149	[BUG]  [BUGGY]  while(available  <  0)  {  available  =  available;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  <  0)  {  available  =  available;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  <  0)  {  available  =  available;	  if(available    >    0)    {    break;    }    if(available    >    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
150	[BUG]  [BUGGY]  cast(input,  numToSkip);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  cast(input,  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	cast(input,  numToSkip);	  if(available    >    0)    {    break;    }    if(available    >    0)    {    break;    }    	non-compiled	[CE]  cannot  find  symbol	146	None	replace
151	[BUG]  [BUGGY]  safeAdd(skipped,  available);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  safeAdd(skipped,  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	safeAdd(skipped,  available);	  if(available    >    0)    {    break;    }    if(available    >    0)    {    break;    }    	non-compiled	[CE]  cannot  find  symbol	146	None	replace
152	[BUG]  [BUGGY]  while(available  <  numToSkip)  {  available  =  0;  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  <  numToSkip)  {  available  =  0;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  <  numToSkip)  {  available  =  0;	  if(available    >    0)    {    break;    }    if(available    >    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
153	[BUG]  [BUGGY]  while(available  <  numToSkip)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  <  numToSkip)  {  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  <  numToSkip)  {	  if(available    >    0)    {    break;    }    if(available    >    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
154	[BUG]  [BUGGY]  while(available  >  0)  {  break;  }  available  =  input.read(skipped);  [CE]  no  suitable  method  found  for  read(long)  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  break;  }  available  =  input.read(skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  break;  }  available  =  input.read(skipped);	  if(available    >    0)    {    break;    }    int    available    =    input.read(skipped);    	non-compiled	[CE]  no  suitable  method  found  for  read(long)	152	None	replace
155	[BUG]  [BUGGY]  if(available  >  0)  {  break;  }  int  available  =  input.read(skipped,  skipped);  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  break;  }  int  available  =  input.read(skipped,  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  break;  }  int  available  =  input.read(skipped,  skipped);	  if(available    >    0)    {    break;    }    int    available    =    input.read(skipped);    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	152	None	replace
156	[BUG]  [BUGGY]  if(available  >  0)  {  break;  }  available  =  input.read(skipped,  skipped);  [CE]  no  suitable  method  found  for  read(long,long)  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  break;  }  available  =  input.read(skipped,  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  break;  }  available  =  input.read(skipped,  skipped);	  if(available    >    0)    {    break;    }    int    available    =    input.read(skipped);    	non-compiled	[CE]  no  suitable  method  found  for  read(long,long)	152	None	replace
157	[BUG]  [BUGGY]  System.arraycopy(input,  skipped,  numToSkip,  available,  numToSkip);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]        IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.arraycopy(input,  skipped,  numToSkip,  available,  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	System.arraycopy(input,  skipped,  numToSkip,  available,  numToSkip);	  throw    new    IllegalStateException(       "       ");    System.arraycopy(input,    numToSkip,    available,    skipped);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	235	None	replace
158	[BUG]  [BUGGY]  timeout  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  skipped)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  <  skipped)  {  break;  }	  if(skipped    <    available)    {    break;    }    	compilable	timeout	50	1	replace
159	[BUG]  [BUGGY]  if(available  <  skipped)  {  break;  }  timeout  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  skipped)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  skipped)  {  break;  }	  if(skipped    <    available)    {    break;    }    	compilable	timeout	50	1	replace
160	[BUG]  [BUGGY]  timeout  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  <  numToSkip)  {  break;  }	  if(skipped    <    available)    {    break;    }    	compilable	timeout	50	1	replace
161	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  break;  }  timeout  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  numToSkip)  {  break;  }	  if(skipped    <    available)    {    break;    }    	compilable	timeout	50	1	replace
162	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  <  available  ||  skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped  <  available  ||  skipped  >  0)  {  break;  }	  if(skipped    <    available)    {    break;    }    	compilable	  [FE]  AssertionError  	50	2	replace
163	[BUG]  [BUGGY]  if(skipped  <  available  ||  skipped  >  0)  {  break;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  <  available  ||  skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  <  available  ||  skipped  >  0)  {  break;  }	  if(skipped    <    available)    {    break;    }    	compilable	  [FE]  AssertionError  	50	2	replace
164	[BUG]  [BUGGY]  if(available  <  skip)  {  break;  }  [CE]  cannot  find  symbol  skip  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  skip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  skip)  {  break;  }	  if(skipped    <    available)    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  skip	50	None	replace
165	[BUG]  [BUGGY]  if(available  <  =  0  ||  skipped  >  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  =  0  ||  skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  =  0  ||  skipped  >  0)  {  break;  }	  if(available    <    =    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
166	[BUG]  [BUGGY]  if(available  <  =  0  ||  skipped  >=  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  =  0  ||  skipped  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  =  0  ||  skipped  >=  0)  {  break;  }	  if(available    <    =    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
167	[BUG]  [BUGGY]  if(available  <  =  0  ||  skipped  <  =  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  =  0  ||  skipped  <  =  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  =  0  ||  skipped  <  =  0)  {  break;  }	  if(available    <    =    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
168	[BUG]  [BUGGY]  if(available  <  =  0  ||  skipped  ==  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  =  0  ||  skipped  ==  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  =  0  ||  skipped  ==  0)  {  break;  }	  if(available    <    =    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
169	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getMillis();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getMillis();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getMillis();  }	  continue;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.getMillis();    }    	non-compiled	[CE]  illegal  start  of  expression	272	None	replace
170	[BUG]  [BUGGY]  if(available  >  skipped)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getMillis();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getMillis();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skipped)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getMillis();  }	  continue;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.getMillis();    }    	non-compiled	[CE]  illegal  start  of  expression	272	None	replace
171	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getMillis();  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getMillis();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getMillis();  }	  continue;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.getMillis();    }    	non-compiled	[CE]  illegal  start  of  expression	272	None	replace
172	[BUG]  [BUGGY]  if(skipped  >  0)  {  int  available  =  0;  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getMillis();  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  int  available  =  0;  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getMillis();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  int  available  =  0;  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getMillis();  }	  continue;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.getMillis();    }    	non-compiled	[CE]  illegal  start  of  expression	272	None	replace
173	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getSize();  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getSize();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getSize();  }	  continue;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.getMillis();    }    	non-compiled	[CE]  illegal  start  of  expression	272	None	replace
174	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available.length;  ++i)  {  available  +=  input.getMillis();  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available.length;  ++i)  {  available  +=  input.getMillis();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  available.length;  ++i)  {  available  +=  input.getMillis();  }	  continue;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.getMillis();    }    	non-compiled	[CE]  illegal  start  of  expression	272	None	replace
175	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  unavailable  +=  input.getMillis();  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  unavailable  +=  input.getMillis();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  unavailable  +=  input.getMillis();  }	  continue;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.getMillis();    }    	non-compiled	[CE]  illegal  start  of  expression	272	None	replace
176	[BUG]  [BUGGY]  skipped  =  input.skip(available  *  numToSkip);  long  skipped  =  input.skip(available  *  numToSkip);  [CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  *  numToSkip);  long  skipped  =  input.skip(available  *  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    *    numToSkip);    long  skipped  =  input.skip(available  *  numToSkip);	  timeout    	non-compiled	[CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)	76	None	add
177	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  *  numToSkip);  skipped  =  input.skip(available  *  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped    =    input.skip(available    *    numToSkip);    skipped  =  input.skip(available  *  numToSkip);	  timeout    	compilable	  [FE]  AssertionError  	76	2	add
178	[BUG]  [BUGGY]  skipped  =  input.skip(available  *  numToSkip);  skipped  =  input.skip(available  *  numToSkip);  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  *  numToSkip);  skipped  =  input.skip(available  *  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    *    numToSkip);    skipped  =  input.skip(available  *  numToSkip);	  timeout    	compilable	  [FE]  AssertionError  	76	2	add
179	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  *  numToSkip);  numToSkip  =  input.skip(available  *  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped    =    input.skip(available    *    numToSkip);    numToSkip  =  input.skip(available  *  numToSkip);	  timeout    	compilable	  [FE]  AssertionError  	76	2	add
180	[BUG]  [BUGGY]  skipped  =  input.skip(available  *  numToSkip);  numToSkip  =  input.skip(available  *  numToSkip);  [FE]  AssertionError  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  *  numToSkip);  numToSkip  =  input.skip(available  *  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    *    numToSkip);    numToSkip  =  input.skip(available  *  numToSkip);	  timeout    	compilable	  [FE]  AssertionError  	76	2	add
181	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  *  numToSkip);  if(available  >  numToSkip)  {  skipped  =  input.skip(available  *  numToSkip);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped    =    input.skip(available    *    numToSkip);    if(available  >  numToSkip)  {  skipped  =  input.skip(available  *  numToSkip);  }	  timeout    	compilable	  [FE]  AssertionError  	76	2	add
182	[BUG]  [BUGGY]  skipped  =  input.skip(available  *  numToSkip);  if(available  >  numToSkip)  {  skipped  =  input.skip(available  *  numToSkip);  }  [FE]  AssertionError  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  *  numToSkip);  if(available  >  numToSkip)  {  skipped  =  input.skip(available  *  numToSkip);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    *    numToSkip);    if(available  >  numToSkip)  {  skipped  =  input.skip(available  *  numToSkip);  }	  timeout    	compilable	  [FE]  AssertionError  	76	2	add
183	[BUG]  [BUGGY]  skipped  =  input.skip(available  *  numToSkip);  if(available  >  numToSkip)  {  skip  =  input.skip(available  *  numToSkip);  }  [CE]  cannot  find  symbol  skip  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  *  numToSkip);  if(available  >  numToSkip)  {  skip  =  input.skip(available  *  numToSkip);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    *    numToSkip);    if(available  >  numToSkip)  {  skip  =  input.skip(available  *  numToSkip);  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  skip	76	None	add
184	[BUG]  [BUGGY]  skipped  =  input.skip(available  *  numToSkip);  if(available  >  numToSkip)  {  skip  =  input.skip(available  *  numToSkip);  }  else  {  skipped  =  input.skip(available  *  numToSkip);  }  [CE]  cannot  find  symbol  skip  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  *  numToSkip);  if(available  >  numToSkip)  {  skip  =  input.skip(available  *  numToSkip);  }  else  {  skipped  =  input.skip(available  *  numToSkip);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    *    numToSkip);    if(available  >  numToSkip)  {  skip  =  input.skip(available  *  numToSkip);  }  else  {  skipped  =  input.skip(available  *  numToSkip);  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  skip	76	None	add
185	[BUG]  [BUGGY]  skipped  =  input.skip(available  *  numToSkip);  int  numToSkip  =  available  *  numToSkip;  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  *  numToSkip);  int  numToSkip  =  available  *  numToSkip;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    *    numToSkip);    int  numToSkip  =  available  *  numToSkip;	  timeout    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	76	None	add
186	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  *  numToSkip);  if(available  >  numToSkip)  {  available  =  numToSkip;  skipped  =  input.skip(available  *  numToSkip);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped    =    input.skip(available    *    numToSkip);    if(available  >  numToSkip)  {  available  =  numToSkip;  skipped  =  input.skip(available  *  numToSkip);  }	  timeout    	compilable	  [FE]  AssertionError  	76	2	add
187	[BUG]  [BUGGY]  skipped  =  input.skip(available  *  numToSkip);  if(available  >  numToSkip)  {  available  =  numToSkip;  skipped  =  input.skip(available  *  numToSkip);  }  [FE]  AssertionError  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  *  numToSkip);  if(available  >  numToSkip)  {  available  =  numToSkip;  skipped  =  input.skip(available  *  numToSkip);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    *    numToSkip);    if(available  >  numToSkip)  {  available  =  numToSkip;  skipped  =  input.skip(available  *  numToSkip);  }	  timeout    	compilable	  [FE]  AssertionError  	76	2	add
188	[BUG]  [BUGGY]  [FE]  IOException  [FE]        IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IOException( " ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  0)  {  throw  new  IOException( " ");  }	  throw    new    IOException(       "       ");    throw    new    IOException(       "       ");    	compilable	  [FE]  IOException  	106	2	replace
189	[BUG]  [BUGGY]  if(available  >  0)  {  throw  new  IOException( " ");  }  [FE]  IOException  [FE]        IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IOException( " ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  throw  new  IOException( " ");  }	  throw    new    IOException(       "       ");    throw    new    IOException(       "       ");    	compilable	  [FE]  IOException  	106	2	replace
190	[BUG]  [BUGGY]  if(available  >  0)  {  throw  new  IOException( " ".longValue());  }  [CE]  cannot  find  symbol  [FE]          IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IOException( " ".longValue());  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  throw  new  IOException( " ".longValue());  }	  throw    new    IOException(       "       ");    throw    new    IOException(       "       ");    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
191	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	230	None	replace
192	[BUG]  [BUGGY]  long  available  =  input.skip(numToSkip);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  long  available  =  input.skip(numToSkip);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	long  available  =  input.skip(numToSkip);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	230	None	replace
193	[BUG]  [BUGGY]  timeout  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.read();    }    	compilable	timeout	230	1	replace
194	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read();  }  timeout  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.read();    }    	compilable	timeout	230	1	replace
195	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read();  }  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read();  }  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read();  }  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	230	None	replace
196	[BUG]  [BUGGY]  long  available  =  input.available();  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  long  available  =  input.available();  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	long  available  =  input.available();  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	230	None	replace
197	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipd  =  input.read();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipd  =  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipd  =  input.read();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	230	None	replace
198	[BUG]  [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  >=  0)  {  skipped  =  input.read();  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  >=  0)  {  skipped  =  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  >=  0)  {  skipped  =  input.read();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	230	None	replace
199	[BUG]  [BUGGY]  long  skipped  =  input.skip(available,  numToSkip);  [CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  long  skipped  =  input.skip(available,  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	long  skipped  =  input.skip(available,  numToSkip);	  continue;    long    skipped    =    input.skip(numToSkip);    	non-compiled	[CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)	13	None	replace
200	[BUG]  [BUGGY]  continue;  skipped  =  input.skip(available);  [CE]  unreachable  statement  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  continue;  skipped  =  input.skip(available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	continue;  skipped  =  input.skip(available);	  continue;    long    skipped    =    input.skip(numToSkip);    	non-compiled	[CE]  unreachable  statement	13	None	replace
201	[BUG]  [BUGGY]  continue;  skipped  =  input.skip(available,  numToSkip);  [CE]  method  skip  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  continue;  skipped  =  input.skip(available,  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	continue;  skipped  =  input.skip(available,  numToSkip);	  continue;    long    skipped    =    input.skip(numToSkip);    	non-compiled	[CE]  method  skip  in  class  InputStream  cannot  be  applied  to  given  types;	13	None	replace
202	[BUG]  [BUGGY]  int  skipped  =  input.skip(numToSkip);  [CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  int  skipped  =  input.skip(numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	int  skipped  =  input.skip(numToSkip);	  continue;    long    skipped    =    input.skip(numToSkip);    	non-compiled	[CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)	13	None	replace
203	[BUG]  [BUGGY]  timeout  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  0  ||  skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  <  0  ||  skipped  >  0)  {  break;  }	  if(available    >    0    ||    skipped    >    0)    {    break;    }    	compilable	timeout	182	1	replace
204	[BUG]  [BUGGY]  if(available  <  0  ||  skipped  >  0)  {  break;  }  timeout  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  0  ||  skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  0  ||  skipped  >  0)  {  break;  }	  if(available    >    0    ||    skipped    >    0)    {    break;    }    	compilable	timeout	182	1	replace
205	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >=  0  ||  skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >=  0  ||  skipped  >  0)  {  break;  }	  if(available    >    0    ||    skipped    >    0)    {    break;    }    	compilable	  [FE]  AssertionError  	182	2	replace
206	[BUG]  [BUGGY]  if(available  >=  0  ||  skipped  >  0)  {  break;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >=  0  ||  skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >=  0  ||  skipped  >  0)  {  break;  }	  if(available    >    0    ||    skipped    >    0)    {    break;    }    	compilable	  [FE]  AssertionError  	182	2	replace
207	[BUG]  [BUGGY]  timeout  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0  &&  skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  0  &&  skipped  >  0)  {  break;  }	  if(available    >    0    ||    skipped    >    0)    {    break;    }    	compilable	timeout	182	1	replace
208	[BUG]  [BUGGY]  if(available  >  0  &&  skipped  >  0)  {  break;  }  timeout  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0  &&  skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0  &&  skipped  >  0)  {  break;  }	  if(available    >    0    ||    skipped    >    0)    {    break;    }    	compilable	timeout	182	1	replace
209	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0  ||  skipped  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  0  ||  skipped  >=  0)  {  break;  }	  if(available    >    0    ||    skipped    >    0)    {    break;    }    	compilable	  [FE]  AssertionError  	182	2	replace
210	[BUG]  [BUGGY]  if(available  >  0  ||  skipped  >=  0)  {  break;  }  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0  ||  skipped  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0  ||  skipped  >=  0)  {  break;  }	  if(available    >    0    ||    skipped    >    0)    {    break;    }    	compilable	  [FE]  AssertionError  	182	2	replace
211	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0  ||  skipped  ==  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  0  ||  skipped  ==  0)  {  break;  }	  if(available    >    0    ||    skipped    >    0)    {    break;    }    	compilable	  [FE]  AssertionError  	182	2	replace
212	[BUG]  [BUGGY]  if(available  >  0  ||  skipped  ==  0)  {  break;  }  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0  ||  skipped  ==  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0  ||  skipped  ==  0)  {  break;  }	  if(available    >    0    ||    skipped    >    0)    {    break;    }    	compilable	  [FE]  AssertionError  	182	2	replace
213	[BUG]  [BUGGY]  timeout  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  ==  0  ||  skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  ==  0  ||  skipped  >  0)  {  break;  }	  if(available    >    0    ||    skipped    >    0)    {    break;    }    	compilable	timeout	182	1	replace
214	[BUG]  [BUGGY]  if(available  ==  0  ||  skipped  >  0)  {  break;  }  timeout  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  ==  0  ||  skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  ==  0  ||  skipped  >  0)  {  break;  }	  if(available    >    0    ||    skipped    >    0)    {    break;    }    	compilable	timeout	182	1	replace
215	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped  ||  skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  skipped  ||  skipped  >  0)  {  break;  }	  if(skipped    >    available    ||    skipped    >    0)    {    break;    }    timeout    	compilable	  [FE]  AssertionError  	260	2	replace
216	[BUG]  [BUGGY]  if(available  >  skipped  ||  skipped  >  0)  {  break;  }  [FE]  AssertionError  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped  ||  skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skipped  ||  skipped  >  0)  {  break;  }	  if(skipped    >    available    ||    skipped    >    0)    {    break;    }    timeout    	compilable	  [FE]  AssertionError  	260	2	replace
217	[BUG]  [BUGGY]  if(available  >  skip  ||  skipped  >  0)  {  break;  }  [CE]  cannot  find  symbol  skip  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skip  ||  skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skip  ||  skipped  >  0)  {  break;  }	  if(skipped    >    available    ||    skipped    >    0)    {    break;    }    timeout    	non-compiled	[CE]  cannot  find  symbol  skip	260	None	replace
218	[BUG]  [BUGGY]  timeout  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  numToSkip  ||  skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  numToSkip  ||  skipped  >  0)  {  break;  }	  if(skipped    >    available    ||    skipped    >    0)    {    break;    }    timeout    	compilable	timeout	260	1	replace
219	[BUG]  [BUGGY]  if(available  >  numToSkip  ||  skipped  >  0)  {  break;  }  timeout  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  numToSkip  ||  skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  numToSkip  ||  skipped  >  0)  {  break;  }	  if(skipped    >    available    ||    skipped    >    0)    {    break;    }    timeout    	compilable	timeout	260	1	replace
220	[BUG]  [BUGGY]  timeout  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  numToSkip  ||  skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  <  numToSkip  ||  skipped  >  0)  {  break;  }	  if(skipped    >    available    ||    skipped    >    0)    {    break;    }    timeout    	compilable	timeout	260	1	replace
221	[BUG]  [BUGGY]  if(available  <  numToSkip  ||  skipped  >  0)  {  break;  }  timeout  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  numToSkip  ||  skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  numToSkip  ||  skipped  >  0)  {  break;  }	  if(skipped    >    available    ||    skipped    >    0)    {    break;    }    timeout    	compilable	timeout	260	1	replace
222	[BUG]  [BUGGY]  ickick  >  available  ||  skipped  >  0)  {  break;  }  [CE]  not  a  statement  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  ickick  >  available  ||  skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	ickick  >  available  ||  skipped  >  0)  {  break;  }	  if(skipped    >    available    ||    skipped    >    0)    {    break;    }    timeout    	non-compiled	[CE]  not  a  statement	260	None	replace
223	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0  ||  skipped  >  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  0  ||  skipped  >  numToSkip)  {  break;  }	  if(skipped    >    0    ||    available    >    numToSkip)    {    break;    }    timeout    	compilable	  [FE]  AssertionError  	251	2	replace
224	[BUG]  [BUGGY]  if(available  >  0  ||  skipped  >  numToSkip)  {  break;  }  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0  ||  skipped  >  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0  ||  skipped  >  numToSkip)  {  break;  }	  if(skipped    >    0    ||    available    >    numToSkip)    {    break;    }    timeout    	compilable	  [FE]  AssertionError  	251	2	replace
225	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0  ||  available  >  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  0  ||  available  >  numToSkip)  {  break;  }	  if(skipped    >    0    ||    available    >    numToSkip)    {    break;    }    timeout    	compilable	  [FE]  AssertionError  	251	2	replace
226	[BUG]  [BUGGY]  if(available  >  0  ||  available  >  numToSkip)  {  break;  }  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0  ||  available  >  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0  ||  available  >  numToSkip)  {  break;  }	  if(skipped    >    0    ||    available    >    numToSkip)    {    break;    }    timeout    	compilable	  [FE]  AssertionError  	251	2	replace
227	[BUG]  [BUGGY]  timeout  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  0  ||  skipped  >  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  <  0  ||  skipped  >  numToSkip)  {  break;  }	  if(skipped    >    0    ||    available    >    numToSkip)    {    break;    }    timeout    	compilable	timeout	251	1	replace
228	[BUG]  [BUGGY]  if(available  <  0  ||  skipped  >  numToSkip)  {  break;  }  timeout  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  0  ||  skipped  >  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  0  ||  skipped  >  numToSkip)  {  break;  }	  if(skipped    >    0    ||    available    >    numToSkip)    {    break;    }    timeout    	compilable	timeout	251	1	replace
229	[BUG]  [BUGGY]  if(available  >  0  ||  skipd  >  numToSkip)  {  break;  }  [CE]  cannot  find  symbol  skipd  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0  ||  skipd  >  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0  ||  skipd  >  numToSkip)  {  break;  }	  if(skipped    >    0    ||    available    >    numToSkip)    {    break;    }    timeout    	non-compiled	[CE]  cannot  find  symbol  skipd	251	None	replace
230	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0  ||  numToSkip  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  0  ||  numToSkip  >  0)  {  break;  }	  if(skipped    >    0    ||    available    >    numToSkip)    {    break;    }    timeout    	compilable	  [FE]  AssertionError  	251	2	replace
231	[BUG]  [BUGGY]  if(available  >  0  ||  numToSkip  >  0)  {  break;  }  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0  ||  numToSkip  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0  ||  numToSkip  >  0)  {  break;  }	  if(skipped    >    0    ||    available    >    numToSkip)    {    break;    }    timeout    	compilable	  [FE]  AssertionError  	251	2	replace
232	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(numToSkip  >  0  ||  available  >  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(numToSkip  >  0  ||  available  >  numToSkip)  {  break;  }	  if(skipped    >    0    ||    available    >    numToSkip)    {    break;    }    timeout    	compilable	  [FE]  AssertionError  	251	2	replace
233	[BUG]  [BUGGY]  if(numToSkip  >  0  ||  available  >  numToSkip)  {  break;  }  [FE]  AssertionError  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(numToSkip  >  0  ||  available  >  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(numToSkip  >  0  ||  available  >  numToSkip)  {  break;  }	  if(skipped    >    0    ||    available    >    numToSkip)    {    break;    }    timeout    	compilable	  [FE]  AssertionError  	251	2	replace
234	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(numToSkip  >  0  ||  available  >  skipped)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(numToSkip  >  0  ||  available  >  skipped)  {  break;  }	  if(skipped    >    0    ||    available    >    numToSkip)    {    break;    }    timeout    	compilable	  [FE]  AssertionError  	251	2	replace
235	[BUG]  [BUGGY]  if(numToSkip  >  0  ||  available  >  skipped)  {  break;  }  [FE]  AssertionError  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(numToSkip  >  0  ||  available  >  skipped)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(numToSkip  >  0  ||  available  >  skipped)  {  break;  }	  if(skipped    >    0    ||    available    >    numToSkip)    {    break;    }    timeout    	compilable	  [FE]  AssertionError  	251	2	replace
236	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( ", ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalStateException( ", ");	  throw    new    IllegalStateException(       "       ");    throw    new    IllegalStateException(   ",       ");    	compilable	  [FE]  IllegalStateException  	23	2	replace
237	[BUG]  [BUGGY]  throw  new  IllegalStateException( ", ");  [FE]  IllegalStateException  [FE]            IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( ", ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( ", ");	  throw    new    IllegalStateException(       "       ");    throw    new    IllegalStateException(   ",       ");    	compilable	  [FE]  IllegalStateException  	23	2	replace
238	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ",  skipped);  [CE]  no  suitable  constructor  found  for  IllegalStateException(String,long)  [FE]              IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( " ",  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( " ",  skipped);	  throw    new    IllegalStateException(       "       ");    throw    new    IllegalStateException(   ",       ");    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalStateException(String,long)	23	None	replace
239	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( ". ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalStateException( ". ");	  throw    new    IllegalStateException(       "       ");    throw    new    IllegalStateException(   ",       ");    	compilable	  [FE]  IllegalStateException  	23	2	replace
240	[BUG]  [BUGGY]  throw  new  IllegalStateException( ". ");  [FE]  IllegalStateException  [FE]                IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( ". ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( ". ");	  throw    new    IllegalStateException(       "       ");    throw    new    IllegalStateException(   ",       ");    	compilable	  [FE]  IllegalStateException  	23	2	replace
241	[BUG]  [BUGGY]  long  available  =  input.skip(numToSkip);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.nextToken();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  long  available  =  input.skip(numToSkip);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.nextToken();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	long  available  =  input.skip(numToSkip);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.nextToken();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.nextToken();    }    	non-compiled	[CE]  illegal  start  of  expression	231	None	replace
242	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.nextToken();  }  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.nextToken();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.nextToken();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.nextToken();    }    	non-compiled	[CE]  cannot  find  symbol	231	None	replace
243	[BUG]  [BUGGY]  long  available  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.nextToken();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  long  available  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.nextToken();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	long  available  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.nextToken();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.nextToken();    }    	non-compiled	[CE]  illegal  start  of  expression	231	None	replace
244	[BUG]  [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.nextToken();  }  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.nextToken();  }  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.nextToken();  }  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.nextToken();    }    	non-compiled	[CE]  illegal  start  of  expression	231	None	replace
245	[BUG]  [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.nextToken();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.nextToken();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.nextToken();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.nextToken();    }    	non-compiled	[CE]  illegal  start  of  expression	231	None	replace
246	[BUG]  [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  ==  0)  {  skipped  =  input.nextToken();  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  ==  0)  {  skipped  =  input.nextToken();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  ==  0)  {  skipped  =  input.nextToken();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.nextToken();    }    	non-compiled	[CE]  illegal  start  of  expression	231	None	replace
247	[BUG]  [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  >=  0)  {  skipped  =  input.nextToken();  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  >=  0)  {  skipped  =  input.nextToken();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  >=  0)  {  skipped  =  input.nextToken();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.nextToken();    }    	non-compiled	[CE]  illegal  start  of  expression	231	None	replace
248	[BUG]  [BUGGY]  if(available  <  =  0)  {  if(skipped  >  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  =  0)  {  if(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  =  0)  {  if(skipped  >  0)  {  break;  }	  if(skipped    >    0)    {    break;    }    if(skipped    >    0)    {    break;    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
249	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  if(skipped  >  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  numToSkip)  {  if(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  numToSkip)  {  if(skipped  >  0)  {  break;  }	  if(skipped    >    0)    {    break;    }    if(skipped    >    0)    {    break;    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
250	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  if(skipped  >  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  numToSkip)  {  if(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  numToSkip)  {  if(skipped  >  0)  {  break;  }	  if(skipped    >    0)    {    break;    }    if(skipped    >    0)    {    break;    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
251	[BUG]  [BUGGY]  if(available  <  =  numToSkip)  {  if(skipped  >  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  =  numToSkip)  {  if(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  =  numToSkip)  {  if(skipped  >  0)  {  break;  }	  if(skipped    >    0)    {    break;    }    if(skipped    >    0)    {    break;    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
252	[BUG]  [BUGGY]  if(available  >=  numToSkip)  {  if(skipped  >  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >=  numToSkip)  {  if(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >=  numToSkip)  {  if(skipped  >  0)  {  break;  }	  if(skipped    >    0)    {    break;    }    if(skipped    >    0)    {    break;    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
253	[BUG]  [BUGGY]  if(available  >=  0)  {  if(skipped  >  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >=  0)  {  if(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >=  0)  {  if(skipped  >  0)  {  break;  }	  if(skipped    >    0)    {    break;    }    if(skipped    >    0)    {    break;    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
254	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0  &&  skipped  <  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  0  &&  skipped  <  available)  {  break;  }	  if(available    >    0    ||    skipped    <    available)    {    break;    }    	compilable	  [FE]  AssertionError  	256	2	replace
255	[BUG]  [BUGGY]  if(available  >  0  &&  skipped  <  available)  {  break;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0  &&  skipped  <  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0  &&  skipped  <  available)  {  break;  }	  if(available    >    0    ||    skipped    <    available)    {    break;    }    	compilable	  [FE]  AssertionError  	256	2	replace
256	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  0  ||  skipped  <  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  <  0  ||  skipped  <  available)  {  break;  }	  if(available    >    0    ||    skipped    <    available)    {    break;    }    	compilable	  [FE]  AssertionError  	256	2	replace
257	[BUG]  [BUGGY]  if(available  <  0  ||  skipped  <  available)  {  break;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  0  ||  skipped  <  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  0  ||  skipped  <  available)  {  break;  }	  if(available    >    0    ||    skipped    <    available)    {    break;    }    	compilable	  [FE]  AssertionError  	256	2	replace
258	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >=  0  ||  skipped  <  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >=  0  ||  skipped  <  available)  {  break;  }	  if(available    >    0    ||    skipped    <    available)    {    break;    }    	compilable	  [FE]  AssertionError  	256	2	replace
259	[BUG]  [BUGGY]  if(available  >=  0  ||  skipped  <  available)  {  break;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >=  0  ||  skipped  <  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >=  0  ||  skipped  <  available)  {  break;  }	  if(available    >    0    ||    skipped    <    available)    {    break;    }    	compilable	  [FE]  AssertionError  	256	2	replace
260	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  ==  0  ||  skipped  <  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  ==  0  ||  skipped  <  available)  {  break;  }	  if(available    >    0    ||    skipped    <    available)    {    break;    }    	compilable	  [FE]  AssertionError  	256	2	replace
261	[BUG]  [BUGGY]  if(available  ==  0  ||  skipped  <  available)  {  break;  }  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  ==  0  ||  skipped  <  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  ==  0  ||  skipped  <  available)  {  break;  }	  if(available    >    0    ||    skipped    <    available)    {    break;    }    	compilable	  [FE]  AssertionError  	256	2	replace
262	[BUG]  [BUGGY]  timeout  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0  ||  available  <  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped  >  0  ||  available  <  numToSkip)  {  break;  }	  if(available    >    0    ||    skipped    <    available)    {    break;    }    	compilable	timeout	256	1	replace
263	[BUG]  [BUGGY]  if(skipped  >  0  ||  available  <  numToSkip)  {  break;  }  timeout  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0  ||  available  <  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0  ||  available  <  numToSkip)  {  break;  }	  if(available    >    0    ||    skipped    <    available)    {    break;    }    	compilable	timeout	256	1	replace
264	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getLength();  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
265	[BUG]  [BUGGY]  while(available  >  0)  {  available  +=  input.getLength();  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  available  +=  input.getLength();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  available  +=  input.getLength();	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
266	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  ++i)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  ++i)  {  available  +=  input.getLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  ++i)  {  available  +=  input.getLength();  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
267	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getUpperCase();  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getUpperCase();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getUpperCase();  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
268	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getUpperBound();  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getUpperBound();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getUpperBound();  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
269	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getEnd();  }  [CE]  illegal  start  of  expression  [FE]                                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getEnd();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getEnd();  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
270	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  skipped.getLength();  }  [CE]  illegal  start  of  expression  [FE]                                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  skipped.getLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  skipped.getLength();  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
271	[BUG]  [BUGGY]  Throw  new  IOException( " ");  [CE]  not  a  statement  [FE]          IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  Throw  new  IOException( " ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	Throw  new  IOException( " ");	  throw    new    IOException(       "       ");    Throw    new    IOException(       "       ");    	non-compiled	[CE]  not  a  statement	107	None	replace
272	[BUG]  [BUGGY]  [FE]  IOException  [FE]            IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Skipped: "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IOException( "Skipped: "  +  skipped);	  throw    new    IOException(       "       ");    Throw    new    IOException(       "       ");    	compilable	  [FE]  IOException  	107	2	replace
273	[BUG]  [BUGGY]  throw  new  IOException( "Skipped: "  +  skipped);  [FE]  IOException  [FE]            IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Skipped: "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( "Skipped: "  +  skipped);	  throw    new    IOException(       "       ");    Throw    new    IOException(       "       ");    	compilable	  [FE]  IOException  	107	2	replace
274	[BUG]  [BUGGY]  [FE]  java.io.IOException:    [FE]              IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( ", ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IOException( ", ");	  throw    new    IOException(       "       ");    Throw    new    IOException(       "       ");    	compilable	  [FE]  java.io.IOException:    	107	2	replace
275	[BUG]  [BUGGY]  throw  new  IOException( ", ");  [FE]  java.io.IOException:    [FE]              IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( ", ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( ", ");	  throw    new    IOException(       "       ");    Throw    new    IOException(       "       ");    	compilable	  [FE]  java.io.IOException:    	107	2	replace
276	[BUG]  [BUGGY]  if(available  <  =  0)  {  break;  }  else  if(available  >  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  =  0)  {  break;  }  else  if(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  =  0)  {  break;  }  else  if(available  >  0)  {  break;  }	  if(available    >    0)    {    break;    }    when(available    >    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
277	[BUG]  [BUGGY]  when(available  >  0)  {  break;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  when(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	when(available  >  0)  {  break;  }	  if(available    >    0)    {    break;    }    when(available    >    0)    {    break;    }    	non-compiled	[CE]  ';'  expected	149	None	replace
278	[BUG]  [BUGGY]  if(available  <  =  0)  {  break;  }  when(available  >  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  =  0)  {  break;  }  when(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  =  0)  {  break;  }  when(available  >  0)  {  break;  }	  if(available    >    0)    {    break;    }    when(available    >    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
279	[BUG]  [BUGGY]  if(available  <  =  0)  {  break;  }  if(available  >  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  =  0)  {  break;  }  if(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  =  0)  {  break;  }  if(available  >  0)  {  break;  }	  if(available    >    0)    {    break;    }    when(available    >    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
280	[BUG]  [BUGGY]  while(skipped  >  0)  {  available  =  available;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(skipped  >  0)  {  available  =  available;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(skipped  >  0)  {  available  =  available;	  if(available    >    0)    {    break;    }    when(available    >    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
281	[BUG]  [BUGGY]  while(available  >=  0)  {  if(skipped  >=  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >=  0)  {  if(skipped  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >=  0)  {  if(skipped  >=  0)  {  break;  }	  if(skipped    >=    0)    {    break;    }    if(skipped    >>    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
282	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >=  0)  {  break;  }  else  if(skipped  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >=  0)  {  break;  }  else  if(skipped  >=  0)  {  break;  }	  if(skipped    >=    0)    {    break;    }    if(skipped    >>    0)    {    break;    }    	compilable	  [FE]  AssertionError  	39	2	replace
283	[BUG]  [BUGGY]  if(available  >=  0)  {  break;  }  else  if(skipped  >=  0)  {  break;  }  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >=  0)  {  break;  }  else  if(skipped  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >=  0)  {  break;  }  else  if(skipped  >=  0)  {  break;  }	  if(skipped    >=    0)    {    break;    }    if(skipped    >>    0)    {    break;    }    	compilable	  [FE]  AssertionError  	39	2	replace
284	[BUG]  [BUGGY]  while(available  <  0)  {  if(skipped  >=  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  <  0)  {  if(skipped  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  <  0)  {  if(skipped  >=  0)  {  break;  }	  if(skipped    >=    0)    {    break;    }    if(skipped    >>    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
285	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >=  0)  {  break;  }  else  if(skipped!=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >=  0)  {  break;  }  else  if(skipped!=  0)  {  break;  }	  if(skipped    >=    0)    {    break;    }    if(skipped    >>    0)    {    break;    }    	compilable	  [FE]  AssertionError  	39	2	replace
286	[BUG]  [BUGGY]  if(available  >=  0)  {  break;  }  else  if(skipped!=  0)  {  break;  }  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >=  0)  {  break;  }  else  if(skipped!=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >=  0)  {  break;  }  else  if(skipped!=  0)  {  break;  }	  if(skipped    >=    0)    {    break;    }    if(skipped    >>    0)    {    break;    }    	compilable	  [FE]  AssertionError  	39	2	replace
287	[BUG]  [BUGGY]  for(int  num  =  available;  num  <  0;  num++)  {  skipped  =  input.skip(available);  }  [CE]  possible  loss  of  precision  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  num  =  available;  num  <  0;  num++)  {  skipped  =  input.skip(available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  num  =  available;  num  <  0;  num++)  {  skipped  =  input.skip(available);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    num    =    available;    num    <    0;    num++)    {    skipped    =    input.skip(available);    }    	non-compiled	[CE]  possible  loss  of  precision	73	None	replace
288	[BUG]  [BUGGY]  int  available  =  input.available();  if(available  >  0)  {  for(int  num  =  available;  num  <  0;  num++)  {  skipped  =  input.skip(available);  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  int  available  =  input.available();  if(available  >  0)  {  for(int  num  =  available;  num  <  0;  num++)  {  skipped  =  input.skip(available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	int  available  =  input.available();  if(available  >  0)  {  for(int  num  =  available;  num  <  0;  num++)  {  skipped  =  input.skip(available);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    num    =    available;    num    <    0;    num++)    {    skipped    =    input.skip(available);    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
289	[BUG]  [BUGGY]  for(int  num  =  available;  num  <  0;  num++)  {  skipped  =  input.skipped(available);  }  [CE]  possible  loss  of  precision  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  num  =  available;  num  <  0;  num++)  {  skipped  =  input.skipped(available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  num  =  available;  num  <  0;  num++)  {  skipped  =  input.skipped(available);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    num    =    available;    num    <    0;    num++)    {    skipped    =    input.skip(available);    }    	non-compiled	[CE]  possible  loss  of  precision	73	None	replace
290	[BUG]  [BUGGY]  int  available  =  input.available();  if(available  >  0)  {  for(int  num  =  available;  num  <  0;  num++)  {  skipped  =  output.skip(available);  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  int  available  =  input.available();  if(available  >  0)  {  for(int  num  =  available;  num  <  0;  num++)  {  skipped  =  output.skip(available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	int  available  =  input.available();  if(available  >  0)  {  for(int  num  =  available;  num  <  0;  num++)  {  skipped  =  output.skip(available);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    num    =    available;    num    <    0;    num++)    {    skipped    =    input.skip(available);    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
291	[BUG]  [BUGGY]  timeout  [FE]                                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  0)  {  skipped  =  input.skip(available);  }  else  {  throw  new  IllegalStateException( " ");  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    num    =    available;    num    <    0;    num++)    {    skipped    =    input.skip(available);    }    	compilable	timeout	73	1	replace
292	[BUG]  [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  }  else  {  throw  new  IllegalStateException( " ");  }  timeout  [FE]                                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  skipped  =  input.skip(available);  }  else  {  throw  new  IllegalStateException( " ");  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    num    =    available;    num    <    0;    num++)    {    skipped    =    input.skip(available);    }    	compilable	timeout	73	1	replace
293	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }	  continue;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	194	None	replace
294	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }	  continue;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	194	None	replace
295	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(numToSkip);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(numToSkip);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(numToSkip);  }	  continue;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	194	None	replace
296	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.flush();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.flush();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.flush();  }	  continue;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	194	None	replace
297	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  input.close();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  input.close();  }	  continue;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	194	None	replace
298	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  in.close();  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  in.close();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  in.close();  }	  continue;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	194	None	replace
299	[BUG]  [BUGGY]  throw  new  IOException( " "  +  input.getMessage());  [CE]  cannot  find  symbol  [FE]        IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( " "  +  input.getMessage());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( " "  +  input.getMessage());	  throw    new    IOException(   "   ".getMessage());    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
300	[BUG]  [BUGGY]  throw  new  IOException( "   ",  input.getMessage());  [CE]  cannot  find  symbol  [FE]          IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "   ",  input.getMessage());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( "   ",  input.getMessage());	  throw    new    IOException(   "   ".getMessage());    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
301	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    0)    {    break;    }    while(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  while(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >        0)        {        break;        }        while(skipped    >    0)    {    break;    }    if(skipped  >  0)  {  break;  }  while(skipped  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	102	2	add
302	[BUG]  [BUGGY]  if(skipped    >    0)    {    break;    }    while(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  while(skipped  >  0)  {  break;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    0)    {    break;    }    while(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  while(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >        0)        {        break;        }        while(skipped    >    0)    {    break;    }    if(skipped  >  0)  {  break;  }  while(skipped  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	102	2	add
303	[BUG]  [BUGGY]  if(skipped    >    0)    {    break;    }    while(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  while(skipped  >  0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    0)    {    break;    }    while(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  while(skipped  >  0)  {  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >        0)        {        break;        }        while(skipped    >    0)    {    break;    }    if(skipped  >  0)  {  break;  }  while(skipped  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	102	None	add
304	[BUG]  [BUGGY]  if(skipped    >    0)    {    break;    }    while(skipped  >  0)  {  break;  }  If(skipped  >  0)  {  break;  }  while(skipped  >  0)  {  break;  }  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    0)    {    break;    }    while(skipped  >  0)  {  break;  }  If(skipped  >  0)  {  break;  }  while(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >        0)        {        break;        }        while(skipped    >    0)    {    break;    }    If(skipped  >  0)  {  break;  }  while(skipped  >  0)  {  break;  }	  	non-compiled	[CE]  ';'  expected	102	None	add
305	[BUG]  [BUGGY]  if(skipped    >    0)    {    break;    }    while(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  while(skipped  >  0)  {  break;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    0)    {    break;    }    while(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  while(skipped  >  0)  {  break;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >        0)        {        break;        }        while(skipped    >    0)    {    break;    }    if(skipped  >  0)  {  break;  }  while(skipped  >  0)  {  break;	  	non-compiled	[CE]  illegal  start  of  expression	102	None	add
306	[BUG]  [BUGGY]  if(skipped    >    0)    {    break;    }    while(skipped  >  0)  {  break;  }  if(sked  >  0)  {  break;  }  while(skipped  >  0)  {  break;  }  [CE]  cannot  find  symbol  sked  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    0)    {    break;    }    while(skipped  >  0)  {  break;  }  if(sked  >  0)  {  break;  }  while(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >        0)        {        break;        }        while(skipped    >    0)    {    break;    }    if(sked  >  0)  {  break;  }  while(skipped  >  0)  {  break;  }	  	non-compiled	[CE]  cannot  find  symbol  sked	102	None	add
307	[BUG]  [BUGGY]  if(skipped    >    0)    {    break;    }    while(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  while(sked  >  0)  {  break;  }  [CE]  cannot  find  symbol  sked  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    0)    {    break;    }    while(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  while(sked  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >        0)        {        break;        }        while(skipped    >    0)    {    break;    }    if(skipped  >  0)  {  break;  }  while(sked  >  0)  {  break;  }	  	non-compiled	[CE]  cannot  find  symbol  sked	102	None	add
308	[BUG]  [BUGGY]  if(skipped    >    0)    {    break;    }    while(skipped  >  0)  {  break;  }  if(sinkipped  >  0)  {  break;  }  while(skipped  >  0)  {  break;  }  [CE]  cannot  find  symbol  sinkipped  [FE]                AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    0)    {    break;    }    while(skipped  >  0)  {  break;  }  if(sinkipped  >  0)  {  break;  }  while(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >        0)        {        break;        }        while(skipped    >    0)    {    break;    }    if(sinkipped  >  0)  {  break;  }  while(skipped  >  0)  {  break;  }	  	non-compiled	[CE]  cannot  find  symbol  sinkipped	102	None	add
309	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.get(i);  }  [CE]  possible  loss  of  precision  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.get(i);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.get(i);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.get(i);    }    	non-compiled	[CE]  possible  loss  of  precision	179	None	replace
310	[BUG]  [BUGGY]  long  available  =  input.skip(numToSkip);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.get(i);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  long  available  =  input.skip(numToSkip);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.get(i);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	long  available  =  input.skip(numToSkip);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.get(i);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	179	None	replace
311	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.get(i);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.get(i);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.get(i);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	179	None	replace
312	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.get(i);  }  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.get(i);  }  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.get(i);  }  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	179	None	replace
313	[BUG]  [BUGGY]  long  available  =  input.skip(numToSkip);  if(available  >  0)  {  for(long  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.get(i);  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  long  available  =  input.skip(numToSkip);  if(available  >  0)  {  for(long  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.get(i);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	long  available  =  input.skip(numToSkip);  if(available  >  0)  {  for(long  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.get(i);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	179	None	replace
314	[BUG]  [BUGGY]  long  available  =  input.skip(numToSkip);  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  long  available  =  input.skip(numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	long  available  =  input.skip(numToSkip);	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.get(i);    }    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	179	None	replace
315	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  skipped  =  input.get(i);  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  skipped  =  input.get(i);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  skipped  =  input.get(i);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	179	None	replace
316	[BUG]  [BUGGY]  [FE]  IOException  [FE]                IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( ".skipped= "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IOException( ".skipped= "  +  skipped);	  throw    new    IOException(       "       ");    throw    new    IOException(.   "       ");    	compilable	  [FE]  IOException  	110	2	replace
317	[BUG]  [BUGGY]  throw  new  IOException( ".skipped= "  +  skipped);  [FE]  IOException  [FE]                IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( ".skipped= "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( ".skipped= "  +  skipped);	  throw    new    IOException(       "       ");    throw    new    IOException(.   "       ");    	compilable	  [FE]  IOException  	110	2	replace
318	[BUG]  [BUGGY]  [FE]  IOException  [FE]                  IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( ".skipped: "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IOException( ".skipped: "  +  skipped);	  throw    new    IOException(       "       ");    throw    new    IOException(.   "       ");    	compilable	  [FE]  IOException  	110	2	replace
319	[BUG]  [BUGGY]  throw  new  IOException( ".skipped: "  +  skipped);  [FE]  IOException  [FE]                  IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( ".skipped: "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( ".skipped: "  +  skipped);	  throw    new    IOException(       "       ");    throw    new    IOException(.   "       ");    	compilable	  [FE]  IOException  	110	2	replace
320	[BUG]  [BUGGY]  [FE]  IOException  [FE]                    IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( ".skipped= ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IOException( ".skipped= ");	  throw    new    IOException(       "       ");    throw    new    IOException(.   "       ");    	compilable	  [FE]  IOException  	110	2	replace
321	[BUG]  [BUGGY]  throw  new  IOException( ".skipped= ");  [FE]  IOException  [FE]                    IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( ".skipped= ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( ".skipped= ");	  throw    new    IOException(       "       ");    throw    new    IOException(.   "       ");    	compilable	  [FE]  IOException  	110	2	replace
322	[BUG]  [BUGGY]  if(available  >=  numToSkip)  {  if(skipped  >=  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >=  numToSkip)  {  if(skipped  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >=  numToSkip)  {  if(skipped  >=  0)  {  break;  }	  if(skipped    >=    0)    {    break;    }    If(skipped    >=    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
323	[BUG]  [BUGGY]  if(available  <  =  0)  {  if(skipped  >=  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  =  0)  {  if(skipped  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  =  0)  {  if(skipped  >=  0)  {  break;  }	  if(skipped    >=    0)    {    break;    }    If(skipped    >=    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
324	[BUG]  [BUGGY]  while(available  <  numToSkip)  {  if(skipped  >=  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  <  numToSkip)  {  if(skipped  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  <  numToSkip)  {  if(skipped  >=  0)  {  break;  }	  if(skipped    >=    0)    {    break;    }    If(skipped    >=    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
325	[BUG]  [BUGGY]  if(available  >=  numToSkip)  {  if(skipped  >>  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >=  numToSkip)  {  if(skipped  >>  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >=  numToSkip)  {  if(skipped  >>  0)  {  break;  }	  if(skipped    >=    0)    {    break;    }    If(skipped    >=    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
326	[BUG]  [BUGGY]  if(available  >=  numToSkip)  {  if(skipped!=  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >=  numToSkip)  {  if(skipped!=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >=  numToSkip)  {  if(skipped!=  0)  {  break;  }	  if(skipped    >=    0)    {    break;    }    If(skipped    >=    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
327	[BUG]  [BUGGY]  if(available  >=  numToSkip)  {  if(skipped  ==  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >=  numToSkip)  {  if(skipped  ==  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >=  numToSkip)  {  if(skipped  ==  0)  {  break;  }	  if(skipped    >=    0)    {    break;    }    If(skipped    >=    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
328	[BUG]  [BUGGY]  skip  =  input.skip(0);  [CE]  cannot  find  symbol  skip  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skip  =  input.skip(0);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skip  =  input.skip(0);	  skip    =    input.skip(short);    	non-compiled	[CE]  cannot  find  symbol  skip	216	None	replace
329	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Skipped:   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalStateException( "Skipped:   "  +  available);	  throw    new    IllegalStateException(   "skipped:   "    +    skipped);    	compilable	  [FE]  IllegalStateException  	138	2	replace
330	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Skipped:   "  +  available);  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Skipped:   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "Skipped:   "  +  available);	  throw    new    IllegalStateException(   "skipped:   "    +    skipped);    	compilable	  [FE]  IllegalStateException  	138	2	replace
331	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Should  have  skipped: "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalStateException( "Should  have  skipped: "  +  skipped);	  throw    new    IllegalStateException(   "skipped:   "    +    skipped);    	compilable	  [FE]  IllegalStateException  	138	2	replace
332	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Should  have  skipped: "  +  skipped);  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Should  have  skipped: "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "Should  have  skipped: "  +  skipped);	  throw    new    IllegalStateException(   "skipped:   "    +    skipped);    	compilable	  [FE]  IllegalStateException  	138	2	replace
333	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Skip:   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalStateException( "Skip:   "  +  available);	  throw    new    IllegalStateException(   "skipped:   "    +    skipped);    	compilable	  [FE]  IllegalStateException  	138	2	replace
334	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Skip:   "  +  available);  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Skip:   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "Skip:   "  +  available);	  throw    new    IllegalStateException(   "skipped:   "    +    skipped);    	compilable	  [FE]  IllegalStateException  	138	2	replace
335	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Should  skip: "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalStateException( "Should  skip: "  +  skipped);	  throw    new    IllegalStateException(   "skipped:   "    +    skipped);    	compilable	  [FE]  IllegalStateException  	138	2	replace
336	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Should  skip: "  +  skipped);  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Should  skip: "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "Should  skip: "  +  skipped);	  throw    new    IllegalStateException(   "skipped:   "    +    skipped);    	compilable	  [FE]  IllegalStateException  	138	2	replace
337	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "skipped:  ' "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalStateException( "skipped:  ' "  +  skipped);	  throw    new    IllegalStateException(   "skipped:   "    +    skipped);    	compilable	  [FE]  IllegalStateException  	138	2	replace
338	[BUG]  [BUGGY]  throw  new  IllegalStateException( "skipped:  ' "  +  skipped);  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "skipped:  ' "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "skipped:  ' "  +  skipped);	  throw    new    IllegalStateException(   "skipped:   "    +    skipped);    	compilable	  [FE]  IllegalStateException  	138	2	replace
339	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Skip:   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalStateException( "Skip:   "  +  skipped);	  throw    new    IllegalStateException(   "skipped:   "    +    skipped);    	compilable	  [FE]  IllegalStateException  	138	2	replace
340	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Skip:   "  +  skipped);  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Skip:   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "Skip:   "  +  skipped);	  throw    new    IllegalStateException(   "skipped:   "    +    skipped);    	compilable	  [FE]  IllegalStateException  	138	2	replace
341	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Skipped  in  the  stream. ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IOException( "Skipped  in  the  stream. ");	  throw    new    IOException(   "skipped    in    the    stream.   ");    	compilable	  [FE]  IOException  	222	2	replace
342	[BUG]  [BUGGY]  throw  new  IOException( "Skipped  in  the  stream. ");  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Skipped  in  the  stream. ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( "Skipped  in  the  stream. ");	  throw    new    IOException(   "skipped    in    the    stream.   ");    	compilable	  [FE]  IOException  	222	2	replace
343	[BUG]  [BUGGY]  [FE]  IOException  [FE]      IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Skip  in  the  stream. ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IOException( "Skip  in  the  stream. ");	  throw    new    IOException(   "skipped    in    the    stream.   ");    	compilable	  [FE]  IOException  	222	2	replace
344	[BUG]  [BUGGY]  throw  new  IOException( "Skip  in  the  stream. ");  [FE]  IOException  [FE]      IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Skip  in  the  stream. ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( "Skip  in  the  stream. ");	  throw    new    IOException(   "skipped    in    the    stream.   ");    	compilable	  [FE]  IOException  	222	2	replace
345	[BUG]  [BUGGY]  [FE]  IOException  [FE]        IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Skipping  in  the  stream. ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IOException( "Skipping  in  the  stream. ");	  throw    new    IOException(   "skipped    in    the    stream.   ");    	compilable	  [FE]  IOException  	222	2	replace
346	[BUG]  [BUGGY]  throw  new  IOException( "Skipping  in  the  stream. ");  [FE]  IOException  [FE]        IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Skipping  in  the  stream. ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( "Skipping  in  the  stream. ");	  throw    new    IOException(   "skipped    in    the    stream.   ");    	compilable	  [FE]  IOException  	222	2	replace
347	[BUG]  [BUGGY]  System.err.println( "Usage:  SKIP   "  +  input.getName());  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.err.println( "Usage:  SKIP   "  +  input.getName());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	System.err.println( "Usage:  SKIP   "  +  input.getName());	  throw    new    IllegalArgumentException(       "       ");    System.err.println(   "Usage:    SKIP       "    +    input.getName());    	non-compiled	[CE]  cannot  find  symbol	238	None	replace
348	[BUG]  [BUGGY]  System.err.println( "Usage:  SKIP  [ "  +  input.getName());  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.err.println( "Usage:  SKIP  [ "  +  input.getName());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	System.err.println( "Usage:  SKIP  [ "  +  input.getName());	  throw    new    IllegalArgumentException(       "       ");    System.err.println(   "Usage:    SKIP       "    +    input.getName());    	non-compiled	[CE]  cannot  find  symbol	238	None	replace
349	[BUG]  [BUGGY]  System.err.println( "Usage:  SKIP_SIZE   "  +  input.getName());  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.err.println( "Usage:  SKIP_SIZE   "  +  input.getName());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	System.err.println( "Usage:  SKIP_SIZE   "  +  input.getName());	  throw    new    IllegalArgumentException(       "       ");    System.err.println(   "Usage:    SKIP       "    +    input.getName());    	non-compiled	[CE]  cannot  find  symbol	238	None	replace
350	[BUG]  [BUGGY]  System.err.println( "Usage:  SKIP_SIZE:  SKIP   "  +  input.getName());  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.err.println( "Usage:  SKIP_SIZE:  SKIP   "  +  input.getName());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	System.err.println( "Usage:  SKIP_SIZE:  SKIP   "  +  input.getName());	  throw    new    IllegalArgumentException(       "       ");    System.err.println(   "Usage:    SKIP       "    +    input.getName());    	non-compiled	[CE]  cannot  find  symbol	238	None	replace
351	[BUG]  [BUGGY]  timeout  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.err.println( "Usage:  SKIP   "  +  input.toString());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	System.err.println( "Usage:  SKIP   "  +  input.toString());	  throw    new    IllegalArgumentException(       "       ");    System.err.println(   "Usage:    SKIP       "    +    input.getName());    	compilable	timeout	238	1	replace
352	[BUG]  [BUGGY]  System.err.println( "Usage:  SKIP   "  +  input.toString());  timeout  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.err.println( "Usage:  SKIP   "  +  input.toString());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	System.err.println( "Usage:  SKIP   "  +  input.toString());	  throw    new    IllegalArgumentException(       "       ");    System.err.println(   "Usage:    SKIP       "    +    input.getName());    	compilable	timeout	238	1	replace
353	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }	  continue;    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	270	None	replace
354	[BUG]  [BUGGY]  timeout  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }	  continue;    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	compilable	timeout	270	1	replace
355	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  timeout  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }	  continue;    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	compilable	timeout	270	1	replace
356	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available.length;  ++i)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available.length;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  available.length;  ++i)  {  available  +=  input.read();  }	  continue;    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	270	None	replace
357	[BUG]  [BUGGY]  while(available  >  0)  {  available  +=  input.read();  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  available  +=  input.read();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  available  +=  input.read();	  continue;    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	270	None	replace
358	[BUG]  [BUGGY]  while(skipped  >  0)  {  available  +=  input.read();  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(skipped  >  0)  {  available  +=  input.read();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(skipped  >  0)  {  available  +=  input.read();	  continue;    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	270	None	replace
359	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  in.read();  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  in.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  in.read();  }	  continue;    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	270	None	replace
360	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "skipped:   "  +  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalStateException( "skipped:   "  +  numToSkip);	  throw    new    IllegalStateException(   "skipped:   "    +    available);    	compilable	  [FE]  IllegalStateException  	144	2	replace
361	[BUG]  [BUGGY]  throw  new  IllegalStateException( "skipped:   "  +  numToSkip);  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "skipped:   "  +  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "skipped:   "  +  numToSkip);	  throw    new    IllegalStateException(   "skipped:   "    +    available);    	compilable	  [FE]  IllegalStateException  	144	2	replace
362	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "skipped:  ' "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalStateException( "skipped:  ' "  +  available);	  throw    new    IllegalStateException(   "skipped:   "    +    available);    	compilable	  [FE]  IllegalStateException  	144	2	replace
363	[BUG]  [BUGGY]  throw  new  IllegalStateException( "skipped:  ' "  +  available);  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "skipped:  ' "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "skipped:  ' "  +  available);	  throw    new    IllegalStateException(   "skipped:   "    +    available);    	compilable	  [FE]  IllegalStateException  	144	2	replace
364	[BUG]  [BUGGY]  timeout  [FE]        IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.err.println( "Usage:  skipped:  SKIP_BUF_SIZE ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	System.err.println( "Usage:  skipped:  SKIP_BUF_SIZE ");	  throw    new    IllegalArgumentException(       "       ");    System.err.println(   "Usage:    SKIP_BUF_SIZE       ");    	compilable	timeout	237	1	replace
365	[BUG]  [BUGGY]  System.err.println( "Usage:  skipped:  SKIP_BUF_SIZE ");  timeout  [FE]        IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.err.println( "Usage:  skipped:  SKIP_BUF_SIZE ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	System.err.println( "Usage:  skipped:  SKIP_BUF_SIZE ");	  throw    new    IllegalArgumentException(       "       ");    System.err.println(   "Usage:    SKIP_BUF_SIZE       ");    	compilable	timeout	237	1	replace
366	[BUG]  [BUGGY]  timeout  [FE]          IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.err.println( "Usage:  SKIP_BUF_SIZE   ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	System.err.println( "Usage:  SKIP_BUF_SIZE   ");	  throw    new    IllegalArgumentException(       "       ");    System.err.println(   "Usage:    SKIP_BUF_SIZE       ");    	compilable	timeout	237	1	replace
367	[BUG]  [BUGGY]  System.err.println( "Usage:  SKIP_BUF_SIZE   ");  timeout  [FE]          IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.err.println( "Usage:  SKIP_BUF_SIZE   ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	System.err.println( "Usage:  SKIP_BUF_SIZE   ");	  throw    new    IllegalArgumentException(       "       ");    System.err.println(   "Usage:    SKIP_BUF_SIZE       ");    	compilable	timeout	237	1	replace
368	[BUG]  [BUGGY]  timeout  [FE]            IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.err.println( "Usage:  SKIP_BUF_SIZE   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	System.err.println( "Usage:  SKIP_BUF_SIZE   "  +  skipped);	  throw    new    IllegalArgumentException(       "       ");    System.err.println(   "Usage:    SKIP_BUF_SIZE       ");    	compilable	timeout	237	1	replace
369	[BUG]  [BUGGY]  System.err.println( "Usage:  SKIP_BUF_SIZE   "  +  skipped);  timeout  [FE]            IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.err.println( "Usage:  SKIP_BUF_SIZE   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	System.err.println( "Usage:  SKIP_BUF_SIZE   "  +  skipped);	  throw    new    IllegalArgumentException(       "       ");    System.err.println(   "Usage:    SKIP_BUF_SIZE       ");    	compilable	timeout	237	1	replace
370	[BUG]  [BUGGY]  timeout  [FE]              IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  throw    new    IllegalArgumentException(       "       ");    System.err.println(   "Usage:    SKIP_BUF_SIZE       ");    	compilable	timeout	237	1	replace
371	[BUG]  [BUGGY]  if(skipped  >  0)  {  throw  new  IllegalArgumentException( " ");  }  timeout  [FE]              IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  throw    new    IllegalArgumentException(       "       ");    System.err.println(   "Usage:    SKIP_BUF_SIZE       ");    	compilable	timeout	237	1	replace
372	[BUG]  [BUGGY]  while(skipped  <  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(skipped  <  0)  {  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(skipped  <  0)  {	  while(skipped    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
373	[BUG]  [BUGGY]  while(numToSkip  >  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(numToSkip  >  0)  {  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(numToSkip  >  0)  {	  while(skipped    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
374	[BUG]  [BUGGY]  while(skipped  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(skipped  <  =  0)  {  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(skipped  <  =  0)  {	  while(skipped    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
375	[BUG]  [BUGGY]  while(skipped  >=  0)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(skipped  >=  0)  {  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(skipped  >=  0)  {	  while(skipped    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
376	[BUG]  [BUGGY]  while(skipped  >  available)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(skipped  >  available)  {  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(skipped  >  available)  {	  while(skipped    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
377	[BUG]  [BUGGY]  timeout  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  numToSkip  ||  skipped  >  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  numToSkip  ||  skipped  >  numToSkip)  {  break;  }	  if(skipped    >    available    ||    skipped    >    numToSkip)    {    break;    }    timeout    	compilable	timeout	262	1	replace
378	[BUG]  [BUGGY]  if(available  >  numToSkip  ||  skipped  >  numToSkip)  {  break;  }  timeout  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  numToSkip  ||  skipped  >  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  numToSkip  ||  skipped  >  numToSkip)  {  break;  }	  if(skipped    >    available    ||    skipped    >    numToSkip)    {    break;    }    timeout    	compilable	timeout	262	1	replace
379	[BUG]  [BUGGY]  timeout  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  numToSkip  ||  skipped  >  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  <  numToSkip  ||  skipped  >  numToSkip)  {  break;  }	  if(skipped    >    available    ||    skipped    >    numToSkip)    {    break;    }    timeout    	compilable	timeout	262	1	replace
380	[BUG]  [BUGGY]  if(available  <  numToSkip  ||  skipped  >  numToSkip)  {  break;  }  timeout  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  numToSkip  ||  skipped  >  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  numToSkip  ||  skipped  >  numToSkip)  {  break;  }	  if(skipped    >    available    ||    skipped    >    numToSkip)    {    break;    }    timeout    	compilable	timeout	262	1	replace
381	[BUG]  [BUGGY]  timeout  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  numToSkip  ||  skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  numToSkip  ||  skipped  >  available)  {  break;  }	  if(skipped    >    available    ||    skipped    >    numToSkip)    {    break;    }    timeout    	compilable	timeout	262	1	replace
382	[BUG]  [BUGGY]  if(available  >  numToSkip  ||  skipped  >  available)  {  break;  }  timeout  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  numToSkip  ||  skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  numToSkip  ||  skipped  >  available)  {  break;  }	  if(skipped    >    available    ||    skipped    >    numToSkip)    {    break;    }    timeout    	compilable	timeout	262	1	replace
383	[BUG]  [BUGGY]  timeout  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  available  &&  skipped  >  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped  >  available  &&  skipped  >  numToSkip)  {  break;  }	  if(skipped    >    available    ||    skipped    >    numToSkip)    {    break;    }    timeout    	compilable	timeout	262	1	replace
384	[BUG]  [BUGGY]  if(skipped  >  available  &&  skipped  >  numToSkip)  {  break;  }  timeout  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  available  &&  skipped  >  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  available  &&  skipped  >  numToSkip)  {  break;  }	  if(skipped    >    available    ||    skipped    >    numToSkip)    {    break;    }    timeout    	compilable	timeout	262	1	replace
385	[BUG]  [BUGGY]  timeout  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  <  0)  {  continue;  }	  if(available    <    =    0)    {    continue;    }    	compilable	timeout	132	1	replace
386	[BUG]  [BUGGY]  if(available  <  0)  {  continue;  }  timeout  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  0)  {  continue;  }	  if(available    <    =    0)    {    continue;    }    	compilable	timeout	132	1	replace
387	[BUG]  [BUGGY]  if(available  <  =  0  ||  skipped  >  0)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  =  0  ||  skipped  >  0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  =  0  ||  skipped  >  0)  {  continue;  }	  if(available    <    =    0)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
388	[BUG]  [BUGGY]  if(available  <  =  0  ||  skipped  >=  0)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  =  0  ||  skipped  >=  0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  =  0  ||  skipped  >=  0)  {  continue;  }	  if(available    <    =    0)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
389	[BUG]  [BUGGY]  if(available  <  =  0  ||  skipped  ==  0)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  =  0  ||  skipped  ==  0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  =  0  ||  skipped  ==  0)  {  continue;  }	  if(available    <    =    0)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
390	[BUG]  [BUGGY]  if(available  <  =  0  ||  skipped  <  0)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  =  0  ||  skipped  <  0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  =  0  ||  skipped  <  0)  {  continue;  }	  if(available    <    =    0)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
391	[BUG]  [BUGGY]  while(available  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  <  =  0)  {  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  <  =  0)  {	  if(available    <    =    0)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
392	[BUG]  [BUGGY]  skip  =  input.skip(available  /  numToSkip);  [CE]  cannot  find  symbol  skip  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skip  =  input.skip(available  /  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skip  =  input.skip(available  /  numToSkip);	  skip    =    input.skip(available    *    numToSkip);    	non-compiled	[CE]  cannot  find  symbol  skip	163	None	replace
393	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  numToSkip  =  input.skip(available  *  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	numToSkip  =  input.skip(available  *  numToSkip);	  skip    =    input.skip(available    *    numToSkip);    	compilable	  [FE]  AssertionError  	163	2	replace
394	[BUG]  [BUGGY]  numToSkip  =  input.skip(available  *  numToSkip);  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  numToSkip  =  input.skip(available  *  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	numToSkip  =  input.skip(available  *  numToSkip);	  skip    =    input.skip(available    *    numToSkip);    	compilable	  [FE]  AssertionError  	163	2	replace
395	[BUG]  [BUGGY]  skip  =  input.skip(available  *  numToSkip,  skipped);  [CE]  cannot  find  symbol  skip  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skip  =  input.skip(available  *  numToSkip,  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skip  =  input.skip(available  *  numToSkip,  skipped);	  skip    =    input.skip(available    *    numToSkip);    	non-compiled	[CE]  cannot  find  symbol  skip	163	None	replace
396	[BUG]  [BUGGY]  skip  =  input.skip(available  *  numToSkip  +  1);  [CE]  cannot  find  symbol  skip  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skip  =  input.skip(available  *  numToSkip  +  1);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skip  =  input.skip(available  *  numToSkip  +  1);	  skip    =    input.skip(available    *    numToSkip);    	non-compiled	[CE]  cannot  find  symbol  skip	163	None	replace
397	[BUG]  [BUGGY]  int  skip  =  input.skip(available  *  numToSkip);  [CE]  possible  loss  of  precision  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  int  skip  =  input.skip(available  *  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	int  skip  =  input.skip(available  *  numToSkip);	  skip    =    input.skip(available    *    numToSkip);    	non-compiled	[CE]  possible  loss  of  precision	163	None	replace
398	[BUG]  [BUGGY]  Throw  new  IllegalStateException( " ");  [CE]  not  a  statement  [FE]          IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  Throw  new  IllegalStateException( " ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	Throw  new  IllegalStateException( " ");	  throw    new    IllegalStateException(       "       ");    Throw    new    IllegalStateException(       "       ");    	non-compiled	[CE]  not  a  statement	22	None	replace
399	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [CE]  possible  loss  of  precision  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.length();    }    	non-compiled	[CE]  possible  loss  of  precision	57	None	replace
400	[BUG]  [BUGGY]  if(available  >  skipped)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skipped)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.length();    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
401	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [CE]  illegal  start  of  expression  [FE]                                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.length();    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
402	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  skipped.length();  }  [CE]  possible  loss  of  precision  [FE]                                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  skipped.length();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  skipped.length();  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.length();    }    	non-compiled	[CE]  possible  loss  of  precision	57	None	replace
403	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  skipped.length();  }  [CE]  illegal  start  of  expression  [FE]                                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  skipped.length();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  skipped.length();  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.length();    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
404	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  available  +=  input.length();  [CE]  illegal  start  of  expression  [FE]                                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  numToSkip)  {  available  +=  input.length();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  numToSkip)  {  available  +=  input.length();	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.length();    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
405	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  output.length();  }  [CE]  possible  loss  of  precision  [FE]                                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  output.length();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  output.length();  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.length();    }    	non-compiled	[CE]  possible  loss  of  precision	57	None	replace
406	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Skip  is  less  than  1:   ");  throw  new  IllegalArgumentException(   "Skip  is  less  than  1:   ");  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException(   "Skip  is  less  than  1:   ");  throw  new  IllegalArgumentException(   "Skip  is  less  than  1:   ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalArgumentException(   "Skip    is    less    than    1:   ");    throw  new  IllegalArgumentException(   "Skip  is  less  than  1:   ");	  	non-compiled	[CE]  unreachable  statement	33	None	add
407	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Skip  is  less  than  1:   ");  Throw  new  IllegalArgumentException(   "Skip  is  less  than  1:   ");  [CE]  not  a  statement  [FE]      IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException(   "Skip  is  less  than  1:   ");  Throw  new  IllegalArgumentException(   "Skip  is  less  than  1:   ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalArgumentException(   "Skip    is    less    than    1:   ");    Throw  new  IllegalArgumentException(   "Skip  is  less  than  1:   ");	  	non-compiled	[CE]  not  a  statement	33	None	add
408	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Skip  is  less  than  1:   ");  throw  new  IllegalArgumentException(   "Skip  is  less  than  1: ".);  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException(   "Skip  is  less  than  1:   ");  throw  new  IllegalArgumentException(   "Skip  is  less  than  1: ".);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalArgumentException(   "Skip    is    less    than    1:   ");    throw  new  IllegalArgumentException(   "Skip  is  less  than  1: ".);	  	non-compiled	[CE]  <identifier>  expected	33	None	add
409	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Skip  is  less  than  1:   ");  new  IllegalArgumentException(   "Skip  is  less  than  1:   ");  [CE]  unreachable  statement  [FE]          IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException(   "Skip  is  less  than  1:   ");  new  IllegalArgumentException(   "Skip  is  less  than  1:   ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalArgumentException(   "Skip    is    less    than    1:   ");    new  IllegalArgumentException(   "Skip  is  less  than  1:   ");	  	non-compiled	[CE]  unreachable  statement	33	None	add
410	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  -  skipped);  skipped  =  input.skip(available  -  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped    =    input.skip(available    -    skipped);    skipped  =  input.skip(available  -  skipped);	  timeout    	compilable	  [FE]  AssertionError  	187	2	add
411	[BUG]  [BUGGY]  skipped  =  input.skip(available  -  skipped);  skipped  =  input.skip(available  -  skipped);  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  -  skipped);  skipped  =  input.skip(available  -  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    -    skipped);    skipped  =  input.skip(available  -  skipped);	  timeout    	compilable	  [FE]  AssertionError  	187	2	add
412	[BUG]  [BUGGY]  skipped  =  input.skip(available  -  skipped);  long  skipped  =  input.skip(available  -  skipped);  [CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  -  skipped);  long  skipped  =  input.skip(available  -  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    -    skipped);    long  skipped  =  input.skip(available  -  skipped);	  timeout    	non-compiled	[CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)	187	None	add
413	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  -  skipped);  if(available  >  0)  {  skipped  =  input.skip(available  -  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped    =    input.skip(available    -    skipped);    if(available  >  0)  {  skipped  =  input.skip(available  -  skipped);  }	  timeout    	compilable	  [FE]  AssertionError  	187	2	add
414	[BUG]  [BUGGY]  skipped  =  input.skip(available  -  skipped);  if(available  >  0)  {  skipped  =  input.skip(available  -  skipped);  }  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  -  skipped);  if(available  >  0)  {  skipped  =  input.skip(available  -  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    -    skipped);    if(available  >  0)  {  skipped  =  input.skip(available  -  skipped);  }	  timeout    	compilable	  [FE]  AssertionError  	187	2	add
415	[BUG]  [BUGGY]  skipped  =  input.skip(available  -  skipped);  if(available  >  0)  {  skip  =  input.skip(available  -  skipped);  }  [CE]  cannot  find  symbol  skip  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  -  skipped);  if(available  >  0)  {  skip  =  input.skip(available  -  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    -    skipped);    if(available  >  0)  {  skip  =  input.skip(available  -  skipped);  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  skip	187	None	add
416	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  -  skipped);  if(available  >  0)  {  skipped  =  input.skip(available  -  skipped);  }  else  {  available  =  0;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped    =    input.skip(available    -    skipped);    if(available  >  0)  {  skipped  =  input.skip(available  -  skipped);  }  else  {  available  =  0;  }	  timeout    	compilable	  [FE]  AssertionError  	187	2	add
417	[BUG]  [BUGGY]  skipped  =  input.skip(available  -  skipped);  if(available  >  0)  {  skipped  =  input.skip(available  -  skipped);  }  else  {  available  =  0;  }  [FE]  AssertionError  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  -  skipped);  if(available  >  0)  {  skipped  =  input.skip(available  -  skipped);  }  else  {  available  =  0;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    -    skipped);    if(available  >  0)  {  skipped  =  input.skip(available  -  skipped);  }  else  {  available  =  0;  }	  timeout    	compilable	  [FE]  AssertionError  	187	2	add
418	[BUG]  [BUGGY]  skipped  =  input.skip(available  -  skipped);  d  =  input.skip(available  -  skipped);  [CE]  cannot  find  symbol  d  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  -  skipped);  d  =  input.skip(available  -  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    -    skipped);    d  =  input.skip(available  -  skipped);	  timeout    	non-compiled	[CE]  cannot  find  symbol  d	187	None	add
419	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  -  skipped);  if(available  >  0)  {  skipped  =  input.skip(available  -  skipped);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped    =    input.skip(available    -    skipped);    if(available  >  0)  {  skipped  =  input.skip(available  -  skipped);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  timeout    	compilable	  [FE]  AssertionError  	187	2	add
420	[BUG]  [BUGGY]  skipped  =  input.skip(available  -  skipped);  if(available  >  0)  {  skipped  =  input.skip(available  -  skipped);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionError  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  -  skipped);  if(available  >  0)  {  skipped  =  input.skip(available  -  skipped);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    -    skipped);    if(available  >  0)  {  skipped  =  input.skip(available  -  skipped);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  timeout    	compilable	  [FE]  AssertionError  	187	2	add
421	[BUG]  [BUGGY]  skipped  =  input.skip(available  -  skipped);  InputStream  available  =  input.readInput();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  -  skipped);  InputStream  available  =  input.readInput();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    -    skipped);    InputStream  available  =  input.readInput();	  timeout    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	187	None	add
422	[BUG]  [BUGGY]  timeout  [FE]        IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  new  IOException( " ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	new  IOException( " ");	  throw    new    IOException(       "       ");    new    IOException(       "       ");    	compilable	timeout	164	1	replace
423	[BUG]  [BUGGY]  new  IOException( " ");  timeout  [FE]        IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  new  IOException( " ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	new  IOException( " ");	  throw    new    IOException(       "       ");    new    IOException(       "       ");    	compilable	timeout	164	1	replace
424	[BUG]  [BUGGY]  new  IOException( " ".getMessage());  [CE]  cannot  find  symbol  [FE]          IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  new  IOException( " ".getMessage());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	new  IOException( " ".getMessage());	  throw    new    IOException(       "       ");    new    IOException(       "       ");    	non-compiled	[CE]  cannot  find  symbol	164	None	replace
425	[BUG]  [BUGGY]  new  IOException( " ",  skipped);  [CE]  no  suitable  constructor  found  for  IOException(String,long)  [FE]            IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  new  IOException( " ",  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	new  IOException( " ",  skipped);	  throw    new    IOException(       "       ");    new    IOException(       "       ");    	non-compiled	[CE]  no  suitable  constructor  found  for  IOException(String,long)	164	None	replace
426	[BUG]  [BUGGY]  timeout  [FE]              IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  new  IOException( ".skipped= "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	new  IOException( ".skipped= "  +  skipped);	  throw    new    IOException(       "       ");    new    IOException(       "       ");    	compilable	timeout	164	1	replace
427	[BUG]  [BUGGY]  new  IOException( ".skipped= "  +  skipped);  timeout  [FE]              IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  new  IOException( ".skipped= "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	new  IOException( ".skipped= "  +  skipped);	  throw    new    IOException(       "       ");    new    IOException(       "       ");    	compilable	timeout	164	1	replace
428	[BUG]  [BUGGY]  timeout  [FE]                IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  new  IOException( ", ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	new  IOException( ", ");	  throw    new    IOException(       "       ");    new    IOException(       "       ");    	compilable	timeout	164	1	replace
429	[BUG]  [BUGGY]  new  IOException( ", ");  timeout  [FE]                IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  new  IOException( ", ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	new  IOException( ", ");	  throw    new    IOException(       "       ");    new    IOException(       "       ");    	compilable	timeout	164	1	replace
430	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [CE]  cannot  find  symbol  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }	          if(available    >    0)    {    for(int    i    =    0;    i    <    available;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
431	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }	          if(available    >    0)    {    for(int    i    =    0;    i    <    available;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
432	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getUpperCase();  }  [CE]  cannot  find  symbol  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getUpperCase();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getUpperCase();  }	          if(available    >    0)    {    for(int    i    =    0;    i    <    available;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
433	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getUpperBound();  }  [CE]  cannot  find  symbol  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getUpperBound();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getUpperBound();  }	          if(available    >    0)    {    for(int    i    =    0;    i    <    available;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
434	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getHeaderSize();  }  [CE]  cannot  find  symbol  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getHeaderSize();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getHeaderSize();  }	          if(available    >    0)    {    for(int    i    =    0;    i    <    available;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
435	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getEnd();  }  [CE]  cannot  find  symbol  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getEnd();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getEnd();  }	          if(available    >    0)    {    for(int    i    =    0;    i    <    available;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
436	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(available);  }  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(available);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.skip(available);    }    	non-compiled	[CE]  possible  loss  of  precision	67	None	replace
437	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skipped(available);  }  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skipped(available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skipped(available);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.skip(available);    }    	non-compiled	[CE]  possible  loss  of  precision	67	None	replace
438	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(skipped);  }  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(skipped);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.skip(available);    }    	non-compiled	[CE]  possible  loss  of  precision	67	None	replace
439	[BUG]  [BUGGY]  timeout  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  skipped  =  input.skip(available);  skipped  =  input.skip(available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped  >  0)  {  skipped  =  input.skip(available);  skipped  =  input.skip(available);  }	  skipped    =    input.skip(available);    skipped    =    input.skip(available);    	compilable	timeout	66	1	replace
440	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  =  input.skip(available);  skipped  =  input.skip(available);  }  timeout  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  skipped  =  input.skip(available);  skipped  =  input.skip(available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  skipped  =  input.skip(available);  skipped  =  input.skip(available);  }	  skipped    =    input.skip(available);    skipped    =    input.skip(available);    	compilable	timeout	66	1	replace
441	[BUG]  [BUGGY]  if(available  <  =  0)  {  skipped  =  input.skip(available);  skipped  =  input.skip(skipped);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  =  0)  {  skipped  =  input.skip(available);  skipped  =  input.skip(skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  =  0)  {  skipped  =  input.skip(available);  skipped  =  input.skip(skipped);  }	  skipped    =    input.skip(available);    skipped    =    input.skip(available);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
442	[BUG]  [BUGGY]  if(available  <  =  0)  {  skipped  =  input.skip(available);  skipped  =  input.skip(available);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  =  0)  {  skipped  =  input.skip(available);  skipped  =  input.skip(available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  =  0)  {  skipped  =  input.skip(available);  skipped  =  input.skip(available);  }	  skipped    =    input.skip(available);    skipped    =    input.skip(available);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
443	[BUG]  [BUGGY]  if(available  <  =  0)  {  skipped  =  input.skip(available);  skipped  =  input.skip(available);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  =  0)  {  skipped  =  input.skip(available);  skipped  =  input.skip(available);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  =  0)  {  skipped  =  input.skip(available);  skipped  =  input.skip(available);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  skipped    =    input.skip(available);    skipped    =    input.skip(available);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
444	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "skipped  =     "  +  available);  throw  new  IllegalStateException(   "skipped  =   "  +  available);  [CE]  unreachable  statement  [FE]    IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "skipped  =     "  +  available);  throw  new  IllegalStateException(   "skipped  =   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalStateException(   "skipped    =       "    +    available);    throw  new  IllegalStateException(   "skipped  =   "  +  available);	  	non-compiled	[CE]  unreachable  statement	141	None	add
445	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "skipped  =     "  +  available);  Throw  new  IllegalStateException(   "skipped  =   "  +  available);  [CE]  not  a  statement  [FE]      IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "skipped  =     "  +  available);  Throw  new  IllegalStateException(   "skipped  =   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalStateException(   "skipped    =       "    +    available);    Throw  new  IllegalStateException(   "skipped  =   "  +  available);	  	non-compiled	[CE]  not  a  statement	141	None	add
446	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "skipped  =     "  +  available);  new  IllegalStateException(   "skipped  =   "  +  available);  [CE]  unreachable  statement  [FE]        IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "skipped  =     "  +  available);  new  IllegalStateException(   "skipped  =   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalStateException(   "skipped    =       "    +    available);    new  IllegalStateException(   "skipped  =   "  +  available);	  	non-compiled	[CE]  unreachable  statement	141	None	add
447	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "skipped  =     "  +  available);  throw  new  IllegalStateException( ",skipped  =   "  +  available);  [CE]  unreachable  statement  [FE]          IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "skipped  =     "  +  available);  throw  new  IllegalStateException( ",skipped  =   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalStateException(   "skipped    =       "    +    available);    throw  new  IllegalStateException( ",skipped  =   "  +  available);	  	non-compiled	[CE]  unreachable  statement	141	None	add
448	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "skipped:   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IOException( "skipped:   "  +  available);	  throw    new    IOException(   "skipped:   "    +    skipped);    	compilable	  [FE]  IOException  	122	2	replace
449	[BUG]  [BUGGY]  throw  new  IOException( "skipped:   "  +  available);  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "skipped:   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( "skipped:   "  +  available);	  throw    new    IOException(   "skipped:   "    +    skipped);    	compilable	  [FE]  IOException  	122	2	replace
450	[BUG]  [BUGGY]  [FE]  IOException  [FE]      IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Skipped:   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IOException( "Skipped:   "  +  available);	  throw    new    IOException(   "skipped:   "    +    skipped);    	compilable	  [FE]  IOException  	122	2	replace
451	[BUG]  [BUGGY]  throw  new  IOException( "Skipped:   "  +  available);  [FE]  IOException  [FE]      IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Skipped:   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( "Skipped:   "  +  available);	  throw    new    IOException(   "skipped:   "    +    skipped);    	compilable	  [FE]  IOException  	122	2	replace
452	[BUG]  [BUGGY]  [FE]  IOException  [FE]        IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Skip:   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IOException( "Skip:   "  +  available);	  throw    new    IOException(   "skipped:   "    +    skipped);    	compilable	  [FE]  IOException  	122	2	replace
453	[BUG]  [BUGGY]  throw  new  IOException( "Skip:   "  +  available);  [FE]  IOException  [FE]        IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Skip:   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( "Skip:   "  +  available);	  throw    new    IOException(   "skipped:   "    +    skipped);    	compilable	  [FE]  IOException  	122	2	replace
454	[BUG]  [BUGGY]  [FE]  IOException  [FE]          IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "skipped:  missing: "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IOException( "skipped:  missing: "  +  skipped);	  throw    new    IOException(   "skipped:   "    +    skipped);    	compilable	  [FE]  IOException  	122	2	replace
455	[BUG]  [BUGGY]  throw  new  IOException( "skipped:  missing: "  +  skipped);  [FE]  IOException  [FE]          IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "skipped:  missing: "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( "skipped:  missing: "  +  skipped);	  throw    new    IOException(   "skipped:   "    +    skipped);    	compilable	  [FE]  IOException  	122	2	replace
456	[BUG]  [BUGGY]  System.arraycopy(input,  numToSkip,  available,  numToSkip,  skipped);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.arraycopy(input,  numToSkip,  available,  numToSkip,  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	System.arraycopy(input,  numToSkip,  available,  numToSkip,  skipped);	  if(skipped    >    available)    {    break;    }    if(skipped    >    available)    {    break;    System.arraycopy(input,    numToSkip,    available,    numToSkip,    skipped);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	202	None	replace
457	[BUG]  [BUGGY]  if(available  >  skipped)  {  break;  }  else  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  numToSkip,  skipped);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  break;  }  else  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  numToSkip,  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skipped)  {  break;  }  else  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  numToSkip,  skipped);  }	  if(skipped    >    available)    {    break;    }    if(skipped    >    available)    {    break;    System.arraycopy(input,    numToSkip,    available,    numToSkip,    skipped);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	202	None	replace
458	[BUG]  [BUGGY]  if(available  >  skip)  {  break;  }  else  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  numToSkip,  skipped);  }  [CE]  cannot  find  symbol  skip  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skip)  {  break;  }  else  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  numToSkip,  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skip)  {  break;  }  else  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  numToSkip,  skipped);  }	  if(skipped    >    available)    {    break;    }    if(skipped    >    available)    {    break;    System.arraycopy(input,    numToSkip,    available,    numToSkip,    skipped);    }    	non-compiled	[CE]  cannot  find  symbol  skip	202	None	replace
459	[BUG]  [BUGGY]  if(available  >  0)  {  if(skipped  >  available)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  if(skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  if(skipped  >  available)  {  break;  }	  if(skipped    >    available)    {    break;    }    if(skipped    >    available)    {    break;    System.arraycopy(input,    numToSkip,    available,    numToSkip,    skipped);    }    	non-compiled	[CE]  illegal  start  of  expression	202	None	replace
460	[BUG]  [BUGGY]  if(available  >  skipped)  {  break;  }  else  if(skipped  >  0)  {  System.arraycopy(input,  numToSkip,  available,  numToSkip,  skipped);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  break;  }  else  if(skipped  >  0)  {  System.arraycopy(input,  numToSkip,  available,  numToSkip,  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skipped)  {  break;  }  else  if(skipped  >  0)  {  System.arraycopy(input,  numToSkip,  available,  numToSkip,  skipped);  }	  if(skipped    >    available)    {    break;    }    if(skipped    >    available)    {    break;    System.arraycopy(input,    numToSkip,    available,    numToSkip,    skipped);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	202	None	replace
461	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Skipped:   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalArgumentException( "Skipped:   "  +  available);	  throw    new    IllegalArgumentException(   "Skipped:   "    +    skipped);    	compilable	  [FE]  IllegalArgumentException  	32	2	replace
462	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Skipped:   "  +  available);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Skipped:   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException( "Skipped:   "  +  available);	  throw    new    IllegalArgumentException(   "Skipped:   "    +    skipped);    	compilable	  [FE]  IllegalArgumentException  	32	2	replace
463	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Skip:   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalArgumentException( "Skip:   "  +  available);	  throw    new    IllegalArgumentException(   "Skipped:   "    +    skipped);    	compilable	  [FE]  IllegalArgumentException  	32	2	replace
464	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Skip:   "  +  available);  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Skip:   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException( "Skip:   "  +  available);	  throw    new    IllegalArgumentException(   "Skipped:   "    +    skipped);    	compilable	  [FE]  IllegalArgumentException  	32	2	replace
465	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Skipped:  ' "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalArgumentException( "Skipped:  ' "  +  skipped);	  throw    new    IllegalArgumentException(   "Skipped:   "    +    skipped);    	compilable	  [FE]  IllegalArgumentException  	32	2	replace
466	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Skipped:  ' "  +  skipped);  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Skipped:  ' "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException( "Skipped:  ' "  +  skipped);	  throw    new    IllegalArgumentException(   "Skipped:   "    +    skipped);    	compilable	  [FE]  IllegalArgumentException  	32	2	replace
467	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Skipped:  missing: "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalArgumentException( "Skipped:  missing: "  +  skipped);	  throw    new    IllegalArgumentException(   "Skipped:   "    +    skipped);    	compilable	  [FE]  IllegalArgumentException  	32	2	replace
468	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Skipped:  missing: "  +  skipped);  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Skipped:  missing: "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException( "Skipped:  missing: "  +  skipped);	  throw    new    IllegalArgumentException(   "Skipped:   "    +    skipped);    	compilable	  [FE]  IllegalArgumentException  	32	2	replace
469	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Skipped:   "  +  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalArgumentException( "Skipped:   "  +  numToSkip);	  throw    new    IllegalArgumentException(   "Skipped:   "    +    skipped);    	compilable	  [FE]  IllegalArgumentException  	32	2	replace
470	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Skipped:   "  +  numToSkip);  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Skipped:   "  +  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException( "Skipped:   "  +  numToSkip);	  throw    new    IllegalArgumentException(   "Skipped:   "    +    skipped);    	compilable	  [FE]  IllegalArgumentException  	32	2	replace
471	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available--;  }  [CE]  possible  loss  of  precision  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available--;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  available;  i  <  numToSkip;  i++)  {  available--;  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available--;    }    	non-compiled	[CE]  possible  loss  of  precision	119	None	replace
472	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available--;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available--;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available--;  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available--;    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
473	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available--;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available--;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available--;  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available--;    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
474	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  0;  i++)  {  available--;  }  [CE]  possible  loss  of  precision  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  available;  i  <  0;  i++)  {  available--;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  available;  i  <  0;  i++)  {  available--;  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available--;    }    	non-compiled	[CE]  possible  loss  of  precision	119	None	replace
475	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  available.size();  i  <  numToSkip;  i++)  {  available--;  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  available.size();  i  <  numToSkip;  i++)  {  available--;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  available.size();  i  <  numToSkip;  i++)  {  available--;  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available--;    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
476	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  available.length;  i  <  numToSkip;  i++)  {  available--;  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  available.length;  i  <  numToSkip;  i++)  {  available--;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  available.length;  i  <  numToSkip;  i++)  {  available--;  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available--;    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
477	[BUG]  [BUGGY]  while(available  >  0)  {  available  =  input.skip(numToSkip);  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  available  =  input.skip(numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  available  =  input.skip(numToSkip);	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available--;    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
478	[BUG]  [BUGGY]  InputStream  available  =  input.skip(skipped);  if(available  >  0)  {  break;  }  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  InputStream  available  =  input.skip(skipped);  if(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	InputStream  available  =  input.skip(skipped);  if(available  >  0)  {  break;  }	  if(available    >    0)    {    break;    }    InputStream    available    =    input.skip(skipped);    if(available    >    0)    {    break;    }    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	206	None	replace
479	[BUG]  [BUGGY]  InputStream  available  =  input.skip(numToSkip);  if(available  >  0)  {  break;  }  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  InputStream  available  =  input.skip(numToSkip);  if(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	InputStream  available  =  input.skip(numToSkip);  if(available  >  0)  {  break;  }	  if(available    >    0)    {    break;    }    InputStream    available    =    input.skip(skipped);    if(available    >    0)    {    break;    }    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	206	None	replace
480	[BUG]  [BUGGY]  InputStream  available  =  input.skip(numToSkip);  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  InputStream  available  =  input.skip(numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	InputStream  available  =  input.skip(numToSkip);	  if(available    >    0)    {    break;    }    InputStream    available    =    input.skip(skipped);    if(available    >    0)    {    break;    }    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	206	None	replace
481	[BUG]  [BUGGY]  InputStream  available  =  input.skip(skipped);  if(available  <  0)  {  break;  }  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  InputStream  available  =  input.skip(skipped);  if(available  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	InputStream  available  =  input.skip(skipped);  if(available  <  0)  {  break;  }	  if(available    >    0)    {    break;    }    InputStream    available    =    input.skip(skipped);    if(available    >    0)    {    break;    }    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	206	None	replace
482	[BUG]  [BUGGY]  InputStream  available  =  input.skip(numToSkip);  if(available  <  0)  {  break;  }  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  InputStream  available  =  input.skip(numToSkip);  if(available  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	InputStream  available  =  input.skip(numToSkip);  if(available  <  0)  {  break;  }	  if(available    >    0)    {    break;    }    InputStream    available    =    input.skip(skipped);    if(available    >    0)    {    break;    }    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	206	None	replace
483	[BUG]  [BUGGY]  timeout  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  /  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped  =  input.skip(available  /  numToSkip);	  skipped    =    input.skip(available    *    numToSkip);    timeout    	compilable	timeout	77	1	replace
484	[BUG]  [BUGGY]  skipped  =  input.skip(available  /  numToSkip);  timeout  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  /  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped  =  input.skip(available  /  numToSkip);	  skipped    =    input.skip(available    *    numToSkip);    timeout    	compilable	timeout	77	1	replace
485	[BUG]  [BUGGY]  timeout  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  *  numToSkip  +  1);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped  =  input.skip(available  *  numToSkip  +  1);	  skipped    =    input.skip(available    *    numToSkip);    timeout    	compilable	timeout	77	1	replace
486	[BUG]  [BUGGY]  skipped  =  input.skip(available  *  numToSkip  +  1);  timeout  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  *  numToSkip  +  1);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped  =  input.skip(available  *  numToSkip  +  1);	  skipped    =    input.skip(available    *    numToSkip);    timeout    	compilable	timeout	77	1	replace
487	[BUG]  [BUGGY]  skipped  =  input.skip(available  *  numToSkip,  skipped);  [CE]  method  skip  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  *  numToSkip,  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped  =  input.skip(available  *  numToSkip,  skipped);	  skipped    =    input.skip(available    *    numToSkip);    timeout    	non-compiled	[CE]  method  skip  in  class  InputStream  cannot  be  applied  to  given  types;	77	None	replace
488	[BUG]  [BUGGY]  timeout  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(skipped  *  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped  =  input.skip(skipped  *  numToSkip);	  skipped    =    input.skip(available    *    numToSkip);    timeout    	compilable	timeout	77	1	replace
489	[BUG]  [BUGGY]  skipped  =  input.skip(skipped  *  numToSkip);  timeout  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(skipped  *  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped  =  input.skip(skipped  *  numToSkip);	  skipped    =    input.skip(available    *    numToSkip);    timeout    	compilable	timeout	77	1	replace
490	[BUG]  [BUGGY]  timeout  [FE]        IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  new  IllegalStateException( " ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	new  IllegalStateException( " ");	  throw    new    IllegalStateException(       "       ");    new    IllegalStateException(       "       ");    	compilable	timeout	197	1	replace
491	[BUG]  [BUGGY]  new  IllegalStateException( " ");  timeout  [FE]        IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  new  IllegalStateException( " ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	new  IllegalStateException( " ");	  throw    new    IllegalStateException(       "       ");    new    IllegalStateException(       "       ");    	compilable	timeout	197	1	replace
492	[BUG]  [BUGGY]  new  IllegalStateException( " ".getMessage());  [CE]  cannot  find  symbol  [FE]          IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  new  IllegalStateException( " ".getMessage());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	new  IllegalStateException( " ".getMessage());	  throw    new    IllegalStateException(       "       ");    new    IllegalStateException(       "       ");    	non-compiled	[CE]  cannot  find  symbol	197	None	replace
493	[BUG]  [BUGGY]  new  IllegalStateException( " ",  skipped);  [CE]  no  suitable  constructor  found  for  IllegalStateException(String,long)  [FE]            IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  new  IllegalStateException( " ",  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	new  IllegalStateException( " ",  skipped);	  throw    new    IllegalStateException(       "       ");    new    IllegalStateException(       "       ");    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalStateException(String,long)	197	None	replace
494	[BUG]  [BUGGY]  timeout  [FE]              IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  new  IllegalStateException( "skipped  =   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	new  IllegalStateException( "skipped  =   "  +  skipped);	  throw    new    IllegalStateException(       "       ");    new    IllegalStateException(       "       ");    	compilable	timeout	197	1	replace
495	[BUG]  [BUGGY]  new  IllegalStateException( "skipped  =   "  +  skipped);  timeout  [FE]              IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  new  IllegalStateException( "skipped  =   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	new  IllegalStateException( "skipped  =   "  +  skipped);	  throw    new    IllegalStateException(       "       ");    new    IllegalStateException(       "       ");    	compilable	timeout	197	1	replace
496	[BUG]  [BUGGY]  timeout  [FE]                IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  new  IllegalStateException( ", ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	new  IllegalStateException( ", ");	  throw    new    IllegalStateException(       "       ");    new    IllegalStateException(       "       ");    	compilable	timeout	197	1	replace
497	[BUG]  [BUGGY]  new  IllegalStateException( ", ");  timeout  [FE]                IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  new  IllegalStateException( ", ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	new  IllegalStateException( ", ");	  throw    new    IllegalStateException(       "       ");    new    IllegalStateException(       "       ");    	compilable	timeout	197	1	replace
498	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  0)  {  break;  }  if(available  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available    <    0)    {    break;    }    if(available  <  0)  {  break;  }	  timeout    	compilable	  [FE]  AssertionError  	93	2	add
499	[BUG]  [BUGGY]  if(available  <  0)  {  break;  }  if(available  <  0)  {  break;  }  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  0)  {  break;  }  if(available  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    <    0)    {    break;    }    if(available  <  0)  {  break;  }	  timeout    	compilable	  [FE]  AssertionError  	93	2	add
500	[BUG]  [BUGGY]  if(available  <  0)  {  break;  }  If(available  <  0)  {  break;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  0)  {  break;  }  If(available  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    <    0)    {    break;    }    If(available  <  0)  {  break;  }	  timeout    	non-compiled	[CE]  ';'  expected	93	None	add
501	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  0)  {  break;  }  if(available  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available    <    0)    {    break;    }    if(available  >=  0)  {  break;  }	  timeout    	compilable	  [FE]  AssertionError  	93	2	add
502	[BUG]  [BUGGY]  if(available  <  0)  {  break;  }  if(available  >=  0)  {  break;  }  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  0)  {  break;  }  if(available  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    <    0)    {    break;    }    if(available  >=  0)  {  break;  }	  timeout    	compilable	  [FE]  AssertionError  	93	2	add
503	[BUG]  [BUGGY]  if(available  <  0)  {  break;  }  if(available  <  0)  {  break;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  0)  {  break;  }  if(available  <  0)  {  break;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    <    0)    {    break;    }    if(available  <  0)  {  break;	  timeout    	non-compiled	[CE]  illegal  start  of  expression	93	None	add
504	[BUG]  [BUGGY]  if(available  <  0)  {  break;  }  when(available  <  0)  {  break;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  0)  {  break;  }  when(available  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    <    0)    {    break;    }    when(available  <  0)  {  break;  }	  timeout    	non-compiled	[CE]  ';'  expected	93	None	add
505	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  0)  {  break;  }  while(available  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available    <    0)    {    break;    }    while(available  <  0)  {  break;  }	  timeout    	compilable	  [FE]  AssertionError  	93	2	add
506	[BUG]  [BUGGY]  if(available  <  0)  {  break;  }  while(available  <  0)  {  break;  }  [FE]  AssertionError  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  0)  {  break;  }  while(available  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    <    0)    {    break;    }    while(available  <  0)  {  break;  }	  timeout    	compilable	  [FE]  AssertionError  	93	2	add
507	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(numToSkip));  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(boolean)  [FE]              IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " ".equals(numToSkip));  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException( " ".equals(numToSkip));	  throw    new    IllegalArgumentException(       "       ");    throw    new    IllegalArgumentException(,   "       ");    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(boolean)	8	None	replace
508	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Input  error: "  +  input.getMessage());  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Input  error: "  +  input.getMessage());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException( "Input  error: "  +  input.getMessage());	  throw    new    IllegalArgumentException(   "   ".getMessage());    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
509	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  input.getMessage());  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  input.getMessage());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException( " "  +  input.getMessage());	  throw    new    IllegalArgumentException(   "   ".getMessage());    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
510	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "skipped:   "  +  input.getMessage());  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "skipped:   "  +  input.getMessage());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException( "skipped:   "  +  input.getMessage());	  throw    new    IllegalArgumentException(   "   ".getMessage());    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
511	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Input  error: "  +  numToSkip.getMessage());  [CE]  long  cannot  be  dereferenced  [FE]                IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Input  error: "  +  numToSkip.getMessage());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException( "Input  error: "  +  numToSkip.getMessage());	  throw    new    IllegalArgumentException(   "   ".getMessage());    	non-compiled	[CE]  long  cannot  be  dereferenced	28	None	replace
512	[BUG]  [BUGGY]  if(available  <  =  0)  {  if(skipped  >  available)  {  break;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  =  0)  {  if(skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  =  0)  {  if(skipped  >  available)  {  break;  }	  if(skipped    >    available)    {    break;    }    while(skipped    >    available)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
513	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  if(skipped  >  available)  {  break;  }  while(skipped  >  available)  {  break;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  numToSkip)  {  if(skipped  >  available)  {  break;  }  while(skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  numToSkip)  {  if(skipped  >  available)  {  break;  }  while(skipped  >  available)  {  break;  }	  if(skipped    >    available)    {    break;    }    while(skipped    >    available)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
514	[BUG]  [BUGGY]  if(available  <  =  0)  {  if(skipped  >  available)  {  break;  }  while(skipped  >  available)  {  break;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  =  0)  {  if(skipped  >  available)  {  break;  }  while(skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  =  0)  {  if(skipped  >  available)  {  break;  }  while(skipped  >  available)  {  break;  }	  if(skipped    >    available)    {    break;    }    while(skipped    >    available)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
515	[BUG]  [BUGGY]  timeout  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	while(skipped  >  available)  {  break;  }	  if(skipped    >    available)    {    break;    }    while(skipped    >    available)    {    break;    }    	compilable	timeout	86	1	replace
516	[BUG]  [BUGGY]  while(skipped  >  available)  {  break;  }  timeout  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(skipped  >  available)  {  break;  }	  if(skipped    >    available)    {    break;    }    while(skipped    >    available)    {    break;    }    	compilable	timeout	86	1	replace
517	[BUG]  [BUGGY]  if(available  >  0)  {  if(skipped  >  available)  {  break;  }  while(skipped  >  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  if(skipped  >  available)  {  break;  }  while(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  if(skipped  >  available)  {  break;  }  while(skipped  >  0)  {  break;  }	  if(skipped    >    available)    {    break;    }    while(skipped    >    available)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
518	[BUG]  [BUGGY]  while(available  <  =  numToSkip)  {  if(skipped  >=  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  <  =  numToSkip)  {  if(skipped  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  <  =  numToSkip)  {  if(skipped  >=  0)  {  break;  }	  if(skipped    >=    0)    {    break;    }    if(skipped    ==    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
519	[BUG]  [BUGGY]  while(available  <  numToSkip)  {  if(skipped!=  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  <  numToSkip)  {  if(skipped!=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  <  numToSkip)  {  if(skipped!=  0)  {  break;  }	  if(skipped    >=    0)    {    break;    }    if(skipped    ==    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
520	[BUG]  [BUGGY]  while(available  <  numToSkip)  {  if(skipped  >>  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  <  numToSkip)  {  if(skipped  >>  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  <  numToSkip)  {  if(skipped  >>  0)  {  break;  }	  if(skipped    >=    0)    {    break;    }    if(skipped    ==    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
521	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(available  +  i);  }  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(available  +  i);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(available  +  i);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.skip(available    +    i);    }    	non-compiled	[CE]  possible  loss  of  precision	69	None	replace
522	[BUG]  [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available  +  i);  }  [CE]  cannot  find  symbol  i  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available  +  i);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  skipped  =  input.skip(available  +  i);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.skip(available    +    i);    }    	non-compiled	[CE]  cannot  find  symbol  i	69	None	replace
523	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skipped(available  +  i);  }  [CE]  possible  loss  of  precision  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skipped(available  +  i);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skipped(available  +  i);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.skip(available    +    i);    }    	non-compiled	[CE]  possible  loss  of  precision	69	None	replace
524	[BUG]  [BUGGY]  long  available  =  input.available();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  long  available  =  input.available();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	long  available  =  input.available();	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.skip(available    +    i);    }    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	69	None	replace
525	[BUG]  [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available,  numToSkip);  }  [CE]  method  skip  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available,  numToSkip);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  skipped  =  input.skip(available,  numToSkip);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.skip(available    +    i);    }    	non-compiled	[CE]  method  skip  in  class  InputStream  cannot  be  applied  to  given  types;	69	None	replace
526	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  output.skip(available  +  i);  }  [CE]  possible  loss  of  precision  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  output.skip(available  +  i);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  output.skip(available  +  i);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.skip(available    +    i);    }    	non-compiled	[CE]  possible  loss  of  precision	69	None	replace
527	[BUG]  [BUGGY]  if(available  >  skip)  {  break;  }  else  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  skipped);  }  [CE]  cannot  find  symbol  skip  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skip)  {  break;  }  else  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skip)  {  break;  }  else  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  skipped);  }	  if(skipped    >    available)    {    break;    }    if(skipped    >    available)    {    break;    System.arraycopy(input,    numToSkip,    available,    skipped);    }    	non-compiled	[CE]  cannot  find  symbol  skip	203	None	replace
528	[BUG]  [BUGGY]  if(available  >  skipped)  {  break;  }  else  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  skipped);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  break;  }  else  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skipped)  {  break;  }  else  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  skipped);  }	  if(skipped    >    available)    {    break;    }    if(skipped    >    available)    {    break;    System.arraycopy(input,    numToSkip,    available,    skipped);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	203	None	replace
529	[BUG]  [BUGGY]  if(available  <  0)  {  if(skipped  >  available)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  0)  {  if(skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  0)  {  if(skipped  >  available)  {  break;  }	  if(skipped    >    available)    {    break;    }    if(skipped    >    available)    {    break;    System.arraycopy(input,    numToSkip,    available,    skipped);    }    	non-compiled	[CE]  illegal  start  of  expression	203	None	replace
530	[BUG]  [BUGGY]  continue;  skipped  =  input.skip(numToSkip);  [CE]  unreachable  statement  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  continue;  skipped  =  input.skip(numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	continue;  skipped  =  input.skip(numToSkip);	  continue;    long    skipped    =    input.skip(skipped);    	non-compiled	[CE]  unreachable  statement	15	None	replace
531	[BUG]  [BUGGY]  continue;  skipped  =  input.skip(skipped  +  numToSkip);  [CE]  unreachable  statement  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  continue;  skipped  =  input.skip(skipped  +  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	continue;  skipped  =  input.skip(skipped  +  numToSkip);	  continue;    long    skipped    =    input.skip(skipped);    	non-compiled	[CE]  unreachable  statement	15	None	replace
532	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  continue;    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	266	None	replace
533	[BUG]  [BUGGY]  timeout  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  continue;    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	compilable	timeout	266	1	replace
534	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  timeout  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  continue;    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	compilable	timeout	266	1	replace
535	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.flush();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.flush();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.flush();  }	  continue;    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	266	None	replace
536	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.skip(numToSkip);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.skip(numToSkip);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.skip(numToSkip);  }	  continue;    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	266	None	replace
537	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.skip(available);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.skip(available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.skip(available);  }	  continue;    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	266	None	replace
538	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.skip(skipped);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.skip(skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.skip(skipped);  }	  continue;    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	266	None	replace
539	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  in.close();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  in.close();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  in.close();  }	  continue;    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	266	None	replace
540	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  break;  }  else  if(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  0)  {  break;  }  else  if(available  >  0)  {  break;  }	  if(available    >    0)    {    break;    }    If(available    >    0)    {    break;    }    	compilable	  [FE]  AssertionError  	147	2	replace
541	[BUG]  [BUGGY]  if(available  >  0)  {  break;  }  else  if(available  >  0)  {  break;  }  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  break;  }  else  if(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  break;  }  else  if(available  >  0)  {  break;  }	  if(available    >    0)    {    break;    }    If(available    >    0)    {    break;    }    	compilable	  [FE]  AssertionError  	147	2	replace
542	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  0)  {  break;  }  else  if(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  <  0)  {  break;  }  else  if(available  >  0)  {  break;  }	  if(available    >    0)    {    break;    }    If(available    >    0)    {    break;    }    	compilable	  [FE]  AssertionError  	147	2	replace
543	[BUG]  [BUGGY]  if(available  <  0)  {  break;  }  else  if(available  >  0)  {  break;  }  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  0)  {  break;  }  else  if(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  0)  {  break;  }  else  if(available  >  0)  {  break;  }	  if(available    >    0)    {    break;    }    If(available    >    0)    {    break;    }    	compilable	  [FE]  AssertionError  	147	2	replace
544	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  0)  {  break;  }  if(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  <  0)  {  break;  }  if(available  >  0)  {  break;  }	  if(available    >    0)    {    break;    }    If(available    >    0)    {    break;    }    	compilable	  [FE]  AssertionError  	147	2	replace
545	[BUG]  [BUGGY]  if(available  <  0)  {  break;  }  if(available  >  0)  {  break;  }  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  0)  {  break;  }  if(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  0)  {  break;  }  if(available  >  0)  {  break;  }	  if(available    >    0)    {    break;    }    If(available    >    0)    {    break;    }    	compilable	  [FE]  AssertionError  	147	2	replace
546	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.length();  }  [CE]  possible  loss  of  precision  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.length();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.length();  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.length();    }    	non-compiled	[CE]  possible  loss  of  precision	228	None	replace
547	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.length();  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.length();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.length();  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.length();    }    	non-compiled	[CE]  illegal  start  of  expression	228	None	replace
548	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  skipped.length();  }  [CE]  possible  loss  of  precision  [FE]                                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  skipped.length();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  skipped.length();  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.length();    }    	non-compiled	[CE]  possible  loss  of  precision	228	None	replace
549	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  skipped;  }  [CE]  possible  loss  of  precision  [FE]                                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  skipped;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  skipped;  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.length();    }    	non-compiled	[CE]  possible  loss  of  precision	228	None	replace
550	[BUG]  [BUGGY]  while(available  >  0)  {  available  +=  input.length();  [CE]  illegal  start  of  expression  [FE]                                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  available  +=  input.length();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  available  +=  input.length();	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.length();    }    	non-compiled	[CE]  illegal  start  of  expression	228	None	replace
551	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  ++i)  {  available  +=  input.length();  }  [CE]  illegal  start  of  expression  [FE]                                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  ++i)  {  available  +=  input.length();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  ++i)  {  available  +=  input.length();  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.length();    }    	non-compiled	[CE]  illegal  start  of  expression	228	None	replace
552	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  skipped.length();  }  [CE]  illegal  start  of  expression  [FE]                                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  skipped.length();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  skipped.length();  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.length();    }    	non-compiled	[CE]  illegal  start  of  expression	228	None	replace
553	[BUG]  [BUGGY]  skip  =  input.skip(skipped  -  numToSkip);  [CE]  cannot  find  symbol  skip  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skip  =  input.skip(skipped  -  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skip  =  input.skip(skipped  -  numToSkip);	  skip    =    input.skip(offset);    	non-compiled	[CE]  cannot  find  symbol  skip	118	None	replace
554	[BUG]  [BUGGY]  skip  =  input.skip(skipped  +  numToSkip);  [CE]  cannot  find  symbol  skip  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skip  =  input.skip(skipped  +  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skip  =  input.skip(skipped  +  numToSkip);	  skip    =    input.skip(offset);    	non-compiled	[CE]  cannot  find  symbol  skip	118	None	replace
555	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skip(available);  }  [CE]  possible  loss  of  precision  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skip(available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skip(available);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    skipped    =    input.skip(available);    }    	non-compiled	[CE]  possible  loss  of  precision	72	None	replace
556	[BUG]  [BUGGY]  long  available  =  input.available();  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skip(available);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  long  available  =  input.available();  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skip(available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	long  available  =  input.available();  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skip(available);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    skipped    =    input.skip(available);    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
557	[BUG]  [BUGGY]  long  available  =  input.available();  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  output.skip(available);  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  long  available  =  input.available();  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  output.skip(available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	long  available  =  input.available();  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  output.skip(available);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    skipped    =    input.skip(available);    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
558	[BUG]  [BUGGY]  long  available  =  input.available();  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skipped(available);  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  long  available  =  input.available();  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skipped(available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	long  available  =  input.available();  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skipped(available);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    skipped    =    input.skip(available);    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
559	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skipped(available);  }  [CE]  possible  loss  of  precision  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skipped(available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skipped(available);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    skipped    =    input.skip(available);    }    	non-compiled	[CE]  possible  loss  of  precision	72	None	replace
560	[BUG]  [BUGGY]  [Delete]  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  [Delete]  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	[Delete]	  if(available    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	167	None	replace
561	[BUG]  [BUGGY]  While(available  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]      IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  While(available  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	While(available  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(available    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	167	None	replace
562	[BUG]  [BUGGY]  While(available  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  While(available  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	While(available  <  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(available    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	167	None	replace
563	[BUG]  [BUGGY]  While(available  >  0)  {  throw  new  IllegalArgumentException( "skipped  =   "  +  skipped);  }  [CE]  [FE]          IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  While(available  >  0)  {  throw  new  IllegalArgumentException( "skipped  =   "  +  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	While(available  >  0)  {  throw  new  IllegalArgumentException( "skipped  =   "  +  skipped);  }	  if(available    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	167	None	replace
564	[BUG]  [BUGGY]  While(available  >  0)  {  throw  new  IllegalArgumentException( "skipped:   "  +  skipped);  }  [CE]  [FE]            IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  While(available  >  0)  {  throw  new  IllegalArgumentException( "skipped:   "  +  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	While(available  >  0)  {  throw  new  IllegalArgumentException( "skipped:   "  +  skipped);  }	  if(available    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	167	None	replace
565	[BUG]  [BUGGY]  While(available  >  0)  {  throw  new  IllegalArgumentException( "Skip  is  less  than  1: ");  }  [CE]  [FE]              IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  While(available  >  0)  {  throw  new  IllegalArgumentException( "Skip  is  less  than  1: ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	While(available  >  0)  {  throw  new  IllegalArgumentException( "Skip  is  less  than  1: ");  }	  if(available    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	167	None	replace
566	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  if(skipped  >  0  ||  skipped  >  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  numToSkip)  {  if(skipped  >  0  ||  skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  numToSkip)  {  if(skipped  >  0  ||  skipped  >  0)  {  break;  }	  if(skipped    >    0    ||    skipped    >    0)    {    break;    }    timeout    	non-compiled	[CE]  illegal  start  of  expression	253	None	replace
567	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >=  0  ||  skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped  >=  0  ||  skipped  >  0)  {  break;  }	  if(skipped    >    0    ||    skipped    >    0)    {    break;    }    timeout    	compilable	  [FE]  AssertionError  	253	2	replace
568	[BUG]  [BUGGY]  if(skipped  >=  0  ||  skipped  >  0)  {  break;  }  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >=  0  ||  skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >=  0  ||  skipped  >  0)  {  break;  }	  if(skipped    >    0    ||    skipped    >    0)    {    break;    }    timeout    	compilable	  [FE]  AssertionError  	253	2	replace
569	[BUG]  [BUGGY]  timeout  [FE]        IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  Thread.currentThread().interrupt();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	Thread.currentThread().interrupt();	  throw    new    IOException(       "       ");    if(    available    >    0)    {    throw    new    IOException(       "       ");    }    	compilable	timeout	263	1	replace
570	[BUG]  [BUGGY]  Thread.currentThread().interrupt();  timeout  [FE]        IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  Thread.currentThread().interrupt();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	Thread.currentThread().interrupt();	  throw    new    IOException(       "       ");    if(    available    >    0)    {    throw    new    IOException(       "       ");    }    	compilable	timeout	263	1	replace
571	[BUG]  [BUGGY]  pending  ||  available  >  0)  {  continue;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  pending  ||  available  >  0)  {  continue;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	pending  ||  available  >  0)  {  continue;	  if(available    >    0)    {    continue;    }    timeout    	non-compiled	[CE]  not  a  statement	126	None	replace
572	[BUG]  [BUGGY]  pending  |=  available  >  0)  {  continue;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  pending  |=  available  >  0)  {  continue;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	pending  |=  available  >  0)  {  continue;	  if(available    >    0)    {    continue;    }    timeout    	non-compiled	[CE]  ';'  expected	126	None	replace
573	[BUG]  [BUGGY]  timeout  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0  ||  skipped  <  0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  0  ||  skipped  <  0)  {  continue;  }	  if(available    >    0)    {    continue;    }    timeout    	compilable	timeout	126	1	replace
574	[BUG]  [BUGGY]  if(available  >  0  ||  skipped  <  0)  {  continue;  }  timeout  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0  ||  skipped  <  0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0  ||  skipped  <  0)  {  continue;  }	  if(available    >    0)    {    continue;    }    timeout    	compilable	timeout	126	1	replace
575	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }	  if(skipped    >    0)    {    break;    }    if(skeipped    >    0)    {    break;    }    	compilable	  [FE]  AssertionError  	105	2	replace
576	[BUG]  [BUGGY]  if(available  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [FE]  AssertionError  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }	  if(skipped    >    0)    {    break;    }    if(skeipped    >    0)    {    break;    }    	compilable	  [FE]  AssertionError  	105	2	replace
577	[BUG]  [BUGGY]  if(available  >  0)  {  break;  }  if(skip  >  0)  {  break;  }  [CE]  cannot  find  symbol  skip  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  break;  }  if(skip  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  break;  }  if(skip  >  0)  {  break;  }	  if(skipped    >    0)    {    break;    }    if(skeipped    >    0)    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  skip	105	None	replace
578	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  break;  }  if(numToSkip  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  0)  {  break;  }  if(numToSkip  >  0)  {  break;  }	  if(skipped    >    0)    {    break;    }    if(skeipped    >    0)    {    break;    }    	compilable	  [FE]  AssertionError  	105	2	replace
579	[BUG]  [BUGGY]  if(available  >  0)  {  break;  }  if(numToSkip  >  0)  {  break;  }  [FE]  AssertionError  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  break;  }  if(numToSkip  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  break;  }  if(numToSkip  >  0)  {  break;  }	  if(skipped    >    0)    {    break;    }    if(skeipped    >    0)    {    break;    }    	compilable	  [FE]  AssertionError  	105	2	replace
580	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(numToSkip  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(numToSkip  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }	  if(skipped    >    0)    {    break;    }    if(skeipped    >    0)    {    break;    }    	compilable	  [FE]  AssertionError  	105	2	replace
581	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [FE]  AssertionError  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(numToSkip  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(numToSkip  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }	  if(skipped    >    0)    {    break;    }    if(skeipped    >    0)    {    break;    }    	compilable	  [FE]  AssertionError  	105	2	replace
582	[BUG]  [BUGGY]  if(available  >  0)  {  break;  }  if(skipping  >  0)  {  break;  }  [CE]  cannot  find  symbol  skipping  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  break;  }  if(skipping  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  break;  }  if(skipping  >  0)  {  break;  }	  if(skipped    >    0)    {    break;    }    if(skeipped    >    0)    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  skipping	105	None	replace
583	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  break;  }  if(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped  >  0)  {  break;  }  if(available  >  0)  {  break;  }	  if(skipped    >    0)    {    break;    }    if(skeipped    >    0)    {    break;    }    	compilable	  [FE]  AssertionError  	105	2	replace
584	[BUG]  [BUGGY]  if(skipped  >  0)  {  break;  }  if(available  >  0)  {  break;  }  [FE]  AssertionError  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  break;  }  if(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  break;  }  if(available  >  0)  {  break;  }	  if(skipped    >    0)    {    break;    }    if(skeipped    >    0)    {    break;    }    	compilable	  [FE]  AssertionError  	105	2	replace
585	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }	  continue;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	191	None	replace
586	[BUG]  [BUGGY]  if(skipped  >  0)  {  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  }	  continue;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	191	None	replace
587	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }	  continue;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	191	None	replace
588	[BUG]  [BUGGY]  if(skipped  >  0)  {  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }	  continue;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	191	None	replace
589	[BUG]  [BUGGY]  if(skipped  >  0)  {  int  available  =  0;  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  int  available  =  0;  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  int  available  =  0;  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }	  continue;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	191	None	replace
590	[BUG]  [BUGGY]  if(skipped  >  0)  {  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getUpperBound();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getUpperBound();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getUpperBound();  }	  continue;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	191	None	replace
591	[BUG]  [BUGGY]  if(skipped  >  0)  {  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  unavailable  +=  input.getLength();  }  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  unavailable  +=  input.getLength();  }  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  unavailable  +=  input.getLength();  }  }	  continue;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	191	None	replace
592	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0  ||  skipped  >  0)  {  break;  }  if(available  >  0  ||  skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available    >    0    ||    skipped    >    0)    {    break;    }    if(available  >  0  ||  skipped  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	181	2	add
593	[BUG]  [BUGGY]  if(available  >  0  ||  skipped  >  0)  {  break;  }  if(available  >  0  ||  skipped  >  0)  {  break;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0  ||  skipped  >  0)  {  break;  }  if(available  >  0  ||  skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >    0    ||    skipped    >    0)    {    break;    }    if(available  >  0  ||  skipped  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	181	2	add
594	[BUG]  [BUGGY]  if(available  >  0  ||  skipped  >  0)  {  break;  }  If(available  >  0  ||  skipped  >  0)  {  break;  }  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0  ||  skipped  >  0)  {  break;  }  If(available  >  0  ||  skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >    0    ||    skipped    >    0)    {    break;    }    If(available  >  0  ||  skipped  >  0)  {  break;  }	  	non-compiled	[CE]  ';'  expected	181	None	add
595	[BUG]  [BUGGY]  if(available  >  0  ||  skipped  >  0)  {  break;  }  if(available  >  0  ||  skipd  >  0)  {  break;  }  [CE]  cannot  find  symbol  skipd  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0  ||  skipped  >  0)  {  break;  }  if(available  >  0  ||  skipd  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >    0    ||    skipped    >    0)    {    break;    }    if(available  >  0  ||  skipd  >  0)  {  break;  }	  	non-compiled	[CE]  cannot  find  symbol  skipd	181	None	add
596	[BUG]  [BUGGY]  if(available  >  0  ||  skipped  >  0)  {  break;  }  if(available  >  0  ||  skipped  >  0)  {  break;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0  ||  skipped  >  0)  {  break;  }  if(available  >  0  ||  skipped  >  0)  {  break;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >    0    ||    skipped    >    0)    {    break;    }    if(available  >  0  ||  skipped  >  0)  {  break;	  	non-compiled	[CE]  illegal  start  of  expression	181	None	add
597	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0  ||  skipped  >  0)  {  break;  }  while(available  >  0  ||  skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available    >    0    ||    skipped    >    0)    {    break;    }    while(available  >  0  ||  skipped  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	181	2	add
598	[BUG]  [BUGGY]  if(available  >  0  ||  skipped  >  0)  {  break;  }  while(available  >  0  ||  skipped  >  0)  {  break;  }  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0  ||  skipped  >  0)  {  break;  }  while(available  >  0  ||  skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >    0    ||    skipped    >    0)    {    break;    }    while(available  >  0  ||  skipped  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	181	2	add
599	[BUG]  [BUGGY]  if(available  >  0  ||  skipped  >  0)  {  break;  }  when(available  >  0  ||  skipped  >  0)  {  break;  }  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0  ||  skipped  >  0)  {  break;  }  when(available  >  0  ||  skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >    0    ||    skipped    >    0)    {    break;    }    when(available  >  0  ||  skipped  >  0)  {  break;  }	  	non-compiled	[CE]  ';'  expected	181	None	add
600	[BUG]  [BUGGY]  timeout  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  available)  {  break;  }	  if(available    >    escape)    {    break;    }    	compilable	timeout	211	1	replace
601	[BUG]  [BUGGY]  if(available  >  available)  {  break;  }  timeout  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  available)  {  break;  }	  if(available    >    escape)    {    break;    }    	compilable	timeout	211	1	replace
602	[BUG]  [BUGGY]  if(available  >  saved)  {  break;  }  [CE]  cannot  find  symbol  saved  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  saved)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  saved)  {  break;  }	  if(available    >    escape)    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  saved	211	None	replace
603	[BUG]  [BUGGY]  if(available  >  missing)  {  break;  }  [CE]  cannot  find  symbol  missing  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  missing)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  missing)  {  break;  }	  if(available    >    escape)    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  missing	211	None	replace
604	[BUG]  [BUGGY]  if(skipped  >  0)  {  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  }	  continue;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	267	None	replace
605	[BUG]  [BUGGY]  if(available  >  skipped)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skipped)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  continue;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	267	None	replace
606	[BUG]  [BUGGY]  if(skipped  >  0)  {  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  continue;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	267	None	replace
607	[BUG]  [BUGGY]  if(skipped  >  0)  {  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.flush();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.flush();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.flush();  }	  continue;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	267	None	replace
608	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "skipped:   "  +  skipped);  throw  new  IllegalStateException(   "skipped:   "  +  skipped);  [CE]  unreachable  statement  [FE]    IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "skipped:   "  +  skipped);  throw  new  IllegalStateException(   "skipped:   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalStateException(   "skipped:   "    +    skipped);    throw  new  IllegalStateException(   "skipped:   "  +  skipped);	  	non-compiled	[CE]  unreachable  statement	137	None	add
609	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "skipped:   "  +  skipped);  Throw  new  IllegalStateException(   "skipped:   "  +  skipped);  [CE]  not  a  statement  [FE]      IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "skipped:   "  +  skipped);  Throw  new  IllegalStateException(   "skipped:   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalStateException(   "skipped:   "    +    skipped);    Throw  new  IllegalStateException(   "skipped:   "  +  skipped);	  	non-compiled	[CE]  not  a  statement	137	None	add
610	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "skipped:   "  +  skipped);  throw  new  IllegalStateException(   "skipped:   "  +  skipd);  [CE]  cannot  find  symbol  skipd  [FE]        IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "skipped:   "  +  skipped);  throw  new  IllegalStateException(   "skipped:   "  +  skipd);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalStateException(   "skipped:   "    +    skipped);    throw  new  IllegalStateException(   "skipped:   "  +  skipd);	  	non-compiled	[CE]  cannot  find  symbol  skipd	137	None	add
611	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "skipped:   "  +  skipped);  throw  new  IllegalStateException( ",skipped:   "  +  skipped);  [CE]  unreachable  statement  [FE]          IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "skipped:   "  +  skipped);  throw  new  IllegalStateException( ",skipped:   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalStateException(   "skipped:   "    +    skipped);    throw  new  IllegalStateException( ",skipped:   "  +  skipped);	  	non-compiled	[CE]  unreachable  statement	137	None	add
612	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  numToSkip  =  input.skip(available  +  numToSkip);  numToSkip  =  input.skip(available  +  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	numToSkip    =    input.skip(available    +    numToSkip);    numToSkip  =  input.skip(available  +  numToSkip);	  	compilable	  [FE]  AssertionError  	61	2	add
613	[BUG]  [BUGGY]  numToSkip  =  input.skip(available  +  numToSkip);  numToSkip  =  input.skip(available  +  numToSkip);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  numToSkip  =  input.skip(available  +  numToSkip);  numToSkip  =  input.skip(available  +  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	numToSkip    =    input.skip(available    +    numToSkip);    numToSkip  =  input.skip(available  +  numToSkip);	  	compilable	  [FE]  AssertionError  	61	2	add
614	[BUG]  [BUGGY]  numToSkip  =  input.skip(available  +  numToSkip);  int  numToSkip  =  input.skip(available  +  numToSkip);  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  numToSkip  =  input.skip(available  +  numToSkip);  int  numToSkip  =  input.skip(available  +  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	numToSkip    =    input.skip(available    +    numToSkip);    int  numToSkip  =  input.skip(available  +  numToSkip);	  	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	61	None	add
615	[BUG]  [BUGGY]  numToSkip  =  input.skip(available  +  numToSkip);  numToSkip  =  output.skip(available  +  numToSkip);  [CE]  cannot  find  symbol  output  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  numToSkip  =  input.skip(available  +  numToSkip);  numToSkip  =  output.skip(available  +  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	numToSkip    =    input.skip(available    +    numToSkip);    numToSkip  =  output.skip(available  +  numToSkip);	  	non-compiled	[CE]  cannot  find  symbol  output	61	None	add
616	[BUG]  [BUGGY]  numToSkip  =  input.skip(available  +  numToSkip);  numToSkip  =  in.skip(available  +  numToSkip);  [CE]  cannot  find  symbol  in  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  numToSkip  =  input.skip(available  +  numToSkip);  numToSkip  =  in.skip(available  +  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	numToSkip    =    input.skip(available    +    numToSkip);    numToSkip  =  in.skip(available  +  numToSkip);	  	non-compiled	[CE]  cannot  find  symbol  in	61	None	add
617	[BUG]  [BUGGY]  numToSkip  =  input.skip(available  +  numToSkip);  long  numToSkip  =  input.skip(available  +  numToSkip);  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  numToSkip  =  input.skip(available  +  numToSkip);  long  numToSkip  =  input.skip(available  +  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	numToSkip    =    input.skip(available    +    numToSkip);    long  numToSkip  =  input.skip(available  +  numToSkip);	  	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	61	None	add
618	[BUG]  [BUGGY]  numToSkip  =  input.skip(available  +  numToSkip);  numToSkip  =  input.skip(available  +  numToSkip;  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  numToSkip  =  input.skip(available  +  numToSkip);  numToSkip  =  input.skip(available  +  numToSkip;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	numToSkip    =    input.skip(available    +    numToSkip);    numToSkip  =  input.skip(available  +  numToSkip;	  	non-compiled	[CE]  ')'  expected	61	None	add
619	[BUG]  [BUGGY]  if(available  <  0  ||  skipped  <  =  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  0  ||  skipped  <  =  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  0  ||  skipped  <  =  0)  {  break;  }	  if(available    >    0    ||    skipped    <    =    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	257	None	replace
620	[BUG]  [BUGGY]  if(available  >=  0  ||  skipped  <  =  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >=  0  ||  skipped  <  =  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >=  0  ||  skipped  <  =  0)  {  break;  }	  if(available    >    0    ||    skipped    <    =    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	257	None	replace
621	[BUG]  [BUGGY]  if(available  >  0  &&  skipped  <  =  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0  &&  skipped  <  =  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0  &&  skipped  <  =  0)  {  break;  }	  if(available    >    0    ||    skipped    <    =    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	257	None	replace
622	[BUG]  [BUGGY]  if(available  ==  0  ||  skipped  <  =  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  ==  0  ||  skipped  <  =  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  ==  0  ||  skipped  <  =  0)  {  break;  }	  if(available    >    0    ||    skipped    <    =    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	257	None	replace
623	[BUG]  [BUGGY]  allowSkip(available  >  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]    IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  allowSkip(available  >  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	allowSkip(available  >  0)  {  throw  new  IllegalStateException( " ");  }	  if(available    >    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	172	None	replace
624	[BUG]  [BUGGY]  While(available  >  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]      IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  While(available  >  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	While(available  >  0)  {  throw  new  IllegalStateException( " ");  }	  if(available    >    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	172	None	replace
625	[BUG]  [BUGGY]  While(available  >  0)  {  throw  new  IllegalStateException( "skipped:   "  +  skipped);  }  [CE]  [FE]        IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  While(available  >  0)  {  throw  new  IllegalStateException( "skipped:   "  +  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	While(available  >  0)  {  throw  new  IllegalStateException( "skipped:   "  +  skipped);  }	  if(available    >    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	172	None	replace
626	[BUG]  [BUGGY]  While(available  >  0)  {  throw  new  IllegalStateException( "skipped  =   "  +  skipped);  }  [CE]  [FE]          IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  While(available  >  0)  {  throw  new  IllegalStateException( "skipped  =   "  +  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	While(available  >  0)  {  throw  new  IllegalStateException( "skipped  =   "  +  skipped);  }	  if(available    >    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	172	None	replace
627	[BUG]  [BUGGY]  While(available  >  0)  {  throw  new  IllegalStateException( " ".getMessage());  }  [CE]  [FE]            IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  While(available  >  0)  {  throw  new  IllegalStateException( " ".getMessage());  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	While(available  >  0)  {  throw  new  IllegalStateException( " ".getMessage());  }	  if(available    >    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	172	None	replace
628	[BUG]  [BUGGY]  timeout  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  long  skip  =  input.skip(available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	long  skip  =  input.skip(available);	  int    skip    =    input.skip(available);    	compilable	timeout	4	1	replace
629	[BUG]  [BUGGY]  long  skip  =  input.skip(available);  timeout  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  long  skip  =  input.skip(available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	long  skip  =  input.skip(available);	  int    skip    =    input.skip(available);    	compilable	timeout	4	1	replace
630	[BUG]  [BUGGY]  int  skip  =  input.skip(skipped);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  int  skip  =  input.skip(skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	int  skip  =  input.skip(skipped);	  int    skip    =    input.skip(available);    	non-compiled	[CE]  possible  loss  of  precision	4	None	replace
631	[BUG]  [BUGGY]  timeout  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  float  skip  =  input.skip(available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	float  skip  =  input.skip(available);	  int    skip    =    input.skip(available);    	compilable	timeout	4	1	replace
632	[BUG]  [BUGGY]  float  skip  =  input.skip(available);  timeout  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  float  skip  =  input.skip(available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	float  skip  =  input.skip(available);	  int    skip    =    input.skip(available);    	compilable	timeout	4	1	replace
633	[BUG]  [BUGGY]  timeout  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  double  skip  =  input.skip(available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	double  skip  =  input.skip(available);	  int    skip    =    input.skip(available);    	compilable	timeout	4	1	replace
634	[BUG]  [BUGGY]  double  skip  =  input.skip(available);  timeout  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  double  skip  =  input.skip(available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	double  skip  =  input.skip(available);	  int    skip    =    input.skip(available);    	compilable	timeout	4	1	replace
635	[BUG]  [BUGGY]  char  skip  =  input.skip(available);  [CE]  possible  loss  of  precision  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  char  skip  =  input.skip(available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	char  skip  =  input.skip(available);	  int    skip    =    input.skip(available);    	non-compiled	[CE]  possible  loss  of  precision	4	None	replace
636	[BUG]  [BUGGY]  short  skip  =  input.skip(available);  [CE]  possible  loss  of  precision  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  short  skip  =  input.skip(available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	short  skip  =  input.skip(available);	  int    skip    =    input.skip(available);    	non-compiled	[CE]  possible  loss  of  precision	4	None	replace
637	[BUG]  [BUGGY]  [FE]  IOException  [FE]          IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( ") ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IOException( ") ");	  throw    new    IOException(   "   "));    	compilable	  [FE]  IOException  	220	2	replace
638	[BUG]  [BUGGY]  throw  new  IOException( ") ");  [FE]  IOException  [FE]          IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( ") ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( ") ");	  throw    new    IOException(   "   "));    	compilable	  [FE]  IOException  	220	2	replace
639	[BUG]  [BUGGY]  [FE]  IOException  [FE]            IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Skip  is  less  than  1: ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IOException( "Skip  is  less  than  1: ");	  throw    new    IOException(   "   "));    	compilable	  [FE]  IOException  	220	2	replace
640	[BUG]  [BUGGY]  throw  new  IOException( "Skip  is  less  than  1: ");  [FE]  IOException  [FE]            IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Skip  is  less  than  1: ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( "Skip  is  less  than  1: ");	  throw    new    IOException(   "   "));    	compilable	  [FE]  IOException  	220	2	replace
641	[BUG]  [BUGGY]  timeout  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(0);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped  =  input.skip(0);	  skipped    =    input.skip(skipped);    timeout    	compilable	timeout	3	1	replace
642	[BUG]  [BUGGY]  skipped  =  input.skip(0);  timeout  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(0);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped  =  input.skip(0);	  skipped    =    input.skip(skipped);    timeout    	compilable	timeout	3	1	replace
643	[BUG]  [BUGGY]  timeout  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(skipped  +  1);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped  =  input.skip(skipped  +  1);	  skipped    =    input.skip(skipped);    timeout    	compilable	timeout	3	1	replace
644	[BUG]  [BUGGY]  skipped  =  input.skip(skipped  +  1);  timeout  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(skipped  +  1);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped  =  input.skip(skipped  +  1);	  skipped    =    input.skip(skipped);    timeout    	compilable	timeout	3	1	replace
645	[BUG]  [BUGGY]  timeout  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(skipped  +  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped  =  input.skip(skipped  +  numToSkip);	  skipped    =    input.skip(skipped);    timeout    	compilable	timeout	3	1	replace
646	[BUG]  [BUGGY]  skipped  =  input.skip(skipped  +  numToSkip);  timeout  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(skipped  +  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped  =  input.skip(skipped  +  numToSkip);	  skipped    =    input.skip(skipped);    timeout    	compilable	timeout	3	1	replace
647	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".getMessage());  [CE]  <identifier>  expected  [FE]        IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".getMessage());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	Throwables.throw  new  IllegalArgumentException( " ".getMessage());	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	27	None	replace
648	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(available));  [CE]  <identifier>  expected  [FE]          IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(available));  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(available));	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	27	None	replace
649	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(numToSkip));  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(numToSkip));  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(numToSkip));	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	27	None	replace
650	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Skipped: "  +  skipped);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Skipped: "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	Throwables.throw  new  IllegalArgumentException( "Skipped: "  +  skipped);	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	27	None	replace
651	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ",  skipped);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ",  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	Throwables.throw  new  IllegalArgumentException( " ",  skipped);	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	27	None	replace
652	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Skip  skipped: "  +  skipped);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Skip  skipped: "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	Throwables.throw  new  IllegalArgumentException( "Skip  skipped: "  +  skipped);	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	27	None	replace
653	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "   "  +  skipped);  throw  new  IllegalStateException(   "   "  +  skipped);  [CE]  unreachable  statement  [FE]    IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "   "  +  skipped);  throw  new  IllegalStateException(   "   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalStateException(   "   "    +    skipped);    throw  new  IllegalStateException(   "   "  +  skipped);	  	non-compiled	[CE]  unreachable  statement	173	None	add
654	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "   "  +  skipped);  Throw  new  IllegalStateException(   "   "  +  skipped);  [CE]  not  a  statement  [FE]      IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "   "  +  skipped);  Throw  new  IllegalStateException(   "   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalStateException(   "   "    +    skipped);    Throw  new  IllegalStateException(   "   "  +  skipped);	  	non-compiled	[CE]  not  a  statement	173	None	add
655	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "   "  +  skipped);  throw  new  IllegalStateException(   "   "  +  skipd);  [CE]  cannot  find  symbol  skipd  [FE]        IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "   "  +  skipped);  throw  new  IllegalStateException(   "   "  +  skipd);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalStateException(   "   "    +    skipped);    throw  new  IllegalStateException(   "   "  +  skipd);	  	non-compiled	[CE]  cannot  find  symbol  skipd	173	None	add
656	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "   "  +  skipped);  new  IllegalStateException(   "   "  +  skipped);  [CE]  unreachable  statement  [FE]          IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "   "  +  skipped);  new  IllegalStateException(   "   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalStateException(   "   "    +    skipped);    new  IllegalStateException(   "   "  +  skipped);	  	non-compiled	[CE]  unreachable  statement	173	None	add
657	[BUG]  [BUGGY]  timeout  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  long  skip  =  input.skip(available  +  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	long  skip  =  input.skip(available  +  numToSkip);	  int    skip    =    input.skip(available    +    numToSkip);    	compilable	timeout	63	1	replace
658	[BUG]  [BUGGY]  long  skip  =  input.skip(available  +  numToSkip);  timeout  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  long  skip  =  input.skip(available  +  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	long  skip  =  input.skip(available  +  numToSkip);	  int    skip    =    input.skip(available    +    numToSkip);    	compilable	timeout	63	1	replace
659	[BUG]  [BUGGY]  timeout  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  double  skip  =  input.skip(available  +  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	double  skip  =  input.skip(available  +  numToSkip);	  int    skip    =    input.skip(available    +    numToSkip);    	compilable	timeout	63	1	replace
660	[BUG]  [BUGGY]  double  skip  =  input.skip(available  +  numToSkip);  timeout  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  double  skip  =  input.skip(available  +  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	double  skip  =  input.skip(available  +  numToSkip);	  int    skip    =    input.skip(available    +    numToSkip);    	compilable	timeout	63	1	replace
661	[BUG]  [BUGGY]  timeout  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  float  skip  =  input.skip(available  +  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	float  skip  =  input.skip(available  +  numToSkip);	  int    skip    =    input.skip(available    +    numToSkip);    	compilable	timeout	63	1	replace
662	[BUG]  [BUGGY]  float  skip  =  input.skip(available  +  numToSkip);  timeout  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  float  skip  =  input.skip(available  +  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	float  skip  =  input.skip(available  +  numToSkip);	  int    skip    =    input.skip(available    +    numToSkip);    	compilable	timeout	63	1	replace
663	[BUG]  [BUGGY]  short  skip  =  input.skip(available  +  numToSkip);  [CE]  possible  loss  of  precision  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  short  skip  =  input.skip(available  +  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	short  skip  =  input.skip(available  +  numToSkip);	  int    skip    =    input.skip(available    +    numToSkip);    	non-compiled	[CE]  possible  loss  of  precision	63	None	replace
664	[BUG]  [BUGGY]  int  skip  =  input.skip(available  /  numToSkip);  [CE]  possible  loss  of  precision  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  int  skip  =  input.skip(available  /  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	int  skip  =  input.skip(available  /  numToSkip);	  int    skip    =    input.skip(available    +    numToSkip);    	non-compiled	[CE]  possible  loss  of  precision	63	None	replace
665	[BUG]  [BUGGY]  char  skip  =  input.skip(available  +  numToSkip);  [CE]  possible  loss  of  precision  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  char  skip  =  input.skip(available  +  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	char  skip  =  input.skip(available  +  numToSkip);	  int    skip    =    input.skip(available    +    numToSkip);    	non-compiled	[CE]  possible  loss  of  precision	63	None	replace
666	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(numToSkip);  skipped  =  input.skip(numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped    =    input.skip(numToSkip);    skipped  =  input.skip(numToSkip);	  timeout    	compilable	  [FE]  AssertionError  	80	2	add
667	[BUG]  [BUGGY]  skipped  =  input.skip(numToSkip);  skipped  =  input.skip(numToSkip);  [FE]  AssertionError  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(numToSkip);  skipped  =  input.skip(numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(numToSkip);    skipped  =  input.skip(numToSkip);	  timeout    	compilable	  [FE]  AssertionError  	80	2	add
668	[BUG]  [BUGGY]  skipped  =  input.skip(numToSkip);  long  skipped  =  input.skip(numToSkip);  [CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(numToSkip);  long  skipped  =  input.skip(numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(numToSkip);    long  skipped  =  input.skip(numToSkip);	  timeout    	non-compiled	[CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)	80	None	add
669	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(numToSkip);  numToSkip  =  input.read();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped    =    input.skip(numToSkip);    numToSkip  =  input.read();	  timeout    	compilable	  [FE]  AssertionError  	80	2	add
670	[BUG]  [BUGGY]  skipped  =  input.skip(numToSkip);  numToSkip  =  input.read();  [FE]  AssertionError  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(numToSkip);  numToSkip  =  input.read();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(numToSkip);    numToSkip  =  input.read();	  timeout    	compilable	  [FE]  AssertionError  	80	2	add
671	[BUG]  [BUGGY]  skipped  =  input.skip(numToSkip);  int  numToSkip  =  input.length();  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(numToSkip);  int  numToSkip  =  input.length();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(numToSkip);    int  numToSkip  =  input.length();	  timeout    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	80	None	add
672	[BUG]  [BUGGY]  skipped  =  input.skip(numToSkip);  InputStream  available  =  input.readInput();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(numToSkip);  InputStream  available  =  input.readInput();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(numToSkip);    InputStream  available  =  input.readInput();	  timeout    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	80	None	add
673	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(numToSkip);  numToSkip  =  input.skip(available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped    =    input.skip(numToSkip);    numToSkip  =  input.skip(available);	  timeout    	compilable	  [FE]  AssertionError  	80	2	add
674	[BUG]  [BUGGY]  skipped  =  input.skip(numToSkip);  numToSkip  =  input.skip(available);  [FE]  AssertionError  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(numToSkip);  numToSkip  =  input.skip(available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(numToSkip);    numToSkip  =  input.skip(available);	  timeout    	compilable	  [FE]  AssertionError  	80	2	add
675	[BUG]  [BUGGY]  skipped  =  input.skip(numToSkip);  numToSkip  =  input.read(available);  [CE]  no  suitable  method  found  for  read(long)  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(numToSkip);  numToSkip  =  input.read(available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(numToSkip);    numToSkip  =  input.read(available);	  timeout    	non-compiled	[CE]  no  suitable  method  found  for  read(long)	80	None	add
676	[BUG]  [BUGGY]  skipped  =  input.skip(numToSkip);  int  numToSkip  =  input.read();  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(numToSkip);  int  numToSkip  =  input.read();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(numToSkip);    int  numToSkip  =  input.read();	  timeout    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	80	None	add
677	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.next();  }  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.next();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    i++)    {    skipped    =    input.next();    }    	non-compiled	[CE]  cannot  find  symbol	175	None	replace
678	[BUG]  [BUGGY]  long  available  =  input.skip(numToSkip);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  long  available  =  input.skip(numToSkip);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	long  available  =  input.skip(numToSkip);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.next();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    i++)    {    skipped    =    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	175	None	replace
679	[BUG]  [BUGGY]  long  available  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  long  available  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	long  available  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.next();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    i++)    {    skipped    =    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	175	None	replace
680	[BUG]  [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  }  else  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  }  else  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  skipped  =  input.skip(available);  }  else  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.next();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    i++)    {    skipped    =    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	175	None	replace
681	[BUG]  [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.next();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    i++)    {    skipped    =    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	175	None	replace
682	[BUG]  [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.next();  }  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.next();  }  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.next();  }  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    i++)    {    skipped    =    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	175	None	replace
683	[BUG]  [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  >=  0)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  >=  0)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  >=  0)  {  skipped  =  input.next();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    i++)    {    skipped    =    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	175	None	replace
684	[BUG]  [BUGGY]  timeout  [FE]          IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.err.println( "n ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	System.err.println( "n ");	  throw    new    IllegalStateException(       "       ");    System.err.println(   "       ");    	compilable	timeout	198	1	replace
685	[BUG]  [BUGGY]  System.err.println( "n ");  timeout  [FE]          IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.err.println( "n ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	System.err.println( "n ");	  throw    new    IllegalStateException(       "       ");    System.err.println(   "       ");    	compilable	timeout	198	1	replace
686	[BUG]  [BUGGY]  timeout  [FE]            IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.err.println( "Skip  skipped:   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	System.err.println( "Skip  skipped:   "  +  skipped);	  throw    new    IllegalStateException(       "       ");    System.err.println(   "       ");    	compilable	timeout	198	1	replace
687	[BUG]  [BUGGY]  System.err.println( "Skip  skipped:   "  +  skipped);  timeout  [FE]            IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.err.println( "Skip  skipped:   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	System.err.println( "Skip  skipped:   "  +  skipped);	  throw    new    IllegalStateException(       "       ");    System.err.println(   "       ");    	compilable	timeout	198	1	replace
688	[BUG]  [BUGGY]  timeout  [FE]              IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.err.println( "Skip  skipped:  0 ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	System.err.println( "Skip  skipped:  0 ");	  throw    new    IllegalStateException(       "       ");    System.err.println(   "       ");    	compilable	timeout	198	1	replace
689	[BUG]  [BUGGY]  System.err.println( "Skip  skipped:  0 ");  timeout  [FE]              IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.err.println( "Skip  skipped:  0 ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	System.err.println( "Skip  skipped:  0 ");	  throw    new    IllegalStateException(       "       ");    System.err.println(   "       ");    	compilable	timeout	198	1	replace
690	[BUG]  [BUGGY]  timeout  [FE]                IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.err.println( "Skip  -  skipped: "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	System.err.println( "Skip  -  skipped: "  +  skipped);	  throw    new    IllegalStateException(       "       ");    System.err.println(   "       ");    	compilable	timeout	198	1	replace
691	[BUG]  [BUGGY]  System.err.println( "Skip  -  skipped: "  +  skipped);  timeout  [FE]                IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.err.println( "Skip  -  skipped: "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	System.err.println( "Skip  -  skipped: "  +  skipped);	  throw    new    IllegalStateException(       "       ");    System.err.println(   "       ");    	compilable	timeout	198	1	replace
692	[BUG]  [BUGGY]  timeout  [FE]                  IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.err.println( "Skip:  skipped  =  ' "+skipped  + "' ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	System.err.println( "Skip:  skipped  =  ' "+skipped  + "' ");	  throw    new    IllegalStateException(       "       ");    System.err.println(   "       ");    	compilable	timeout	198	1	replace
693	[BUG]  [BUGGY]  System.err.println( "Skip:  skipped  =  ' "+skipped  + "' ");  timeout  [FE]                  IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.err.println( "Skip:  skipped  =  ' "+skipped  + "' ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	System.err.println( "Skip:  skipped  =  ' "+skipped  + "' ");	  throw    new    IllegalStateException(       "       ");    System.err.println(   "       ");    	compilable	timeout	198	1	replace
694	[BUG]  [BUGGY]  skipped  =  input.skip(available,  numToSkip);  [CE]  method  skip  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available,  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped  =  input.skip(available,  numToSkip);	  skipped    =    input.skip(numToSkip);    timeout    	non-compiled	[CE]  method  skip  in  class  InputStream  cannot  be  applied  to  given  types;	81	None	replace
695	[BUG]  [BUGGY]  skipped  =  input.read(available,  numToSkip);  [CE]  no  suitable  method  found  for  read(long,long)  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.read(available,  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped  =  input.read(available,  numToSkip);	  skipped    =    input.skip(numToSkip);    timeout    	non-compiled	[CE]  no  suitable  method  found  for  read(long,long)	81	None	replace
696	[BUG]  [BUGGY]  timeout  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  -=  input.skip(numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped  -=  input.skip(numToSkip);	  skipped    =    input.skip(numToSkip);    timeout    	compilable	timeout	81	1	replace
697	[BUG]  [BUGGY]  skipped  -=  input.skip(numToSkip);  timeout  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  -=  input.skip(numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped  -=  input.skip(numToSkip);	  skipped    =    input.skip(numToSkip);    timeout    	compilable	timeout	81	1	replace
698	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.read();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped  =  input.read();	  skipped    =    input.skip(numToSkip);    timeout    	compilable	  [FE]  AssertionError  	81	2	replace
699	[BUG]  [BUGGY]  skipped  =  input.read();  [FE]  AssertionError  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.read();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped  =  input.read();	  skipped    =    input.skip(numToSkip);    timeout    	compilable	  [FE]  AssertionError  	81	2	replace
700	[BUG]  [BUGGY]  timeout  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped  <  0)  {  break;  }	  if(skipped    <    =    0)    {    break;    }    	compilable	timeout	10	1	replace
701	[BUG]  [BUGGY]  if(skipped  <  0)  {  break;  }  timeout  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  <  0)  {  break;  }	  if(skipped    <    =    0)    {    break;    }    	compilable	timeout	10	1	replace
702	[BUG]  [BUGGY]  skipped  =  input.skip(skipped);  long  skipped  =  input.skip(skipped);  [CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(skipped);  long  skipped  =  input.skip(skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(skipped);    long  skipped  =  input.skip(skipped);	  timeout    	non-compiled	[CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)	2	None	add
703	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(skipped);  skipped  =  input.skip(skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped    =    input.skip(skipped);    skipped  =  input.skip(skipped);	  timeout    	compilable	  [FE]  AssertionError  	2	2	add
704	[BUG]  [BUGGY]  skipped  =  input.skip(skipped);  skipped  =  input.skip(skipped);  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(skipped);  skipped  =  input.skip(skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(skipped);    skipped  =  input.skip(skipped);	  timeout    	compilable	  [FE]  AssertionError  	2	2	add
705	[BUG]  [BUGGY]  skipped  =  input.skip(skipped);  int  skipped  =  input.skip(skipped);  [CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(skipped);  int  skipped  =  input.skip(skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(skipped);    int  skipped  =  input.skip(skipped);	  timeout    	non-compiled	[CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)	2	None	add
706	[BUG]  [BUGGY]  skipped  =  input.skip(skipped);  InputStream  available  =  input.readInput();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(skipped);  InputStream  available  =  input.readInput();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(skipped);    InputStream  available  =  input.readInput();	  timeout    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	2	None	add
707	[BUG]  [BUGGY]  skipped  =  input.skip(skipped);  int  skipped  =  input.read(available);  [CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(skipped);  int  skipped  =  input.read(available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(skipped);    int  skipped  =  input.read(available);	  timeout    	non-compiled	[CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)	2	None	add
708	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(skipped);  numToSkip  =  input.skip(available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped    =    input.skip(skipped);    numToSkip  =  input.skip(available);	  timeout    	compilable	  [FE]  AssertionError  	2	2	add
709	[BUG]  [BUGGY]  skipped  =  input.skip(skipped);  numToSkip  =  input.skip(available);  [FE]  AssertionError  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(skipped);  numToSkip  =  input.skip(available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(skipped);    numToSkip  =  input.skip(available);	  timeout    	compilable	  [FE]  AssertionError  	2	2	add
710	[BUG]  [BUGGY]  skipped  =  input.skip(skipped);  int  skipped  =  input.skip(available);  [CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(skipped);  int  skipped  =  input.skip(available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(skipped);    int  skipped  =  input.skip(available);	  timeout    	non-compiled	[CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)	2	None	add
711	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(skipped);  numToSkip  =  input.skip(skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped    =    input.skip(skipped);    numToSkip  =  input.skip(skipped);	  timeout    	compilable	  [FE]  AssertionError  	2	2	add
712	[BUG]  [BUGGY]  skipped  =  input.skip(skipped);  numToSkip  =  input.skip(skipped);  [FE]  AssertionError  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(skipped);  numToSkip  =  input.skip(skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(skipped);    numToSkip  =  input.skip(skipped);	  timeout    	compilable	  [FE]  AssertionError  	2	2	add
713	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0  ||  available  >  numToSkip)  {  break;  }  if(skipped  >  0  ||  available  >  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped    >    0    ||    available    >    numToSkip)    {    break;    }    if(skipped  >  0  ||  available  >  numToSkip)  {  break;  }	  timeout    	compilable	  [FE]  AssertionError  	250	2	add
714	[BUG]  [BUGGY]  if(skipped  >  0  ||  available  >  numToSkip)  {  break;  }  if(skipped  >  0  ||  available  >  numToSkip)  {  break;  }  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0  ||  available  >  numToSkip)  {  break;  }  if(skipped  >  0  ||  available  >  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    0    ||    available    >    numToSkip)    {    break;    }    if(skipped  >  0  ||  available  >  numToSkip)  {  break;  }	  timeout    	compilable	  [FE]  AssertionError  	250	2	add
715	[BUG]  [BUGGY]  if(skipped  >  0  ||  available  >  numToSkip)  {  break;  }  If(skipped  >  0  ||  available  >  numToSkip)  {  break;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0  ||  available  >  numToSkip)  {  break;  }  If(skipped  >  0  ||  available  >  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    0    ||    available    >    numToSkip)    {    break;    }    If(skipped  >  0  ||  available  >  numToSkip)  {  break;  }	  timeout    	non-compiled	[CE]  ';'  expected	250	None	add
716	[BUG]  [BUGGY]  if(skipped  >  0  ||  available  >  numToSkip)  {  break;  }  if(skipped  >  0  ||  available  >  numToSkip)  {  break;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0  ||  available  >  numToSkip)  {  break;  }  if(skipped  >  0  ||  available  >  numToSkip)  {  break;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    0    ||    available    >    numToSkip)    {    break;    }    if(skipped  >  0  ||  available  >  numToSkip)  {  break;	  timeout    	non-compiled	[CE]  illegal  start  of  expression	250	None	add
717	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0  ||  available  >  numToSkip)  {  break;  }  while(skipped  >  0  ||  available  >  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped    >    0    ||    available    >    numToSkip)    {    break;    }    while(skipped  >  0  ||  available  >  numToSkip)  {  break;  }	  timeout    	compilable	  [FE]  AssertionError  	250	2	add
718	[BUG]  [BUGGY]  if(skipped  >  0  ||  available  >  numToSkip)  {  break;  }  while(skipped  >  0  ||  available  >  numToSkip)  {  break;  }  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0  ||  available  >  numToSkip)  {  break;  }  while(skipped  >  0  ||  available  >  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    0    ||    available    >    numToSkip)    {    break;    }    while(skipped  >  0  ||  available  >  numToSkip)  {  break;  }	  timeout    	compilable	  [FE]  AssertionError  	250	2	add
719	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0  ||  available  >  numToSkip)  {  break;  }  if(skipped  >  0  ||  available  <  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped    >    0    ||    available    >    numToSkip)    {    break;    }    if(skipped  >  0  ||  available  <  numToSkip)  {  break;  }	  timeout    	compilable	  [FE]  AssertionError  	250	2	add
720	[BUG]  [BUGGY]  if(skipped  >  0  ||  available  >  numToSkip)  {  break;  }  if(skipped  >  0  ||  available  <  numToSkip)  {  break;  }  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0  ||  available  >  numToSkip)  {  break;  }  if(skipped  >  0  ||  available  <  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    0    ||    available    >    numToSkip)    {    break;    }    if(skipped  >  0  ||  available  <  numToSkip)  {  break;  }	  timeout    	compilable	  [FE]  AssertionError  	250	2	add
721	[BUG]  [BUGGY]  skip  =  input.skip(available  +  SKIP_BUF_SIZE);  [CE]  cannot  find  symbol  skip  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skip  =  input.skip(available  +  SKIP_BUF_SIZE);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skip  =  input.skip(available  +  SKIP_BUF_SIZE);	  skip    =    input.skip(available    +    skipped);    	non-compiled	[CE]  cannot  find  symbol  skip	64	None	replace
722	[BUG]  [BUGGY]  skip  =  input.skip(available  +  SMALL_BUFFER_SIZE);  [CE]  cannot  find  symbol  skip  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skip  =  input.skip(available  +  SMALL_BUFFER_SIZE);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skip  =  input.skip(available  +  SMALL_BUFFER_SIZE);	  skip    =    input.skip(available    +    skipped);    	non-compiled	[CE]  cannot  find  symbol  skip	64	None	replace
723	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available    >    0)    {    break;    }    while(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  while(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available        >        0)        {        break;        }        while(available    >    0)    {    break;    }    if(available  >  0)  {  break;  }  while(available  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	150	2	add
724	[BUG]  [BUGGY]  if(available    >    0)    {    break;    }    while(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  while(available  >  0)  {  break;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available    >    0)    {    break;    }    while(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  while(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available        >        0)        {        break;        }        while(available    >    0)    {    break;    }    if(available  >  0)  {  break;  }  while(available  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	150	2	add
725	[BUG]  [BUGGY]  if(available    >    0)    {    break;    }    while(available  >  0)  {  break;  }  If(available  >  0)  {  break;  }  while(available  >  0)  {  break;  }  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available    >    0)    {    break;    }    while(available  >  0)  {  break;  }  If(available  >  0)  {  break;  }  while(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available        >        0)        {        break;        }        while(available    >    0)    {    break;    }    If(available  >  0)  {  break;  }  while(available  >  0)  {  break;  }	  	non-compiled	[CE]  ';'  expected	150	None	add
726	[BUG]  [BUGGY]  if(available    >    0)    {    break;    }    while(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  while(available  >  0)  {  break;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available    >    0)    {    break;    }    while(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  while(available  >  0)  {  break;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available        >        0)        {        break;        }        while(available    >    0)    {    break;    }    if(available  >  0)  {  break;  }  while(available  >  0)  {  break;	  	non-compiled	[CE]  illegal  start  of  expression	150	None	add
727	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available    >    0)    {    break;    }    while(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  while(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available        >        0)        {        break;        }        while(available    >    0)    {    break;    }    if(available  >  0)  {  break;  }  while(skipped  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	150	2	add
728	[BUG]  [BUGGY]  if(available    >    0)    {    break;    }    while(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  while(skipped  >  0)  {  break;  }  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available    >    0)    {    break;    }    while(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  while(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available        >        0)        {        break;        }        while(available    >    0)    {    break;    }    if(available  >  0)  {  break;  }  while(skipped  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	150	2	add
729	[BUG]  [BUGGY]  if(available    >    0)    {    break;    }    while(available  >  0)  {  break;  }  when(available  >  0)  {  break;  }  while(available  >  0)  {  break;  }  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available    >    0)    {    break;    }    while(available  >  0)  {  break;  }  when(available  >  0)  {  break;  }  while(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available        >        0)        {        break;        }        while(available    >    0)    {    break;    }    when(available  >  0)  {  break;  }  while(available  >  0)  {  break;  }	  	non-compiled	[CE]  ';'  expected	150	None	add
730	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   "  +  skipped);  throw  new  IllegalArgumentException(   "   "  +  skipped);  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException(   "   "  +  skipped);  throw  new  IllegalArgumentException(   "   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalArgumentException(   "   "    +    skipped);    throw  new  IllegalArgumentException(   "   "  +  skipped);	  	non-compiled	[CE]  unreachable  statement	169	None	add
731	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   "  +  skipped);  Throw  new  IllegalArgumentException(   "   "  +  skipped);  [CE]  not  a  statement  [FE]      IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException(   "   "  +  skipped);  Throw  new  IllegalArgumentException(   "   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalArgumentException(   "   "    +    skipped);    Throw  new  IllegalArgumentException(   "   "  +  skipped);	  	non-compiled	[CE]  not  a  statement	169	None	add
732	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   "  +  skipped);  throw  new  IllegalArgumentException(   "   "  +  skipd);  [CE]  cannot  find  symbol  skipd  [FE]        IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException(   "   "  +  skipped);  throw  new  IllegalArgumentException(   "   "  +  skipd);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalArgumentException(   "   "    +    skipped);    throw  new  IllegalArgumentException(   "   "  +  skipd);	  	non-compiled	[CE]  cannot  find  symbol  skipd	169	None	add
733	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   "  +  skipped);  new  IllegalArgumentException(   "   "  +  skipped);  [CE]  unreachable  statement  [FE]          IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException(   "   "  +  skipped);  new  IllegalArgumentException(   "   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalArgumentException(   "   "    +    skipped);    new  IllegalArgumentException(   "   "  +  skipped);	  	non-compiled	[CE]  unreachable  statement	169	None	add
734	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  ==  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >=        0)        {        break;        }        if(skipped    ==    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	40	2	add
735	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  ==  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  ==  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped    ==    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	40	2	add
736	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  ==  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  ==  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >=        0)        {        break;        }        if(skipped    ==    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  ==  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	40	2	add
737	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  ==  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  ==  0)  {  break;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  ==  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  ==  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped    ==    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  ==  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	40	2	add
738	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  ==  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >=        0)        {        break;        }        if(skipped    ==    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	40	2	add
739	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  ==  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  ==  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped    ==    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	40	2	add
740	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  ==  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  ==  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >=        0)        {        break;        }        if(skipped    ==    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  ==  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	40	2	add
741	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  ==  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  ==  0)  {  break;  }  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  ==  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  ==  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped    ==    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  ==  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	40	2	add
742	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  ==  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped!=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >=        0)        {        break;        }        if(skipped    ==    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped!=  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	40	2	add
743	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  ==  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped!=  0)  {  break;  }  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  ==  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped!=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped    ==    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped!=  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	40	2	add
744	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  ==  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  ==  0)  {  break;  }  if(skipped  ==  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >=        0)        {        break;        }        if(skipped    ==    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  ==  0)  {  break;  }  if(skipped  ==  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	40	2	add
745	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  ==  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  ==  0)  {  break;  }  if(skipped  ==  0)  {  break;  }  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  ==  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  ==  0)  {  break;  }  if(skipped  ==  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped    ==    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  ==  0)  {  break;  }  if(skipped  ==  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	40	2	add
746	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  ==  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  ==  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >=        0)        {        break;        }        if(skipped    ==    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  ==  0)  {  break;  }  if(skipped  >=  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	40	2	add
747	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  ==  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  ==  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [FE]  AssertionError  [FE]                AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  ==  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  ==  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped    ==    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  ==  0)  {  break;  }  if(skipped  >=  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	40	2	add
748	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  ==  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped!=  0)  {  break;  }  if(skipped  ==  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >=        0)        {        break;        }        if(skipped    ==    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped!=  0)  {  break;  }  if(skipped  ==  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	40	2	add
749	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  ==  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped!=  0)  {  break;  }  if(skipped  ==  0)  {  break;  }  [FE]  AssertionError  [FE]                  AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  ==  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped!=  0)  {  break;  }  if(skipped  ==  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped    ==    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped!=  0)  {  break;  }  if(skipped  ==  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	40	2	add
750	[BUG]  [BUGGY]  skipd  =  input.skip(available  -  numToSkip);  [CE]  cannot  find  symbol  skipd  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipd  =  input.skip(available  -  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipd  =  input.skip(available  -  numToSkip);	  skipped    =    input.skip(skipped    -    numToSkip);    timeout    	non-compiled	[CE]  cannot  find  symbol  skipd	214	None	replace
751	[BUG]  [BUGGY]  timeout  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(numToSkip  -  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped  =  input.skip(numToSkip  -  skipped);	  skipped    =    input.skip(skipped    -    numToSkip);    timeout    	compilable	timeout	214	1	replace
752	[BUG]  [BUGGY]  skipped  =  input.skip(numToSkip  -  skipped);  timeout  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(numToSkip  -  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped  =  input.skip(numToSkip  -  skipped);	  skipped    =    input.skip(skipped    -    numToSkip);    timeout    	compilable	timeout	214	1	replace
753	[BUG]  [BUGGY]  skipped  =  output.skip(available  -  numToSkip);  [CE]  cannot  find  symbol  output  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  output.skip(available  -  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped  =  output.skip(available  -  numToSkip);	  skipped    =    input.skip(skipped    -    numToSkip);    timeout    	non-compiled	[CE]  cannot  find  symbol  output	214	None	replace
754	[BUG]  [BUGGY]  timeout  [FE]            IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.err.println( "Skip  skipped: "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	System.err.println( "Skip  skipped: "  +  available);	  throw    new    IOException(       "       ");    System.err.println(   "Skip    skipped:       "    +    available);    	compilable	timeout	265	1	replace
755	[BUG]  [BUGGY]  System.err.println( "Skip  skipped: "  +  available);  timeout  [FE]            IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.err.println( "Skip  skipped: "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	System.err.println( "Skip  skipped: "  +  available);	  throw    new    IOException(       "       ");    System.err.println(   "Skip    skipped:       "    +    available);    	compilable	timeout	265	1	replace
756	[BUG]  [BUGGY]  Throwables.println( "Skip  skipped: "  +  available);  [CE]  cannot  find  symbol  Throwables  [FE]              IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  Throwables.println( "Skip  skipped: "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	Throwables.println( "Skip  skipped: "  +  available);	  throw    new    IOException(       "       ");    System.err.println(   "Skip    skipped:       "    +    available);    	non-compiled	[CE]  cannot  find  symbol  Throwables	265	None	replace
757	[BUG]  [BUGGY]  timeout  [FE]                IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.err.println( "Skip  skipped: "  +  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	System.err.println( "Skip  skipped: "  +  numToSkip);	  throw    new    IOException(       "       ");    System.err.println(   "Skip    skipped:       "    +    available);    	compilable	timeout	265	1	replace
758	[BUG]  [BUGGY]  System.err.println( "Skip  skipped: "  +  numToSkip);  timeout  [FE]                IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.err.println( "Skip  skipped: "  +  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	System.err.println( "Skip  skipped: "  +  numToSkip);	  throw    new    IOException(       "       ");    System.err.println(   "Skip    skipped:       "    +    available);    	compilable	timeout	265	1	replace
759	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  ==  0)  {  break;  }  if(skipped  ==  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped    ==    0)    {    break;    }    if(skipped  ==  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	248	2	add
760	[BUG]  [BUGGY]  if(skipped  ==  0)  {  break;  }  if(skipped  ==  0)  {  break;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  ==  0)  {  break;  }  if(skipped  ==  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    ==    0)    {    break;    }    if(skipped  ==  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	248	2	add
761	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  ==  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped    ==    0)    {    break;    }    if(skipped  >=  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	248	2	add
762	[BUG]  [BUGGY]  if(skipped  ==  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  ==  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    ==    0)    {    break;    }    if(skipped  >=  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	248	2	add
763	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  ==  0)  {  break;  }  if(skipped!=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped    ==    0)    {    break;    }    if(skipped!=  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	248	2	add
764	[BUG]  [BUGGY]  if(skipped  ==  0)  {  break;  }  if(skipped!=  0)  {  break;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  ==  0)  {  break;  }  if(skipped!=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    ==    0)    {    break;    }    if(skipped!=  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	248	2	add
765	[BUG]  [BUGGY]  if(skipped  ==  0)  {  break;  }  If(skipped  ==  0)  {  break;  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  ==  0)  {  break;  }  If(skipped  ==  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    ==    0)    {    break;    }    If(skipped  ==  0)  {  break;  }	  	non-compiled	[CE]  ';'  expected	248	None	add
766	[BUG]  [BUGGY]  if(skipped  ==  0)  {  break;  }  if(skipped  >>  0)  {  break;  }  [CE]  incompatible  types  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  ==  0)  {  break;  }  if(skipped  >>  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    ==    0)    {    break;    }    if(skipped  >>  0)  {  break;  }	  	non-compiled	[CE]  incompatible  types	248	None	add
767	[BUG]  [BUGGY]  if(skipped  ==  0)  {  break;  }  if(skipped  {  0)  {  break;  }  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  ==  0)  {  break;  }  if(skipped  {  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    ==    0)    {    break;    }    if(skipped  {  0)  {  break;  }	  	non-compiled	[CE]  ')'  expected	248	None	add
768	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  ==  0)  {  break;  }  if(skipped  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped    ==    0)    {    break;    }    if(skipped  <  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	248	2	add
769	[BUG]  [BUGGY]  if(skipped  ==  0)  {  break;  }  if(skipped  <  0)  {  break;  }  [FE]  AssertionError  [FE]                AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  ==  0)  {  break;  }  if(skipped  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    ==    0)    {    break;    }    if(skipped  <  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	248	2	add
770	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0  ||  skipped  <  available)  {  break;  }  if(available  >  0  ||  skipped  <  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available    >    0    ||    skipped    <    available)    {    break;    }    if(available  >  0  ||  skipped  <  available)  {  break;  }	  	compilable	  [FE]  AssertionError  	255	2	add
771	[BUG]  [BUGGY]  if(available  >  0  ||  skipped  <  available)  {  break;  }  if(available  >  0  ||  skipped  <  available)  {  break;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0  ||  skipped  <  available)  {  break;  }  if(available  >  0  ||  skipped  <  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >    0    ||    skipped    <    available)    {    break;    }    if(available  >  0  ||  skipped  <  available)  {  break;  }	  	compilable	  [FE]  AssertionError  	255	2	add
772	[BUG]  [BUGGY]  if(available  >  0  ||  skipped  <  available)  {  break;  }  If(available  >  0  ||  skipped  <  available)  {  break;  }  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0  ||  skipped  <  available)  {  break;  }  If(available  >  0  ||  skipped  <  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >    0    ||    skipped    <    available)    {    break;    }    If(available  >  0  ||  skipped  <  available)  {  break;  }	  	non-compiled	[CE]  ';'  expected	255	None	add
773	[BUG]  [BUGGY]  if(available  >  0  ||  skipped  <  available)  {  break;  }  if(available  >  0  ||  skipd  <  available)  {  break;  }  [CE]  cannot  find  symbol  skipd  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0  ||  skipped  <  available)  {  break;  }  if(available  >  0  ||  skipd  <  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >    0    ||    skipped    <    available)    {    break;    }    if(available  >  0  ||  skipd  <  available)  {  break;  }	  	non-compiled	[CE]  cannot  find  symbol  skipd	255	None	add
774	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0  ||  skipped  <  available)  {  break;  }  if(available  >  0  ||  skipped  >=  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available    >    0    ||    skipped    <    available)    {    break;    }    if(available  >  0  ||  skipped  >=  available)  {  break;  }	  	compilable	  [FE]  AssertionError  	255	2	add
775	[BUG]  [BUGGY]  if(available  >  0  ||  skipped  <  available)  {  break;  }  if(available  >  0  ||  skipped  >=  available)  {  break;  }  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0  ||  skipped  <  available)  {  break;  }  if(available  >  0  ||  skipped  >=  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >    0    ||    skipped    <    available)    {    break;    }    if(available  >  0  ||  skipped  >=  available)  {  break;  }	  	compilable	  [FE]  AssertionError  	255	2	add
776	[BUG]  [BUGGY]  if(available  >  0  ||  skipped  <  available)  {  break;  }  if(available  >  0  ||  skipped  <  available)  {  break;  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0  ||  skipped  <  available)  {  break;  }  if(available  >  0  ||  skipped  <  available)  {  break;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >    0    ||    skipped    <    available)    {    break;    }    if(available  >  0  ||  skipped  <  available)  {  break;	  	non-compiled	[CE]  illegal  start  of  expression	255	None	add
777	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0  ||  skipped  <  available)  {  break;  }  while(available  >  0  ||  skipped  <  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available    >    0    ||    skipped    <    available)    {    break;    }    while(available  >  0  ||  skipped  <  available)  {  break;  }	  	compilable	  [FE]  AssertionError  	255	2	add
778	[BUG]  [BUGGY]  if(available  >  0  ||  skipped  <  available)  {  break;  }  while(available  >  0  ||  skipped  <  available)  {  break;  }  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0  ||  skipped  <  available)  {  break;  }  while(available  >  0  ||  skipped  <  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >    0    ||    skipped    <    available)    {    break;    }    while(available  >  0  ||  skipped  <  available)  {  break;  }	  	compilable	  [FE]  AssertionError  	255	2	add
779	[BUG]  [BUGGY]  timeout  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  numToSkip)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  <  numToSkip)  {  continue;  }	  if(available    >    numToSkip)    {    continue;    }    timeout    	compilable	timeout	130	1	replace
780	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  continue;  }  timeout  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  numToSkip)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  numToSkip)  {  continue;  }	  if(available    >    numToSkip)    {    continue;    }    timeout    	compilable	timeout	130	1	replace
781	[BUG]  [BUGGY]  timeout  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  skipped)  {  continue;  }	  if(available    >    numToSkip)    {    continue;    }    timeout    	compilable	timeout	130	1	replace
782	[BUG]  [BUGGY]  if(available  >  skipped)  {  continue;  }  timeout  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skipped)  {  continue;  }	  if(available    >    numToSkip)    {    continue;    }    timeout    	compilable	timeout	130	1	replace
783	[BUG]  [BUGGY]  timeout  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >=  numToSkip)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >=  numToSkip)  {  continue;  }	  if(available    >    numToSkip)    {    continue;    }    timeout    	compilable	timeout	130	1	replace
784	[BUG]  [BUGGY]  if(available  >=  numToSkip)  {  continue;  }  timeout  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >=  numToSkip)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >=  numToSkip)  {  continue;  }	  if(available    >    numToSkip)    {    continue;    }    timeout    	compilable	timeout	130	1	replace
785	[BUG]  [BUGGY]  if(available  <  =  numToSkip)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  =  numToSkip)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  =  numToSkip)  {  continue;  }	  if(available    >    numToSkip)    {    continue;    }    timeout    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
786	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  continue;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  numToSkip)  {  continue;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  numToSkip)  {  continue;	  if(available    >    numToSkip)    {    continue;    }    timeout    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
787	[BUG]  [BUGGY]  timeout  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  ==  numToSkip)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  ==  numToSkip)  {  continue;  }	  if(available    >    numToSkip)    {    continue;    }    timeout    	compilable	timeout	130	1	replace
788	[BUG]  [BUGGY]  if(available  ==  numToSkip)  {  continue;  }  timeout  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  ==  numToSkip)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  ==  numToSkip)  {  continue;  }	  if(available    >    numToSkip)    {    continue;    }    timeout    	compilable	timeout	130	1	replace
789	[BUG]  [BUGGY]  timeout  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(numToSkip  >  available)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(numToSkip  >  available)  {  continue;  }	  if(available    >    numToSkip)    {    continue;    }    timeout    	compilable	timeout	130	1	replace
790	[BUG]  [BUGGY]  if(numToSkip  >  available)  {  continue;  }  timeout  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(numToSkip  >  available)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(numToSkip  >  available)  {  continue;  }	  if(available    >    numToSkip)    {    continue;    }    timeout    	compilable	timeout	130	1	replace
791	[BUG]  [BUGGY]  skipped  =  input.skip(skipped  -  numToSkip);  long  skipped  =  input.skip(skipped  -  numToSkip);  [CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(skipped  -  numToSkip);  long  skipped  =  input.skip(skipped  -  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(skipped    -    numToSkip);    long  skipped  =  input.skip(skipped  -  numToSkip);	  timeout    	non-compiled	[CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)	213	None	add
792	[BUG]  [BUGGY]  skipped  =  input.skip(skipped  -  numToSkip);  int  skipped  =  input.skip(skipped  -  numToSkip);  [CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(skipped  -  numToSkip);  int  skipped  =  input.skip(skipped  -  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(skipped    -    numToSkip);    int  skipped  =  input.skip(skipped  -  numToSkip);	  timeout    	non-compiled	[CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)	213	None	add
793	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(skipped  -  numToSkip);  skipped  =  input.skip(skipped  -  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped    =    input.skip(skipped    -    numToSkip);    skipped  =  input.skip(skipped  -  numToSkip);	  timeout    	compilable	  [FE]  AssertionError  	213	2	add
794	[BUG]  [BUGGY]  skipped  =  input.skip(skipped  -  numToSkip);  skipped  =  input.skip(skipped  -  numToSkip);  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(skipped  -  numToSkip);  skipped  =  input.skip(skipped  -  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(skipped    -    numToSkip);    skipped  =  input.skip(skipped  -  numToSkip);	  timeout    	compilable	  [FE]  AssertionError  	213	2	add
795	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(skipped  -  numToSkip);  numToSkip  =  input.skip(skipped  -  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped    =    input.skip(skipped    -    numToSkip);    numToSkip  =  input.skip(skipped  -  numToSkip);	  timeout    	compilable	  [FE]  AssertionError  	213	2	add
796	[BUG]  [BUGGY]  skipped  =  input.skip(skipped  -  numToSkip);  numToSkip  =  input.skip(skipped  -  numToSkip);  [FE]  AssertionError  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(skipped  -  numToSkip);  numToSkip  =  input.skip(skipped  -  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(skipped    -    numToSkip);    numToSkip  =  input.skip(skipped  -  numToSkip);	  timeout    	compilable	  [FE]  AssertionError  	213	2	add
797	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(skipped  -  numToSkip);  numToSkip  =  input.skip(available  -  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped    =    input.skip(skipped    -    numToSkip);    numToSkip  =  input.skip(available  -  numToSkip);	  timeout    	compilable	  [FE]  AssertionError  	213	2	add
798	[BUG]  [BUGGY]  skipped  =  input.skip(skipped  -  numToSkip);  numToSkip  =  input.skip(available  -  numToSkip);  [FE]  AssertionError  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(skipped  -  numToSkip);  numToSkip  =  input.skip(available  -  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(skipped    -    numToSkip);    numToSkip  =  input.skip(available  -  numToSkip);	  timeout    	compilable	  [FE]  AssertionError  	213	2	add
799	[BUG]  [BUGGY]  skipped  =  input.skip(skipped  -  numToSkip);  int  numToSkip  =  input.length();  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(skipped  -  numToSkip);  int  numToSkip  =  input.length();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(skipped    -    numToSkip);    int  numToSkip  =  input.length();	  timeout    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	213	None	add
800	[BUG]  [BUGGY]  skipped  =  input.skip(skipped  -  numToSkip);  InputStream  available  =  input.readInput();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(skipped  -  numToSkip);  InputStream  available  =  input.readInput();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(skipped    -    numToSkip);    InputStream  available  =  input.readInput();	  timeout    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	213	None	add
801	[BUG]  [BUGGY]  skipped  =  input.skip(skipped  -  numToSkip);  int  numToSkip  =  input.read();  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(skipped  -  numToSkip);  int  numToSkip  =  input.read();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(skipped    -    numToSkip);    int  numToSkip  =  input.read();	  timeout    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	213	None	add
802	[BUG]  [BUGGY]  if(available  >  skipped)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skipped)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }	  continue;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	271	None	replace
803	[BUG]  [BUGGY]  if(skipped  >  0)  {  int  available  =  0;  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  int  available  =  0;  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  int  available  =  0;  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }	  continue;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	271	None	replace
804	[BUG]  [BUGGY]  if(skipped  >  0)  {  int  available  =  numToSkip;  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  int  available  =  numToSkip;  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  int  available  =  numToSkip;  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }	  continue;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	271	None	replace
805	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  available  +=  input.read();  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  numToSkip)  {  available  +=  input.read();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  numToSkip)  {  available  +=  input.read();	  continue;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	271	None	replace
806	[BUG]  [BUGGY]  throw  new  IOException(   "skipped  =     "  +  available);  throw  new  IOException(   "skipped  =   "  +  available);  [CE]  unreachable  statement  [FE]    IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException(   "skipped  =     "  +  available);  throw  new  IOException(   "skipped  =   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IOException(   "skipped    =       "    +    available);    throw  new  IOException(   "skipped  =   "  +  available);	  	non-compiled	[CE]  unreachable  statement	157	None	add
807	[BUG]  [BUGGY]  throw  new  IOException(   "skipped  =     "  +  available);  Throw  new  IOException(   "skipped  =   "  +  available);  [CE]  not  a  statement  [FE]      IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException(   "skipped  =     "  +  available);  Throw  new  IOException(   "skipped  =   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IOException(   "skipped    =       "    +    available);    Throw  new  IOException(   "skipped  =   "  +  available);	  	non-compiled	[CE]  not  a  statement	157	None	add
808	[BUG]  [BUGGY]  throw  new  IOException(   "skipped  =     "  +  available);  new  IOException(   "skipped  =   "  +  available);  [CE]  unreachable  statement  [FE]        IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException(   "skipped  =     "  +  available);  new  IOException(   "skipped  =   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IOException(   "skipped    =       "    +    available);    new  IOException(   "skipped  =   "  +  available);	  	non-compiled	[CE]  unreachable  statement	157	None	add
809	[BUG]  [BUGGY]  throw  new  IOException(   "skipped  =     "  +  available);  IOException(   "skipped  =   "  +  available);  [CE]  cannot  find  symbol  [FE]          IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException(   "skipped  =     "  +  available);  IOException(   "skipped  =   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IOException(   "skipped    =       "    +    available);    IOException(   "skipped  =   "  +  available);	  	non-compiled	[CE]  cannot  find  symbol	157	None	add
810	[BUG]  [BUGGY]  skip  =  input.skip(SSKIP_BUF_SIZE);  [CE]  cannot  find  symbol  skip  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skip  =  input.skip(SSKIP_BUF_SIZE);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skip  =  input.skip(SSKIP_BUF_SIZE);	  skip    =    input.skip(buffersize);    	non-compiled	[CE]  cannot  find  symbol  skip	165	None	replace
811	[BUG]  [BUGGY]  skipped  =  input.skip(buffersize);  [CE]  cannot  find  symbol  buffersize  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(buffersize);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped  =  input.skip(buffersize);	  skip    =    input.skip(buffersize);    	non-compiled	[CE]  cannot  find  symbol  buffersize	165	None	replace
812	[BUG]  [BUGGY]  int  skip  =  input.skip(buffersize);  [CE]  cannot  find  symbol  buffersize  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  int  skip  =  input.skip(buffersize);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	int  skip  =  input.skip(buffersize);	  skip    =    input.skip(buffersize);    	non-compiled	[CE]  cannot  find  symbol  buffersize	165	None	replace
813	[BUG]  [BUGGY]  timeout  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  continue;  }  if(available  >  0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available    >    0)    {    continue;    }    if(available  >  0)  {  continue;  }	  timeout    	compilable	timeout	125	1	add
814	[BUG]  [BUGGY]  if(available  >  0)  {  continue;  }  if(available  >  0)  {  continue;  }  timeout  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  continue;  }  if(available  >  0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >    0)    {    continue;    }    if(available  >  0)  {  continue;  }	  timeout    	compilable	timeout	125	1	add
815	[BUG]  [BUGGY]  if(available  >  0)  {  continue;  }  if(available  >  0)  {  continue;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  continue;  }  if(available  >  0)  {  continue;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >    0)    {    continue;    }    if(available  >  0)  {  continue;	  timeout    	non-compiled	[CE]  illegal  start  of  expression	125	None	add
816	[BUG]  [BUGGY]  if(available  >  0)  {  continue;  }  If(available  >  0)  {  continue;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  continue;  }  If(available  >  0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >    0)    {    continue;    }    If(available  >  0)  {  continue;  }	  timeout    	non-compiled	[CE]  ';'  expected	125	None	add
817	[BUG]  [BUGGY]  timeout  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  continue;  }  while(available  >  0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available    >    0)    {    continue;    }    while(available  >  0)  {  continue;  }	  timeout    	compilable	timeout	125	1	add
818	[BUG]  [BUGGY]  if(available  >  0)  {  continue;  }  while(available  >  0)  {  continue;  }  timeout  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  continue;  }  while(available  >  0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >    0)    {    continue;    }    while(available  >  0)  {  continue;  }	  timeout    	compilable	timeout	125	1	add
819	[BUG]  [BUGGY]  if(available  >  0)  {  continue;  }  when(available  >  0)  {  continue;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  continue;  }  when(available  >  0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >    0)    {    continue;    }    when(available  >  0)  {  continue;  }	  timeout    	non-compiled	[CE]  ';'  expected	125	None	add
820	[BUG]  [BUGGY]  throw  new  IOException( " ",  skipped);  [CE]  no  suitable  constructor  found  for  IOException(String,long)  [FE]            IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( " ",  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( " ",  skipped);	  throw    new    IOException(       "       ");    throw    new    IOException(   ",       ");    	non-compiled	[CE]  no  suitable  constructor  found  for  IOException(String,long)	108	None	replace
821	[BUG]  [BUGGY]  [FE]  IOException  [FE]              IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( ". ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IOException( ". ");	  throw    new    IOException(       "       ");    throw    new    IOException(   ",       ");    	compilable	  [FE]  IOException  	108	2	replace
822	[BUG]  [BUGGY]  throw  new  IOException( ". ");  [FE]  IOException  [FE]              IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( ". ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( ". ");	  throw    new    IOException(       "       ");    throw    new    IOException(   ",       ");    	compilable	  [FE]  IOException  	108	2	replace
823	[BUG]  [BUGGY]  skipped    =    input.skip(available);    skipped  =  input.skip(available);  InputStream  available  =  input.readInput();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped    =    input.skip(available);    skipped  =  input.skip(available);  InputStream  available  =  input.readInput();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped        =        input.skip(available);        skipped    =    input.skip(available);    InputStream  available  =  input.readInput();	  	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	65	None	add
824	[BUG]  [BUGGY]  skipped    =    input.skip(available);    skipped  =  input.skip(available);  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip  +=  skipped;  numToSkip  +=  skipped);  }  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped    =    input.skip(available);    skipped  =  input.skip(available);  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip  +=  skipped;  numToSkip  +=  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped        =        input.skip(available);        skipped    =    input.skip(available);    if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip  +=  skipped;  numToSkip  +=  skipped);  }	  	non-compiled	[CE]  ')'  expected	65	None	add
825	[BUG]  [BUGGY]  skipped    =    input.skip(available);    skipped  =  input.skip(available);  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip++)  {  skipped  =  input.skip(numToSkip);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped    =    input.skip(available);    skipped  =  input.skip(available);  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip++)  {  skipped  =  input.skip(numToSkip);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped        =        input.skip(available);        skipped    =    input.skip(available);    if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip++)  {  skipped  =  input.skip(numToSkip);  }	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
826	[BUG]  [BUGGY]  skipped    =    input.skip(available);    skipped  =  input.skip(available);  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  skipped  =  input.skip(numToSkip);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped    =    input.skip(available);    skipped  =  input.skip(available);  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  skipped  =  input.skip(numToSkip);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped        =        input.skip(available);        skipped    =    input.skip(available);    if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  skipped  =  input.skip(numToSkip);  }	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
827	[BUG]  [BUGGY]  skipped    =    input.skip(available);    skipped  =  input.skip(available);  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip  +=  skipped;  numToSkip  +=  skipped);  }  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped    =    input.skip(available);    skipped  =  input.skip(available);  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip  +=  skipped;  numToSkip  +=  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped        =        input.skip(available);        skipped    =    input.skip(available);    if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip  +=  skipped;  numToSkip  +=  skipped);  }	  	non-compiled	[CE]  ')'  expected	65	None	add
828	[BUG]  [BUGGY]  skipped    =    input.skip(available);    skipped  =  input.skip(available);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  i;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped    =    input.skip(available);    skipped  =  input.skip(available);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  i;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped        =        input.skip(available);        skipped    =    input.skip(available);    if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  i;  }	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
829	[BUG]  [BUGGY]  skipped    =    input.skip(available);    skipped  =  input.skip(available);  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip++)  {  skipped  =  input.skip(available);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped    =    input.skip(available);    skipped  =  input.skip(available);  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip++)  {  skipped  =  input.skip(available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped        =        input.skip(available);        skipped    =    input.skip(available);    if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip++)  {  skipped  =  input.skip(available);  }	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
830	[BUG]  [BUGGY]  skipped    =    input.skip(available);    skipped  =  input.skip(available);  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  skipped  =  input.skip(available);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped    =    input.skip(available);    skipped  =  input.skip(available);  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  skipped  =  input.skip(available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped        =        input.skip(available);        skipped    =    input.skip(available);    if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  skipped  =  input.skip(available);  }	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
831	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                  IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IllegalStateException( ". ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  0)  {  throw  new  IllegalStateException( ". ");  }	  throw    new    IllegalStateException(       "       ");    throw    new    IllegalStateException(   ".       ");    	compilable	  [FE]  IllegalStateException  	26	2	replace
832	[BUG]  [BUGGY]  if(available  >  0)  {  throw  new  IllegalStateException( ". ");  }  [FE]  IllegalStateException  [FE]                  IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IllegalStateException( ". ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  throw  new  IllegalStateException( ". ");  }	  throw    new    IllegalStateException(       "       ");    throw    new    IllegalStateException(   ".       ");    	compilable	  [FE]  IllegalStateException  	26	2	replace
833	[BUG]  [BUGGY]  timeout  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  numToSkip)  {  continue;  }  if(available  >  numToSkip)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available    >    numToSkip)    {    continue;    }    if(available  >  numToSkip)  {  continue;  }	  timeout    	compilable	timeout	129	1	add
834	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  continue;  }  if(available  >  numToSkip)  {  continue;  }  timeout  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  numToSkip)  {  continue;  }  if(available  >  numToSkip)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >    numToSkip)    {    continue;    }    if(available  >  numToSkip)  {  continue;  }	  timeout    	compilable	timeout	129	1	add
835	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  continue;  }  if(available  >  numToSkip)  {  continue;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  numToSkip)  {  continue;  }  if(available  >  numToSkip)  {  continue;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >    numToSkip)    {    continue;    }    if(available  >  numToSkip)  {  continue;	  timeout    	non-compiled	[CE]  illegal  start  of  expression	129	None	add
836	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  continue;  }  If(available  >  numToSkip)  {  continue;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  numToSkip)  {  continue;  }  If(available  >  numToSkip)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >    numToSkip)    {    continue;    }    If(available  >  numToSkip)  {  continue;  }	  timeout    	non-compiled	[CE]  ';'  expected	129	None	add
837	[BUG]  [BUGGY]  timeout  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  numToSkip)  {  continue;  }  while(available  >  numToSkip)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available    >    numToSkip)    {    continue;    }    while(available  >  numToSkip)  {  continue;  }	  timeout    	compilable	timeout	129	1	add
838	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  continue;  }  while(available  >  numToSkip)  {  continue;  }  timeout  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  numToSkip)  {  continue;  }  while(available  >  numToSkip)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >    numToSkip)    {    continue;    }    while(available  >  numToSkip)  {  continue;  }	  timeout    	compilable	timeout	129	1	add
839	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  continue;  }  when(available  >  numToSkip)  {  continue;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  numToSkip)  {  continue;  }  when(available  >  numToSkip)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >    numToSkip)    {    continue;    }    when(available  >  numToSkip)  {  continue;  }	  timeout    	non-compiled	[CE]  ';'  expected	129	None	add
840	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [CE]  possible  loss  of  precision  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  possible  loss  of  precision	55	None	replace
841	[BUG]  [BUGGY]  if(available  >  skipped)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skipped)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
842	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
843	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  available  +=  input.getLength();  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  numToSkip)  {  available  +=  input.getLength();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  numToSkip)  {  available  +=  input.getLength();	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
844	[BUG]  [BUGGY]  if(available  >  skipped)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]                                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skipped)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
845	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getUpperCase();  }  [CE]  possible  loss  of  precision  [FE]                                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getUpperCase();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getUpperCase();  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  possible  loss  of  precision	55	None	replace
846	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getUpperBound();  }  [CE]  possible  loss  of  precision  [FE]                                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getUpperBound();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getUpperBound();  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  possible  loss  of  precision	55	None	replace
847	[BUG]  [BUGGY]  skip  =  input.skip(available  -  skipped);  [CE]  cannot  find  symbol  skip  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skip  =  input.skip(available  -  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skip  =  input.skip(available  -  skipped);	  skip    =    input.skip(switch);    	non-compiled	[CE]  cannot  find  symbol  skip	215	None	replace
848	[BUG]  [BUGGY]  if(available  <  =  0)  {  if(skipped  >>  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  =  0)  {  if(skipped  >>  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  =  0)  {  if(skipped  >>  0)  {  break;  }	  if(skipped    >=    0)    {    break;    }    if(skipped    [Delete]    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
849	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Skipped:   "  +  skipped);  throw  new  IllegalArgumentException(   "Skipped:   "  +  skipped);  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException(   "Skipped:   "  +  skipped);  throw  new  IllegalArgumentException(   "Skipped:   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalArgumentException(   "Skipped:   "    +    skipped);    throw  new  IllegalArgumentException(   "Skipped:   "  +  skipped);	  	non-compiled	[CE]  unreachable  statement	31	None	add
850	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Skipped:   "  +  skipped);  Throw  new  IllegalArgumentException(   "Skipped:   "  +  skipped);  [CE]  not  a  statement  [FE]      IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException(   "Skipped:   "  +  skipped);  Throw  new  IllegalArgumentException(   "Skipped:   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalArgumentException(   "Skipped:   "    +    skipped);    Throw  new  IllegalArgumentException(   "Skipped:   "  +  skipped);	  	non-compiled	[CE]  not  a  statement	31	None	add
851	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Skipped:   "  +  skipped);  throw  new  IllegalArgumentException(   "Skipped:   "  +  skipd);  [CE]  cannot  find  symbol  skipd  [FE]        IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException(   "Skipped:   "  +  skipped);  throw  new  IllegalArgumentException(   "Skipped:   "  +  skipd);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalArgumentException(   "Skipped:   "    +    skipped);    throw  new  IllegalArgumentException(   "Skipped:   "  +  skipd);	  	non-compiled	[CE]  cannot  find  symbol  skipd	31	None	add
852	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0  ||  skipped  <  0)  {  break;  }  if(available  >  0  ||  skipped  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available    >    0    ||    skipped    <    0)    {    break;    }    if(available  >  0  ||  skipped  <  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	183	2	add
853	[BUG]  [BUGGY]  if(available  >  0  ||  skipped  <  0)  {  break;  }  if(available  >  0  ||  skipped  <  0)  {  break;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0  ||  skipped  <  0)  {  break;  }  if(available  >  0  ||  skipped  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >    0    ||    skipped    <    0)    {    break;    }    if(available  >  0  ||  skipped  <  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	183	2	add
854	[BUG]  [BUGGY]  if(available  >  0  ||  skipped  <  0)  {  break;  }  If(available  >  0  ||  skipped  <  0)  {  break;  }  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0  ||  skipped  <  0)  {  break;  }  If(available  >  0  ||  skipped  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >    0    ||    skipped    <    0)    {    break;    }    If(available  >  0  ||  skipped  <  0)  {  break;  }	  	non-compiled	[CE]  ';'  expected	183	None	add
855	[BUG]  [BUGGY]  if(available  >  0  ||  skipped  <  0)  {  break;  }  if(available  >  0  ||  skipd  <  0)  {  break;  }  [CE]  cannot  find  symbol  skipd  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0  ||  skipped  <  0)  {  break;  }  if(available  >  0  ||  skipd  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >    0    ||    skipped    <    0)    {    break;    }    if(available  >  0  ||  skipd  <  0)  {  break;  }	  	non-compiled	[CE]  cannot  find  symbol  skipd	183	None	add
856	[BUG]  [BUGGY]  if(available  >  0  ||  skipped  <  0)  {  break;  }  if(available  >  0  ||  skipped  <  0)  {  break;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0  ||  skipped  <  0)  {  break;  }  if(available  >  0  ||  skipped  <  0)  {  break;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >    0    ||    skipped    <    0)    {    break;    }    if(available  >  0  ||  skipped  <  0)  {  break;	  	non-compiled	[CE]  illegal  start  of  expression	183	None	add
857	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0  ||  skipped  <  0)  {  break;  }  if(available  >  0  ||  skipped  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available    >    0    ||    skipped    <    0)    {    break;    }    if(available  >  0  ||  skipped  >=  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	183	2	add
858	[BUG]  [BUGGY]  if(available  >  0  ||  skipped  <  0)  {  break;  }  if(available  >  0  ||  skipped  >=  0)  {  break;  }  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0  ||  skipped  <  0)  {  break;  }  if(available  >  0  ||  skipped  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >    0    ||    skipped    <    0)    {    break;    }    if(available  >  0  ||  skipped  >=  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	183	2	add
859	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0  ||  skipped  <  0)  {  break;  }  while(available  >  0  ||  skipped  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available    >    0    ||    skipped    <    0)    {    break;    }    while(available  >  0  ||  skipped  <  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	183	2	add
860	[BUG]  [BUGGY]  if(available  >  0  ||  skipped  <  0)  {  break;  }  while(available  >  0  ||  skipped  <  0)  {  break;  }  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0  ||  skipped  <  0)  {  break;  }  while(available  >  0  ||  skipped  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >    0    ||    skipped    <    0)    {    break;    }    while(available  >  0  ||  skipped  <  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	183	2	add
861	[BUG]  [BUGGY]  long  skipped  =  input.skip(available);  if(skipped  >  0)  {  continue;  }  [CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  long  skipped  =  input.skip(available);  if(skipped  >  0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	long  skipped  =  input.skip(available);  if(skipped  >  0)  {  continue;  }	  continue;    long    skipped    =    input.skip(skipped);    if(skipped    >    0)    {    continue;    }    	non-compiled	[CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)	19	None	replace
862	[BUG]  [BUGGY]  if(available  <  =  0)  {  continue;  skipped  =  input.skip(numToSkip);  if(skipped  >  0)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  =  0)  {  continue;  skipped  =  input.skip(numToSkip);  if(skipped  >  0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  =  0)  {  continue;  skipped  =  input.skip(numToSkip);  if(skipped  >  0)  {  continue;  }	  continue;    long    skipped    =    input.skip(skipped);    if(skipped    >    0)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
863	[BUG]  [BUGGY]  int  skipped  =  input.skip(numToSkip);  if(skipped  >  0)  {  continue;  }  [CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  int  skipped  =  input.skip(numToSkip);  if(skipped  >  0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	int  skipped  =  input.skip(numToSkip);  if(skipped  >  0)  {  continue;  }	  continue;    long    skipped    =    input.skip(skipped);    if(skipped    >    0)    {    continue;    }    	non-compiled	[CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)	19	None	replace
864	[BUG]  [BUGGY]  long  skipped  =  input.skip(numToSkip);  if(skipped  >  0)  {  continue;  }  [CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  long  skipped  =  input.skip(numToSkip);  if(skipped  >  0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	long  skipped  =  input.skip(numToSkip);  if(skipped  >  0)  {  continue;  }	  continue;    long    skipped    =    input.skip(skipped);    if(skipped    >    0)    {    continue;    }    	non-compiled	[CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)	19	None	replace
865	[BUG]  [BUGGY]  int  skipped  =  input.skip(available);  if(skipped  >  0)  {  continue;  }  [CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  int  skipped  =  input.skip(available);  if(skipped  >  0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	int  skipped  =  input.skip(available);  if(skipped  >  0)  {  continue;  }	  continue;    long    skipped    =    input.skip(skipped);    if(skipped    >    0)    {    continue;    }    	non-compiled	[CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)	19	None	replace
866	[BUG]  [BUGGY]  if(numToSkip  <  available)  {  continue;  skipped  =  input.skip(available);  if(skipped  >  0)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(numToSkip  <  available)  {  continue;  skipped  =  input.skip(available);  if(skipped  >  0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(numToSkip  <  available)  {  continue;  skipped  =  input.skip(available);  if(skipped  >  0)  {  continue;  }	  continue;    long    skipped    =    input.skip(skipped);    if(skipped    >    0)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
867	[BUG]  [BUGGY]  long  skipped  =  input.skip(available);  if(skipped  <  0)  {  continue;  }  [CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  long  skipped  =  input.skip(available);  if(skipped  <  0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	long  skipped  =  input.skip(available);  if(skipped  <  0)  {  continue;  }	  continue;    long    skipped    =    input.skip(skipped);    if(skipped    >    0)    {    continue;    }    	non-compiled	[CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)	19	None	replace
868	[BUG]  [BUGGY]  throw  new  IllegalStateException( "skipped:   "  +  input.getMessage());  [CE]  cannot  find  symbol  [FE]        IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "skipped:   "  +  input.getMessage());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "skipped:   "  +  input.getMessage());	  throw    new    IllegalStateException(   "   ".getMessage());    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
869	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Input  error: "  +  input.getMessage());  [CE]  cannot  find  symbol  [FE]          IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Input  error: "  +  input.getMessage());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "Input  error: "  +  input.getMessage());	  throw    new    IllegalStateException(   "   ".getMessage());    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
870	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Input  of   "  +  input.getClass().getName());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalStateException( "Input  of   "  +  input.getClass().getName());	  throw    new    IllegalStateException(   "   ".getMessage());    	compilable	  [FE]  IllegalStateException  	135	2	replace
871	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Input  of   "  +  input.getClass().getName());  [FE]  IllegalStateException  [FE]            IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Input  of   "  +  input.getClass().getName());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "Input  of   "  +  input.getClass().getName());	  throw    new    IllegalStateException(   "   ".getMessage());    	compilable	  [FE]  IllegalStateException  	135	2	replace
872	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Missing  input: "  +  input.getMessage());  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Missing  input: "  +  input.getMessage());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "Missing  input: "  +  input.getMessage());	  throw    new    IllegalStateException(   "   ".getMessage());    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
873	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Input  of   "  +  input.getMessage());  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Input  of   "  +  input.getMessage());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "Input  of   "  +  input.getMessage());	  throw    new    IllegalStateException(   "   ".getMessage());    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
874	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  numToSkip  =  input.skip(available  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	numToSkip  =  input.skip(available  +  skipped);	  numToSkip    =    input.skip(available    +    numToSkip);    	compilable	  [FE]  AssertionError  	62	2	replace
875	[BUG]  [BUGGY]  numToSkip  =  input.skip(available  +  skipped);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  numToSkip  =  input.skip(available  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	numToSkip  =  input.skip(available  +  skipped);	  numToSkip    =    input.skip(available    +    numToSkip);    	compilable	  [FE]  AssertionError  	62	2	replace
876	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  numToSkip  =  input.skip(available  /  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	numToSkip  =  input.skip(available  /  numToSkip);	  numToSkip    =    input.skip(available    +    numToSkip);    	compilable	  [FE]  AssertionError  	62	2	replace
877	[BUG]  [BUGGY]  numToSkip  =  input.skip(available  /  numToSkip);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  numToSkip  =  input.skip(available  /  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	numToSkip  =  input.skip(available  /  numToSkip);	  numToSkip    =    input.skip(available    +    numToSkip);    	compilable	  [FE]  AssertionError  	62	2	replace
878	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  numToSkip  =  input.skip(available  -  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	numToSkip  =  input.skip(available  -  numToSkip);	  numToSkip    =    input.skip(available    +    numToSkip);    	compilable	  [FE]  AssertionError  	62	2	replace
879	[BUG]  [BUGGY]  numToSkip  =  input.skip(available  -  numToSkip);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  numToSkip  =  input.skip(available  -  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	numToSkip  =  input.skip(available  -  numToSkip);	  numToSkip    =    input.skip(available    +    numToSkip);    	compilable	  [FE]  AssertionError  	62	2	replace
880	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  numToSkip  =  input.skip(skipped  +  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	numToSkip  =  input.skip(skipped  +  numToSkip);	  numToSkip    =    input.skip(available    +    numToSkip);    	compilable	  [FE]  AssertionError  	62	2	replace
881	[BUG]  [BUGGY]  numToSkip  =  input.skip(skipped  +  numToSkip);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  numToSkip  =  input.skip(skipped  +  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	numToSkip  =  input.skip(skipped  +  numToSkip);	  numToSkip    =    input.skip(available    +    numToSkip);    	compilable	  [FE]  AssertionError  	62	2	replace
882	[BUG]  [BUGGY]  timeout  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  numToSkip  =  available  +  skipped;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	numToSkip  =  available  +  skipped;	  numToSkip    =    input.skip(available    +    numToSkip);    	compilable	timeout	62	1	replace
883	[BUG]  [BUGGY]  numToSkip  =  available  +  skipped;  timeout  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  numToSkip  =  available  +  skipped;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	numToSkip  =  available  +  skipped;	  numToSkip    =    input.skip(available    +    numToSkip);    	compilable	timeout	62	1	replace
884	[BUG]  [BUGGY]  numToSkip  =  input.skip(available  +  skip);  [CE]  cannot  find  symbol  skip  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  numToSkip  =  input.skip(available  +  skip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	numToSkip  =  input.skip(available  +  skip);	  numToSkip    =    input.skip(available    +    numToSkip);    	non-compiled	[CE]  cannot  find  symbol  skip	62	None	replace
885	[BUG]  [BUGGY]  if(available  >  0)  {  throw  new  IOException( " ".getMessage());  }  [CE]  cannot  find  symbol  [FE]              IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IOException( " ".getMessage());  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  throw  new  IOException( " ".getMessage());  }	  throw    new    IOException(       "       ");    throw    new    IOException(,   "       ");    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
886	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  /  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped  =  input.skip(available  /  skipped);	  skipped    =    input.skip(available    +    skipped);    timeout    	compilable	  [FE]  ArithmeticException  	79	2	replace
887	[BUG]  [BUGGY]  skipped  =  input.skip(available  /  skipped);  [FE]  ArithmeticException  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  /  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped  =  input.skip(available  /  skipped);	  skipped    =    input.skip(available    +    skipped);    timeout    	compilable	  [FE]  ArithmeticException  	79	2	replace
888	[BUG]  [BUGGY]  timeout  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  *  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped  =  input.skip(available  *  skipped);	  skipped    =    input.skip(available    +    skipped);    timeout    	compilable	timeout	79	1	replace
889	[BUG]  [BUGGY]  skipped  =  input.skip(available  *  skipped);  timeout  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  *  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped  =  input.skip(available  *  skipped);	  skipped    =    input.skip(available    +    skipped);    timeout    	compilable	timeout	79	1	replace
890	[BUG]  [BUGGY]  skipped  =  input.skip(available  +  skip);  [CE]  cannot  find  symbol  skip  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  +  skip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped  =  input.skip(available  +  skip);	  skipped    =    input.skip(available    +    skipped);    timeout    	non-compiled	[CE]  cannot  find  symbol  skip	79	None	replace
891	[BUG]  [BUGGY]  timeout  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  +  0);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped  =  input.skip(available  +  0);	  skipped    =    input.skip(available    +    skipped);    timeout    	compilable	timeout	79	1	replace
892	[BUG]  [BUGGY]  skipped  =  input.skip(available  +  0);  timeout  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  +  0);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped  =  input.skip(available  +  0);	  skipped    =    input.skip(available    +    skipped);    timeout    	compilable	timeout	79	1	replace
893	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(i);  }  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(i);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(i);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.skip(i);    }    	non-compiled	[CE]  possible  loss  of  precision	68	None	replace
894	[BUG]  [BUGGY]  long  available  =  input.available();  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(i);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  long  available  =  input.available();  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(i);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	long  available  =  input.available();  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(i);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.skip(i);    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
895	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(i);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(i);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(i);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.skip(i);    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
896	[BUG]  [BUGGY]  long  available  =  input.available();  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(i  +  1);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  long  available  =  input.available();  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(i  +  1);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	long  available  =  input.available();  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(i  +  1);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.skip(i);    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
897	[BUG]  [BUGGY]  long  available  =  input.available();  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skipped(i);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  long  available  =  input.available();  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skipped(i);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	long  available  =  input.available();  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skipped(i);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.skip(i);    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
898	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  break;  }  if(skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  skipped)  {  break;  }  if(skipped  >  available)  {  break;  }	  if(skipped    >    available)    {    break;    }    if(skip    >    available)    {    break;    }    	compilable	  [FE]  AssertionError  	254	2	replace
899	[BUG]  [BUGGY]  if(available  >  skipped)  {  break;  }  if(skipped  >  available)  {  break;  }  [FE]  AssertionError  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  break;  }  if(skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skipped)  {  break;  }  if(skipped  >  available)  {  break;  }	  if(skipped    >    available)    {    break;    }    if(skip    >    available)    {    break;    }    	compilable	  [FE]  AssertionError  	254	2	replace
900	[BUG]  [BUGGY]  if(available  >  skip)  {  break;  }  if(skipped  >  available)  {  break;  }  [CE]  cannot  find  symbol  skip  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skip)  {  break;  }  if(skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skip)  {  break;  }  if(skipped  >  available)  {  break;  }	  if(skipped    >    available)    {    break;    }    if(skip    >    available)    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  skip	254	None	replace
901	[BUG]  [BUGGY]  timeout  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  numToSkip)  {  break;  }  if(skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  numToSkip)  {  break;  }  if(skipped  >  available)  {  break;  }	  if(skipped    >    available)    {    break;    }    if(skip    >    available)    {    break;    }    	compilable	timeout	254	1	replace
902	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  break;  }  if(skipped  >  available)  {  break;  }  timeout  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  numToSkip)  {  break;  }  if(skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  numToSkip)  {  break;  }  if(skipped  >  available)  {  break;  }	  if(skipped    >    available)    {    break;    }    if(skip    >    available)    {    break;    }    	compilable	timeout	254	1	replace
903	[BUG]  [BUGGY]  if(available  >  skip)  {  break;  }  if(skip  >  available)  {  break;  }  [CE]  cannot  find  symbol  skip  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skip)  {  break;  }  if(skip  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skip)  {  break;  }  if(skip  >  available)  {  break;  }	  if(skipped    >    available)    {    break;    }    if(skip    >    available)    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  skip	254	None	replace
904	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  break;  }  if(skip  >  available)  {  break;  }  [CE]  cannot  find  symbol  skip  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  numToSkip)  {  break;  }  if(skip  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  numToSkip)  {  break;  }  if(skip  >  available)  {  break;  }	  if(skipped    >    available)    {    break;    }    if(skip    >    available)    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  skip	254	None	replace
905	[BUG]  [BUGGY]  timeout  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(numToSkip  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(numToSkip  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }	  if(skipped    >    available)    {    break;    }    if(skip    >    available)    {    break;    }    	compilable	timeout	254	1	replace
906	[BUG]  [BUGGY]  if(numToSkip  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  timeout  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(numToSkip  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(numToSkip  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }	  if(skipped    >    available)    {    break;    }    if(skip    >    available)    {    break;    }    	compilable	timeout	254	1	replace
907	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available    >    0)    {    break;    }    if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available        >        0)        {        break;        }        if(available    >    0)    {    break;    }    if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	145	2	add
908	[BUG]  [BUGGY]  if(available    >    0)    {    break;    }    if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available    >    0)    {    break;    }    if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available        >        0)        {        break;        }        if(available    >    0)    {    break;    }    if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	145	2	add
909	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available    >    0)    {    break;    }    if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available        >        0)        {        break;        }        if(available    >    0)    {    break;    }    if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	145	2	add
910	[BUG]  [BUGGY]  if(available    >    0)    {    break;    }    if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available    >    0)    {    break;    }    if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available        >        0)        {        break;        }        if(available    >    0)    {    break;    }    if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	145	2	add
911	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available    >    0)    {    break;    }    if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available        >        0)        {        break;        }        if(available    >    0)    {    break;    }    if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	145	2	add
912	[BUG]  [BUGGY]  if(available    >    0)    {    break;    }    if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available    >    0)    {    break;    }    if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available        >        0)        {        break;        }        if(available    >    0)    {    break;    }    if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	145	2	add
913	[BUG]  [BUGGY]  if(available    >    0)    {    break;    }    if(available  >  0)  {  break;  }  If(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available    >    0)    {    break;    }    if(available  >  0)  {  break;  }  If(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available        >        0)        {        break;        }        if(available    >    0)    {    break;    }    If(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }	  	non-compiled	[CE]  ';'  expected	145	None	add
914	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available    >    0)    {    break;    }    if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available        >        0)        {        break;        }        if(available    >    0)    {    break;    }    if(available  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	145	2	add
915	[BUG]  [BUGGY]  if(available    >    0)    {    break;    }    if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available    >    0)    {    break;    }    if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available        >        0)        {        break;        }        if(available    >    0)    {    break;    }    if(available  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	145	2	add
916	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available    >    0)    {    break;    }    if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  else  if(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available        >        0)        {        break;        }        if(available    >    0)    {    break;    }    if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  else  if(available  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	145	2	add
917	[BUG]  [BUGGY]  if(available    >    0)    {    break;    }    if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  else  if(available  >  0)  {  break;  }  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available    >    0)    {    break;    }    if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  else  if(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available        >        0)        {        break;        }        if(available    >    0)    {    break;    }    if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  else  if(available  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	145	2	add
918	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available    >    0)    {    break;    }    if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  while(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available        >        0)        {        break;        }        if(available    >    0)    {    break;    }    if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  while(available  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	145	2	add
919	[BUG]  [BUGGY]  if(available    >    0)    {    break;    }    if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  while(available  >  0)  {  break;  }  [FE]  AssertionError  [FE]                AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available    >    0)    {    break;    }    if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  while(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available        >        0)        {        break;        }        if(available    >    0)    {    break;    }    if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  while(available  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	145	2	add
920	[BUG]  [BUGGY]  throw  new  IllegalStateException( "InputStream  is  less  than  1: "  +  input.getClass(),  skipped);  [CE]  no  suitable  constructor  found  for  IllegalStateException(String,long)  [FE]    IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "InputStream  is  less  than  1: "  +  input.getClass(),  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "InputStream  is  less  than  1: "  +  input.getClass(),  skipped);	  throw    new    IllegalStateException(   "InputStream    is    less    than    1:   "    +    input.getClass());    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalStateException(String,long)	242	None	replace
921	[BUG]  [BUGGY]  throw  new  IllegalStateException( "InputStream  is  less  than  1: "  +  input.getRawClass());  [CE]  cannot  find  symbol  [FE]      IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "InputStream  is  less  than  1: "  +  input.getRawClass());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "InputStream  is  less  than  1: "  +  input.getRawClass());	  throw    new    IllegalStateException(   "InputStream    is    less    than    1:   "    +    input.getClass());    	non-compiled	[CE]  cannot  find  symbol	242	None	replace
922	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "InputStream  is  less  than  1: "  +  input.toString());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalStateException( "InputStream  is  less  than  1: "  +  input.toString());	  throw    new    IllegalStateException(   "InputStream    is    less    than    1:   "    +    input.getClass());    	compilable	  [FE]  IllegalStateException  	242	2	replace
923	[BUG]  [BUGGY]  throw  new  IllegalStateException( "InputStream  is  less  than  1: "  +  input.toString());  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "InputStream  is  less  than  1: "  +  input.toString());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "InputStream  is  less  than  1: "  +  input.toString());	  throw    new    IllegalStateException(   "InputStream    is    less    than    1:   "    +    input.getClass());    	compilable	  [FE]  IllegalStateException  	242	2	replace
924	[BUG]  [BUGGY]  Throwables.warning( "InputStream  is  less  than  1: "  +  input.getClass());  [CE]  cannot  find  symbol  Throwables  [FE]          IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  Throwables.warning( "InputStream  is  less  than  1: "  +  input.getClass());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	Throwables.warning( "InputStream  is  less  than  1: "  +  input.getClass());	  throw    new    IllegalStateException(   "InputStream    is    less    than    1:   "    +    input.getClass());    	non-compiled	[CE]  cannot  find  symbol  Throwables	242	None	replace
925	[BUG]  [BUGGY]  Throwables.log( "InputStream  is  less  than  1: "  +  input.getClass());  [CE]  cannot  find  symbol  Throwables  [FE]            IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  Throwables.log( "InputStream  is  less  than  1: "  +  input.getClass());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	Throwables.log( "InputStream  is  less  than  1: "  +  input.getClass());	  throw    new    IllegalStateException(   "InputStream    is    less    than    1:   "    +    input.getClass());    	non-compiled	[CE]  cannot  find  symbol  Throwables	242	None	replace
926	[BUG]  [BUGGY]  throw  new  IllegalStateException( "InputStream  is  less  than  1: "  +  input.getName());  [CE]  cannot  find  symbol  [FE]              IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "InputStream  is  less  than  1: "  +  input.getName());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "InputStream  is  less  than  1: "  +  input.getName());	  throw    new    IllegalStateException(   "InputStream    is    less    than    1:   "    +    input.getClass());    	non-compiled	[CE]  cannot  find  symbol	242	None	replace
927	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >=  skipped)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >=  skipped)  {  break;  }	  if(available    >    skipped)    {    break;    }    	compilable	  [FE]  AssertionError  	48	2	replace
928	[BUG]  [BUGGY]  if(available  >=  skipped)  {  break;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >=  skipped)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >=  skipped)  {  break;  }	  if(available    >    skipped)    {    break;    }    	compilable	  [FE]  AssertionError  	48	2	replace
929	[BUG]  [BUGGY]  if(available  <  =  skipped)  {  break;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  =  skipped)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  =  skipped)  {  break;  }	  if(available    >    skipped)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
930	[BUG]  [BUGGY]  timeout  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  skipped)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	while(available  >  skipped)  {  break;  }	  if(available    >    skipped)    {    break;    }    	compilable	timeout	48	1	replace
931	[BUG]  [BUGGY]  while(available  >  skipped)  {  break;  }  timeout  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  skipped)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  skipped)  {  break;  }	  if(available    >    skipped)    {    break;    }    	compilable	timeout	48	1	replace
932	[BUG]  [BUGGY]  input  =  available.skip(skipped);  [CE]  long  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  input  =  available.skip(skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	input  =  available.skip(skipped);	  skip    =    available.skip(input);    	non-compiled	[CE]  long  cannot  be  dereferenced	1	None	replace
933	[BUG]  [BUGGY]  this.skip  =  input.skip(available);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  this.skip  =  input.skip(available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	this.skip  =  input.skip(available);	  skip    =    available.skip(input);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	1	None	replace
934	[BUG]  [BUGGY]  int  skip  =  available.skip(input);  [CE]  long  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  int  skip  =  available.skip(input);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	int  skip  =  available.skip(input);	  skip    =    available.skip(input);    	non-compiled	[CE]  long  cannot  be  dereferenced	1	None	replace
935	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "InputStream  is  less  than  1:   ");  throw  new  IllegalStateException(   "InputStream  is  less  than  1:   ");  [CE]  unreachable  statement  [FE]    IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "InputStream  is  less  than  1:   ");  throw  new  IllegalStateException(   "InputStream  is  less  than  1:   ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalStateException(   "InputStream    is    less    than    1:   ");    throw  new  IllegalStateException(   "InputStream  is  less  than  1:   ");	  	non-compiled	[CE]  unreachable  statement	245	None	add
936	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "InputStream  is  less  than  1:   ");  Throw  new  IllegalStateException(   "InputStream  is  less  than  1:   ");  [CE]  not  a  statement  [FE]      IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "InputStream  is  less  than  1:   ");  Throw  new  IllegalStateException(   "InputStream  is  less  than  1:   ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalStateException(   "InputStream    is    less    than    1:   ");    Throw  new  IllegalStateException(   "InputStream  is  less  than  1:   ");	  	non-compiled	[CE]  not  a  statement	245	None	add
937	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "InputStream  is  less  than  1:   ");  new  IllegalStateException(   "InputStream  is  less  than  1:   ");  [CE]  unreachable  statement  [FE]        IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "InputStream  is  less  than  1:   ");  new  IllegalStateException(   "InputStream  is  less  than  1:   ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalStateException(   "InputStream    is    less    than    1:   ");    new  IllegalStateException(   "InputStream  is  less  than  1:   ");	  	non-compiled	[CE]  unreachable  statement	245	None	add
938	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }	  continue;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.length();    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
939	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skip  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skip  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }	  continue;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.length();    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
940	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  skipped.length();  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  skipped.length();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  skipped.length();  }	  continue;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.length();    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
941	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  skipped.length();  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skip  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  skipped.length();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skip  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  skipped.length();  }	  continue;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.length();    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
942	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  skipped;  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skip  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  skipped;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skip  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  skipped;  }	  continue;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.length();    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
943	[BUG]  [BUGGY]  throw  new  IOException(   "skipped:   "  +  skipped);  throw  new  IOException(   "skipped:   "  +  skipped);  [CE]  unreachable  statement  [FE]    IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException(   "skipped:   "  +  skipped);  throw  new  IOException(   "skipped:   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IOException(   "skipped:   "    +    skipped);    throw  new  IOException(   "skipped:   "  +  skipped);	  	non-compiled	[CE]  unreachable  statement	121	None	add
944	[BUG]  [BUGGY]  throw  new  IOException(   "skipped:   "  +  skipped);  Throw  new  IOException(   "skipped:   "  +  skipped);  [CE]  not  a  statement  [FE]      IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException(   "skipped:   "  +  skipped);  Throw  new  IOException(   "skipped:   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IOException(   "skipped:   "    +    skipped);    Throw  new  IOException(   "skipped:   "  +  skipped);	  	non-compiled	[CE]  not  a  statement	121	None	add
945	[BUG]  [BUGGY]  throw  new  IOException(   "skipped:   "  +  skipped);  throw  new  IOException(   "skipped:   "  +  skipd);  [CE]  cannot  find  symbol  skipd  [FE]        IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException(   "skipped:   "  +  skipped);  throw  new  IOException(   "skipped:   "  +  skipd);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IOException(   "skipped:   "    +    skipped);    throw  new  IOException(   "skipped:   "  +  skipd);	  	non-compiled	[CE]  cannot  find  symbol  skipd	121	None	add
946	[BUG]  [BUGGY]  throw  new  IOException(   "skipped:   "  +  skipped);  throw  new  IOException( ",skipped:   "  +  skipped);  [CE]  unreachable  statement  [FE]          IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException(   "skipped:   "  +  skipped);  throw  new  IOException( ",skipped:   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IOException(   "skipped:   "    +    skipped);    throw  new  IOException( ",skipped:   "  +  skipped);	  	non-compiled	[CE]  unreachable  statement	121	None	add
947	[BUG]  [BUGGY]  if(available  >  skip)  {  continue;  }  [CE]  cannot  find  symbol  skip  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skip)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skip)  {  continue;  }	  if(skipped    >    available)    {    continue;    }    timeout    	non-compiled	[CE]  cannot  find  symbol  skip	134	None	replace
948	[BUG]  [BUGGY]  timeout  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  <  available)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped  <  available)  {  continue;  }	  if(skipped    >    available)    {    continue;    }    timeout    	compilable	timeout	134	1	replace
949	[BUG]  [BUGGY]  if(skipped  <  available)  {  continue;  }  timeout  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  <  available)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  <  available)  {  continue;  }	  if(skipped    >    available)    {    continue;    }    timeout    	compilable	timeout	134	1	replace
950	[BUG]  [BUGGY]  timeout  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  available  ||  skipped  >  0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped  >  available  ||  skipped  >  0)  {  continue;  }	  if(skipped    >    available)    {    continue;    }    timeout    	compilable	timeout	134	1	replace
951	[BUG]  [BUGGY]  if(skipped  >  available  ||  skipped  >  0)  {  continue;  }  timeout  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  available  ||  skipped  >  0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  available  ||  skipped  >  0)  {  continue;  }	  if(skipped    >    available)    {    continue;    }    timeout    	compilable	timeout	134	1	replace
952	[BUG]  [BUGGY]  if(available  >  sink)  {  continue;  }  [CE]  cannot  find  symbol  sink  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  sink)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  sink)  {  continue;  }	  if(skipped    >    available)    {    continue;    }    timeout    	non-compiled	[CE]  cannot  find  symbol  sink	134	None	replace
953	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available!=  0)  {  break;  }  if(available  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available!=    0)    {    break;    }    if(available  >=  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	113	2	add
954	[BUG]  [BUGGY]  if(available!=  0)  {  break;  }  if(available  >=  0)  {  break;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available!=  0)  {  break;  }  if(available  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available!=    0)    {    break;    }    if(available  >=  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	113	2	add
955	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available!=  0)  {  break;  }  if(available!=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available!=    0)    {    break;    }    if(available!=  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	113	2	add
956	[BUG]  [BUGGY]  if(available!=  0)  {  break;  }  if(available!=  0)  {  break;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available!=  0)  {  break;  }  if(available!=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available!=    0)    {    break;    }    if(available!=  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	113	2	add
957	[BUG]  [BUGGY]  if(available!=  0)  {  break;  }  if(available  >>  0)  {  break;  }  [CE]  incompatible  types  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available!=  0)  {  break;  }  if(available  >>  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available!=    0)    {    break;    }    if(available  >>  0)  {  break;  }	  	non-compiled	[CE]  incompatible  types	113	None	add
958	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available!=  0)  {  break;  }  if(available  ==  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available!=    0)    {    break;    }    if(available  ==  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	113	2	add
959	[BUG]  [BUGGY]  if(available!=  0)  {  break;  }  if(available  ==  0)  {  break;  }  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available!=  0)  {  break;  }  if(available  ==  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available!=    0)    {    break;    }    if(available  ==  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	113	2	add
960	[BUG]  [BUGGY]  if(available!=  0)  {  break;  }  If(available  >=  0)  {  break;  }  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available!=  0)  {  break;  }  If(available  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available!=    0)    {    break;    }    If(available  >=  0)  {  break;  }	  	non-compiled	[CE]  ';'  expected	113	None	add
961	[BUG]  [BUGGY]  if(available!=  0)  {  break;  }  if(available  [Delete]  0)  {  break;  }  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available!=  0)  {  break;  }  if(available  [Delete]  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available!=    0)    {    break;    }    if(available  [Delete]  0)  {  break;  }	  	non-compiled	[CE]  ')'  expected	113	None	add
962	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  break;  }  if(available  >  skipped)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available    >    skipped)    {    break;    }    if(available  >  skipped)  {  break;  }	  	compilable	  [FE]  AssertionError  	47	2	add
963	[BUG]  [BUGGY]  if(available  >  skipped)  {  break;  }  if(available  >  skipped)  {  break;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  break;  }  if(available  >  skipped)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >    skipped)    {    break;    }    if(available  >  skipped)  {  break;  }	  	compilable	  [FE]  AssertionError  	47	2	add
964	[BUG]  [BUGGY]  if(available  >  skipped)  {  break;  }  if(available  >  skip)  {  break;  }  [CE]  cannot  find  symbol  skip  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  break;  }  if(available  >  skip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >    skipped)    {    break;    }    if(available  >  skip)  {  break;  }	  	non-compiled	[CE]  cannot  find  symbol  skip	47	None	add
965	[BUG]  [BUGGY]  if(available  >  skipped)  {  break;  }  If(available  >  skipped)  {  break;  }  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  break;  }  If(available  >  skipped)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >    skipped)    {    break;    }    If(available  >  skipped)  {  break;  }	  	non-compiled	[CE]  ';'  expected	47	None	add
966	[BUG]  [BUGGY]  if(available  >  skipped)  {  break;  }  if(available  >  missing)  {  break;  }  [CE]  cannot  find  symbol  missing  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  break;  }  if(available  >  missing)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >    skipped)    {    break;    }    if(available  >  missing)  {  break;  }	  	non-compiled	[CE]  cannot  find  symbol  missing	47	None	add
967	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  break;  }  while(available  >  skipped)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available    >    skipped)    {    break;    }    while(available  >  skipped)  {  break;  }	  	compilable	  [FE]  AssertionError  	47	2	add
968	[BUG]  [BUGGY]  if(available  >  skipped)  {  break;  }  while(available  >  skipped)  {  break;  }  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  break;  }  while(available  >  skipped)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >    skipped)    {    break;    }    while(available  >  skipped)  {  break;  }	  	compilable	  [FE]  AssertionError  	47	2	add
969	[BUG]  [BUGGY]  if(available  >  skipped)  {  break;  }  if(available  >  skipped)  {  break;  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  break;  }  if(available  >  skipped)  {  break;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >    skipped)    {    break;    }    if(available  >  skipped)  {  break;	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
970	[BUG]  [BUGGY]  n  =  input.skip(skipped);  [CE]  cannot  find  symbol  n  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  n  =  input.skip(skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	n  =  input.skip(skipped);	  n    =    input.skip(available);    	non-compiled	[CE]  cannot  find  symbol  n	234	None	replace
971	[BUG]  [BUGGY]  n  =  input.skip(numToSkip);  [CE]  cannot  find  symbol  n  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  n  =  input.skip(numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	n  =  input.skip(numToSkip);	  n    =    input.skip(available);    	non-compiled	[CE]  cannot  find  symbol  n	234	None	replace
972	[BUG]  [BUGGY]  int  n  =  input.skip(available);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  int  n  =  input.skip(available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	int  n  =  input.skip(available);	  n    =    input.skip(available);    	non-compiled	[CE]  possible  loss  of  precision	234	None	replace
973	[BUG]  [BUGGY]  timeout  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  available  =  input.skip(skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	available  =  input.skip(skipped);	  n    =    input.skip(available);    	compilable	timeout	234	1	replace
974	[BUG]  [BUGGY]  available  =  input.skip(skipped);  timeout  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  available  =  input.skip(skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	available  =  input.skip(skipped);	  n    =    input.skip(available);    	compilable	timeout	234	1	replace
975	[BUG]  [BUGGY]  input  =  input.skip(available);  [CE]  incompatible  types  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  input  =  input.skip(available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	input  =  input.skip(available);	  n    =    input.skip(available);    	non-compiled	[CE]  incompatible  types	234	None	replace
976	[BUG]  [BUGGY]  int  skipped  =  input.skip(available,  numToSkip);  [CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  int  skipped  =  input.skip(available,  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	int  skipped  =  input.skip(available,  numToSkip);	  int    skipped    =    input.skip(available);    	non-compiled	[CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)	189	None	replace
977	[BUG]  [BUGGY]  int  skipped  =  input.skip(available  -  numToSkip);  [CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  int  skipped  =  input.skip(available  -  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	int  skipped  =  input.skip(available  -  numToSkip);	  int    skipped    =    input.skip(available);    	non-compiled	[CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)	189	None	replace
978	[BUG]  [BUGGY]  int  skipped  =  available.skip(input);  [CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  int  skipped  =  available.skip(input);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	int  skipped  =  available.skip(input);	  int    skipped    =    input.skip(available);    	non-compiled	[CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)	189	None	replace
979	[BUG]  [BUGGY]  if(available  >  skip)  {  break;  }  else  if(skipped  >  available)  {  break;  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  }  [CE]  cannot  find  symbol  skip  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skip)  {  break;  }  else  if(skipped  >  available)  {  break;  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skip)  {  break;  }  else  if(skipped  >  available)  {  break;  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  }	  if(skipped    >    available)    {    break;    }    if(skipped    >    available)    {    break;    System.arraycopy(input,    0,    available,    numToSkip,    skipped);    }    	non-compiled	[CE]  cannot  find  symbol  skip	201	None	replace
980	[BUG]  [BUGGY]  if(available  >  skipped)  {  break;  }  else  if(skipped  >  available)  {  break;  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  break;  }  else  if(skipped  >  available)  {  break;  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skipped)  {  break;  }  else  if(skipped  >  available)  {  break;  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  }	  if(skipped    >    available)    {    break;    }    if(skipped    >    available)    {    break;    System.arraycopy(input,    0,    available,    numToSkip,    skipped);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	201	None	replace
981	[BUG]  [BUGGY]  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	System.arraycopy(input,  0,  available,  numToSkip,  skipped);	  if(skipped    >    available)    {    break;    }    if(skipped    >    available)    {    break;    System.arraycopy(input,    0,    available,    numToSkip,    skipped);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	201	None	replace
982	[BUG]  [BUGGY]  if(available  >  skipped)  {  break;  }  else  if(skipped  >  0)  {  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  break;  }  else  if(skipped  >  0)  {  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skipped)  {  break;  }  else  if(skipped  >  0)  {  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  }	  if(skipped    >    available)    {    break;    }    if(skipped    >    available)    {    break;    System.arraycopy(input,    0,    available,    numToSkip,    skipped);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	201	None	replace
983	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }	          if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	227	None	replace
984	[BUG]  [BUGGY]  (int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [CE]  ')'  expected  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  (int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }	          if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  ')'  expected	227	None	replace
985	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available.length;  ++i)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available.length;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available.length;  ++i)  {  available  +=  input.read();  }	          if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	227	None	replace
986	[BUG]  [BUGGY]  long  available  =  numToSkip;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  long  available  =  numToSkip;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	long  available  =  numToSkip;	          if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	227	None	replace
987	[BUG]  [BUGGY]  skip  =  input.skip(handle);  [CE]  cannot  find  symbol  skip  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skip  =  input.skip(handle);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skip  =  input.skip(handle);	  skip    =    input.skip(saved);    	non-compiled	[CE]  cannot  find  symbol  skip	116	None	replace
988	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  available  ||  skipped  >  0)  {  break;  }  if(skipped  >  available  ||  skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped    >    available    ||    skipped    >    0)    {    break;    }    if(skipped  >  available  ||  skipped  >  0)  {  break;  }	  timeout    	compilable	  [FE]  AssertionError  	259	2	add
989	[BUG]  [BUGGY]  if(skipped  >  available  ||  skipped  >  0)  {  break;  }  if(skipped  >  available  ||  skipped  >  0)  {  break;  }  [FE]  AssertionError  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  available  ||  skipped  >  0)  {  break;  }  if(skipped  >  available  ||  skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    available    ||    skipped    >    0)    {    break;    }    if(skipped  >  available  ||  skipped  >  0)  {  break;  }	  timeout    	compilable	  [FE]  AssertionError  	259	2	add
990	[BUG]  [BUGGY]  if(skipped  >  available  ||  skipped  >  0)  {  break;  }  if(skipped  >  available  ||  skipd  >  0)  {  break;  }  [CE]  cannot  find  symbol  skipd  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  available  ||  skipped  >  0)  {  break;  }  if(skipped  >  available  ||  skipd  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    available    ||    skipped    >    0)    {    break;    }    if(skipped  >  available  ||  skipd  >  0)  {  break;  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  skipd	259	None	add
991	[BUG]  [BUGGY]  if(skipped  >  available  ||  skipped  >  0)  {  break;  }  If(skipped  >  available  ||  skipped  >  0)  {  break;  }  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  available  ||  skipped  >  0)  {  break;  }  If(skipped  >  available  ||  skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    available    ||    skipped    >    0)    {    break;    }    If(skipped  >  available  ||  skipped  >  0)  {  break;  }	  timeout    	non-compiled	[CE]  ';'  expected	259	None	add
992	[BUG]  [BUGGY]  if(skipped  >  available  ||  skipped  >  0)  {  break;  }  if(skipped  >  available  ||  skipped  >  0)  {  break;  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  available  ||  skipped  >  0)  {  break;  }  if(skipped  >  available  ||  skipped  >  0)  {  break;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    available    ||    skipped    >    0)    {    break;    }    if(skipped  >  available  ||  skipped  >  0)  {  break;	  timeout    	non-compiled	[CE]  illegal  start  of  expression	259	None	add
993	[BUG]  [BUGGY]  if(skipped  >  available  ||  skipped  >  0)  {  break;  }  if(skipped  >  available  ||  saved  >  0)  {  break;  }  [CE]  cannot  find  symbol  saved  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  available  ||  skipped  >  0)  {  break;  }  if(skipped  >  available  ||  saved  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    available    ||    skipped    >    0)    {    break;    }    if(skipped  >  available  ||  saved  >  0)  {  break;  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  saved	259	None	add
994	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    0)    {    break;    }    if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >        0)        {        break;        }        if(skipped    >    0)    {    break;    }    if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	98	2	add
995	[BUG]  [BUGGY]  if(skipped    >    0)    {    break;    }    if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    0)    {    break;    }    if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >        0)        {        break;        }        if(skipped    >    0)    {    break;    }    if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	98	2	add
996	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    0)    {    break;    }    if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >        0)        {        break;        }        if(skipped    >    0)    {    break;    }    if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	98	2	add
997	[BUG]  [BUGGY]  if(skipped    >    0)    {    break;    }    if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    0)    {    break;    }    if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >        0)        {        break;        }        if(skipped    >    0)    {    break;    }    if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	98	2	add
998	[BUG]  [BUGGY]  if(skipped    >    0)    {    break;    }    if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    0)    {    break;    }    if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >        0)        {        break;        }        if(skipped    >    0)    {    break;    }    if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	98	None	add
999	[BUG]  [BUGGY]  if(skipped    >    0)    {    break;    }    if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    0)    {    break;    }    if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >        0)        {        break;        }        if(skipped    >    0)    {    break;    }    if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;	  	non-compiled	[CE]  illegal  start  of  expression	98	None	add
1000	[BUG]  [BUGGY]  if(skipped    >    0)    {    break;    }    if(skipped  >  0)  {  break;  }  If(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    0)    {    break;    }    if(skipped  >  0)  {  break;  }  If(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >        0)        {        break;        }        if(skipped    >    0)    {    break;    }    If(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }	  	non-compiled	[CE]  ';'  expected	98	None	add
1001	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    0)    {    break;    }    if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  else  if(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >        0)        {        break;        }        if(skipped    >    0)    {    break;    }    if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  else  if(skipped  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	98	2	add
1002	[BUG]  [BUGGY]  if(skipped    >    0)    {    break;    }    if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  else  if(skipped  >  0)  {  break;  }  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    0)    {    break;    }    if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  else  if(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >        0)        {        break;        }        if(skipped    >    0)    {    break;    }    if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  else  if(skipped  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	98	2	add
1003	[BUG]  [BUGGY]  System.arraycopy(input,  numToSkip,  available,  numToSkip);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.arraycopy(input,  numToSkip,  available,  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	System.arraycopy(input,  numToSkip,  available,  numToSkip);	  if(skipped    >    available)    {    break;    }    if(skipped    >    available)    {    break;    System.arraycopy(input,    numToSkip,    available,    numToSkip);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	200	None	replace
1004	[BUG]  [BUGGY]  if(available  >  skip)  {  break;  }  else  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  numToSkip);  }  [CE]  cannot  find  symbol  skip  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skip)  {  break;  }  else  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  numToSkip);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skip)  {  break;  }  else  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  numToSkip);  }	  if(skipped    >    available)    {    break;    }    if(skipped    >    available)    {    break;    System.arraycopy(input,    numToSkip,    available,    numToSkip);    }    	non-compiled	[CE]  cannot  find  symbol  skip	200	None	replace
1005	[BUG]  [BUGGY]  if(available  >  skipped)  {  break;  }  else  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  numToSkip);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  break;  }  else  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  numToSkip);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skipped)  {  break;  }  else  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  numToSkip);  }	  if(skipped    >    available)    {    break;    }    if(skipped    >    available)    {    break;    System.arraycopy(input,    numToSkip,    available,    numToSkip);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	200	None	replace
1006	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Missing  input: "  +  input.getName(),  skipped);  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Missing  input: "  +  input.getName(),  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "Missing  input: "  +  input.getName(),  skipped);	  throw    new    IllegalStateException(   "Missing    input:   "    +    input.getName());    	non-compiled	[CE]  cannot  find  symbol	244	None	replace
1007	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Missing  input: "  +  input.getName());  [CE]  <identifier>  expected  [FE]                IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Missing  input: "  +  input.getName());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	Throwables.throw  new  IllegalStateException( "Missing  input: "  +  input.getName());	  throw    new    IllegalStateException(   "Missing    input:   "    +    input.getName());    	non-compiled	[CE]  <identifier>  expected	244	None	replace
1008	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                  IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Missing  input: "  +  input.toString());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalStateException( "Missing  input: "  +  input.toString());	  throw    new    IllegalStateException(   "Missing    input:   "    +    input.getName());    	compilable	  [FE]  IllegalStateException  	244	2	replace
1009	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Missing  input: "  +  input.toString());  [FE]  IllegalStateException  [FE]                  IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Missing  input: "  +  input.toString());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "Missing  input: "  +  input.toString());	  throw    new    IllegalStateException(   "Missing    input:   "    +    input.getName());    	compilable	  [FE]  IllegalStateException  	244	2	replace
1010	[BUG]  [BUGGY]  Throwables.log( "Missing  input: "  +  input.getName());  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  Throwables.log( "Missing  input: "  +  input.getName());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	Throwables.log( "Missing  input: "  +  input.getName());	  throw    new    IllegalStateException(   "Missing    input:   "    +    input.getName());    	non-compiled	[CE]  cannot  find  symbol	244	None	replace
1011	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalArgumentException( " "  +  available);	  throw    new    IllegalArgumentException(   "   "    +    skipped);    	compilable	  [FE]  IllegalArgumentException  	170	2	replace
1012	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  available);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException( " "  +  available);	  throw    new    IllegalArgumentException(   "   "    +    skipped);    	compilable	  [FE]  IllegalArgumentException  	170	2	replace
1013	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalArgumentException( " "  +  numToSkip);	  throw    new    IllegalArgumentException(   "   "    +    skipped);    	compilable	  [FE]  IllegalArgumentException  	170	2	replace
1014	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  numToSkip);  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException( " "  +  numToSkip);	  throw    new    IllegalArgumentException(   "   "    +    skipped);    	compilable	  [FE]  IllegalArgumentException  	170	2	replace
1015	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Skip  skipped  ' "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalArgumentException( "Skip  skipped  ' "  +  skipped);	  throw    new    IllegalArgumentException(   "   "    +    skipped);    	compilable	  [FE]  IllegalArgumentException  	170	2	replace
1016	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Skip  skipped  ' "  +  skipped);  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Skip  skipped  ' "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException( "Skip  skipped  ' "  +  skipped);	  throw    new    IllegalArgumentException(   "   "    +    skipped);    	compilable	  [FE]  IllegalArgumentException  	170	2	replace
1017	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Skip  skipped:   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalArgumentException( "Skip  skipped:   "  +  skipped);	  throw    new    IllegalArgumentException(   "   "    +    skipped);    	compilable	  [FE]  IllegalArgumentException  	170	2	replace
1018	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Skip  skipped:   "  +  skipped);  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Skip  skipped:   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException( "Skip  skipped:   "  +  skipped);	  throw    new    IllegalArgumentException(   "   "    +    skipped);    	compilable	  [FE]  IllegalArgumentException  	170	2	replace
1019	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Invalid  skipped: "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalArgumentException( "Invalid  skipped: "  +  skipped);	  throw    new    IllegalArgumentException(   "   "    +    skipped);    	compilable	  [FE]  IllegalArgumentException  	170	2	replace
1020	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Invalid  skipped: "  +  skipped);  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Invalid  skipped: "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException( "Invalid  skipped: "  +  skipped);	  throw    new    IllegalArgumentException(   "   "    +    skipped);    	compilable	  [FE]  IllegalArgumentException  	170	2	replace
1021	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  <  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >=        0)        {        break;        }        if(skipped    <    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  <  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	43	2	add
1022	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  <  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  <  0)  {  break;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  <  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped    <    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  <  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	43	2	add
1023	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  <  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  <  0)  {  break;  }  if(skipped  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >=        0)        {        break;        }        if(skipped    <    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  <  0)  {  break;  }  if(skipped  <  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	43	2	add
1024	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  <  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  <  0)  {  break;  }  if(skipped  <  0)  {  break;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  <  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  <  0)  {  break;  }  if(skipped  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped    <    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  <  0)  {  break;  }  if(skipped  <  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	43	2	add
1025	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  <  0)  {  break;  }  if(skipped  >>  0)  {  break;  }  if(skipped  <  0)  {  break;  }  [CE]  incompatible  types  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  <  0)  {  break;  }  if(skipped  >>  0)  {  break;  }  if(skipped  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped    <    0)    {    break;    }    if(skipped  >>  0)  {  break;  }  if(skipped  <  0)  {  break;  }	  	non-compiled	[CE]  incompatible  types	43	None	add
1026	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  <  0)  {  break;  }  if(skipped!=  0)  {  break;  }  if(skipped  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >=        0)        {        break;        }        if(skipped    <    0)    {    break;    }    if(skipped!=  0)  {  break;  }  if(skipped  <  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	43	2	add
1027	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  <  0)  {  break;  }  if(skipped!=  0)  {  break;  }  if(skipped  <  0)  {  break;  }  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  <  0)  {  break;  }  if(skipped!=  0)  {  break;  }  if(skipped  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped    <    0)    {    break;    }    if(skipped!=  0)  {  break;  }  if(skipped  <  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	43	2	add
1028	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  <  0)  {  break;  }  if(skipped  ==  0)  {  break;  }  if(skipped  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >=        0)        {        break;        }        if(skipped    <    0)    {    break;    }    if(skipped  ==  0)  {  break;  }  if(skipped  <  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	43	2	add
1029	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  <  0)  {  break;  }  if(skipped  ==  0)  {  break;  }  if(skipped  <  0)  {  break;  }  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  <  0)  {  break;  }  if(skipped  ==  0)  {  break;  }  if(skipped  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped    <    0)    {    break;    }    if(skipped  ==  0)  {  break;  }  if(skipped  <  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	43	2	add
1030	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  <  0)  {  break;  }  if(skipped  <  0)  {  break;  }  if(skipped  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >=        0)        {        break;        }        if(skipped    <    0)    {    break;    }    if(skipped  <  0)  {  break;  }  if(skipped  <  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	43	2	add
1031	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  <  0)  {  break;  }  if(skipped  <  0)  {  break;  }  if(skipped  <  0)  {  break;  }  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  <  0)  {  break;  }  if(skipped  <  0)  {  break;  }  if(skipped  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped    <    0)    {    break;    }    if(skipped  <  0)  {  break;  }  if(skipped  <  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	43	2	add
1032	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  <  0)  {  break;  }  if(skipped  >>  0)  {  break;  }  if(skipped  <  0)  {  break;  }  if(skipped  <  0)  {  break;  }  [CE]  incompatible  types  [FE]                AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  <  0)  {  break;  }  if(skipped  >>  0)  {  break;  }  if(skipped  <  0)  {  break;  }  if(skipped  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped    <    0)    {    break;    }    if(skipped  >>  0)  {  break;  }  if(skipped  <  0)  {  break;  }  if(skipped  <  0)  {  break;  }	  	non-compiled	[CE]  incompatible  types	43	None	add
1033	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  numToSkip)  {  break;  }  if(skipped  <  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  numToSkip)  {  break;  }  if(skipped  <  available)  {  break;  }	  if(skipped    >    available)    {    break;    }    if(skipped    <    available)    {    break;    }    	compilable	  [FE]  AssertionError  	88	2	replace
1034	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  break;  }  if(skipped  <  available)  {  break;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  numToSkip)  {  break;  }  if(skipped  <  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  numToSkip)  {  break;  }  if(skipped  <  available)  {  break;  }	  if(skipped    >    available)    {    break;    }    if(skipped    <    available)    {    break;    }    	compilable	  [FE]  AssertionError  	88	2	replace
1035	[BUG]  [BUGGY]  timeout  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  numToSkip)  {  break;  }	  if(skipped    >    available)    {    break;    }    if(skipped    <    available)    {    break;    }    	compilable	timeout	88	1	replace
1036	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  break;  }  timeout  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  numToSkip)  {  break;  }	  if(skipped    >    available)    {    break;    }    if(skipped    <    available)    {    break;    }    	compilable	timeout	88	1	replace
1037	[BUG]  [BUGGY]  while(available  >  skipped)  {  if(skipped  <  available)  {  break;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  skipped)  {  if(skipped  <  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  skipped)  {  if(skipped  <  available)  {  break;  }	  if(skipped    >    available)    {    break;    }    if(skipped    <    available)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
1038	[BUG]  [BUGGY]  throw  new  IllegalStateException( "   ".equals(available)+  skipped);  [CE]  bad  operand  types  for  binary  operator  [FE]        IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "   ".equals(available)+  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "   ".equals(available)+  skipped);	  throw    new    IllegalStateException(   "   ".equals(available));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  	240	None	replace
1039	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ").equals(available));  [CE]  <identifier>  expected  [FE]          IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ").equals(available));  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	Throwables.throw  new  IllegalStateException( " ").equals(available));	  throw    new    IllegalStateException(   "   ".equals(available));    	non-compiled	[CE]  <identifier>  expected	240	None	replace
1040	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(available));  [CE]  <identifier>  expected  [FE]            IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(available));  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	Throwables.throw  new  IllegalStateException( " ".equals(available));	  throw    new    IllegalStateException(   "   ".equals(available));    	non-compiled	[CE]  <identifier>  expected	240	None	replace
1041	[BUG]  [BUGGY]  throw  new  IllegalStateException( "   ".equals(available)+  skipd);  [CE]  cannot  find  symbol  skipd  [FE]              IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "   ".equals(available)+  skipd);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "   ".equals(available)+  skipd);	  throw    new    IllegalStateException(   "   ".equals(available));    	non-compiled	[CE]  cannot  find  symbol  skipd	240	None	replace
1042	[BUG]  [BUGGY]  while(available  >  0)  {  available  =  input.read(skipped);  if(available  >  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  available  =  input.read(skipped);  if(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  available  =  input.read(skipped);  if(available  >  0)  {  break;  }	  if(available    >    0)    {    break;    }    int    available    =    input.read(skipped);    if(available    >    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	207	None	replace
1043	[BUG]  [BUGGY]  while(available  <  0)  {  available  =  input.read(skipped);  if(available  >  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  <  0)  {  available  =  input.read(skipped);  if(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  <  0)  {  available  =  input.read(skipped);  if(available  >  0)  {  break;  }	  if(available    >    0)    {    break;    }    int    available    =    input.read(skipped);    if(available    >    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	207	None	replace
1044	[BUG]  [BUGGY]  while(available  >  0)  {  available  =  input.read(skipped);  if(available  <  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  available  =  input.read(skipped);  if(available  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  available  =  input.read(skipped);  if(available  <  0)  {  break;  }	  if(available    >    0)    {    break;    }    int    available    =    input.read(skipped);    if(available    >    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	207	None	replace
1045	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  break;  }  available  =  input.read(skipped);  if(available  >  0)  {  break;  }  [CE]  no  suitable  method  found  for  read(long)  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(numToSkip  >  0)  {  break;  }  available  =  input.read(skipped);  if(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(numToSkip  >  0)  {  break;  }  available  =  input.read(skipped);  if(available  >  0)  {  break;  }	  if(available    >    0)    {    break;    }    int    available    =    input.read(skipped);    if(available    >    0)    {    break;    }    	non-compiled	[CE]  no  suitable  method  found  for  read(long)	207	None	replace
1046	[BUG]  [BUGGY]  if(available  >  0)  {  break;  }  available  =  input.read(skipped);  if(available  >  0)  {  break;  }  [CE]  no  suitable  method  found  for  read(long)  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  break;  }  available  =  input.read(skipped);  if(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  break;  }  available  =  input.read(skipped);  if(available  >  0)  {  break;  }	  if(available    >    0)    {    break;    }    int    available    =    input.read(skipped);    if(available    >    0)    {    break;    }    	non-compiled	[CE]  no  suitable  method  found  for  read(long)	207	None	replace
1047	[BUG]  [BUGGY]  while(available  >  0)  {  available  =  input.read(skipped);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  available  =  input.read(skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  available  =  input.read(skipped);	  if(available    >    0)    {    break;    }    int    available    =    input.read(skipped);    if(available    >    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	207	None	replace
1048	[BUG]  [BUGGY]  while(available  >  0)  {  available  =  input.read(skipped);  if(available  >=  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  available  =  input.read(skipped);  if(available  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  available  =  input.read(skipped);  if(available  >=  0)  {  break;  }	  if(available    >    0)    {    break;    }    int    available    =    input.read(skipped);    if(available    >    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	207	None	replace
1049	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
1050	[BUG]  [BUGGY]  pendingFor(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [CE]  '.class'  expected  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  pendingFor(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	pendingFor(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.next();    }    	non-compiled	[CE]  '.class'  expected	154	None	replace
1051	[BUG]  [BUGGY]  while(available  >  0)  {  available  +=  input.next();  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  available  +=  input.next();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  available  +=  input.next();	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
1052	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
1053	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  available.size();  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  available.size();  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  available.size();  i  <  numToSkip;  i++)  {  available  +=  input.next();  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
1054	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  available.length;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  available.length;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  available.length;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
1055	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getRawOffset();  }  [CE]  illegal  start  of  expression  [FE]                                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getRawOffset();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getRawOffset();  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
1056	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }	  continue;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	190	None	replace
1057	[BUG]  [BUGGY]  if(skipped  >  0)  {  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  }	  continue;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	190	None	replace
1058	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skip  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skip  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }	  continue;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	190	None	replace
1059	[BUG]  [BUGGY]  if(skipped  >  0)  {  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }	  continue;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	190	None	replace
1060	[BUG]  [BUGGY]  if(skipped  >  0)  {  int  available  =  0;  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  int  available  =  0;  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  int  available  =  0;  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }	  continue;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	190	None	replace
1061	[BUG]  [BUGGY]  if(skipped  >  0)  {  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  unavailable  +=  input.getLength();  }  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  unavailable  +=  input.getLength();  }  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  unavailable  +=  input.getLength();  }  }	  continue;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	190	None	replace
1062	[BUG]  [BUGGY]  if(skipped  >  0)  {  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  skipped.getLength();  }  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  skipped.getLength();  }  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  skipped.getLength();  }  }	  continue;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	190	None	replace
1063	[BUG]  [BUGGY]  throw  new  IOException( "   "  +  input.getMillis(),  skipped);  [CE]  cannot  find  symbol  [FE]        IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "   "  +  input.getMillis(),  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( "   "  +  input.getMillis(),  skipped);	  throw    new    IOException(   "   "    +    input.getMillis());    	non-compiled	[CE]  cannot  find  symbol	156	None	replace
1064	[BUG]  [BUGGY]  Throwables.throw  new  IOException( "   "  +  input.getMillis());  [CE]  <identifier>  expected  [FE]          IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  Throwables.throw  new  IOException( "   "  +  input.getMillis());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	Throwables.throw  new  IOException( "   "  +  input.getMillis());	  throw    new    IOException(   "   "    +    input.getMillis());    	non-compiled	[CE]  <identifier>  expected	156	None	replace
1065	[BUG]  [BUGGY]  [FE]  IOException  [FE]            IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "   "  +  input.toString());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IOException( "   "  +  input.toString());	  throw    new    IOException(   "   "    +    input.getMillis());    	compilable	  [FE]  IOException  	156	2	replace
1066	[BUG]  [BUGGY]  throw  new  IOException( "   "  +  input.toString());  [FE]  IOException  [FE]            IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "   "  +  input.toString());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( "   "  +  input.toString());	  throw    new    IOException(   "   "    +    input.getMillis());    	compilable	  [FE]  IOException  	156	2	replace
1067	[BUG]  [BUGGY]  throw  new  IOException( "'   "  +  input.getMillis());  [CE]  cannot  find  symbol  [FE]              IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "'   "  +  input.getMillis());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( "'   "  +  input.getMillis());	  throw    new    IOException(   "   "    +    input.getMillis());    	non-compiled	[CE]  cannot  find  symbol	156	None	replace
1068	[BUG]  [BUGGY]  throw  new  IOException( "   "  +  available.getMillis());  [CE]  long  cannot  be  dereferenced  [FE]                IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "   "  +  available.getMillis());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( "   "  +  available.getMillis());	  throw    new    IOException(   "   "    +    input.getMillis());    	non-compiled	[CE]  long  cannot  be  dereferenced	156	None	replace
1069	[BUG]  [BUGGY]  if(skipped  >  0)  {  break;  }  else  if(available  >  0)  {  break;  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  break;  }  else  if(available  >  0)  {  break;  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  break;  }  else  if(available  >  0)  {  break;  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  }	  if(available    >    0)    {    break;    }    if(available    >    0)    {    break;    System.arraycopy(input,    0,    available,    numToSkip,    skipped);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	209	None	replace
1070	[BUG]  [BUGGY]  if(skip  >  0)  {  break;  }  else  if(available  >  0)  {  break;  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  }  [CE]  cannot  find  symbol  skip  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skip  >  0)  {  break;  }  else  if(available  >  0)  {  break;  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skip  >  0)  {  break;  }  else  if(available  >  0)  {  break;  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  }	  if(available    >    0)    {    break;    }    if(available    >    0)    {    break;    System.arraycopy(input,    0,    available,    numToSkip,    skipped);    }    	non-compiled	[CE]  cannot  find  symbol  skip	209	None	replace
1071	[BUG]  [BUGGY]  if(skip  >  0)  {  break;  }  else  if(skipped  >  0)  {  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  }  [CE]  cannot  find  symbol  skip  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skip  >  0)  {  break;  }  else  if(skipped  >  0)  {  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skip  >  0)  {  break;  }  else  if(skipped  >  0)  {  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  }	  if(available    >    0)    {    break;    }    if(available    >    0)    {    break;    System.arraycopy(input,    0,    available,    numToSkip,    skipped);    }    	non-compiled	[CE]  cannot  find  symbol  skip	209	None	replace
1072	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  break;  }  else  if(available  >  0)  {  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(numToSkip  >  0)  {  break;  }  else  if(available  >  0)  {  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(numToSkip  >  0)  {  break;  }  else  if(available  >  0)  {  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  }	  if(available    >    0)    {    break;    }    if(available    >    0)    {    break;    System.arraycopy(input,    0,    available,    numToSkip,    skipped);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	209	None	replace
1073	[BUG]  [BUGGY]  if(available  >  0)  {  if(skipped  >  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  if(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  if(skipped  >  0)  {  break;  }	  if(skipped    >    0)    {    break;    }    if(skipped    >    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
1074	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  if(skipped  <  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  numToSkip)  {  if(skipped  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  numToSkip)  {  if(skipped  <  0)  {  break;  }	  if(skipped    >    0)    {    break;    }    if(skipped    >    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
1075	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  if(skipped  >=  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  numToSkip)  {  if(skipped  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  numToSkip)  {  if(skipped  >=  0)  {  break;  }	  if(skipped    >    0)    {    break;    }    if(skipped    >    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
1076	[BUG]  [BUGGY]  if(available  <  =  0)  {  if(sinkipped  >  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  =  0)  {  if(sinkipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  =  0)  {  if(sinkipped  >  0)  {  break;  }	  if(skipped    >    0)    {    break;    }    if(skipped    >    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
1077	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  continue;  }  if(skipped  >  0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped    >    0)    {    continue;    }    if(skipped  >  0)  {  continue;  }	  timeout    	compilable	  [FE]  AssertionError  	127	2	add
1078	[BUG]  [BUGGY]  if(skipped  >  0)  {  continue;  }  if(skipped  >  0)  {  continue;  }  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  continue;  }  if(skipped  >  0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    0)    {    continue;    }    if(skipped  >  0)  {  continue;  }	  timeout    	compilable	  [FE]  AssertionError  	127	2	add
1079	[BUG]  [BUGGY]  if(skipped  >  0)  {  continue;  }  if(skipped  >  0)  {  continue;  System.arraycopy(input,  numToSkip,  available,  numToSkip);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  continue;  }  if(skipped  >  0)  {  continue;  System.arraycopy(input,  numToSkip,  available,  numToSkip);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    0)    {    continue;    }    if(skipped  >  0)  {  continue;  System.arraycopy(input,  numToSkip,  available,  numToSkip);  }	  timeout    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	127	None	add
1080	[BUG]  [BUGGY]  if(skipped  >  0)  {  continue;  }  if(skipped  >  0)  {  continue;  System.arraycopy(numToSkip,  available,  numToSkip,  skipped);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  continue;  }  if(skipped  >  0)  {  continue;  System.arraycopy(numToSkip,  available,  numToSkip,  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    0)    {    continue;    }    if(skipped  >  0)  {  continue;  System.arraycopy(numToSkip,  available,  numToSkip,  skipped);  }	  timeout    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	127	None	add
1081	[BUG]  [BUGGY]  if(skipped  >  0)  {  continue;  }  if(skipped  >  0)  {  continue;  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  continue;  }  if(skipped  >  0)  {  continue;  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    0)    {    continue;    }    if(skipped  >  0)  {  continue;  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  }	  timeout    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	127	None	add
1082	[BUG]  [BUGGY]  if(skipped  >  0)  {  continue;  }  if(skipped  >  0)  {  continue;  System.arraycopy(input,  numToSkip,  available,  skipped);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  continue;  }  if(skipped  >  0)  {  continue;  System.arraycopy(input,  numToSkip,  available,  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    0)    {    continue;    }    if(skipped  >  0)  {  continue;  System.arraycopy(input,  numToSkip,  available,  skipped);  }	  timeout    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	127	None	add
1083	[BUG]  [BUGGY]  if(skipped  >  0)  {  continue;  }  if(skipped  >  0)  {  continue;  System.arraycopy(input,  numToSkip,  available,  numToSkip);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  continue;  }  if(skipped  >  0)  {  continue;  System.arraycopy(input,  numToSkip,  available,  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    0)    {    continue;    }    if(skipped  >  0)  {  continue;  System.arraycopy(input,  numToSkip,  available,  numToSkip);	  timeout    	non-compiled	[CE]  illegal  start  of  expression	127	None	add
1084	[BUG]  [BUGGY]  if(skipped  >  0)  {  continue;  }  if(skipped  >  0)  {  continue;  System.arraycopy(input,  available,  numToSkip,  skipped);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  continue;  }  if(skipped  >  0)  {  continue;  System.arraycopy(input,  available,  numToSkip,  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    0)    {    continue;    }    if(skipped  >  0)  {  continue;  System.arraycopy(input,  available,  numToSkip,  skipped);  }	  timeout    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	127	None	add
1085	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "InputStream  is  less  than  1:   "  +  input.getClass());  throw  new  IllegalStateException(   "InputStream  is  less  than  1:   "  +  input.getClass());  [CE]  unreachable  statement  [FE]    IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "InputStream  is  less  than  1:   "  +  input.getClass());  throw  new  IllegalStateException(   "InputStream  is  less  than  1:   "  +  input.getClass());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalStateException(   "InputStream    is    less    than    1:   "    +    input.getClass());    throw  new  IllegalStateException(   "InputStream  is  less  than  1:   "  +  input.getClass());	  	non-compiled	[CE]  unreachable  statement	241	None	add
1086	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "InputStream  is  less  than  1:   "  +  input.getClass());  Throw  new  IllegalStateException(   "InputStream  is  less  than  1:   "  +  input.getClass());  [CE]  not  a  statement  [FE]      IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "InputStream  is  less  than  1:   "  +  input.getClass());  Throw  new  IllegalStateException(   "InputStream  is  less  than  1:   "  +  input.getClass());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalStateException(   "InputStream    is    less    than    1:   "    +    input.getClass());    Throw  new  IllegalStateException(   "InputStream  is  less  than  1:   "  +  input.getClass());	  	non-compiled	[CE]  not  a  statement	241	None	add
1087	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "InputStream  is  less  than  1:   "  +  input.getClass());  new  IllegalStateException(   "InputStream  is  less  than  1:   "  +  input.getClass());  [CE]  unreachable  statement  [FE]        IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "InputStream  is  less  than  1:   "  +  input.getClass());  new  IllegalStateException(   "InputStream  is  less  than  1:   "  +  input.getClass());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalStateException(   "InputStream    is    less    than    1:   "    +    input.getClass());    new  IllegalStateException(   "InputStream  is  less  than  1:   "  +  input.getClass());	  	non-compiled	[CE]  unreachable  statement	241	None	add
1088	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "InputStream  is  less  than  1:   "  +  input.getClass());  IllegalStateException(   "InputStream  is  less  than  1:   "  +  input.getClass());  [CE]  cannot  find  symbol  [FE]          IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "InputStream  is  less  than  1:   "  +  input.getClass());  IllegalStateException(   "InputStream  is  less  than  1:   "  +  input.getClass());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalStateException(   "InputStream    is    less    than    1:   "    +    input.getClass());    IllegalStateException(   "InputStream  is  less  than  1:   "  +  input.getClass());	  	non-compiled	[CE]  cannot  find  symbol	241	None	add
1089	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( " ");  [CE]  not  a  statement  [FE]          IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  Throw  new  IllegalArgumentException( " ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	Throw  new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(       "       ");    Throw    new    IllegalArgumentException(       "       ");    	non-compiled	[CE]  not  a  statement	6	None	replace
1090	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".longValue());  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " ".longValue());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException( " ".longValue());	  throw    new    IllegalArgumentException(       "       ");    Throw    new    IllegalArgumentException(       "       ");    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
1091	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >=  numToSkip)  {  break;  }  if(available  >=  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available    >=    numToSkip)    {    break;    }    if(available  >=  numToSkip)  {  break;  }	  	compilable	  [FE]  AssertionError  	185	2	add
1092	[BUG]  [BUGGY]  if(available  >=  numToSkip)  {  break;  }  if(available  >=  numToSkip)  {  break;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >=  numToSkip)  {  break;  }  if(available  >=  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >=    numToSkip)    {    break;    }    if(available  >=  numToSkip)  {  break;  }	  	compilable	  [FE]  AssertionError  	185	2	add
1093	[BUG]  [BUGGY]  if(available  >=  numToSkip)  {  break;  }  if(available  >>  numToSkip)  {  break;  }  [CE]  incompatible  types  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >=  numToSkip)  {  break;  }  if(available  >>  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >=    numToSkip)    {    break;    }    if(available  >>  numToSkip)  {  break;  }	  	non-compiled	[CE]  incompatible  types	185	None	add
1094	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >=  numToSkip)  {  break;  }  if(available!=  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available    >=    numToSkip)    {    break;    }    if(available!=  numToSkip)  {  break;  }	  	compilable	  [FE]  AssertionError  	185	2	add
1095	[BUG]  [BUGGY]  if(available  >=  numToSkip)  {  break;  }  if(available!=  numToSkip)  {  break;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >=  numToSkip)  {  break;  }  if(available!=  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >=    numToSkip)    {    break;    }    if(available!=  numToSkip)  {  break;  }	  	compilable	  [FE]  AssertionError  	185	2	add
1096	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >=  numToSkip)  {  break;  }  if(available  ==  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available    >=    numToSkip)    {    break;    }    if(available  ==  numToSkip)  {  break;  }	  	compilable	  [FE]  AssertionError  	185	2	add
1097	[BUG]  [BUGGY]  if(available  >=  numToSkip)  {  break;  }  if(available  ==  numToSkip)  {  break;  }  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >=  numToSkip)  {  break;  }  if(available  ==  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >=    numToSkip)    {    break;    }    if(available  ==  numToSkip)  {  break;  }	  	compilable	  [FE]  AssertionError  	185	2	add
1098	[BUG]  [BUGGY]  if(available  >=  numToSkip)  {  break;  }  If(available  >=  numToSkip)  {  break;  }  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >=  numToSkip)  {  break;  }  If(available  >=  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >=    numToSkip)    {    break;    }    If(available  >=  numToSkip)  {  break;  }	  	non-compiled	[CE]  ';'  expected	185	None	add
1099	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >=  numToSkip)  {  break;  }  if(available  <  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available    >=    numToSkip)    {    break;    }    if(available  <  numToSkip)  {  break;  }	  	compilable	  [FE]  AssertionError  	185	2	add
1100	[BUG]  [BUGGY]  if(available  >=  numToSkip)  {  break;  }  if(available  <  numToSkip)  {  break;  }  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >=  numToSkip)  {  break;  }  if(available  <  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >=    numToSkip)    {    break;    }    if(available  <  numToSkip)  {  break;  }	  	compilable	  [FE]  AssertionError  	185	2	add
1101	[BUG]  [BUGGY]  if(available  >=  numToSkip)  {  break;  }  if(available  [Delete]  numToSkip)  {  break;  }  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >=  numToSkip)  {  break;  }  if(available  [Delete]  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >=    numToSkip)    {    break;    }    if(available  [Delete]  numToSkip)  {  break;  }	  	non-compiled	[CE]  ')'  expected	185	None	add
1102	[BUG]  [BUGGY]  int  skipped  =  input.skip(available  /  numToSkip);  [CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  int  skipped  =  input.skip(available  /  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	int  skipped  =  input.skip(available  /  numToSkip);	  int    skipped    =    input.skip(available    +    numToSkip);    	non-compiled	[CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)	212	None	replace
1103	[BUG]  [BUGGY]  int  skipped  =  input.skip(available  +  numToSkip,  skipped);  [CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  int  skipped  =  input.skip(available  +  numToSkip,  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	int  skipped  =  input.skip(available  +  numToSkip,  skipped);	  int    skipped    =    input.skip(available    +    numToSkip);    	non-compiled	[CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)	212	None	replace
1104	[BUG]  [BUGGY]  int  skipped  =  input.skip(available  *  numToSkip);  [CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  int  skipped  =  input.skip(available  *  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	int  skipped  =  input.skip(available  *  numToSkip);	  int    skipped    =    input.skip(available    +    numToSkip);    	non-compiled	[CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)	212	None	replace
1105	[BUG]  [BUGGY]  long  skipped  =  input.skip(available  +  numToSkip);  [CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  long  skipped  =  input.skip(available  +  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	long  skipped  =  input.skip(available  +  numToSkip);	  int    skipped    =    input.skip(available    +    numToSkip);    	non-compiled	[CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)	212	None	replace
1106	[BUG]  [BUGGY]  int  skipped  =  input.skip(available  +  numToSkip,  skip);  [CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  int  skipped  =  input.skip(available  +  numToSkip,  skip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	int  skipped  =  input.skip(available  +  numToSkip,  skip);	  int    skipped    =    input.skip(available    +    numToSkip);    	non-compiled	[CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)	212	None	replace
1107	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  +  numToSkip);  numToSkip  =  input.skip(available  +  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped    =    input.skip(available    +    numToSkip);    numToSkip  =  input.skip(available  +  numToSkip);	  timeout    	compilable	  [FE]  AssertionError  	59	2	add
1108	[BUG]  [BUGGY]  skipped  =  input.skip(available  +  numToSkip);  numToSkip  =  input.skip(available  +  numToSkip);  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  +  numToSkip);  numToSkip  =  input.skip(available  +  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    +    numToSkip);    numToSkip  =  input.skip(available  +  numToSkip);	  timeout    	compilable	  [FE]  AssertionError  	59	2	add
1109	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  +  numToSkip);  skipped  =  input.skip(available  +  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped    =    input.skip(available    +    numToSkip);    skipped  =  input.skip(available  +  numToSkip);	  timeout    	compilable	  [FE]  AssertionError  	59	2	add
1110	[BUG]  [BUGGY]  skipped  =  input.skip(available  +  numToSkip);  skipped  =  input.skip(available  +  numToSkip);  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  +  numToSkip);  skipped  =  input.skip(available  +  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    +    numToSkip);    skipped  =  input.skip(available  +  numToSkip);	  timeout    	compilable	  [FE]  AssertionError  	59	2	add
1111	[BUG]  [BUGGY]  skipped  =  input.skip(available  +  numToSkip);  long  skipped  =  input.skip(available  +  numToSkip);  [CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  +  numToSkip);  long  skipped  =  input.skip(available  +  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    +    numToSkip);    long  skipped  =  input.skip(available  +  numToSkip);	  timeout    	non-compiled	[CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)	59	None	add
1112	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  +  numToSkip);  if(available  >  numToSkip)  {  skipped  =  input.skip(available  +  numToSkip);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped    =    input.skip(available    +    numToSkip);    if(available  >  numToSkip)  {  skipped  =  input.skip(available  +  numToSkip);  }	  timeout    	compilable	  [FE]  AssertionError  	59	2	add
1113	[BUG]  [BUGGY]  skipped  =  input.skip(available  +  numToSkip);  if(available  >  numToSkip)  {  skipped  =  input.skip(available  +  numToSkip);  }  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  +  numToSkip);  if(available  >  numToSkip)  {  skipped  =  input.skip(available  +  numToSkip);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    +    numToSkip);    if(available  >  numToSkip)  {  skipped  =  input.skip(available  +  numToSkip);  }	  timeout    	compilable	  [FE]  AssertionError  	59	2	add
1114	[BUG]  [BUGGY]  skipped  =  input.skip(available  +  numToSkip);  if(available  >  numToSkip)  {  skip  =  input.skip(available  +  numToSkip);  }  [CE]  cannot  find  symbol  skip  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  +  numToSkip);  if(available  >  numToSkip)  {  skip  =  input.skip(available  +  numToSkip);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    +    numToSkip);    if(available  >  numToSkip)  {  skip  =  input.skip(available  +  numToSkip);  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  skip	59	None	add
1115	[BUG]  [BUGGY]  skipped  =  input.skip(available  +  numToSkip);  int  numToSkip  =  available  +  numToSkip;  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  +  numToSkip);  int  numToSkip  =  available  +  numToSkip;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    +    numToSkip);    int  numToSkip  =  available  +  numToSkip;	  timeout    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	59	None	add
1116	[BUG]  [BUGGY]  skipped  =  input.skip(available  +  numToSkip);  int  numToSkip  =  input.length();  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  +  numToSkip);  int  numToSkip  =  input.length();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    +    numToSkip);    int  numToSkip  =  input.length();	  timeout    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	59	None	add
1117	[BUG]  [BUGGY]  skipped  =  input.skip(available  +  numToSkip);  int  numToSkip  =  available  +  numToSkip;  skipped  =  input.skip(available  +  numToSkip);  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  +  numToSkip);  int  numToSkip  =  available  +  numToSkip;  skipped  =  input.skip(available  +  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    +    numToSkip);    int  numToSkip  =  available  +  numToSkip;  skipped  =  input.skip(available  +  numToSkip);	  timeout    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	59	None	add
1118	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.read();  }  [CE]  possible  loss  of  precision  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.read();  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  possible  loss  of  precision	225	None	replace
1119	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.read();  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	225	None	replace
1120	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  ++i)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  ++i)  {  available  +=  input.read();  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	225	None	replace
1121	[BUG]  [BUGGY]  long  available  =  numToSkip  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.read();  }  [CE]  ';'  expected  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  long  available  =  numToSkip  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	long  available  =  numToSkip  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.read();  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  ';'  expected	225	None	replace
1122	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  0;  ++i)  {  available  +=  input.read();  }  [CE]  possible  loss  of  precision  [FE]                                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  available;  i  <  0;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  available;  i  <  0;  ++i)  {  available  +=  input.read();  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  possible  loss  of  precision	225	None	replace
1123	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  skipped;  ++i)  {  available  +=  input.read();  }  [CE]  possible  loss  of  precision  [FE]                                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  available;  i  <  skipped;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  available;  i  <  skipped;  ++i)  {  available  +=  input.read();  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  possible  loss  of  precision	225	None	replace
1124	[BUG]  [BUGGY]  if(available  <  =  numToSkip)  {  if(skipped  >  available)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  =  numToSkip)  {  if(skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  =  numToSkip)  {  if(skipped  >  available)  {  break;  }	  if(skipped    >    available)    {    break;    }    if(skipped    >    available)    {    break;    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
1125	[BUG]  [BUGGY]  if(available  >=  numToSkip)  {  if(skipped  >  available)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >=  numToSkip)  {  if(skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >=  numToSkip)  {  if(skipped  >  available)  {  break;  }	  if(skipped    >    available)    {    break;    }    if(skipped    >    available)    {    break;    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
1126	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Skipped  =   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IOException( "Skipped  =   "  +  available);	  throw    new    IOException(   "skipped    =       "    +    available);    	compilable	  [FE]  IOException  	158	2	replace
1127	[BUG]  [BUGGY]  throw  new  IOException( "Skipped  =   "  +  available);  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Skipped  =   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( "Skipped  =   "  +  available);	  throw    new    IOException(   "skipped    =       "    +    available);    	compilable	  [FE]  IOException  	158	2	replace
1128	[BUG]  [BUGGY]  [FE]  IOException  [FE]      IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "skipped  =   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IOException( "skipped  =   "  +  skipped);	  throw    new    IOException(   "skipped    =       "    +    available);    	compilable	  [FE]  IOException  	158	2	replace
1129	[BUG]  [BUGGY]  throw  new  IOException( "skipped  =   "  +  skipped);  [FE]  IOException  [FE]      IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "skipped  =   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( "skipped  =   "  +  skipped);	  throw    new    IOException(   "skipped    =       "    +    available);    	compilable	  [FE]  IOException  	158	2	replace
1130	[BUG]  [BUGGY]  [FE]  IOException  [FE]        IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Skip  =   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IOException( "Skip  =   "  +  available);	  throw    new    IOException(   "skipped    =       "    +    available);    	compilable	  [FE]  IOException  	158	2	replace
1131	[BUG]  [BUGGY]  throw  new  IOException( "Skip  =   "  +  available);  [FE]  IOException  [FE]        IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Skip  =   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( "Skip  =   "  +  available);	  throw    new    IOException(   "skipped    =       "    +    available);    	compilable	  [FE]  IOException  	158	2	replace
1132	[BUG]  [BUGGY]  [FE]  IOException  [FE]          IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Skipped  =   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IOException( "Skipped  =   "  +  skipped);	  throw    new    IOException(   "skipped    =       "    +    available);    	compilable	  [FE]  IOException  	158	2	replace
1133	[BUG]  [BUGGY]  throw  new  IOException( "Skipped  =   "  +  skipped);  [FE]  IOException  [FE]          IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Skipped  =   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( "Skipped  =   "  +  skipped);	  throw    new    IOException(   "skipped    =       "    +    available);    	compilable	  [FE]  IOException  	158	2	replace
1134	[BUG]  [BUGGY]  [FE]  IOException  [FE]            IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Should  have  been  skipped:   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IOException( "Should  have  been  skipped:   "  +  available);	  throw    new    IOException(   "skipped    =       "    +    available);    	compilable	  [FE]  IOException  	158	2	replace
1135	[BUG]  [BUGGY]  throw  new  IOException( "Should  have  been  skipped:   "  +  available);  [FE]  IOException  [FE]            IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Should  have  been  skipped:   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( "Should  have  been  skipped:   "  +  available);	  throw    new    IOException(   "skipped    =       "    +    available);    	compilable	  [FE]  IOException  	158	2	replace
1136	[BUG]  [BUGGY]  [FE]  IOException  [FE]              IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Skipping  =   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IOException( "Skipping  =   "  +  available);	  throw    new    IOException(   "skipped    =       "    +    available);    	compilable	  [FE]  IOException  	158	2	replace
1137	[BUG]  [BUGGY]  throw  new  IOException( "Skipping  =   "  +  available);  [FE]  IOException  [FE]              IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Skipping  =   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( "Skipping  =   "  +  available);	  throw    new    IOException(   "skipped    =       "    +    available);    	compilable	  [FE]  IOException  	158	2	replace
1138	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Skip  is  less  than  1: "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalArgumentException( "Skip  is  less  than  1: "  +  available);	  throw    new    IllegalArgumentException(   "   ".equals(available);    	compilable	  [FE]  IllegalArgumentException  	239	2	replace
1139	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Skip  is  less  than  1: "  +  available);  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Skip  is  less  than  1: "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException( "Skip  is  less  than  1: "  +  available);	  throw    new    IllegalArgumentException(   "   ".equals(available);    	compilable	  [FE]  IllegalArgumentException  	239	2	replace
1140	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Skip  is  less  than  available: "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalArgumentException( "Skip  is  less  than  available: "  +  available);	  throw    new    IllegalArgumentException(   "   ".equals(available);    	compilable	  [FE]  IllegalArgumentException  	239	2	replace
1141	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Skip  is  less  than  available: "  +  available);  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Skip  is  less  than  available: "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException( "Skip  is  less  than  available: "  +  available);	  throw    new    IllegalArgumentException(   "   ".equals(available);    	compilable	  [FE]  IllegalArgumentException  	239	2	replace
1142	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Skip  ' "  +  available.getMillis()  + "'  has  side  effects  and  can  not  be  skipped. ");  [CE]  long  cannot  be  dereferenced  [FE]            IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Skip  ' "  +  available.getMillis()  + "'  has  side  effects  and  can  not  be  skipped. ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException( "Skip  ' "  +  available.getMillis()  + "'  has  side  effects  and  can  not  be  skipped. ");	  throw    new    IllegalArgumentException(   "   ".equals(available);    	non-compiled	[CE]  long  cannot  be  dereferenced	239	None	replace
1143	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Skip  is  less  than  available. ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalArgumentException( "Skip  is  less  than  available. ");	  throw    new    IllegalArgumentException(   "   ".equals(available);    	compilable	  [FE]  IllegalArgumentException  	239	2	replace
1144	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Skip  is  less  than  available. ");  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Skip  is  less  than  available. ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException( "Skip  is  less  than  available. ");	  throw    new    IllegalArgumentException(   "   ".equals(available);    	compilable	  [FE]  IllegalArgumentException  	239	2	replace
1145	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Skip  ' "  +  available.length  + "'  has  side  effects  and  can  not  be  skipped. ");  [CE]  long  cannot  be  dereferenced  [FE]                IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Skip  ' "  +  available.length  + "'  has  side  effects  and  can  not  be  skipped. ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException( "Skip  ' "  +  available.length  + "'  has  side  effects  and  can  not  be  skipped. ");	  throw    new    IllegalArgumentException(   "   ".equals(available);    	non-compiled	[CE]  long  cannot  be  dereferenced	239	None	replace
1146	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    available)    {    break;    }    while(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  while(skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >        available)        {        break;        }        while(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  }  while(skipped  >  available)  {  break;  }	  	compilable	  [FE]  AssertionError  	85	2	add
1147	[BUG]  [BUGGY]  if(skipped    >    available)    {    break;    }    while(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  while(skipped  >  available)  {  break;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    available)    {    break;    }    while(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  while(skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >        available)        {        break;        }        while(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  }  while(skipped  >  available)  {  break;  }	  	compilable	  [FE]  AssertionError  	85	2	add
1148	[BUG]  [BUGGY]  if(skipped    >    available)    {    break;    }    while(skipped  >  available)  {  break;  }  If(skipped  >  available)  {  break;  }  while(skipped  >  available)  {  break;  }  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    available)    {    break;    }    while(skipped  >  available)  {  break;  }  If(skipped  >  available)  {  break;  }  while(skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >        available)        {        break;        }        while(skipped    >    available)    {    break;    }    If(skipped  >  available)  {  break;  }  while(skipped  >  available)  {  break;  }	  	non-compiled	[CE]  ';'  expected	85	None	add
1149	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    available)    {    break;    }    while(skipped  >  available)  {  break;  }  if(skipped  <  available)  {  break;  }  while(skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >        available)        {        break;        }        while(skipped    >    available)    {    break;    }    if(skipped  <  available)  {  break;  }  while(skipped  >  available)  {  break;  }	  	compilable	  [FE]  AssertionError  	85	2	add
1150	[BUG]  [BUGGY]  if(skipped    >    available)    {    break;    }    while(skipped  >  available)  {  break;  }  if(skipped  <  available)  {  break;  }  while(skipped  >  available)  {  break;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    available)    {    break;    }    while(skipped  >  available)  {  break;  }  if(skipped  <  available)  {  break;  }  while(skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >        available)        {        break;        }        while(skipped    >    available)    {    break;    }    if(skipped  <  available)  {  break;  }  while(skipped  >  available)  {  break;  }	  	compilable	  [FE]  AssertionError  	85	2	add
1151	[BUG]  [BUGGY]  if(skipped    >    available)    {    break;    }    while(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  while(skipped  >  available)  {  break;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    available)    {    break;    }    while(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  while(skipped  >  available)  {  break;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >        available)        {        break;        }        while(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  }  while(skipped  >  available)  {  break;	  	non-compiled	[CE]  illegal  start  of  expression	85	None	add
1152	[BUG]  [BUGGY]  if(skipped    >    available)    {    break;    }    while(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  while(skipped  >  unavailable)  {  break;  }  [CE]  cannot  find  symbol  unavailable  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    available)    {    break;    }    while(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  while(skipped  >  unavailable)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >        available)        {        break;        }        while(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  }  while(skipped  >  unavailable)  {  break;  }	  	non-compiled	[CE]  cannot  find  symbol  unavailable	85	None	add
1153	[BUG]  [BUGGY]  if(available  >  skipped)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skipped)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }	  continue;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	196	None	replace
1154	[BUG]  [BUGGY]  if(skipped  >  0)  {  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  }	  continue;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	196	None	replace
1155	[BUG]  [BUGGY]  if(skipped  >  0)  {  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }	  continue;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	196	None	replace
1156	[BUG]  [BUGGY]  if(skipped  >  0)  {  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getValue();  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getValue();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getValue();  }	  continue;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	196	None	replace
1157	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( " "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalStateException( " "  +  available);	  throw    new    IllegalStateException(   "   "    +    skipped);    	compilable	  [FE]  IllegalStateException  	174	2	replace
1158	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  available);  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( " "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( " "  +  available);	  throw    new    IllegalStateException(   "   "    +    skipped);    	compilable	  [FE]  IllegalStateException  	174	2	replace
1159	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( " "  +  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalStateException( " "  +  numToSkip);	  throw    new    IllegalStateException(   "   "    +    skipped);    	compilable	  [FE]  IllegalStateException  	174	2	replace
1160	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  numToSkip);  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( " "  +  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( " "  +  numToSkip);	  throw    new    IllegalStateException(   "   "    +    skipped);    	compilable	  [FE]  IllegalStateException  	174	2	replace
1161	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Invalid  skipped: "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalStateException( "Invalid  skipped: "  +  skipped);	  throw    new    IllegalStateException(   "   "    +    skipped);    	compilable	  [FE]  IllegalStateException  	174	2	replace
1162	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Invalid  skipped: "  +  skipped);  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Invalid  skipped: "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "Invalid  skipped: "  +  skipped);	  throw    new    IllegalStateException(   "   "    +    skipped);    	compilable	  [FE]  IllegalStateException  	174	2	replace
1163	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  available  ||  skipped  >  numToSkip)  {  break;  }  if(skipped  >  available  ||  skipped  >  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped    >    available    ||    skipped    >    numToSkip)    {    break;    }    if(skipped  >  available  ||  skipped  >  numToSkip)  {  break;  }	  timeout    	compilable	  [FE]  AssertionError  	261	2	add
1164	[BUG]  [BUGGY]  if(skipped  >  available  ||  skipped  >  numToSkip)  {  break;  }  if(skipped  >  available  ||  skipped  >  numToSkip)  {  break;  }  [FE]  AssertionError  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  available  ||  skipped  >  numToSkip)  {  break;  }  if(skipped  >  available  ||  skipped  >  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    available    ||    skipped    >    numToSkip)    {    break;    }    if(skipped  >  available  ||  skipped  >  numToSkip)  {  break;  }	  timeout    	compilable	  [FE]  AssertionError  	261	2	add
1165	[BUG]  [BUGGY]  if(skipped  >  available  ||  skipped  >  numToSkip)  {  break;  }  if(skipped  >  available  ||  skipd  >  numToSkip)  {  break;  }  [CE]  cannot  find  symbol  skipd  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  available  ||  skipped  >  numToSkip)  {  break;  }  if(skipped  >  available  ||  skipd  >  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    available    ||    skipped    >    numToSkip)    {    break;    }    if(skipped  >  available  ||  skipd  >  numToSkip)  {  break;  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  skipd	261	None	add
1166	[BUG]  [BUGGY]  if(skipped  >  available  ||  skipped  >  numToSkip)  {  break;  }  If(skipped  >  available  ||  skipped  >  numToSkip)  {  break;  }  [CE]  ';'  expected  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  available  ||  skipped  >  numToSkip)  {  break;  }  If(skipped  >  available  ||  skipped  >  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    available    ||    skipped    >    numToSkip)    {    break;    }    If(skipped  >  available  ||  skipped  >  numToSkip)  {  break;  }	  timeout    	non-compiled	[CE]  ';'  expected	261	None	add
1167	[BUG]  [BUGGY]  if(skipped  >  available  ||  skipped  >  numToSkip)  {  break;  }  if(skipped  >  available  ||  skipped  >  numToSkip)  {  break;  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  available  ||  skipped  >  numToSkip)  {  break;  }  if(skipped  >  available  ||  skipped  >  numToSkip)  {  break;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    available    ||    skipped    >    numToSkip)    {    break;    }    if(skipped  >  available  ||  skipped  >  numToSkip)  {  break;	  timeout    	non-compiled	[CE]  illegal  start  of  expression	261	None	add
1168	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "skipped:   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalArgumentException( "skipped:   "  +  available);	  throw    new    IllegalArgumentException(   "skipped:   "    +    skipped);    	compilable	  [FE]  IllegalArgumentException  	30	2	replace
1169	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "skipped:   "  +  available);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "skipped:   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException( "skipped:   "  +  available);	  throw    new    IllegalArgumentException(   "skipped:   "    +    skipped);    	compilable	  [FE]  IllegalArgumentException  	30	2	replace
1170	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Skip:   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalArgumentException( "Skip:   "  +  skipped);	  throw    new    IllegalArgumentException(   "skipped:   "    +    skipped);    	compilable	  [FE]  IllegalArgumentException  	30	2	replace
1171	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Skip:   "  +  skipped);  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Skip:   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException( "Skip:   "  +  skipped);	  throw    new    IllegalArgumentException(   "skipped:   "    +    skipped);    	compilable	  [FE]  IllegalArgumentException  	30	2	replace
1172	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Should  have  skipped: "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalArgumentException( "Should  have  skipped: "  +  skipped);	  throw    new    IllegalArgumentException(   "skipped:   "    +    skipped);    	compilable	  [FE]  IllegalArgumentException  	30	2	replace
1173	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Should  have  skipped: "  +  skipped);  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Should  have  skipped: "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException( "Should  have  skipped: "  +  skipped);	  throw    new    IllegalArgumentException(   "skipped:   "    +    skipped);    	compilable	  [FE]  IllegalArgumentException  	30	2	replace
1174	[BUG]  [BUGGY]  timeout  [FE]        IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  <  0)  {  throw  new  IllegalStateException( " ");  }	  throw    new    IllegalStateException(       "       ");    throw    new    IllegalStateException(       "       ");    	compilable	timeout	21	1	replace
1175	[BUG]  [BUGGY]  if(available  <  0)  {  throw  new  IllegalStateException( " ");  }  timeout  [FE]        IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  0)  {  throw  new  IllegalStateException( " ");  }	  throw    new    IllegalStateException(       "       ");    throw    new    IllegalStateException(       "       ");    	compilable	timeout	21	1	replace
1176	[BUG]  [BUGGY]  timeout  [FE]        IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  new  IllegalArgumentException( " ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(       "       ");    new    IllegalArgumentException(       "       ");    	compilable	timeout	180	1	replace
1177	[BUG]  [BUGGY]  new  IllegalArgumentException( " ");  timeout  [FE]        IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  new  IllegalArgumentException( " ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(       "       ");    new    IllegalArgumentException(       "       ");    	compilable	timeout	180	1	replace
1178	[BUG]  [BUGGY]  new  IllegalArgumentException( " ".getMessage());  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  new  IllegalArgumentException( " ".getMessage());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	new  IllegalArgumentException( " ".getMessage());	  throw    new    IllegalArgumentException(       "       ");    new    IllegalArgumentException(       "       ");    	non-compiled	[CE]  cannot  find  symbol	180	None	replace
1179	[BUG]  [BUGGY]  timeout  [FE]            IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  new  IllegalArgumentException( ". ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	new  IllegalArgumentException( ". ");	  throw    new    IllegalArgumentException(       "       ");    new    IllegalArgumentException(       "       ");    	compilable	timeout	180	1	replace
1180	[BUG]  [BUGGY]  new  IllegalArgumentException( ". ");  timeout  [FE]            IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  new  IllegalArgumentException( ". ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	new  IllegalArgumentException( ". ");	  throw    new    IllegalArgumentException(       "       ");    new    IllegalArgumentException(       "       ");    	compilable	timeout	180	1	replace
1181	[BUG]  [BUGGY]  timeout  [FE]              IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  new  IllegalArgumentException( ".skipped= "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	new  IllegalArgumentException( ".skipped= "  +  skipped);	  throw    new    IllegalArgumentException(       "       ");    new    IllegalArgumentException(       "       ");    	compilable	timeout	180	1	replace
1182	[BUG]  [BUGGY]  new  IllegalArgumentException( ".skipped= "  +  skipped);  timeout  [FE]              IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  new  IllegalArgumentException( ".skipped= "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	new  IllegalArgumentException( ".skipped= "  +  skipped);	  throw    new    IllegalArgumentException(       "       ");    new    IllegalArgumentException(       "       ");    	compilable	timeout	180	1	replace
1183	[BUG]  [BUGGY]  timeout  [FE]                IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  new  IllegalArgumentException( ", ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	new  IllegalArgumentException( ", ");	  throw    new    IllegalArgumentException(       "       ");    new    IllegalArgumentException(       "       ");    	compilable	timeout	180	1	replace
1184	[BUG]  [BUGGY]  new  IllegalArgumentException( ", ");  timeout  [FE]                IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  new  IllegalArgumentException( ", ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	new  IllegalArgumentException( ", ");	  throw    new    IllegalArgumentException(       "       ");    new    IllegalArgumentException(       "       ");    	compilable	timeout	180	1	replace
1185	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.length();    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
1186	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.length();    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
1187	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  skipped.length();  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  skipped.length();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  skipped.length();  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.length();    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
1188	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  skipped;  }  [CE]  possible  loss  of  precision  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  skipped;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  skipped;  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.length();    }    	non-compiled	[CE]  possible  loss  of  precision	53	None	replace
1189	[BUG]  [BUGGY]  skipped  =  input.skip(available  -  skip);  [CE]  cannot  find  symbol  skip  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  -  skip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped  =  input.skip(available  -  skip);	  skipped    =    input.skip(available    -    skipped);    timeout    	non-compiled	[CE]  cannot  find  symbol  skip	188	None	replace
1190	[BUG]  [BUGGY]  timeout  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(skipped  -  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped  =  input.skip(skipped  -  available);	  skipped    =    input.skip(available    -    skipped);    timeout    	compilable	timeout	188	1	replace
1191	[BUG]  [BUGGY]  skipped  =  input.skip(skipped  -  available);  timeout  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(skipped  -  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped  =  input.skip(skipped  -  available);	  skipped    =    input.skip(available    -    skipped);    timeout    	compilable	timeout	188	1	replace
1192	[BUG]  [BUGGY]  timeout  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  -  skipped  +  1);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped  =  input.skip(available  -  skipped  +  1);	  skipped    =    input.skip(available    -    skipped);    timeout    	compilable	timeout	188	1	replace
1193	[BUG]  [BUGGY]  skipped  =  input.skip(available  -  skipped  +  1);  timeout  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  -  skipped  +  1);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped  =  input.skip(available  -  skipped  +  1);	  skipped    =    input.skip(available    -    skipped);    timeout    	compilable	timeout	188	1	replace
1194	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  skipped;  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  skipped;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  skipped;  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    skipped;    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
1195	[BUG]  [BUGGY]  while(available  >  0)  {  available  +=  skipped;  [CE]  illegal  start  of  expression  [FE]                                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  available  +=  skipped;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  available  +=  skipped;	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    skipped;    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
1196	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  available.size();  i  <  numToSkip;  i++)  {  available  +=  skipped;  }  [CE]  illegal  start  of  expression  [FE]                                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  available.size();  i  <  numToSkip;  i++)  {  available  +=  skipped;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  available.size();  i  <  numToSkip;  i++)  {  available  +=  skipped;  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    skipped;    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
1197	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  available.length;  i  <  numToSkip;  i++)  {  available  +=  skipped;  }  [CE]  illegal  start  of  expression  [FE]                                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  available.length;  i  <  numToSkip;  i++)  {  available  +=  skipped;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  available.length;  i  <  numToSkip;  i++)  {  available  +=  skipped;  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    skipped;    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
1198	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  skipd;  }  [CE]  illegal  start  of  expression  [FE]                                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  skipd;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  skipd;  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    skipped;    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
1199	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  skip;  }  [CE]  possible  loss  of  precision  [FE]                                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  skip;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  skip;  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    skipped;    }    	non-compiled	[CE]  possible  loss  of  precision	58	None	replace
1200	[BUG]  [BUGGY]  if(available  >  0)  {  if(skipped  >=  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  if(skipped  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  if(skipped  >=  0)  {  break;  }	  if(skipped    >=    0)    {    break;    }    if(skipped    >=    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
1201	[BUG]  [BUGGY]  while(available  <  numToSkip)  {  if(skipped  >  available)  {  break;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  <  numToSkip)  {  if(skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  <  numToSkip)  {  if(skipped  >  available)  {  break;  }	  if(skipped    >    available)    {    break;    }    if(skipped    >    available)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
1202	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  if(skipped  >  available)  {  break;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  numToSkip)  {  if(skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  numToSkip)  {  if(skipped  >  available)  {  break;  }	  if(skipped    >    available)    {    break;    }    if(skipped    >    available)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
1203	[BUG]  [BUGGY]  if(available  >  max)  {  break;  }  [CE]  cannot  find  symbol  max  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  max)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  max)  {  break;  }	  if(available    >    skip)    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  max	46	None	replace
1204	[BUG]  [BUGGY]  timeout  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  0  ||  skipped  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  <  0  ||  skipped  <  0)  {  break;  }	  if(available    >    0    ||    skipped    <    0)    {    break;    }    	compilable	timeout	184	1	replace
1205	[BUG]  [BUGGY]  if(available  <  0  ||  skipped  <  0)  {  break;  }  timeout  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  0  ||  skipped  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  0  ||  skipped  <  0)  {  break;  }	  if(available    >    0    ||    skipped    <    0)    {    break;    }    	compilable	timeout	184	1	replace
1206	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >=  0  ||  skipped  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >=  0  ||  skipped  <  0)  {  break;  }	  if(available    >    0    ||    skipped    <    0)    {    break;    }    	compilable	  [FE]  AssertionError  	184	2	replace
1207	[BUG]  [BUGGY]  if(available  >=  0  ||  skipped  <  0)  {  break;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >=  0  ||  skipped  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >=  0  ||  skipped  <  0)  {  break;  }	  if(available    >    0    ||    skipped    <    0)    {    break;    }    	compilable	  [FE]  AssertionError  	184	2	replace
1208	[BUG]  [BUGGY]  if(available  <  =  0  ||  skipped  <  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  =  0  ||  skipped  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  =  0  ||  skipped  <  0)  {  break;  }	  if(available    >    0    ||    skipped    <    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	184	None	replace
1209	[BUG]  [BUGGY]  timeout  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  ==  0  ||  skipped  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  ==  0  ||  skipped  <  0)  {  break;  }	  if(available    >    0    ||    skipped    <    0)    {    break;    }    	compilable	timeout	184	1	replace
1210	[BUG]  [BUGGY]  if(available  ==  0  ||  skipped  <  0)  {  break;  }  timeout  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  ==  0  ||  skipped  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  ==  0  ||  skipped  <  0)  {  break;  }	  if(available    >    0    ||    skipped    <    0)    {    break;    }    	compilable	timeout	184	1	replace
1211	[BUG]  [BUGGY]  timeout  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0  &&  skipped  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  0  &&  skipped  <  0)  {  break;  }	  if(available    >    0    ||    skipped    <    0)    {    break;    }    	compilable	timeout	184	1	replace
1212	[BUG]  [BUGGY]  if(available  >  0  &&  skipped  <  0)  {  break;  }  timeout  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0  &&  skipped  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0  &&  skipped  <  0)  {  break;  }	  if(available    >    0    ||    skipped    <    0)    {    break;    }    	compilable	timeout	184	1	replace
1213	[BUG]  [BUGGY]  if(skipped  <  =  0)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  <  =  0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  <  =  0)  {  continue;  }	  if(skipped    >    0)    {    continue;    }    timeout    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
1214	[BUG]  [BUGGY]  pending  ||  skipped  >  0)  {  continue;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  pending  ||  skipped  >  0)  {  continue;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	pending  ||  skipped  >  0)  {  continue;	  if(skipped    >    0)    {    continue;    }    timeout    	non-compiled	[CE]  not  a  statement	128	None	replace
1215	[BUG]  [BUGGY]  timeout  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >=  0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped  >=  0)  {  continue;  }	  if(skipped    >    0)    {    continue;    }    timeout    	compilable	timeout	128	1	replace
1216	[BUG]  [BUGGY]  if(skipped  >=  0)  {  continue;  }  timeout  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >=  0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >=  0)  {  continue;  }	  if(skipped    >    0)    {    continue;    }    timeout    	compilable	timeout	128	1	replace
1217	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [CE]  possible  loss  of  precision  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.read();    }    	non-compiled	[CE]  possible  loss  of  precision	54	None	replace
1218	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
1219	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
1220	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.read();  }  [CE]  possible  loss  of  precision  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.read();  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.read();    }    	non-compiled	[CE]  possible  loss  of  precision	54	None	replace
1221	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  skipped;  i++)  {  available  +=  input.read();  }  [CE]  possible  loss  of  precision  [FE]                                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  available;  i  <  skipped;  i++)  {  available  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  available;  i  <  skipped;  i++)  {  available  +=  input.read();  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.read();    }    	non-compiled	[CE]  possible  loss  of  precision	54	None	replace
1222	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  skipped.read();  }  [CE]  possible  loss  of  precision  [FE]                                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  skipped.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  skipped.read();  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.read();    }    	non-compiled	[CE]  possible  loss  of  precision	54	None	replace
1223	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  break;  }  else  if(skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  skipped)  {  break;  }  else  if(skipped  >  available)  {  break;  }	  if(skipped    >    available)    {    break;    }    If(skipped    >    available)    {    break;    }    	compilable	  [FE]  AssertionError  	84	2	replace
1224	[BUG]  [BUGGY]  if(available  >  skipped)  {  break;  }  else  if(skipped  >  available)  {  break;  }  [FE]  AssertionError  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  break;  }  else  if(skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skipped)  {  break;  }  else  if(skipped  >  available)  {  break;  }	  if(skipped    >    available)    {    break;    }    If(skipped    >    available)    {    break;    }    	compilable	  [FE]  AssertionError  	84	2	replace
1225	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Skipped  =   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalStateException( "Skipped  =   "  +  available);	  throw    new    IllegalStateException(   "skipped    =       "    +    available);    	compilable	  [FE]  IllegalStateException  	142	2	replace
1226	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Skipped  =   "  +  available);  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Skipped  =   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "Skipped  =   "  +  available);	  throw    new    IllegalStateException(   "skipped    =       "    +    available);    	compilable	  [FE]  IllegalStateException  	142	2	replace
1227	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "skipped  =   "  +  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalStateException( "skipped  =   "  +  numToSkip);	  throw    new    IllegalStateException(   "skipped    =       "    +    available);    	compilable	  [FE]  IllegalStateException  	142	2	replace
1228	[BUG]  [BUGGY]  throw  new  IllegalStateException( "skipped  =   "  +  numToSkip);  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "skipped  =   "  +  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "skipped  =   "  +  numToSkip);	  throw    new    IllegalStateException(   "skipped    =       "    +    available);    	compilable	  [FE]  IllegalStateException  	142	2	replace
1229	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Skip  =   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalStateException( "Skip  =   "  +  available);	  throw    new    IllegalStateException(   "skipped    =       "    +    available);    	compilable	  [FE]  IllegalStateException  	142	2	replace
1230	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Skip  =   "  +  available);  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Skip  =   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "Skip  =   "  +  available);	  throw    new    IllegalStateException(   "skipped    =       "    +    available);    	compilable	  [FE]  IllegalStateException  	142	2	replace
1231	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "available  =   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalStateException( "available  =   "  +  available);	  throw    new    IllegalStateException(   "skipped    =       "    +    available);    	compilable	  [FE]  IllegalStateException  	142	2	replace
1232	[BUG]  [BUGGY]  throw  new  IllegalStateException( "available  =   "  +  available);  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "available  =   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "available  =   "  +  available);	  throw    new    IllegalStateException(   "skipped    =       "    +    available);    	compilable	  [FE]  IllegalStateException  	142	2	replace
1233	[BUG]  [BUGGY]  if(available  >  0)  {  continue;  skipped  =  input.skip(numToSkip);  if(skipped  >  0)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  continue;  skipped  =  input.skip(numToSkip);  if(skipped  >  0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  continue;  skipped  =  input.skip(numToSkip);  if(skipped  >  0)  {  continue;  }	  continue;    long    skipped    =    input.skip(numToSkip);    if(skipped    >    0)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
1234	[BUG]  [BUGGY]  long  skipped  =  input.skip(available,  numToSkip);  if(skipped  >  0)  {  continue;  }  [CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  long  skipped  =  input.skip(available,  numToSkip);  if(skipped  >  0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	long  skipped  =  input.skip(available,  numToSkip);  if(skipped  >  0)  {  continue;  }	  continue;    long    skipped    =    input.skip(numToSkip);    if(skipped    >    0)    {    continue;    }    	non-compiled	[CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)	14	None	replace
1235	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  <  available)  {  break;  }  if(skipped  >  available)  {  break;  }  if(skipped  <  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >        available)        {        break;        }        if(skipped    <    available)    {    break;    }    if(skipped  >  available)  {  break;  }  if(skipped  <  available)  {  break;  }	  	compilable	  [FE]  AssertionError  	87	2	add
1236	[BUG]  [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  <  available)  {  break;  }  if(skipped  >  available)  {  break;  }  if(skipped  <  available)  {  break;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  <  available)  {  break;  }  if(skipped  >  available)  {  break;  }  if(skipped  <  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >        available)        {        break;        }        if(skipped    <    available)    {    break;    }    if(skipped  >  available)  {  break;  }  if(skipped  <  available)  {  break;  }	  	compilable	  [FE]  AssertionError  	87	2	add
1237	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  <  available)  {  break;  }  if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >        available)        {        break;        }        if(skipped    <    available)    {    break;    }    if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }	  	compilable	  [FE]  AssertionError  	87	2	add
1238	[BUG]  [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  <  available)  {  break;  }  if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  <  available)  {  break;  }  if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >        available)        {        break;        }        if(skipped    <    available)    {    break;    }    if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }	  	compilable	  [FE]  AssertionError  	87	2	add
1239	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  <  available)  {  break;  }  if(skipped  >  available)  {  break;  }  if(skipped  >=  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >        available)        {        break;        }        if(skipped    <    available)    {    break;    }    if(skipped  >  available)  {  break;  }  if(skipped  >=  available)  {  break;  }	  	compilable	  [FE]  AssertionError  	87	2	add
1240	[BUG]  [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  <  available)  {  break;  }  if(skipped  >  available)  {  break;  }  if(skipped  >=  available)  {  break;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  <  available)  {  break;  }  if(skipped  >  available)  {  break;  }  if(skipped  >=  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >        available)        {        break;        }        if(skipped    <    available)    {    break;    }    if(skipped  >  available)  {  break;  }  if(skipped  >=  available)  {  break;  }	  	compilable	  [FE]  AssertionError  	87	2	add
1241	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  <  available)  {  break;  }  if(skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >        available)        {        break;        }        if(skipped    <    available)    {    break;    }    if(skipped  >  available)  {  break;  }	  	compilable	  [FE]  AssertionError  	87	2	add
1242	[BUG]  [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  <  available)  {  break;  }  if(skipped  >  available)  {  break;  }  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  <  available)  {  break;  }  if(skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >        available)        {        break;        }        if(skipped    <    available)    {    break;    }    if(skipped  >  available)  {  break;  }	  	compilable	  [FE]  AssertionError  	87	2	add
1243	[BUG]  [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  <  available)  {  break;  }  If(skipped  >  available)  {  break;  }  if(skipped  <  available)  {  break;  }  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  <  available)  {  break;  }  If(skipped  >  available)  {  break;  }  if(skipped  <  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >        available)        {        break;        }        if(skipped    <    available)    {    break;    }    If(skipped  >  available)  {  break;  }  if(skipped  <  available)  {  break;  }	  	non-compiled	[CE]  ';'  expected	87	None	add
1244	[BUG]  [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  <  available)  {  break;  }  if(skipped  >  available)  {  break;  }  if(sked  <  available)  {  break;  }  [CE]  cannot  find  symbol  sked  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  <  available)  {  break;  }  if(skipped  >  available)  {  break;  }  if(sked  <  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >        available)        {        break;        }        if(skipped    <    available)    {    break;    }    if(skipped  >  available)  {  break;  }  if(sked  <  available)  {  break;  }	  	non-compiled	[CE]  cannot  find  symbol  sked	87	None	add
1245	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".getMessage());  [CE]  <identifier>  expected  [FE]          IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ".getMessage());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	Throwables.throw  new  IllegalStateException( " ".getMessage());	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	136	None	replace
1246	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(numToSkip));  [CE]  <identifier>  expected  [FE]            IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(numToSkip));  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	Throwables.throw  new  IllegalStateException( " ".equals(numToSkip));	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	136	None	replace
1247	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ",  skipped);  [CE]  <identifier>  expected  [FE]              IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ",  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	Throwables.throw  new  IllegalStateException( " ",  skipped);	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	136	None	replace
1248	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(numToSkip)?  skipped  : " ");  [CE]  <identifier>  expected  [FE]                IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(numToSkip)?  skipped  : " ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	Throwables.throw  new  IllegalStateException( " ".equals(numToSkip)?  skipped  : " ");	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	136	None	replace
1249	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Should  skip: "  +  available);  [CE]  <identifier>  expected  [FE]                  IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Should  skip: "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	Throwables.throw  new  IllegalStateException( "Should  skip: "  +  available);	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	136	None	replace
1250	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  if(skip  >  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  numToSkip)  {  if(skip  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  numToSkip)  {  if(skip  >  0)  {  break;  }	  if(skipped    >    0)    {    break;    }    If(skipped    >    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
1251	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "InputStream  is  less  than  1: "  +  input);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalStateException( "InputStream  is  less  than  1: "  +  input);	  throw    new    IllegalStateException(   "InputStream    is    less    than    1:   ");    	compilable	  [FE]  IllegalStateException  	246	2	replace
1252	[BUG]  [BUGGY]  throw  new  IllegalStateException( "InputStream  is  less  than  1: "  +  input);  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "InputStream  is  less  than  1: "  +  input);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "InputStream  is  less  than  1: "  +  input);	  throw    new    IllegalStateException(   "InputStream    is    less    than    1:   ");    	compilable	  [FE]  IllegalStateException  	246	2	replace
1253	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "InputStream  is  less  than  1: "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalStateException( "InputStream  is  less  than  1: "  +  skipped);	  throw    new    IllegalStateException(   "InputStream    is    less    than    1:   ");    	compilable	  [FE]  IllegalStateException  	246	2	replace
1254	[BUG]  [BUGGY]  throw  new  IllegalStateException( "InputStream  is  less  than  1: "  +  skipped);  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "InputStream  is  less  than  1: "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "InputStream  is  less  than  1: "  +  skipped);	  throw    new    IllegalStateException(   "InputStream    is    less    than    1:   ");    	compilable	  [FE]  IllegalStateException  	246	2	replace
1255	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "InputStream  is  less  than  1: "  +  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalStateException( "InputStream  is  less  than  1: "  +  numToSkip);	  throw    new    IllegalStateException(   "InputStream    is    less    than    1:   ");    	compilable	  [FE]  IllegalStateException  	246	2	replace
1256	[BUG]  [BUGGY]  throw  new  IllegalStateException( "InputStream  is  less  than  1: "  +  numToSkip);  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "InputStream  is  less  than  1: "  +  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "InputStream  is  less  than  1: "  +  numToSkip);	  throw    new    IllegalStateException(   "InputStream    is    less    than    1:   ");    	compilable	  [FE]  IllegalStateException  	246	2	replace
1257	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "InputStream  is  less  than  1: "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalStateException( "InputStream  is  less  than  1: "  +  available);	  throw    new    IllegalStateException(   "InputStream    is    less    than    1:   ");    	compilable	  [FE]  IllegalStateException  	246	2	replace
1258	[BUG]  [BUGGY]  throw  new  IllegalStateException( "InputStream  is  less  than  1: "  +  available);  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "InputStream  is  less  than  1: "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "InputStream  is  less  than  1: "  +  available);	  throw    new    IllegalStateException(   "InputStream    is    less    than    1:   ");    	compilable	  [FE]  IllegalStateException  	246	2	replace
1259	[BUG]  [BUGGY]  throw  new  IllegalStateException( "InputStream  is  less  than  1: "  +  input.getMillis());  [CE]  cannot  find  symbol  [FE]            IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "InputStream  is  less  than  1: "  +  input.getMillis());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "InputStream  is  less  than  1: "  +  input.getMillis());	  throw    new    IllegalStateException(   "InputStream    is    less    than    1:   ");    	non-compiled	[CE]  cannot  find  symbol	246	None	replace
1260	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "InputStream  is  less  than  1: ");  [CE]  <identifier>  expected  [FE]              IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "InputStream  is  less  than  1: ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	Throwables.throw  new  IllegalStateException( "InputStream  is  less  than  1: ");	  throw    new    IllegalStateException(   "InputStream    is    less    than    1:   ");    	non-compiled	[CE]  <identifier>  expected	246	None	replace
1261	[BUG]  [BUGGY]  throw  new  IOException(   "skipped  in  the  stream.   ");  throw  new  IOException( "skipped  in  the  stream.   ");  [CE]  unreachable  statement  [FE]    IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException(   "skipped  in  the  stream.   ");  throw  new  IOException( "skipped  in  the  stream.   ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IOException(   "skipped    in    the    stream.   ");    throw  new  IOException( "skipped  in  the  stream.   ");	  	non-compiled	[CE]  unreachable  statement	221	None	add
1262	[BUG]  [BUGGY]  throw  new  IOException(   "skipped  in  the  stream.   ");  Throw  new  IOException( "skipped  in  the  stream.   ");  [CE]  not  a  statement  [FE]      IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException(   "skipped  in  the  stream.   ");  Throw  new  IOException( "skipped  in  the  stream.   ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IOException(   "skipped    in    the    stream.   ");    Throw  new  IOException( "skipped  in  the  stream.   ");	  	non-compiled	[CE]  not  a  statement	221	None	add
1263	[BUG]  [BUGGY]  throw  new  IOException(   "skipped  in  the  stream.   ");  new  IOException( "skipped  in  the  stream.   ");  [CE]  unreachable  statement  [FE]        IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException(   "skipped  in  the  stream.   ");  new  IOException( "skipped  in  the  stream.   ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IOException(   "skipped    in    the    stream.   ");    new  IOException( "skipped  in  the  stream.   ");	  	non-compiled	[CE]  unreachable  statement	221	None	add
1264	[BUG]  [BUGGY]  long  available  =  input.skip(numToSkip);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  long  available  =  input.skip(numToSkip);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	long  available  =  input.skip(numToSkip);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    skipped    =    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	176	None	replace
1265	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    skipped    =    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	176	None	replace
1266	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    skipped    =    input.next();    }    	non-compiled	[CE]  possible  loss  of  precision	176	None	replace
1267	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    skipped    =    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	176	None	replace
1268	[BUG]  [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    skipped    =    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	176	None	replace
1269	[BUG]  [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    skipped    =    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	176	None	replace
1270	[BUG]  [BUGGY]  if(available  >  0)  {  continue;  }  else  {  skip  =  input.read();  }  [CE]  cannot  find  symbol  skip  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  continue;  }  else  {  skip  =  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  continue;  }  else  {  skip  =  input.read();  }	  if(skipped    >    0)    {    continue;    }    else    {    skip    =    input.read();    }    	non-compiled	[CE]  cannot  find  symbol  skip	217	None	replace
1271	[BUG]  [BUGGY]  timeout  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  continue;  }  else  {  skipped  =  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  0)  {  continue;  }  else  {  skipped  =  input.read();  }	  if(skipped    >    0)    {    continue;    }    else    {    skip    =    input.read();    }    	compilable	timeout	217	1	replace
1272	[BUG]  [BUGGY]  if(available  >  0)  {  continue;  }  else  {  skipped  =  input.read();  }  timeout  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  continue;  }  else  {  skipped  =  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  continue;  }  else  {  skipped  =  input.read();  }	  if(skipped    >    0)    {    continue;    }    else    {    skip    =    input.read();    }    	compilable	timeout	217	1	replace
1273	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  continue;  }  else  {  skipped  =  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped  >  0)  {  continue;  }  else  {  skipped  =  input.read();  }	  if(skipped    >    0)    {    continue;    }    else    {    skip    =    input.read();    }    	compilable	  [FE]  AssertionError  	217	2	replace
1274	[BUG]  [BUGGY]  if(skipped  >  0)  {  continue;  }  else  {  skipped  =  input.read();  }  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  continue;  }  else  {  skipped  =  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  continue;  }  else  {  skipped  =  input.read();  }	  if(skipped    >    0)    {    continue;    }    else    {    skip    =    input.read();    }    	compilable	  [FE]  AssertionError  	217	2	replace
1275	[BUG]  [BUGGY]  row  >  0)  {  continue;  }  else  {  skip  =  input.read();  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  row  >  0)  {  continue;  }  else  {  skip  =  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	row  >  0)  {  continue;  }  else  {  skip  =  input.read();  }	  if(skipped    >    0)    {    continue;    }    else    {    skip    =    input.read();    }    	non-compiled	[CE]  not  a  statement	217	None	replace
1276	[BUG]  [BUGGY]  throw  new  IOException(   "   "  +  available);  throw  new  IOException(   "   "  +  available);  [CE]  unreachable  statement  [FE]    IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException(   "   "  +  available);  throw  new  IOException(   "   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IOException(   "   "    +    available);    throw  new  IOException(   "   "  +  available);	  	non-compiled	[CE]  unreachable  statement	159	None	add
1277	[BUG]  [BUGGY]  throw  new  IOException(   "   "  +  available);  Throw  new  IOException(   "   "  +  available);  [CE]  not  a  statement  [FE]      IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException(   "   "  +  available);  Throw  new  IOException(   "   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IOException(   "   "    +    available);    Throw  new  IOException(   "   "  +  available);	  	non-compiled	[CE]  not  a  statement	159	None	add
1278	[BUG]  [BUGGY]  throw  new  IOException(   "   "  +  available);  new  IOException(   "   "  +  available);  [CE]  unreachable  statement  [FE]        IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException(   "   "  +  available);  new  IOException(   "   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IOException(   "   "    +    available);    new  IOException(   "   "  +  available);	  	non-compiled	[CE]  unreachable  statement	159	None	add
1279	[BUG]  [BUGGY]  throw  new  IOException(   "   "  +  available);  throw  new  IOException( ",   "  +  available);  [CE]  unreachable  statement  [FE]          IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException(   "   "  +  available);  throw  new  IOException( ",   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IOException(   "   "    +    available);    throw  new  IOException( ",   "  +  available);	  	non-compiled	[CE]  unreachable  statement	159	None	add
1280	[BUG]  [BUGGY]  throw  new  IOException(   "   "  +  available);  IOException(   "   "  +  available);  [CE]  cannot  find  symbol  [FE]            IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException(   "   "  +  available);  IOException(   "   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IOException(   "   "    +    available);    IOException(   "   "  +  available);	  	non-compiled	[CE]  cannot  find  symbol	159	None	add
1281	[BUG]  [BUGGY]  System.arraycopy(input,  numToSkip,  available,  skip);  [CE]  cannot  find  symbol  skip  [FE]          IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.arraycopy(input,  numToSkip,  available,  skip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	System.arraycopy(input,  numToSkip,  available,  skip);	  throw    new    IllegalStateException(       "       ");    System.arraycopy(input,    numToSkip,    available,    skipd);    	non-compiled	[CE]  cannot  find  symbol  skip	236	None	replace
1282	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ");  System.arraycopy(input,  numToSkip,  available,  skip);  [CE]  cannot  find  symbol  skip  [FE]            IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( " ");  System.arraycopy(input,  numToSkip,  available,  skip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( " ");  System.arraycopy(input,  numToSkip,  available,  skip);	  throw    new    IllegalStateException(       "       ");    System.arraycopy(input,    numToSkip,    available,    skipd);    	non-compiled	[CE]  cannot  find  symbol  skip	236	None	replace
1283	[BUG]  [BUGGY]  Throwables.arraycopy(input,  numToSkip,  available,  skipd);  [CE]  cannot  find  symbol  skipd  [FE]              IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  Throwables.arraycopy(input,  numToSkip,  available,  skipd);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	Throwables.arraycopy(input,  numToSkip,  available,  skipd);	  throw    new    IllegalStateException(       "       ");    System.arraycopy(input,    numToSkip,    available,    skipd);    	non-compiled	[CE]  cannot  find  symbol  skipd	236	None	replace
1284	[BUG]  [BUGGY]  Throwables.arraycopy(input,  numToSkip,  available,  skipped);  [CE]  cannot  find  symbol  Throwables  [FE]                IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  Throwables.arraycopy(input,  numToSkip,  available,  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	Throwables.arraycopy(input,  numToSkip,  available,  skipped);	  throw    new    IllegalStateException(       "       ");    System.arraycopy(input,    numToSkip,    available,    skipd);    	non-compiled	[CE]  cannot  find  symbol  Throwables	236	None	replace
1285	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Skip  is  less  than  1: "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalArgumentException( "Skip  is  less  than  1: "  +  skipped);	  throw    new    IllegalArgumentException(   "Skip    is    less    than    1:   ");    	compilable	  [FE]  IllegalArgumentException  	34	2	replace
1286	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Skip  is  less  than  1: "  +  skipped);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Skip  is  less  than  1: "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException( "Skip  is  less  than  1: "  +  skipped);	  throw    new    IllegalArgumentException(   "Skip    is    less    than    1:   ");    	compilable	  [FE]  IllegalArgumentException  	34	2	replace
1287	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Skip  is  less  than  1: "  +  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalArgumentException( "Skip  is  less  than  1: "  +  numToSkip);	  throw    new    IllegalArgumentException(   "Skip    is    less    than    1:   ");    	compilable	  [FE]  IllegalArgumentException  	34	2	replace
1288	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Skip  is  less  than  1: "  +  numToSkip);  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Skip  is  less  than  1: "  +  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException( "Skip  is  less  than  1: "  +  numToSkip);	  throw    new    IllegalArgumentException(   "Skip    is    less    than    1:   ");    	compilable	  [FE]  IllegalArgumentException  	34	2	replace
1289	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Skip  is  less  than  1: "  +  skip);  [CE]  cannot  find  symbol  skip  [FE]        IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Skip  is  less  than  1: "  +  skip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException( "Skip  is  less  than  1: "  +  skip);	  throw    new    IllegalArgumentException(   "Skip    is    less    than    1:   ");    	non-compiled	[CE]  cannot  find  symbol  skip	34	None	replace
1290	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getUpperBound();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getUpperBound();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getUpperBound();  }	  continue;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
1291	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getUpperCase();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getUpperCase();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getUpperCase();  }	  continue;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
1292	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getUpperBound();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skip  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getUpperBound();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skip  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getUpperBound();  }	  continue;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
1293	[BUG]  [BUGGY]  skipped  =  input.skip(available  +  numToSkip,  skipped);  [CE]  method  skip  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  +  numToSkip,  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped  =  input.skip(available  +  numToSkip,  skipped);	  skipped    =    input.skip(available    +    numToSkip);    timeout    	non-compiled	[CE]  method  skip  in  class  InputStream  cannot  be  applied  to  given  types;	60	None	replace
1294	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(available));  [CE]  <identifier>  expected  [FE]          IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(available));  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	Throwables.throw  new  IllegalArgumentException( " ").equals(available));	  throw    new    IllegalArgumentException(   "   ".equals(available));    	non-compiled	[CE]  <identifier>  expected	168	None	replace
1295	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "   ".equals(available)+  skipped);  [CE]  bad  operand  types  for  binary  operator  [FE]            IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "   ".equals(available)+  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException( "   ".equals(available)+  skipped);	  throw    new    IllegalArgumentException(   "   ".equals(available));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  	168	None	replace
1296	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "   ".equals(available)+  skipd);  [CE]  cannot  find  symbol  skipd  [FE]              IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "   ".equals(available)+  skipd);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException( "   ".equals(available)+  skipd);	  throw    new    IllegalArgumentException(   "   ".equals(available));    	non-compiled	[CE]  cannot  find  symbol  skipd	168	None	replace
1297	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getLength();  }	  continue;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	268	None	replace
1298	[BUG]  [BUGGY]  if(available  >  skipped)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skipped)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getLength();  }	  continue;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	268	None	replace
1299	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getLength();  }	  continue;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	268	None	replace
1300	[BUG]  [BUGGY]  if(skipped  >  0)  {  int  available  =  0;  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  int  available  =  0;  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  int  available  =  0;  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getLength();  }	  continue;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	268	None	replace
1301	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getUpperCase();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getUpperCase();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getUpperCase();  }	  continue;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	268	None	replace
1302	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getUpperBound();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getUpperBound();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getUpperBound();  }	  continue;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	268	None	replace
1303	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available.length;  ++i)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available.length;  ++i)  {  available  +=  input.getLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  available.length;  ++i)  {  available  +=  input.getLength();  }	  continue;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	268	None	replace
1304	[BUG]  [BUGGY]  long  available  =  input.available();  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skip(i);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  long  available  =  input.available();  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skip(i);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	long  available  =  input.available();  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skip(i);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    skipped    =    input.skip(i);    }    	non-compiled	[CE]  illegal  start  of  expression	177	None	replace
1305	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skip(i);  }  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skip(i);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skip(i);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    skipped    =    input.skip(i);    }    	non-compiled	[CE]  possible  loss  of  precision	177	None	replace
1306	[BUG]  [BUGGY]  long  available  =  input.available();  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skip(i  +  1);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  long  available  =  input.available();  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skip(i  +  1);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	long  available  =  input.available();  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skip(i  +  1);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    skipped    =    input.skip(i);    }    	non-compiled	[CE]  illegal  start  of  expression	177	None	replace
1307	[BUG]  [BUGGY]  long  available  =  input.available();  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skipped(i);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  long  available  =  input.available();  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skipped(i);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	long  available  =  input.available();  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skipped(i);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    skipped    =    input.skip(i);    }    	non-compiled	[CE]  illegal  start  of  expression	177	None	replace
1308	[BUG]  [BUGGY]  long  available  =  input.available();  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  output.skip(i);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  long  available  =  input.available();  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  output.skip(i);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	long  available  =  input.available();  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  output.skip(i);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    skipped    =    input.skip(i);    }    	non-compiled	[CE]  illegal  start  of  expression	177	None	replace
1309	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Skip  skipped:   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IOException( "Skip  skipped:   "  +  available);	  throw    new    IOException(   "   "    +    available);    	compilable	  [FE]  IOException  	160	2	replace
1310	[BUG]  [BUGGY]  throw  new  IOException( "Skip  skipped:   "  +  available);  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Skip  skipped:   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( "Skip  skipped:   "  +  available);	  throw    new    IOException(   "   "    +    available);    	compilable	  [FE]  IOException  	160	2	replace
1311	[BUG]  [BUGGY]  throw  new  IOException( " "  +  available,  skipped);  [CE]  no  suitable  constructor  found  for  IOException(String,long)  [FE]      IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( " "  +  available,  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( " "  +  available,  skipped);	  throw    new    IOException(   "   "    +    available);    	non-compiled	[CE]  no  suitable  constructor  found  for  IOException(String,long)	160	None	replace
1312	[BUG]  [BUGGY]  [FE]  IOException  [FE]        IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Missing  available  line: "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IOException( "Missing  available  line: "  +  available);	  throw    new    IOException(   "   "    +    available);    	compilable	  [FE]  IOException  	160	2	replace
1313	[BUG]  [BUGGY]  throw  new  IOException( "Missing  available  line: "  +  available);  [FE]  IOException  [FE]        IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Missing  available  line: "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( "Missing  available  line: "  +  available);	  throw    new    IOException(   "   "    +    available);    	compilable	  [FE]  IOException  	160	2	replace
1314	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:    [FE]            IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( ", ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalArgumentException( ", ");	  throw    new    IllegalArgumentException(       "       ");    throw    new    IllegalArgumentException(   ",       ");    	compilable	  [FE]  java.lang.IllegalArgumentException:    	7	2	replace
1315	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( ", ");  [FE]  java.lang.IllegalArgumentException:    [FE]            IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( ", ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException( ", ");	  throw    new    IllegalArgumentException(       "       ");    throw    new    IllegalArgumentException(   ",       ");    	compilable	  [FE]  java.lang.IllegalArgumentException:    	7	2	replace
1316	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ",  skipped);  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,long)  [FE]              IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " ",  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException( " ",  skipped);	  throw    new    IllegalArgumentException(       "       ");    throw    new    IllegalArgumentException(   ",       ");    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,long)	7	None	replace
1317	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( ". ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalArgumentException( ". ");	  throw    new    IllegalArgumentException(       "       ");    throw    new    IllegalArgumentException(   ",       ");    	compilable	  [FE]  IllegalArgumentException  	7	2	replace
1318	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( ". ");  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( ". ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException( ". ");	  throw    new    IllegalArgumentException(       "       ");    throw    new    IllegalArgumentException(   ",       ");    	compilable	  [FE]  IllegalArgumentException  	7	2	replace
1319	[BUG]  [BUGGY]  timeout  [FE]          IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.err.println( "Usage:  SKIP_BUF_SIZE  missing ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	System.err.println( "Usage:  SKIP_BUF_SIZE  missing ");	  throw    new    IOException(       "       ");    System.err.println(   "Usage:    SKIP_BUF_SIZE       ");    	compilable	timeout	264	1	replace
1320	[BUG]  [BUGGY]  System.err.println( "Usage:  SKIP_BUF_SIZE  missing ");  timeout  [FE]          IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.err.println( "Usage:  SKIP_BUF_SIZE  missing ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	System.err.println( "Usage:  SKIP_BUF_SIZE  missing ");	  throw    new    IOException(       "       ");    System.err.println(   "Usage:    SKIP_BUF_SIZE       ");    	compilable	timeout	264	1	replace
1321	[BUG]  [BUGGY]  timeout  [FE]            IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.err.println( "Usage:  SKIP_BUF_SIZE  available:   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	System.err.println( "Usage:  SKIP_BUF_SIZE  available:   "  +  available);	  throw    new    IOException(       "       ");    System.err.println(   "Usage:    SKIP_BUF_SIZE       ");    	compilable	timeout	264	1	replace
1322	[BUG]  [BUGGY]  System.err.println( "Usage:  SKIP_BUF_SIZE  available:   "  +  available);  timeout  [FE]            IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.err.println( "Usage:  SKIP_BUF_SIZE  available:   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	System.err.println( "Usage:  SKIP_BUF_SIZE  available:   "  +  available);	  throw    new    IOException(       "       ");    System.err.println(   "Usage:    SKIP_BUF_SIZE       ");    	compilable	timeout	264	1	replace
1323	[BUG]  [BUGGY]  timeout  [FE]              IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.err.println( "Usage:  SKIP_BUF_SIZE   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	System.err.println( "Usage:  SKIP_BUF_SIZE   "  +  available);	  throw    new    IOException(       "       ");    System.err.println(   "Usage:    SKIP_BUF_SIZE       ");    	compilable	timeout	264	1	replace
1324	[BUG]  [BUGGY]  System.err.println( "Usage:  SKIP_BUF_SIZE   "  +  available);  timeout  [FE]              IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.err.println( "Usage:  SKIP_BUF_SIZE   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	System.err.println( "Usage:  SKIP_BUF_SIZE   "  +  available);	  throw    new    IOException(       "       ");    System.err.println(   "Usage:    SKIP_BUF_SIZE       ");    	compilable	timeout	264	1	replace
1325	[BUG]  [BUGGY]  if(available  >  0)  {  break  available;  }  [CE]  undefined  label:  available  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  break  available;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  break  available;  }	  if(skipped    >    0)    {    break    available;    }    	non-compiled	[CE]  undefined  label:  available	199	None	replace
1326	[BUG]  [BUGGY]  if(skipped  <  =  0)  {  break  available;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  <  =  0)  {  break  available;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  <  =  0)  {  break  available;  }	  if(skipped    >    0)    {    break    available;    }    	non-compiled	[CE]  illegal  start  of  expression	199	None	replace
1327	[BUG]  [BUGGY]  if(skipped  >=  0)  {  break  available;  }  [CE]  undefined  label:  available  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >=  0)  {  break  available;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >=  0)  {  break  available;  }	  if(skipped    >    0)    {    break    available;    }    	non-compiled	[CE]  undefined  label:  available	199	None	replace
1328	[BUG]  [BUGGY]  if(skipped  <  0)  {  break  available;  }  [CE]  undefined  label:  available  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  <  0)  {  break  available;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  <  0)  {  break  available;  }	  if(skipped    >    0)    {    break    available;    }    	non-compiled	[CE]  undefined  label:  available	199	None	replace
1329	[BUG]  [BUGGY]  if(skipped  ==  0)  {  break  available;  }  [CE]  undefined  label:  available  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  ==  0)  {  break  available;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  ==  0)  {  break  available;  }	  if(skipped    >    0)    {    break    available;    }    	non-compiled	[CE]  undefined  label:  available	199	None	replace
1330	[BUG]  [BUGGY]  int  skip  =  input.skip(available  -  numToSkip);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  int  skip  =  input.skip(available  -  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	int  skip  =  input.skip(available  -  numToSkip);	  skip    =    input.skip(available    -    numToSkip);    	non-compiled	[CE]  possible  loss  of  precision	162	None	replace
1331	[BUG]  [BUGGY]  skip  =  input.skip(available  -  numToSkip,  skipped);  [CE]  cannot  find  symbol  skip  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skip  =  input.skip(available  -  numToSkip,  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skip  =  input.skip(available  -  numToSkip,  skipped);	  skip    =    input.skip(available    -    numToSkip);    	non-compiled	[CE]  cannot  find  symbol  skip	162	None	replace
1332	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  i;  }  [CE]  possible  loss  of  precision  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  i;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  i;  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    i;    }    	non-compiled	[CE]  possible  loss  of  precision	56	None	replace
1333	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  i;  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  i;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  i;  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    i;    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
1334	[BUG]  [BUGGY]  while(available  >  0)  {  available  +=  numToSkip;  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  available  +=  numToSkip;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  available  +=  numToSkip;	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    i;    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
1335	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  0;  }  [CE]  possible  loss  of  precision  [FE]                                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  0;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  0;  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    i;    }    	non-compiled	[CE]  possible  loss  of  precision	56	None	replace
1336	[BUG]  [BUGGY]  timeout  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  -  numToSkip  +  1);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped  =  input.skip(available  -  numToSkip  +  1);	  skipped    =    input.skip(available    -    numToSkip);    timeout    	compilable	timeout	75	1	replace
1337	[BUG]  [BUGGY]  skipped  =  input.skip(available  -  numToSkip  +  1);  timeout  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  -  numToSkip  +  1);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped  =  input.skip(available  -  numToSkip  +  1);	  skipped    =    input.skip(available    -    numToSkip);    timeout    	compilable	timeout	75	1	replace
1338	[BUG]  [BUGGY]  skipped  =  input.skip(available  -  numToSkip,  skipped);  [CE]  method  skip  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  -  numToSkip,  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped  =  input.skip(available  -  numToSkip,  skipped);	  skipped    =    input.skip(available    -    numToSkip);    timeout    	non-compiled	[CE]  method  skip  in  class  InputStream  cannot  be  applied  to  given  types;	75	None	replace
1339	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  -  numToSkip)+  1;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped  =  input.skip(available  -  numToSkip)+  1;	  skipped    =    input.skip(available    -    numToSkip);    timeout    	compilable	  [FE]  AssertionError  	75	2	replace
1340	[BUG]  [BUGGY]  skipped  =  input.skip(available  -  numToSkip)+  1;  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  -  numToSkip)+  1;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped  =  input.skip(available  -  numToSkip)+  1;	  skipped    =    input.skip(available    -    numToSkip);    timeout    	compilable	  [FE]  AssertionError  	75	2	replace
1341	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "skipped  =     "  +  skipped);  throw  new  IllegalStateException(   "skipped  =   "  +  skipped);  [CE]  unreachable  statement  [FE]    IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "skipped  =     "  +  skipped);  throw  new  IllegalStateException(   "skipped  =   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalStateException(   "skipped    =       "    +    skipped);    throw  new  IllegalStateException(   "skipped  =   "  +  skipped);	  	non-compiled	[CE]  unreachable  statement	139	None	add
1342	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "skipped  =     "  +  skipped);  Throw  new  IllegalStateException(   "skipped  =   "  +  skipped);  [CE]  not  a  statement  [FE]      IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "skipped  =     "  +  skipped);  Throw  new  IllegalStateException(   "skipped  =   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalStateException(   "skipped    =       "    +    skipped);    Throw  new  IllegalStateException(   "skipped  =   "  +  skipped);	  	non-compiled	[CE]  not  a  statement	139	None	add
1343	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "skipped  =     "  +  skipped);  throw  new  IllegalStateException(   "skipped  =   "  +  skipd);  [CE]  cannot  find  symbol  skipd  [FE]        IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "skipped  =     "  +  skipped);  throw  new  IllegalStateException(   "skipped  =   "  +  skipd);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalStateException(   "skipped    =       "    +    skipped);    throw  new  IllegalStateException(   "skipped  =   "  +  skipd);	  	non-compiled	[CE]  cannot  find  symbol  skipd	139	None	add
1344	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "skipped  =     "  +  skipped);  new  IllegalStateException(   "skipped  =   "  +  skipped);  [CE]  unreachable  statement  [FE]          IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "skipped  =     "  +  skipped);  new  IllegalStateException(   "skipped  =   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalStateException(   "skipped    =       "    +    skipped);    new  IllegalStateException(   "skipped  =   "  +  skipped);	  	non-compiled	[CE]  unreachable  statement	139	None	add
1345	[BUG]  [BUGGY]  skipped  =  input.skip(skipped);  long  available  =  input.available();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(skipped);  long  available  =  input.available();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped  =  input.skip(skipped);  long  available  =  input.available();	  skipped    =    input.skip(available);    long    available    =    input.available();    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	233	None	replace
1346	[BUG]  [BUGGY]  int  skipped  =  input.skip(available);  long  available  =  input.available();  [CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  int  skipped  =  input.skip(available);  long  available  =  input.available();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	int  skipped  =  input.skip(available);  long  available  =  input.available();	  skipped    =    input.skip(available);    long    available    =    input.available();    	non-compiled	[CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)	233	None	replace
1347	[BUG]  [BUGGY]  skipped  =  input.skip(numToSkip);  long  available  =  input.available();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(numToSkip);  long  available  =  input.available();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped  =  input.skip(numToSkip);  long  available  =  input.available();	  skipped    =    input.skip(available);    long    available    =    input.available();    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	233	None	replace
1348	[BUG]  [BUGGY]  System.arraycopy(input,  numToSkip,  available,  numToSkip  +  skipped);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.arraycopy(input,  numToSkip,  available,  numToSkip  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	System.arraycopy(input,  numToSkip,  available,  numToSkip  +  skipped);	  if(skipped    >    available)    {    break;    }    if(skipped    >    available)    {    break;    System.arraycopy(input,    numToSkip,    available,    numToSkip    +    skipped);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	204	None	replace
1349	[BUG]  [BUGGY]  if(available  >  skipped)  {  break;  }  else  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  numToSkip  +  skipped);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  break;  }  else  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  numToSkip  +  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skipped)  {  break;  }  else  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  numToSkip  +  skipped);  }	  if(skipped    >    available)    {    break;    }    if(skipped    >    available)    {    break;    System.arraycopy(input,    numToSkip,    available,    numToSkip    +    skipped);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	204	None	replace
1350	[BUG]  [BUGGY]  if(available  >  skip)  {  break;  }  else  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  numToSkip  +  skipped);  }  [CE]  cannot  find  symbol  skip  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skip)  {  break;  }  else  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  numToSkip  +  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skip)  {  break;  }  else  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  numToSkip  +  skipped);  }	  if(skipped    >    available)    {    break;    }    if(skipped    >    available)    {    break;    System.arraycopy(input,    numToSkip,    available,    numToSkip    +    skipped);    }    	non-compiled	[CE]  cannot  find  symbol  skip	204	None	replace
1351	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >=  0)  {  break;  }  if(available  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available    >=    0)    {    break;    }    if(available  >=  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	95	2	add
1352	[BUG]  [BUGGY]  if(available  >=  0)  {  break;  }  if(available  >=  0)  {  break;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >=  0)  {  break;  }  if(available  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >=    0)    {    break;    }    if(available  >=  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	95	2	add
1353	[BUG]  [BUGGY]  if(available  >=  0)  {  break;  }  if(available  >>  0)  {  break;  }  [CE]  incompatible  types  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >=  0)  {  break;  }  if(available  >>  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >=    0)    {    break;    }    if(available  >>  0)  {  break;  }	  	non-compiled	[CE]  incompatible  types	95	None	add
1354	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >=  0)  {  break;  }  if(available!=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available    >=    0)    {    break;    }    if(available!=  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	95	2	add
1355	[BUG]  [BUGGY]  if(available  >=  0)  {  break;  }  if(available!=  0)  {  break;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >=  0)  {  break;  }  if(available!=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >=    0)    {    break;    }    if(available!=  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	95	2	add
1356	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >=  0)  {  break;  }  if(available  ==  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available    >=    0)    {    break;    }    if(available  ==  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	95	2	add
1357	[BUG]  [BUGGY]  if(available  >=  0)  {  break;  }  if(available  ==  0)  {  break;  }  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >=  0)  {  break;  }  if(available  ==  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >=    0)    {    break;    }    if(available  ==  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	95	2	add
1358	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >=  0)  {  break;  }  if(available  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available    >=    0)    {    break;    }    if(available  <  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	95	2	add
1359	[BUG]  [BUGGY]  if(available  >=  0)  {  break;  }  if(available  <  0)  {  break;  }  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >=  0)  {  break;  }  if(available  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >=    0)    {    break;    }    if(available  <  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	95	2	add
1360	[BUG]  [BUGGY]  if(available  >=  0)  {  break;  }  If(available  >=  0)  {  break;  }  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >=  0)  {  break;  }  If(available  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >=    0)    {    break;    }    If(available  >=  0)  {  break;  }	  	non-compiled	[CE]  ';'  expected	95	None	add
1361	[BUG]  [BUGGY]  if(available  >=  0)  {  break;  }  if(available  [Delete]  0)  {  break;  }  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >=  0)  {  break;  }  if(available  [Delete]  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >=    0)    {    break;    }    if(available  [Delete]  0)  {  break;  }	  	non-compiled	[CE]  ')'  expected	95	None	add
1362	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0  ||  skipped  >  0)  {  break;  }  if(skipped  >  0  ||  skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped    >    0    ||    skipped    >    0)    {    break;    }    if(skipped  >  0  ||  skipped  >  0)  {  break;  }	  timeout    	compilable	  [FE]  AssertionError  	252	2	add
1363	[BUG]  [BUGGY]  if(skipped  >  0  ||  skipped  >  0)  {  break;  }  if(skipped  >  0  ||  skipped  >  0)  {  break;  }  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0  ||  skipped  >  0)  {  break;  }  if(skipped  >  0  ||  skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    0    ||    skipped    >    0)    {    break;    }    if(skipped  >  0  ||  skipped  >  0)  {  break;  }	  timeout    	compilable	  [FE]  AssertionError  	252	2	add
1364	[BUG]  [BUGGY]  if(skipped  >  0  ||  skipped  >  0)  {  break;  }  if(skipped  >  0  ||  skipd  >  0)  {  break;  }  [CE]  cannot  find  symbol  skipd  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0  ||  skipped  >  0)  {  break;  }  if(skipped  >  0  ||  skipd  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    0    ||    skipped    >    0)    {    break;    }    if(skipped  >  0  ||  skipd  >  0)  {  break;  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  skipd	252	None	add
1365	[BUG]  [BUGGY]  if(skipped  >  0  ||  skipped  >  0)  {  break;  }  If(skipped  >  0  ||  skipped  >  0)  {  break;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0  ||  skipped  >  0)  {  break;  }  If(skipped  >  0  ||  skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    0    ||    skipped    >    0)    {    break;    }    If(skipped  >  0  ||  skipped  >  0)  {  break;  }	  timeout    	non-compiled	[CE]  ';'  expected	252	None	add
1366	[BUG]  [BUGGY]  if(skipped  >  0  ||  skipped  >  0)  {  break;  }  if(skipped  >  0  ||  skipped  >  0)  {  break;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0  ||  skipped  >  0)  {  break;  }  if(skipped  >  0  ||  skipped  >  0)  {  break;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    0    ||    skipped    >    0)    {    break;    }    if(skipped  >  0  ||  skipped  >  0)  {  break;	  timeout    	non-compiled	[CE]  illegal  start  of  expression	252	None	add
1367	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0  ||  skipped  >  0)  {  break;  }  while(skipped  >  0  ||  skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped    >    0    ||    skipped    >    0)    {    break;    }    while(skipped  >  0  ||  skipped  >  0)  {  break;  }	  timeout    	compilable	  [FE]  AssertionError  	252	2	add
1368	[BUG]  [BUGGY]  if(skipped  >  0  ||  skipped  >  0)  {  break;  }  while(skipped  >  0  ||  skipped  >  0)  {  break;  }  [FE]  AssertionError  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0  ||  skipped  >  0)  {  break;  }  while(skipped  >  0  ||  skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    0    ||    skipped    >    0)    {    break;    }    while(skipped  >  0  ||  skipped  >  0)  {  break;  }	  timeout    	compilable	  [FE]  AssertionError  	252	2	add
1369	[BUG]  [BUGGY]  if(skipped  >  0  ||  skipped  >  0)  {  break;  }  if(skipped  >  0  ||  saved  >  0)  {  break;  }  [CE]  cannot  find  symbol  saved  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0  ||  skipped  >  0)  {  break;  }  if(skipped  >  0  ||  saved  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    0    ||    skipped    >    0)    {    break;    }    if(skipped  >  0  ||  saved  >  0)  {  break;  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  saved	252	None	add
1370	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }	  continue;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
1371	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  this.available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  this.available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  for(int  i  =  this.available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }	  continue;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
1372	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  accessible;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  accessible;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  for(int  i  =  accessible;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }	  continue;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
1373	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }	  continue;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
1374	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  in.read();  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  in.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  in.read();  }	  continue;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
1375	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped!=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >=        0)        {        break;        }        if(skipped!=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	37	2	add
1376	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped!=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped!=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped!=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	37	2	add
1377	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped!=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >=        0)        {        break;        }        if(skipped!=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	37	2	add
1378	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped!=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped!=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped!=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	37	2	add
1379	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped!=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped!=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >=        0)        {        break;        }        if(skipped!=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped!=  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	37	2	add
1380	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped!=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped!=  0)  {  break;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped!=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped!=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped!=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped!=  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	37	2	add
1381	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped!=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped!=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >=        0)        {        break;        }        if(skipped!=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped!=  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	37	2	add
1382	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped!=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped!=  0)  {  break;  }  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped!=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped!=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped!=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped!=  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	37	2	add
1383	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped!=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped!=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >=        0)        {        break;        }        if(skipped!=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped!=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	37	2	add
1384	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped!=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped!=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped!=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped!=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped!=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped!=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	37	2	add
1385	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped!=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  ==  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >=        0)        {        break;        }        if(skipped!=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  ==  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	37	2	add
1386	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped!=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  ==  0)  {  break;  }  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped!=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  ==  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped!=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  ==  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	37	2	add
1387	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped!=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >>  0)  {  break;  }  [CE]  incompatible  types  [FE]                AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped!=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >>  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped!=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >>  0)  {  break;  }	  	non-compiled	[CE]  incompatible  types	37	None	add
1388	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped!=  0)  {  break;  }  if(skipped  >>  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [CE]  incompatible  types  [FE]                  AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped!=  0)  {  break;  }  if(skipped  >>  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped!=    0)    {    break;    }    if(skipped  >>  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }	  	non-compiled	[CE]  incompatible  types	37	None	add
1389	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "skipped:   "  +  skipped);  throw  new  IllegalArgumentException(   "skipped:   "  +  skipped);  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException(   "skipped:   "  +  skipped);  throw  new  IllegalArgumentException(   "skipped:   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalArgumentException(   "skipped:   "    +    skipped);    throw  new  IllegalArgumentException(   "skipped:   "  +  skipped);	  	non-compiled	[CE]  unreachable  statement	29	None	add
1390	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "skipped:   "  +  skipped);  Throw  new  IllegalArgumentException(   "skipped:   "  +  skipped);  [CE]  not  a  statement  [FE]      IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException(   "skipped:   "  +  skipped);  Throw  new  IllegalArgumentException(   "skipped:   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalArgumentException(   "skipped:   "    +    skipped);    Throw  new  IllegalArgumentException(   "skipped:   "  +  skipped);	  	non-compiled	[CE]  not  a  statement	29	None	add
1391	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "skipped:   "  +  skipped);  throw  new  IllegalArgumentException(   "skipped:   "  +  skipd);  [CE]  cannot  find  symbol  skipd  [FE]        IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException(   "skipped:   "  +  skipped);  throw  new  IllegalArgumentException(   "skipped:   "  +  skipd);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalArgumentException(   "skipped:   "    +    skipped);    throw  new  IllegalArgumentException(   "skipped:   "  +  skipd);	  	non-compiled	[CE]  cannot  find  symbol  skipd	29	None	add
1392	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }	          if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	224	None	replace
1393	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  0;  i  <  available.length;  ++i)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  0;  i  <  available.length;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  0;  i  <  available.length;  ++i)  {  available  +=  input.read();  }	          if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	224	None	replace
1394	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  available.length;  ++i)  {  available  +=  input.read();  }  [CE]  long  cannot  be  dereferenced  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  0;  i  <  available.length;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  0;  i  <  available.length;  ++i)  {  available  +=  input.read();  }	          if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  long  cannot  be  dereferenced	224	None	replace
1395	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();	          if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	224	None	replace
1396	[BUG]  [BUGGY]  if(num  >  0)  {  break;  }  [CE]  cannot  find  symbol  num  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(num  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(num  >  0)  {  break;  }	  if(skip    >    0)    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  num	11	None	replace
1397	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >        available)        {        break;        }        if(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }	  	compilable	  [FE]  AssertionError  	82	2	add
1398	[BUG]  [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >        available)        {        break;        }        if(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }	  	compilable	  [FE]  AssertionError  	82	2	add
1399	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >        available)        {        break;        }        if(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }	  	compilable	  [FE]  AssertionError  	82	2	add
1400	[BUG]  [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >        available)        {        break;        }        if(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }	  	compilable	  [FE]  AssertionError  	82	2	add
1401	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  else  if(skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >        available)        {        break;        }        if(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  else  if(skipped  >  available)  {  break;  }	  	compilable	  [FE]  AssertionError  	82	2	add
1402	[BUG]  [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  else  if(skipped  >  available)  {  break;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  else  if(skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >        available)        {        break;        }        if(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  else  if(skipped  >  available)  {  break;  }	  	compilable	  [FE]  AssertionError  	82	2	add
1403	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  while(skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >        available)        {        break;        }        if(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  while(skipped  >  available)  {  break;  }	  	compilable	  [FE]  AssertionError  	82	2	add
1404	[BUG]  [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  while(skipped  >  available)  {  break;  }  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  while(skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >        available)        {        break;        }        if(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  while(skipped  >  available)  {  break;  }	  	compilable	  [FE]  AssertionError  	82	2	add
1405	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  }  if(skipped  <  available)  {  break;  }  if(skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >        available)        {        break;        }        if(skipped    >    available)    {    break;    }    if(skipped  <  available)  {  break;  }  if(skipped  >  available)  {  break;  }	  	compilable	  [FE]  AssertionError  	82	2	add
1406	[BUG]  [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  }  if(skipped  <  available)  {  break;  }  if(skipped  >  available)  {  break;  }  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  }  if(skipped  <  available)  {  break;  }  if(skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >        available)        {        break;        }        if(skipped    >    available)    {    break;    }    if(skipped  <  available)  {  break;  }  if(skipped  >  available)  {  break;  }	  	compilable	  [FE]  AssertionError  	82	2	add
1407	[BUG]  [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  }  If(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  }  If(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >        available)        {        break;        }        if(skipped    >    available)    {    break;    }    If(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }	  	non-compiled	[CE]  ';'  expected	82	None	add
1408	[BUG]  [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  }  If(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  }  If(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >        available)        {        break;        }        if(skipped    >    available)    {    break;    }    If(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }	  	non-compiled	[CE]  ';'  expected	82	None	add
1409	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0  ||  available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  0  ||  available  >  0)  {  break;  }	  if(available    >    0)    {    break;    }    if(available    >    0)    {    break;    System.arraycopy(input,    numToSkip,    available,    skipped);    }    	compilable	  [FE]  AssertionError  	208	2	replace
1410	[BUG]  [BUGGY]  if(available  >  0  ||  available  >  0)  {  break;  }  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0  ||  available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0  ||  available  >  0)  {  break;  }	  if(available    >    0)    {    break;    }    if(available    >    0)    {    break;    System.arraycopy(input,    numToSkip,    available,    skipped);    }    	compilable	  [FE]  AssertionError  	208	2	replace
1411	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getLength();  }	  continue;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	193	None	replace
1412	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skip  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skip  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getLength();  }	  continue;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	193	None	replace
1413	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getLength();  }  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getLength();  }	  continue;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  possible  loss  of  precision	193	None	replace
1414	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  ++i)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  ++i)  {  available  +=  input.getLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  ++i)  {  available  +=  input.getLength();  }	  continue;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	193	None	replace
1415	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getUpperBound();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getUpperBound();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getUpperBound();  }	  continue;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	193	None	replace
1416	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getUpperCase();  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getUpperCase();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getUpperCase();  }	  continue;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	193	None	replace
1417	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Skip  skipped  =   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalStateException( "Skip  skipped  =   "  +  skipped);	  throw    new    IllegalStateException(   "skipped    =       "    +    skipped);    	compilable	  [FE]  IllegalStateException  	140	2	replace
1418	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Skip  skipped  =   "  +  skipped);  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Skip  skipped  =   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "Skip  skipped  =   "  +  skipped);	  throw    new    IllegalStateException(   "skipped    =       "    +    skipped);    	compilable	  [FE]  IllegalStateException  	140	2	replace
1419	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "skipped  =  0   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalStateException( "skipped  =  0   "  +  skipped);	  throw    new    IllegalStateException(   "skipped    =       "    +    skipped);    	compilable	  [FE]  IllegalStateException  	140	2	replace
1420	[BUG]  [BUGGY]  throw  new  IllegalStateException( "skipped  =  0   "  +  skipped);  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "skipped  =  0   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "skipped  =  0   "  +  skipped);	  throw    new    IllegalStateException(   "skipped    =       "    +    skipped);    	compilable	  [FE]  IllegalStateException  	140	2	replace
1421	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "skipped  =  ' "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalStateException( "skipped  =  ' "  +  skipped);	  throw    new    IllegalStateException(   "skipped    =       "    +    skipped);    	compilable	  [FE]  IllegalStateException  	140	2	replace
1422	[BUG]  [BUGGY]  throw  new  IllegalStateException( "skipped  =  ' "  +  skipped);  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "skipped  =  ' "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "skipped  =  ' "  +  skipped);	  throw    new    IllegalStateException(   "skipped    =       "    +    skipped);    	compilable	  [FE]  IllegalStateException  	140	2	replace
1423	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Skip  cannot  be  skipped.   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IOException( "Skip  cannot  be  skipped.   "  +  skipped);	  throw    new    IOException(   "Skip    cannot    be    skipped.   ");    	compilable	  [FE]  IOException  	219	2	replace
1424	[BUG]  [BUGGY]  throw  new  IOException( "Skip  cannot  be  skipped.   "  +  skipped);  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Skip  cannot  be  skipped.   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( "Skip  cannot  be  skipped.   "  +  skipped);	  throw    new    IOException(   "Skip    cannot    be    skipped.   ");    	compilable	  [FE]  IOException  	219	2	replace
1425	[BUG]  [BUGGY]  [FE]  IOException  [FE]      IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Skip  cannot  be  skipped.  Please  check  that  the  available  is  null. ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IOException( "Skip  cannot  be  skipped.  Please  check  that  the  available  is  null. ");	  throw    new    IOException(   "Skip    cannot    be    skipped.   ");    	compilable	  [FE]  IOException  	219	2	replace
1426	[BUG]  [BUGGY]  throw  new  IOException( "Skip  cannot  be  skipped.  Please  check  that  the  available  is  null. ");  [FE]  IOException  [FE]      IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Skip  cannot  be  skipped.  Please  check  that  the  available  is  null. ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( "Skip  cannot  be  skipped.  Please  check  that  the  available  is  null. ");	  throw    new    IOException(   "Skip    cannot    be    skipped.   ");    	compilable	  [FE]  IOException  	219	2	replace
1427	[BUG]  [BUGGY]  [FE]  IOException  [FE]        IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Skip  cannot  be  skipped.  Please  check  that  the  available  does  not  exist. ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IOException( "Skip  cannot  be  skipped.  Please  check  that  the  available  does  not  exist. ");	  throw    new    IOException(   "Skip    cannot    be    skipped.   ");    	compilable	  [FE]  IOException  	219	2	replace
1428	[BUG]  [BUGGY]  throw  new  IOException( "Skip  cannot  be  skipped.  Please  check  that  the  available  does  not  exist. ");  [FE]  IOException  [FE]        IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Skip  cannot  be  skipped.  Please  check  that  the  available  does  not  exist. ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( "Skip  cannot  be  skipped.  Please  check  that  the  available  does  not  exist. ");	  throw    new    IOException(   "Skip    cannot    be    skipped.   ");    	compilable	  [FE]  IOException  	219	2	replace
1429	[BUG]  [BUGGY]  [FE]  IOException  [FE]          IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Skip  cannot  be  skipped.  Please  check  that  the  available  has  been  skipped. ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IOException( "Skip  cannot  be  skipped.  Please  check  that  the  available  has  been  skipped. ");	  throw    new    IOException(   "Skip    cannot    be    skipped.   ");    	compilable	  [FE]  IOException  	219	2	replace
1430	[BUG]  [BUGGY]  throw  new  IOException( "Skip  cannot  be  skipped.  Please  check  that  the  available  has  been  skipped. ");  [FE]  IOException  [FE]          IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Skip  cannot  be  skipped.  Please  check  that  the  available  has  been  skipped. ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( "Skip  cannot  be  skipped.  Please  check  that  the  available  has  been  skipped. ");	  throw    new    IOException(   "Skip    cannot    be    skipped.   ");    	compilable	  [FE]  IOException  	219	2	replace
1431	[BUG]  [BUGGY]  [FE]  IOException  [FE]            IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Skip  cannot  be  skipped.  Please  check  that  the  available  is  less  than  one  of  the  available. ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IOException( "Skip  cannot  be  skipped.  Please  check  that  the  available  is  less  than  one  of  the  available. ");	  throw    new    IOException(   "Skip    cannot    be    skipped.   ");    	compilable	  [FE]  IOException  	219	2	replace
1432	[BUG]  [BUGGY]  throw  new  IOException( "Skip  cannot  be  skipped.  Please  check  that  the  available  is  less  than  one  of  the  available. ");  [FE]  IOException  [FE]            IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Skip  cannot  be  skipped.  Please  check  that  the  available  is  less  than  one  of  the  available. ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( "Skip  cannot  be  skipped.  Please  check  that  the  available  is  less  than  one  of  the  available. ");	  throw    new    IOException(   "Skip    cannot    be    skipped.   ");    	compilable	  [FE]  IOException  	219	2	replace
1433	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  0;  i--)  {  skipped  =  input.skip(available);  }  [CE]  possible  loss  of  precision  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  available;  i  <  0;  i--)  {  skipped  =  input.skip(available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  available;  i  <  0;  i--)  {  skipped  =  input.skip(available);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    0;    i--)    {    skipped    =    input.skip(available);    }    	non-compiled	[CE]  possible  loss  of  precision	70	None	replace
1434	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  0;  i--)  {  skipped  =  input.skipped(available);  }  [CE]  possible  loss  of  precision  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  available;  i  <  0;  i--)  {  skipped  =  input.skipped(available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  available;  i  <  0;  i--)  {  skipped  =  input.skipped(available);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    0;    i--)    {    skipped    =    input.skip(available);    }    	non-compiled	[CE]  possible  loss  of  precision	70	None	replace
1435	[BUG]  [BUGGY]  timeout  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  skipped  =  input.skip(available);  }  else  {  available  =  0;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped  >  0)  {  skipped  =  input.skip(available);  }  else  {  available  =  0;  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    0;    i--)    {    skipped    =    input.skip(available);    }    	compilable	timeout	70	1	replace
1436	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  =  input.skip(available);  }  else  {  available  =  0;  }  timeout  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  skipped  =  input.skip(available);  }  else  {  available  =  0;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  skipped  =  input.skip(available);  }  else  {  available  =  0;  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    0;    i--)    {    skipped    =    input.skip(available);    }    	compilable	timeout	70	1	replace
1437	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  numToSkip  =  input.skip(numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	numToSkip  =  input.skip(numToSkip);	  skip    =    input.skip(numToSkip);    	compilable	  [FE]  AssertionError  	115	2	replace
1438	[BUG]  [BUGGY]  numToSkip  =  input.skip(numToSkip);  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  numToSkip  =  input.skip(numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	numToSkip  =  input.skip(numToSkip);	  skip    =    input.skip(numToSkip);    	compilable	  [FE]  AssertionError  	115	2	replace
1439	[BUG]  [BUGGY]  int  skip  =  input.skip(numToSkip);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  int  skip  =  input.skip(numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	int  skip  =  input.skip(numToSkip);	  skip    =    input.skip(numToSkip);    	non-compiled	[CE]  possible  loss  of  precision	115	None	replace
1440	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IllegalArgumentException(   "   ");  }  if(available  >  0)  {  throw  new  IllegalArgumentException(   "   ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    if(available  >  0)  {  throw  new  IllegalArgumentException(   "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	166	2	add
1441	[BUG]  [BUGGY]  if(available  >  0)  {  throw  new  IllegalArgumentException(   "   ");  }  if(available  >  0)  {  throw  new  IllegalArgumentException(   "   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IllegalArgumentException(   "   ");  }  if(available  >  0)  {  throw  new  IllegalArgumentException(   "   ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    if(available  >  0)  {  throw  new  IllegalArgumentException(   "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	166	2	add
1442	[BUG]  [BUGGY]  if(available  >  0)  {  throw  new  IllegalArgumentException(   "   ");  }  If(available  >  0)  {  throw  new  IllegalArgumentException(   "   ");  }  [CE]  [FE]      IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IllegalArgumentException(   "   ");  }  If(available  >  0)  {  throw  new  IllegalArgumentException(   "   ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    If(available  >  0)  {  throw  new  IllegalArgumentException(   "   ");  }	  	non-compiled	[CE]  	166	None	add
1443	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IllegalArgumentException(   "   ");  }  if(available  >  0)  {  throw  new  IllegalArgumentException( ",   ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    if(available  >  0)  {  throw  new  IllegalArgumentException( ",   ");  }	  	compilable	  [FE]  IllegalArgumentException  	166	2	add
1444	[BUG]  [BUGGY]  if(available  >  0)  {  throw  new  IllegalArgumentException(   "   ");  }  if(available  >  0)  {  throw  new  IllegalArgumentException( ",   ");  }  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IllegalArgumentException(   "   ");  }  if(available  >  0)  {  throw  new  IllegalArgumentException( ",   ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    if(available  >  0)  {  throw  new  IllegalArgumentException( ",   ");  }	  	compilable	  [FE]  IllegalArgumentException  	166	2	add
1445	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IllegalArgumentException(   "   ");  }  if(available  >  0)  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    if(available  >  0)  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  IllegalArgumentException  	166	2	add
1446	[BUG]  [BUGGY]  if(available  >  0)  {  throw  new  IllegalArgumentException(   "   ");  }  if(available  >  0)  {  throw  new  IllegalArgumentException( ".   ");  }  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IllegalArgumentException(   "   ");  }  if(available  >  0)  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    if(available  >  0)  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  IllegalArgumentException  	166	2	add
1447	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >=        0)        {        break;        }        if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	35	2	add
1448	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	35	2	add
1449	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >=        0)        {        break;        }        if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	35	2	add
1450	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	35	2	add
1451	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped!=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >=        0)        {        break;        }        if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped!=  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	35	2	add
1452	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped!=  0)  {  break;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped!=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped!=  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	35	2	add
1453	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >>  0)  {  break;  }  [CE]  incompatible  types  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >>  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >>  0)  {  break;  }	  	non-compiled	[CE]  incompatible  types	35	None	add
1454	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  ==  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >=        0)        {        break;        }        if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  ==  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	35	2	add
1455	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  ==  0)  {  break;  }  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  ==  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  ==  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	35	2	add
1456	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >=        0)        {        break;        }        if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	35	2	add
1457	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	35	2	add
1458	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >>  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [CE]  incompatible  types  [FE]                AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >>  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped    >=    0)    {    break;    }    if(skipped  >>  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }	  	non-compiled	[CE]  incompatible  types	35	None	add
1459	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >=        0)        {        break;        }        if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  <  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	35	2	add
1460	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  <  0)  {  break;  }  [FE]  AssertionError  [FE]                  AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  <  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	35	2	add
1461	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  -  numToSkip);  skipped  =  input.skip(available  -  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped    =    input.skip(available    -    numToSkip);    skipped  =  input.skip(available  -  numToSkip);	  timeout    	compilable	  [FE]  AssertionError  	74	2	add
1462	[BUG]  [BUGGY]  skipped  =  input.skip(available  -  numToSkip);  skipped  =  input.skip(available  -  numToSkip);  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  -  numToSkip);  skipped  =  input.skip(available  -  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    -    numToSkip);    skipped  =  input.skip(available  -  numToSkip);	  timeout    	compilable	  [FE]  AssertionError  	74	2	add
1463	[BUG]  [BUGGY]  skipped  =  input.skip(available  -  numToSkip);  long  skipped  =  input.skip(available  -  numToSkip);  [CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  -  numToSkip);  long  skipped  =  input.skip(available  -  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    -    numToSkip);    long  skipped  =  input.skip(available  -  numToSkip);	  timeout    	non-compiled	[CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)	74	None	add
1464	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  -  numToSkip);  numToSkip  =  input.skip(available  -  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped    =    input.skip(available    -    numToSkip);    numToSkip  =  input.skip(available  -  numToSkip);	  timeout    	compilable	  [FE]  AssertionError  	74	2	add
1465	[BUG]  [BUGGY]  skipped  =  input.skip(available  -  numToSkip);  numToSkip  =  input.skip(available  -  numToSkip);  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  -  numToSkip);  numToSkip  =  input.skip(available  -  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    -    numToSkip);    numToSkip  =  input.skip(available  -  numToSkip);	  timeout    	compilable	  [FE]  AssertionError  	74	2	add
1466	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  -  numToSkip);  if(available  >  numToSkip)  {  skipped  =  input.skip(available  -  numToSkip);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped    =    input.skip(available    -    numToSkip);    if(available  >  numToSkip)  {  skipped  =  input.skip(available  -  numToSkip);  }	  timeout    	compilable	  [FE]  AssertionError  	74	2	add
1467	[BUG]  [BUGGY]  skipped  =  input.skip(available  -  numToSkip);  if(available  >  numToSkip)  {  skipped  =  input.skip(available  -  numToSkip);  }  [FE]  AssertionError  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  -  numToSkip);  if(available  >  numToSkip)  {  skipped  =  input.skip(available  -  numToSkip);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    -    numToSkip);    if(available  >  numToSkip)  {  skipped  =  input.skip(available  -  numToSkip);  }	  timeout    	compilable	  [FE]  AssertionError  	74	2	add
1468	[BUG]  [BUGGY]  skipped  =  input.skip(available  -  numToSkip);  if(available  >  numToSkip)  {  skip  =  input.skip(available  -  numToSkip);  }  [CE]  cannot  find  symbol  skip  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  -  numToSkip);  if(available  >  numToSkip)  {  skip  =  input.skip(available  -  numToSkip);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    -    numToSkip);    if(available  >  numToSkip)  {  skip  =  input.skip(available  -  numToSkip);  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  skip	74	None	add
1469	[BUG]  [BUGGY]  skipped  =  input.skip(available  -  numToSkip);  if(available  >  numToSkip)  {  skip  =  input.skip(available  -  numToSkip);  }  else  {  skipped  =  input.skip(available  -  numToSkip);  }  [CE]  cannot  find  symbol  skip  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  -  numToSkip);  if(available  >  numToSkip)  {  skip  =  input.skip(available  -  numToSkip);  }  else  {  skipped  =  input.skip(available  -  numToSkip);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    -    numToSkip);    if(available  >  numToSkip)  {  skip  =  input.skip(available  -  numToSkip);  }  else  {  skipped  =  input.skip(available  -  numToSkip);  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  skip	74	None	add
1470	[BUG]  [BUGGY]  skipped  =  input.skip(available  -  numToSkip);  int  numToSkip  =  available  -  numToSkip;  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  -  numToSkip);  int  numToSkip  =  available  -  numToSkip;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    -    numToSkip);    int  numToSkip  =  available  -  numToSkip;	  timeout    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	74	None	add
1471	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  -  numToSkip);  if(available  >  numToSkip)  {  skipped  =  input.skip(available  -  numToSkip);  }  else  {  available  =  0;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped    =    input.skip(available    -    numToSkip);    if(available  >  numToSkip)  {  skipped  =  input.skip(available  -  numToSkip);  }  else  {  available  =  0;  }	  timeout    	compilable	  [FE]  AssertionError  	74	2	add
1472	[BUG]  [BUGGY]  skipped  =  input.skip(available  -  numToSkip);  if(available  >  numToSkip)  {  skipped  =  input.skip(available  -  numToSkip);  }  else  {  available  =  0;  }  [FE]  AssertionError  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  -  numToSkip);  if(available  >  numToSkip)  {  skipped  =  input.skip(available  -  numToSkip);  }  else  {  available  =  0;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    -    numToSkip);    if(available  >  numToSkip)  {  skipped  =  input.skip(available  -  numToSkip);  }  else  {  available  =  0;  }	  timeout    	compilable	  [FE]  AssertionError  	74	2	add
1473	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
1474	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
1475	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getUpperCase();  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getUpperCase();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getUpperCase();  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
1476	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getUpperBound();  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getUpperBound();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getUpperBound();  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
1477	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getEnd();  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getEnd();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getEnd();  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
1478	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  skipped.getLength();  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  skipped.getLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  skipped.getLength();  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
1479	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getUpperCase();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getUpperCase();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getUpperCase();  }	  continue;    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	192	None	replace
1480	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getUpperBound();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getUpperBound();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getUpperBound();  }	  continue;    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	192	None	replace
1481	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getEnd();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getEnd();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getEnd();  }	  continue;    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	192	None	replace
1482	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getSize();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getSize();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getSize();  }	  continue;    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	192	None	replace
1483	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getRawOffset();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getRawOffset();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getRawOffset();  }	  continue;    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	192	None	replace
1484	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getSize();  }  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getSize();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getSize();  }	  continue;    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.getSize();    }    	non-compiled	[CE]  cannot  find  symbol	269	None	replace
1485	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getRawSize();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getRawSize();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getRawSize();  }	  continue;    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.getSize();    }    	non-compiled	[CE]  illegal  start  of  expression	269	None	replace
1486	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.next();  }  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.next();  }  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.next();  }  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	178	None	replace
1487	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.next();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	178	None	replace
1488	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.next();  }  [CE]  cannot  find  symbol  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.next();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.next();    }    	non-compiled	[CE]  cannot  find  symbol	178	None	replace
1489	[BUG]  [BUGGY]  long  available  =  input.skip(numToSkip);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  long  available  =  input.skip(numToSkip);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	long  available  =  input.skip(numToSkip);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.next();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	178	None	replace
1490	[BUG]  [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.next();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	178	None	replace
1491	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.getValue();  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.getValue();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.getValue();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	178	None	replace
1492	[BUG]  [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.next();  }  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.next();  }  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.next();  }  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	178	None	replace
1493	[BUG]  [BUGGY]  if(available  >  0)  {  break;  }  if(Skipped  >  0)  {  break;  }  [CE]  cannot  find  symbol  Skipped  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  break;  }  if(Skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  break;  }  if(Skipped  >  0)  {  break;  }	  if(skipped    >    0)    {    break;    }    if(Skipped    >    0)    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  Skipped	258	None	replace
1494	[BUG]  [BUGGY]  if(available  >  0)  {  break;  }  if(visible  >  0)  {  break;  }  [CE]  cannot  find  symbol  visible  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  break;  }  if(visible  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  break;  }  if(visible  >  0)  {  break;  }	  if(skipped    >    0)    {    break;    }    if(Skipped    >    0)    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  visible	258	None	replace
1495	[BUG]  [BUGGY]  while(available  <  numToSkip)  {  if(skipped  ==  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  <  numToSkip)  {  if(skipped  ==  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  <  numToSkip)  {  if(skipped  ==  0)  {  break;  }	  if(skipped    >=    0)    {    break;    }    if(skipped    <    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
1496	[BUG]  [BUGGY]  if(available  <  =  numToSkip)  {  break;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  =  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  =  numToSkip)  {  break;  }	  if(available    >=    numToSkip)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	186	None	replace
1497	[BUG]  [BUGGY]  timeout  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  ==  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  ==  numToSkip)  {  break;  }	  if(available    >=    numToSkip)    {    break;    }    	compilable	timeout	186	1	replace
1498	[BUG]  [BUGGY]  if(available  ==  numToSkip)  {  break;  }  timeout  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  ==  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  ==  numToSkip)  {  break;  }	  if(available    >=    numToSkip)    {    break;    }    	compilable	timeout	186	1	replace
1499	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  0  ||  skipped  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  <  0  ||  skipped  >=  0)  {  break;  }	  if(available    <    0)    {    break;    }    timeout    	compilable	  [FE]  AssertionError  	94	2	replace
1500	[BUG]  [BUGGY]  if(available  <  0  ||  skipped  >=  0)  {  break;  }  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  0  ||  skipped  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  0  ||  skipped  >=  0)  {  break;  }	  if(available    <    0)    {    break;    }    timeout    	compilable	  [FE]  AssertionError  	94	2	replace
1501	[BUG]  [BUGGY]  lessThan  <  >  0)  {  break;  }  while(available  >  0)  {  break;  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  lessThan  <  >  0)  {  break;  }  while(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	lessThan  <  >  0)  {  break;  }  while(available  >  0)  {  break;  }	  if(available    >    0)    {    break;    }    while(available    >    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
1502	[BUG]  [BUGGY]  While(available  >  0)  {  break;  }  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  While(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	While(available  >  0)  {  break;  }	  if(available    >    0)    {    break;    }    while(available    >    0)    {    break;    }    	non-compiled	[CE]  ';'  expected	151	None	replace
1503	[BUG]  [BUGGY]  lessThan  <  >  0)  {  break;  }  while(skipped  >  0)  {  break;  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  lessThan  <  >  0)  {  break;  }  while(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	lessThan  <  >  0)  {  break;  }  while(skipped  >  0)  {  break;  }	  if(available    >    0)    {    break;    }    while(available    >    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
1504	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  <  available)  {  break;  }  if(skipped  <  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped    <    available)    {    break;    }    if(skipped  <  available)  {  break;  }	  	compilable	  [FE]  AssertionError  	49	2	add
1505	[BUG]  [BUGGY]  if(skipped  <  available)  {  break;  }  if(skipped  <  available)  {  break;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  <  available)  {  break;  }  if(skipped  <  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    <    available)    {    break;    }    if(skipped  <  available)  {  break;  }	  	compilable	  [FE]  AssertionError  	49	2	add
1506	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  <  available)  {  break;  }  if(skipped  >=  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped    <    available)    {    break;    }    if(skipped  >=  available)  {  break;  }	  	compilable	  [FE]  AssertionError  	49	2	add
1507	[BUG]  [BUGGY]  if(skipped  <  available)  {  break;  }  if(skipped  >=  available)  {  break;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  <  available)  {  break;  }  if(skipped  >=  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    <    available)    {    break;    }    if(skipped  >=  available)  {  break;  }	  	compilable	  [FE]  AssertionError  	49	2	add
1508	[BUG]  [BUGGY]  if(skipped  <  available)  {  break;  }  If(skipped  <  available)  {  break;  }  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  <  available)  {  break;  }  If(skipped  <  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    <    available)    {    break;    }    If(skipped  <  available)  {  break;  }	  	non-compiled	[CE]  ';'  expected	49	None	add
1509	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  <  available)  {  break;  }  if(skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped    <    available)    {    break;    }    if(skipped  >  available)  {  break;  }	  	compilable	  [FE]  AssertionError  	49	2	add
1510	[BUG]  [BUGGY]  if(skipped  <  available)  {  break;  }  if(skipped  >  available)  {  break;  }  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  <  available)  {  break;  }  if(skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    <    available)    {    break;    }    if(skipped  >  available)  {  break;  }	  	compilable	  [FE]  AssertionError  	49	2	add
1511	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  <  available)  {  break;  }  while(skipped  <  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped    <    available)    {    break;    }    while(skipped  <  available)  {  break;  }	  	compilable	  [FE]  AssertionError  	49	2	add
1512	[BUG]  [BUGGY]  if(skipped  <  available)  {  break;  }  while(skipped  <  available)  {  break;  }  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  <  available)  {  break;  }  while(skipped  <  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    <    available)    {    break;    }    while(skipped  <  available)  {  break;  }	  	compilable	  [FE]  AssertionError  	49	2	add
1513	[BUG]  [BUGGY]  if(skipped  <  available)  {  break;  }  when(skipped  <  available)  {  break;  }  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  <  available)  {  break;  }  when(skipped  <  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    <    available)    {    break;    }    when(skipped  <  available)  {  break;  }	  	non-compiled	[CE]  ';'  expected	49	None	add
1514	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( ".skipped= "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalArgumentException( ".skipped= "  +  skipped);	  throw    new    IllegalArgumentException(       "       ");    throw    new    IllegalArgumentException(.   "       ");    	compilable	  [FE]  IllegalArgumentException  	9	2	replace
1515	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( ".skipped= "  +  skipped);  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( ".skipped= "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException( ".skipped= "  +  skipped);	  throw    new    IllegalArgumentException(       "       ");    throw    new    IllegalArgumentException(.   "       ");    	compilable	  [FE]  IllegalArgumentException  	9	2	replace
1516	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( ".skipped= ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalArgumentException( ".skipped= ");	  throw    new    IllegalArgumentException(       "       ");    throw    new    IllegalArgumentException(.   "       ");    	compilable	  [FE]  IllegalArgumentException  	9	2	replace
1517	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( ".skipped= ");  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( ".skipped= ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException( ".skipped= ");	  throw    new    IllegalArgumentException(       "       ");    throw    new    IllegalArgumentException(.   "       ");    	compilable	  [FE]  IllegalArgumentException  	9	2	replace
1518	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( ".skipped  =  0;  [CE]  unclosed  string  literal  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( ".skipped  =  0;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException( ".skipped  =  0;	  throw    new    IllegalArgumentException(       "       ");    throw    new    IllegalArgumentException(.   "       ");    	non-compiled	[CE]  unclosed  string  literal	9	None	replace
1519	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  if(available  >  0)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  if(available  >  0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  if(available  >  0)  {  continue;  }	  continue;    for(int    i    =    available;    i    <    numToSkip;    i++)    {    if(available    >    0)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
1520	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  if(skipped  >  0)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  if(skipped  >  0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  if(skipped  >  0)  {  continue;  }	  continue;    for(int    i    =    available;    i    <    numToSkip;    i++)    {    if(available    >    0)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
1521	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  if(skip  >  0)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  if(skip  >  0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  if(skip  >  0)  {  continue;  }	  continue;    for(int    i    =    available;    i    <    numToSkip;    i++)    {    if(available    >    0)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
1522	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  if(available  >  0)  {  continue;  }  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  if(available  >  0)  {  continue;  }  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  if(available  >  0)  {  continue;  }  }	  continue;    for(int    i    =    available;    i    <    numToSkip;    i++)    {    if(available    >    0)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
1523	[BUG]  [BUGGY]  if(skipped  >  0)  {  continue;  for(int  i  =  available;  i  <  numToSkip;  i++)  {  if(skipped  >  0)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  continue;  for(int  i  =  available;  i  <  numToSkip;  i++)  {  if(skipped  >  0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  continue;  for(int  i  =  available;  i  <  numToSkip;  i++)  {  if(skipped  >  0)  {  continue;  }	  continue;    for(int    i    =    available;    i    <    numToSkip;    i++)    {    if(available    >    0)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
1524	[BUG]  [BUGGY]  if(skipped  >  0)  {  continue;  for(int  i  =  available;  i  <  numToSkip;  i++)  {  if(available  >  0)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  continue;  for(int  i  =  available;  i  <  numToSkip;  i++)  {  if(available  >  0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  continue;  for(int  i  =  available;  i  <  numToSkip;  i++)  {  if(available  >  0)  {  continue;  }	  continue;    for(int    i    =    available;    i    <    numToSkip;    i++)    {    if(available    >    0)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
1525	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  if(skipped  >  0)  {  continue;  }  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  if(skipped  >  0)  {  continue;  }  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  if(skipped  >  0)  {  continue;  }  }	  continue;    for(int    i    =    available;    i    <    numToSkip;    i++)    {    if(available    >    0)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
1526	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getBytes(i);  }  [CE]  possible  loss  of  precision  [FE]                                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getBytes(i);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getBytes(i);  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.getBytes(i);    }    	non-compiled	[CE]  possible  loss  of  precision	229	None	replace
1527	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getBytes(i);  }  [CE]  illegal  start  of  expression  [FE]                                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getBytes(i);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getBytes(i);  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.getBytes(i);    }    	non-compiled	[CE]  illegal  start  of  expression	229	None	replace
1528	[BUG]  [BUGGY]  while(available  >  0)  {  available  +=  input.getBytes(numToSkip);  [CE]  illegal  start  of  expression  [FE]                                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  available  +=  input.getBytes(numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  available  +=  input.getBytes(numToSkip);	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.getBytes(i);    }    	non-compiled	[CE]  illegal  start  of  expression	229	None	replace
1529	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  0;  ++i)  {  available  +=  input.getBytes(i);  }  [CE]  possible  loss  of  precision  [FE]                                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  available;  i  <  0;  ++i)  {  available  +=  input.getBytes(i);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  available;  i  <  0;  ++i)  {  available  +=  input.getBytes(i);  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.getBytes(i);    }    	non-compiled	[CE]  possible  loss  of  precision	229	None	replace
1530	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getBytes(skip);  }  [CE]  illegal  start  of  expression  [FE]                                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getBytes(skip);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getBytes(skip);  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.getBytes(i);    }    	non-compiled	[CE]  illegal  start  of  expression	229	None	replace
1531	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getBytes(0,  skipped);  }  [CE]  possible  loss  of  precision  [FE]                                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getBytes(0,  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getBytes(0,  skipped);  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.getBytes(i);    }    	non-compiled	[CE]  possible  loss  of  precision	229	None	replace
1532	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getBytes(skipped);  }  [CE]  illegal  start  of  expression  [FE]                                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getBytes(skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getBytes(skipped);  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.getBytes(i);    }    	non-compiled	[CE]  illegal  start  of  expression	229	None	replace
1533	[BUG]  [BUGGY]  long  available  =  input.skip(numToSkip);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  long  available  =  input.skip(numToSkip);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	long  available  =  input.skip(numToSkip);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.next();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
1534	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.next();  }  [CE]  possible  loss  of  precision  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.next();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.next();    }    	non-compiled	[CE]  possible  loss  of  precision	71	None	replace
1535	[BUG]  [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.next();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
1536	[BUG]  [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  skipped  =  input.next();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
1537	[BUG]  [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.next();  }  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.next();  }  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.next();  }  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
1538	[BUG]  [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  skipped  =  input.next();  }  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  skipped  =  input.next();  }  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  skipped  =  input.next();  }  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
1539	[BUG]  [BUGGY]  if(available  <  =  0)  {  if(skipped  >  0)  {  break;  }  when(skipped  >  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  =  0)  {  if(skipped  >  0)  {  break;  }  when(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  =  0)  {  if(skipped  >  0)  {  break;  }  when(skipped  >  0)  {  break;  }	  if(skipped    >    0)    {    break;    }    when(skipped    >    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
1540	[BUG]  [BUGGY]  if(available  >  0)  {  if(skipped  >  0)  {  break;  }  when(skipped  >  0)  {  break;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  if(skipped  >  0)  {  break;  }  when(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  if(skipped  >  0)  {  break;  }  when(skipped  >  0)  {  break;  }	  if(skipped    >    0)    {    break;    }    when(skipped    >    0)    {    break;    }    	non-compiled	[CE]  ';'  expected	104	None	replace
1541	[BUG]  [BUGGY]  if(available  <  =  0)  {  if(skipped  >  0)  {  break;  }  while(skipped  >  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  =  0)  {  if(skipped  >  0)  {  break;  }  while(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  =  0)  {  if(skipped  >  0)  {  break;  }  while(skipped  >  0)  {  break;  }	  if(skipped    >    0)    {    break;    }    when(skipped    >    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
1542	[BUG]  [BUGGY]  if(available  >=  0)  {  if(skipped  >  0)  {  break;  }  when(skipped  >  0)  {  break;  }  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >=  0)  {  if(skipped  >  0)  {  break;  }  when(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >=  0)  {  if(skipped  >  0)  {  break;  }  when(skipped  >  0)  {  break;  }	  if(skipped    >    0)    {    break;    }    when(skipped    >    0)    {    break;    }    	non-compiled	[CE]  ';'  expected	104	None	replace
1543	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "skipped:  ' "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalArgumentException( "skipped:  ' "  +  skipped);	  throw    new    IllegalArgumentException(   "skipped:   "    +    skipped);    	compilable	  [FE]  IllegalArgumentException  	30	2	replace
1544	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "skipped:  ' "  +  skipped);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "skipped:  ' "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException( "skipped:  ' "  +  skipped);	  throw    new    IllegalArgumentException(   "skipped:   "    +    skipped);    	compilable	  [FE]  IllegalArgumentException  	30	2	replace
1545	[BUG]  [BUGGY]  if(available  >  0)  {  break;  }  else  if(skip  >  0)  {  break;  }  [CE]  cannot  find  symbol  skip  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  break;  }  else  if(skip  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  break;  }  else  if(skip  >  0)  {  break;  }	  if(skipped    >    0)    {    break;    }    if(skip    >    0)    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  skip	161	None	replace
1546	[BUG]  [BUGGY]  if(skip  >  0)  {  break;  }  if(available  >  0)  {  break;  }  [CE]  cannot  find  symbol  skip  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skip  >  0)  {  break;  }  if(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skip  >  0)  {  break;  }  if(available  >  0)  {  break;  }	  if(skipped    >    0)    {    break;    }    if(skip    >    0)    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  skip	161	None	replace
1547	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >=  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >=  0)  {  break;  }  if(skipped  >  0)  {  break;  }	  if(skipped    >=    0)    {    break;    }    If(skipped    >=    0)    {    break;    }    	compilable	  [FE]  AssertionError  	45	2	replace
1548	[BUG]  [BUGGY]  if(available  >=  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >=  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >=  0)  {  break;  }  if(skipped  >  0)  {  break;  }	  if(skipped    >=    0)    {    break;    }    If(skipped    >=    0)    {    break;    }    	compilable	  [FE]  AssertionError  	45	2	replace
1549	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >=  0)  {  break;  }  if(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >=  0)  {  break;  }  if(available  >  0)  {  break;  }	  if(skipped    >=    0)    {    break;    }    If(skipped    >=    0)    {    break;    }    	compilable	  [FE]  AssertionError  	45	2	replace
1550	[BUG]  [BUGGY]  if(available  >=  0)  {  break;  }  if(available  >  0)  {  break;  }  [FE]  AssertionError  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >=  0)  {  break;  }  if(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >=  0)  {  break;  }  if(available  >  0)  {  break;  }	  if(skipped    >=    0)    {    break;    }    If(skipped    >=    0)    {    break;    }    	compilable	  [FE]  AssertionError  	45	2	replace
1551	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skip  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skip  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }	  continue;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	194	None	replace
1552	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  input.close();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  input.close();  }	  continue;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	194	None	replace
1553	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  skipped;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  skipped;  i++)  {  input.close();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  skipped;  i++)  {  input.close();  }	  continue;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	194	None	replace
1554	[BUG]  [BUGGY]  skipped  =  input.skip(available  +  numToSkip);  long  available  =  input.available  +  numToSkip;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  +  numToSkip);  long  available  =  input.available  +  numToSkip;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    +    numToSkip);    long  available  =  input.available  +  numToSkip;	  timeout    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	59	None	add
1555	[BUG]  [BUGGY]  skipped  =  input.skip(available  +  numToSkip);  InputStream  available  =  input.readLine();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  +  numToSkip);  InputStream  available  =  input.readLine();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    +    numToSkip);    InputStream  available  =  input.readLine();	  timeout    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	59	None	add
1556	[BUG]  [BUGGY]  skipped  =  input.skip(available  +  numToSkip);  InputStream  available  =  input.readIn();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  +  numToSkip);  InputStream  available  =  input.readIn();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    +    numToSkip);    InputStream  available  =  input.readIn();	  timeout    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	59	None	add
1557	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  +  numToSkip);  if(available  >  numToSkip)  {  available  =  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped    =    input.skip(available    +    numToSkip);    if(available  >  numToSkip)  {  available  =  input.read();  }	  timeout    	compilable	  [FE]  AssertionError  	59	2	add
1558	[BUG]  [BUGGY]  skipped  =  input.skip(available  +  numToSkip);  if(available  >  numToSkip)  {  available  =  input.read();  }  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  +  numToSkip);  if(available  >  numToSkip)  {  available  =  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    +    numToSkip);    if(available  >  numToSkip)  {  available  =  input.read();  }	  timeout    	compilable	  [FE]  AssertionError  	59	2	add
1559	[BUG]  [BUGGY]  skipped  =  input.skip(available  +  numToSkip);  int  numToSkip  =  input.size();  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  +  numToSkip);  int  numToSkip  =  input.size();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    +    numToSkip);    int  numToSkip  =  input.size();	  timeout    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	59	None	add
1560	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	230	None	replace
1561	[BUG]  [BUGGY]  short  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  short  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	short  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	230	None	replace
1562	[BUG]  [BUGGY]  long  available  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  long  available  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	long  available  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	230	None	replace
1563	[BUG]  [BUGGY]  long  available  =  input.skip(skipped);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  long  available  =  input.skip(skipped);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	long  available  =  input.skip(skipped);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	230	None	replace
1564	[BUG]  [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  skipped  =  input.read();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  skipped  =  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  skipped  =  input.read();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	230	None	replace
1565	[BUG]  [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  ==  0)  {  skipped  =  input.read();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  ==  0)  {  skipped  =  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  ==  0)  {  skipped  =  input.read();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	230	None	replace
1566	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skip  =  input.read();  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skip  =  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skip  =  input.read();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	230	None	replace
1567	[BUG]  [BUGGY]  throw  new  IllegalStateException( "   "  +  input.getMessage());  [CE]  cannot  find  symbol  [FE]        IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "   "  +  input.getMessage());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "   "  +  input.getMessage());	  throw    new    IllegalStateException(   "   ".getMessage());    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
1568	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Missing  ' "  +  input.getMessage());  [CE]  cannot  find  symbol  [FE]          IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Missing  ' "  +  input.getMessage());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "Missing  ' "  +  input.getMessage());	  throw    new    IllegalStateException(   "   ".getMessage());    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
1569	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Input  of  ' "  +  input.getMessage());  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Input  of  ' "  +  input.getMessage());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "Input  of  ' "  +  input.getMessage());	  throw    new    IllegalStateException(   "   ".getMessage());    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
1570	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped    =    input.skip(available);    skipped  =  input.skip(available);  skipped  =  input.skip(available);  skipped  =  input.skip(available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped        =        input.skip(available);        skipped    =    input.skip(available);    skipped  =  input.skip(available);  skipped  =  input.skip(available);	  	compilable	  [FE]  AssertionError  	65	2	add
1571	[BUG]  [BUGGY]  skipped    =    input.skip(available);    skipped  =  input.skip(available);  skipped  =  input.skip(available);  skipped  =  input.skip(available);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped    =    input.skip(available);    skipped  =  input.skip(available);  skipped  =  input.skip(available);  skipped  =  input.skip(available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped        =        input.skip(available);        skipped    =    input.skip(available);    skipped  =  input.skip(available);  skipped  =  input.skip(available);	  	compilable	  [FE]  AssertionError  	65	2	add
1572	[BUG]  [BUGGY]  skipped    =    input.skip(available);    skipped  =  input.skip(available);  InputStream  available  =  input.readInt();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped    =    input.skip(available);    skipped  =  input.skip(available);  InputStream  available  =  input.readInt();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped        =        input.skip(available);        skipped    =    input.skip(available);    InputStream  available  =  input.readInt();	  	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	65	None	add
1573	[BUG]  [BUGGY]  skipped    =    input.skip(available);    skipped  =  input.skip(available);  InputStream  available  =  input.getInputStream();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped    =    input.skip(available);    skipped  =  input.skip(available);  InputStream  available  =  input.getInputStream();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped        =        input.skip(available);        skipped    =    input.skip(available);    InputStream  available  =  input.getInputStream();	  	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	65	None	add
1574	[BUG]  [BUGGY]  skipped    =    input.skip(available);    skipped  =  input.skip(available);  InputStream  available  =  input.readLine();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped    =    input.skip(available);    skipped  =  input.skip(available);  InputStream  available  =  input.readLine();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped        =        input.skip(available);        skipped    =    input.skip(available);    InputStream  available  =  input.readLine();	  	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	65	None	add
1575	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped    =    input.skip(available);    skipped  =  input.skip(available);  if(available  >  0)  {  available  =  -available;  skipped  =  input.skip(available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped        =        input.skip(available);        skipped    =    input.skip(available);    if(available  >  0)  {  available  =  -available;  skipped  =  input.skip(available);  }	  	compilable	  [FE]  AssertionError  	65	2	add
1576	[BUG]  [BUGGY]  skipped    =    input.skip(available);    skipped  =  input.skip(available);  if(available  >  0)  {  available  =  -available;  skipped  =  input.skip(available);  }  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped    =    input.skip(available);    skipped  =  input.skip(available);  if(available  >  0)  {  available  =  -available;  skipped  =  input.skip(available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped        =        input.skip(available);        skipped    =    input.skip(available);    if(available  >  0)  {  available  =  -available;  skipped  =  input.skip(available);  }	  	compilable	  [FE]  AssertionError  	65	2	add
1577	[BUG]  [BUGGY]  skipped    =    input.skip(available);    skipped  =  input.skip(available);  int  available  =  input.read();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped    =    input.skip(available);    skipped  =  input.skip(available);  int  available  =  input.read();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped        =        input.skip(available);        skipped    =    input.skip(available);    int  available  =  input.read();	  	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	65	None	add
1578	[BUG]  [BUGGY]  skipped    =    input.skip(available);    skipped  =  input.skip(available);  long  available  =  input.available();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped    =    input.skip(available);    skipped  =  input.skip(available);  long  available  =  input.available();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped        =        input.skip(available);        skipped    =    input.skip(available);    long  available  =  input.available();	  	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	65	None	add
1579	[BUG]  [BUGGY]  skipped    =    input.skip(available);    skipped  =  input.skip(available);  InputStream  available  =  input.readIn();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                  AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped    =    input.skip(available);    skipped  =  input.skip(available);  InputStream  available  =  input.readIn();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped        =        input.skip(available);        skipped    =    input.skip(available);    InputStream  available  =  input.readIn();	  	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	65	None	add
1580	[BUG]  [BUGGY]  if(available  >  0)  {  throw  new  IllegalStateException( " ");  }  else  {  System.arraycopy(input,  numToSkip,  available,  skipped);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]        IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IllegalStateException( " ");  }  else  {  System.arraycopy(input,  numToSkip,  available,  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  throw  new  IllegalStateException( " ");  }  else  {  System.arraycopy(input,  numToSkip,  available,  skipped);  }	  throw    new    IllegalStateException(       "       ");    new    IllegalStateException(       "       ");    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	197	None	replace
1581	[BUG]  [BUGGY]  if(available  >  0)  {  throw  new  IllegalStateException( " ");  }  else  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]          IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IllegalStateException( " ");  }  else  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  throw  new  IllegalStateException( " ");  }  else  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }	  throw    new    IllegalStateException(       "       ");    new    IllegalStateException(       "       ");    	non-compiled	[CE]  illegal  start  of  expression	197	None	replace
1582	[BUG]  [BUGGY]  if(available  >  0)  {  throw  new  IllegalStateException( " ");  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IllegalStateException( " ");  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  throw  new  IllegalStateException( " ");  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getLength();  }	  throw    new    IllegalStateException(       "       ");    new    IllegalStateException(       "       ");    	non-compiled	[CE]  illegal  start  of  expression	197	None	replace
1583	[BUG]  [BUGGY]  new  IllegalStateException( " ".equals(available));  [CE]  no  suitable  constructor  found  for  IllegalStateException(boolean)  [FE]              IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  new  IllegalStateException( " ".equals(available));  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	new  IllegalStateException( " ".equals(available));	  throw    new    IllegalStateException(       "       ");    new    IllegalStateException(       "       ");    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalStateException(boolean)	197	None	replace
1584	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "skipped  =     "  +  available);  throw  new  IllegalStateException(   "skipped  ='+  available);  [CE]  unclosed  string  literal  [FE]    IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "skipped  =     "  +  available);  throw  new  IllegalStateException(   "skipped  ='+  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalStateException(   "skipped    =       "    +    available);    throw  new  IllegalStateException(   "skipped  ='+  available);	  	non-compiled	[CE]  unclosed  string  literal	141	None	add
1585	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "skipped  =     "  +  available);  IllegalStateException(   "skipped  =   "  +  available);  [CE]  cannot  find  symbol  [FE]      IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "skipped  =     "  +  available);  IllegalStateException(   "skipped  =   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalStateException(   "skipped    =       "    +    available);    IllegalStateException(   "skipped  =   "  +  available);	  	non-compiled	[CE]  cannot  find  symbol	141	None	add
1586	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  input.getMillis());  [CE]  cannot  find  symbol  [FE]    IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( " "  +  input.getMillis());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( " "  +  input.getMillis());	  throw    new    IllegalStateException(   "   "    +    skipped);    	non-compiled	[CE]  cannot  find  symbol	174	None	replace
1587	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Kip  skipped:   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalStateException( "Kip  skipped:   "  +  skipped);	  throw    new    IllegalStateException(   "   "    +    skipped);    	compilable	  [FE]  IllegalStateException  	174	2	replace
1588	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Kip  skipped:   "  +  skipped);  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Kip  skipped:   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "Kip  skipped:   "  +  skipped);	  throw    new    IllegalStateException(   "   "    +    skipped);    	compilable	  [FE]  IllegalStateException  	174	2	replace
1589	[BUG]  [BUGGY]  timeout  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  available  &&  skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped  >  available  &&  skipped  >  0)  {  break;  }	  if(skipped    >    available    ||    skipped    >    0)    {    break;    }    timeout    	compilable	timeout	260	1	replace
1590	[BUG]  [BUGGY]  if(skipped  >  available  &&  skipped  >  0)  {  break;  }  timeout  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  available  &&  skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  available  &&  skipped  >  0)  {  break;  }	  if(skipped    >    available    ||    skipped    >    0)    {    break;    }    timeout    	compilable	timeout	260	1	replace
1591	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "skipped:   "  +  skipped);  new  IllegalStateException(   "skipped:   "  +  skipped);  [CE]  unreachable  statement  [FE]    IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "skipped:   "  +  skipped);  new  IllegalStateException(   "skipped:   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalStateException(   "skipped:   "    +    skipped);    new  IllegalStateException(   "skipped:   "  +  skipped);	  	non-compiled	[CE]  unreachable  statement	137	None	add
1592	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "skipped:   "  +  skipped);  throw  new  IllegalStateException(   "skipped:   "  +  skip);  [CE]  cannot  find  symbol  skip  [FE]      IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "skipped:   "  +  skipped);  throw  new  IllegalStateException(   "skipped:   "  +  skip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalStateException(   "skipped:   "    +    skipped);    throw  new  IllegalStateException(   "skipped:   "  +  skip);	  	non-compiled	[CE]  cannot  find  symbol  skip	137	None	add
1593	[BUG]  [BUGGY]  throw  new  IllegalStateException(available  +  numToSkip);  [CE]  no  suitable  constructor  found  for  IllegalStateException(long)  [FE]                IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(available  +  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException(available  +  numToSkip);	  throw    new    IllegalStateException(       "       ");    throw    new    IllegalStateException(.   "       ");    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalStateException(long)	25	None	replace
1594	[BUG]  [BUGGY]  throw  new  IllegalStateException(. " ");  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(. " ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException(. " ");	  throw    new    IllegalStateException(       "       ");    throw    new    IllegalStateException(.   "       ");    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
1595	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  0,  available,  skipped,  numToSkip);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  numToSkip)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  0,  available,  skipped,  numToSkip);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  numToSkip)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  0,  available,  skipped,  numToSkip);  }	  if(skipped    >    available)    {    break;    }    if(skipped    >    available)    {    break;    System.arraycopy(input,    0,    available,    skipped,    numToSkip);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	205	None	replace
1596	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  0,  available,  skipped,  numToSkip);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  numToSkip)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  0,  available,  skipped,  numToSkip);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  numToSkip)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  0,  available,  skipped,  numToSkip);  }	  if(skipped    >    available)    {    break;    }    if(skipped    >    available)    {    break;    System.arraycopy(input,    0,    available,    skipped,    numToSkip);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	205	None	replace
1597	[BUG]  [BUGGY]  if(available  >  skipped)  {  break;  }  if(skipped  >  0)  {  System.arraycopy(input,  0,  available,  skipped,  numToSkip);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  break;  }  if(skipped  >  0)  {  System.arraycopy(input,  0,  available,  skipped,  numToSkip);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skipped)  {  break;  }  if(skipped  >  0)  {  System.arraycopy(input,  0,  available,  skipped,  numToSkip);  }	  if(skipped    >    available)    {    break;    }    if(skipped    >    available)    {    break;    System.arraycopy(input,    0,    available,    skipped,    numToSkip);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	205	None	replace
1598	[BUG]  [BUGGY]  if(available  >  skipped)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  0,  available,  skipped,  numToSkip);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  0,  available,  skipped,  numToSkip);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skipped)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  0,  available,  skipped,  numToSkip);  }	  if(skipped    >    available)    {    break;    }    if(skipped    >    available)    {    break;    System.arraycopy(input,    0,    available,    skipped,    numToSkip);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	205	None	replace
1599	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  ++i)  {  available  +=  input.getBytes(i);  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  ++i)  {  available  +=  input.getBytes(i);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  ++i)  {  available  +=  input.getBytes(i);  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.getBytes(i);    }    	non-compiled	[CE]  illegal  start  of  expression	229	None	replace
1600	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  skipped;  ++i)  {  available  +=  input.getBytes(i);  }  [CE]  illegal  start  of  expression  [FE]                                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  skipped;  ++i)  {  available  +=  input.getBytes(i);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  available;  i  <  skipped;  ++i)  {  available  +=  input.getBytes(i);  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.getBytes(i);    }    	non-compiled	[CE]  illegal  start  of  expression	229	None	replace
1601	[BUG]  [BUGGY]  while(available  >  0)  {  available  +=  input.getBytes(available);  [CE]  illegal  start  of  expression  [FE]                                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  available  +=  input.getBytes(available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  available  +=  input.getBytes(available);	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.getBytes(i);    }    	non-compiled	[CE]  illegal  start  of  expression	229	None	replace
1602	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Skip  is  less  than  1: "  +  input);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalArgumentException( "Skip  is  less  than  1: "  +  input);	  throw    new    IllegalArgumentException(   "Skip    is    less    than    1:   ");    	compilable	  [FE]  IllegalArgumentException  	34	2	replace
1603	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Skip  is  less  than  1: "  +  input);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Skip  is  less  than  1: "  +  input);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException( "Skip  is  less  than  1: "  +  input);	  throw    new    IllegalArgumentException(   "Skip    is    less    than    1:   ");    	compilable	  [FE]  IllegalArgumentException  	34	2	replace
1604	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IllegalArgumentException( "Skip  is  less  than  1: ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  0)  {  throw  new  IllegalArgumentException( "Skip  is  less  than  1: ");  }	  throw    new    IllegalArgumentException(   "Skip    is    less    than    1:   ");    	compilable	  [FE]  IllegalArgumentException  	34	2	replace
1605	[BUG]  [BUGGY]  if(available  >  0)  {  throw  new  IllegalArgumentException( "Skip  is  less  than  1: ");  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IllegalArgumentException( "Skip  is  less  than  1: ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  throw  new  IllegalArgumentException( "Skip  is  less  than  1: ");  }	  throw    new    IllegalArgumentException(   "Skip    is    less    than    1:   ");    	compilable	  [FE]  IllegalArgumentException  	34	2	replace
1606	[BUG]  [BUGGY]  if(skipped  >  available  ||  skipped  >  numToSkip)  {  break;  }  if(skipped  >  available  ||  saved  >  numToSkip)  {  break;  }  [CE]  cannot  find  symbol  saved  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  available  ||  skipped  >  numToSkip)  {  break;  }  if(skipped  >  available  ||  saved  >  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    available    ||    skipped    >    numToSkip)    {    break;    }    if(skipped  >  available  ||  saved  >  numToSkip)  {  break;  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  saved	261	None	add
1607	[BUG]  [BUGGY]  if(switch  >  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(switch  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(switch  >  0)  {  break;  }	  if(skip    >    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
1608	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  continue;    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	266	None	replace
1609	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  continue;    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	266	None	replace
1610	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.flush();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.flush();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.flush();  }	  continue;    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	266	None	replace
1611	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.flush();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.flush();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.flush();  }	  continue;    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	266	None	replace
1612	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.skip(skipped);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.skip(skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.skip(skipped);  }	  continue;    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	266	None	replace
1613	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  num  =  available;  num  <  0;  num++)  {  skipped  =  input.skip(available);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  num  =  available;  num  <  0;  num++)  {  skipped  =  input.skip(available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  num  =  available;  num  <  0;  num++)  {  skipped  =  input.skip(available);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    num    =    available;    num    <    0;    num++)    {    skipped    =    input.skip(available);    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
1614	[BUG]  [BUGGY]  if(available  >  0)  {  int  available  =  input.available();  if(available  >  0)  {  for(int  num  =  available;  num  <  0;  num++)  {  skipped  =  input.skip(available);  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  int  available  =  input.available();  if(available  >  0)  {  for(int  num  =  available;  num  <  0;  num++)  {  skipped  =  input.skip(available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  int  available  =  input.available();  if(available  >  0)  {  for(int  num  =  available;  num  <  0;  num++)  {  skipped  =  input.skip(available);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    num    =    available;    num    <    0;    num++)    {    skipped    =    input.skip(available);    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
1615	[BUG]  [BUGGY]  if(available  >  0)  {  int  available  =  input.available;  for(int  num  =  available;  num  <  0;  num++)  {  skipped  =  input.skip(available);  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  int  available  =  input.available;  for(int  num  =  available;  num  <  0;  num++)  {  skipped  =  input.skip(available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  int  available  =  input.available;  for(int  num  =  available;  num  <  0;  num++)  {  skipped  =  input.skip(available);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    num    =    available;    num    <    0;    num++)    {    skipped    =    input.skip(available);    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
1616	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  num  =  available;  num  <  0;  num++)  {  skipped  =  input.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  num  =  available;  num  <  0;  num++)  {  skipped  =  input.skip(available  +  numToSkip);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  num  =  available;  num  <  0;  num++)  {  skipped  =  input.skip(available  +  numToSkip);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    num    =    available;    num    <    0;    num++)    {    skipped    =    input.skip(available);    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
1617	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  num  =  available;  num  <  0;  num++)  {  skipped  =  input.skip(0);  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  num  =  available;  num  <  0;  num++)  {  skipped  =  input.skip(0);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  num  =  available;  num  <  0;  num++)  {  skipped  =  input.skip(0);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    num    =    available;    num    <    0;    num++)    {    skipped    =    input.skip(available);    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
1618	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  num  =  available;  num  <  0;  num++)  {  skipped  =  input.skipped(available);  }  [CE]  illegal  start  of  expression  [FE]                                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  num  =  available;  num  <  0;  num++)  {  skipped  =  input.skipped(available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  num  =  available;  num  <  0;  num++)  {  skipped  =  input.skipped(available);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    num    =    available;    num    <    0;    num++)    {    skipped    =    input.skip(available);    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
1619	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  num  =  available;  num  <  0;  num++)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  num  =  available;  num  <  0;  num++)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  num  =  available;  num  <  0;  num++)  {  skipped  =  input.next();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    num    =    available;    num    <    0;    num++)    {    skipped    =    input.skip(available);    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
1620	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Skip  skipped  =   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IOException( "Skip  skipped  =   "  +  available);	  throw    new    IOException(   "skipped    =       "    +    available);    	compilable	  [FE]  IOException  	158	2	replace
1621	[BUG]  [BUGGY]  throw  new  IOException( "Skip  skipped  =   "  +  available);  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Skip  skipped  =   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( "Skip  skipped  =   "  +  available);	  throw    new    IOException(   "skipped    =       "    +    available);    	compilable	  [FE]  IOException  	158	2	replace
1622	[BUG]  [BUGGY]  [FE]  IOException  [FE]      IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Should  have  been  skipped  =   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IOException( "Should  have  been  skipped  =   "  +  available);	  throw    new    IOException(   "skipped    =       "    +    available);    	compilable	  [FE]  IOException  	158	2	replace
1623	[BUG]  [BUGGY]  throw  new  IOException( "Should  have  been  skipped  =   "  +  available);  [FE]  IOException  [FE]      IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Should  have  been  skipped  =   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( "Should  have  been  skipped  =   "  +  available);	  throw    new    IOException(   "skipped    =       "    +    available);    	compilable	  [FE]  IOException  	158	2	replace
1624	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  skipped;  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  skipped;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  skipped;  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    skipped;    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
1625	[BUG]  [BUGGY]  safeAdd(input,  numToSkip)>  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  skipped;  }  [CE]  not  a  statement  [FE]                                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  safeAdd(input,  numToSkip)>  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  skipped;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	safeAdd(input,  numToSkip)>  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  skipped;  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    skipped;    }    	non-compiled	[CE]  not  a  statement	58	None	replace
1626	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  skipped;  }  [CE]  possible  loss  of  precision  [FE]                                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  skipped;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  available;  i  <  0;  i++)  {  available  +=  skipped;  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    skipped;    }    	non-compiled	[CE]  possible  loss  of  precision	58	None	replace
1627	[BUG]  [BUGGY]  safeAdd(input,  numToSkip)>  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  skipped;  }  [CE]  not  a  statement  [FE]                                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  safeAdd(input,  numToSkip)>  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  skipped;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	safeAdd(input,  numToSkip)>  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  skipped;  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    skipped;    }    	non-compiled	[CE]  not  a  statement	58	None	replace
1628	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  skip;  }  [CE]  illegal  start  of  expression  [FE]                                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  skip;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  skip;  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    skipped;    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
1629	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  <  available)  {  break;  }  if(available  <  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped    <    available)    {    break;    }    if(available  <  numToSkip)  {  break;  }	  	compilable	  [FE]  AssertionError  	49	2	add
1630	[BUG]  [BUGGY]  if(skipped  <  available)  {  break;  }  if(available  <  numToSkip)  {  break;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  <  available)  {  break;  }  if(available  <  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    <    available)    {    break;    }    if(available  <  numToSkip)  {  break;  }	  	compilable	  [FE]  AssertionError  	49	2	add
1631	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0  ||  available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped  >  0  ||  available  >  0)  {  break;  }	  if(skipped    >    0    ||    skipped    >    0)    {    break;    }    timeout    	compilable	  [FE]  AssertionError  	253	2	replace
1632	[BUG]  [BUGGY]  if(skipped  >  0  ||  available  >  0)  {  break;  }  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0  ||  available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0  ||  available  >  0)  {  break;  }	  if(skipped    >    0    ||    skipped    >    0)    {    break;    }    timeout    	compilable	  [FE]  AssertionError  	253	2	replace
1633	[BUG]  [BUGGY]  throw  new  IOException(   "skipped  =     "  +  available);  if(  available  >  0)  {  throw  new  IOException(   "skipped  =   "  +  available);  }  [CE]  unreachable  statement  [FE]    IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException(   "skipped  =     "  +  available);  if(  available  >  0)  {  throw  new  IOException(   "skipped  =   "  +  available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IOException(   "skipped    =       "    +    available);    if(  available  >  0)  {  throw  new  IOException(   "skipped  =   "  +  available);  }	  	non-compiled	[CE]  unreachable  statement	157	None	add
1634	[BUG]  [BUGGY]  if(skipped  >  0  ||  skipped  >  0)  {  break;  }  if(skip  >  0  ||  skipped  >  0)  {  break;  }  [CE]  cannot  find  symbol  skip  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0  ||  skipped  >  0)  {  break;  }  if(skip  >  0  ||  skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    0    ||    skipped    >    0)    {    break;    }    if(skip  >  0  ||  skipped  >  0)  {  break;  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  skip	252	None	add
1635	[BUG]  [BUGGY]  if(skipped  >  0  ||  skipped  >  0)  {  break;  }  if(skipped  >  0  ||  skipped  >  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0  ||  skipped  >  0)  {  break;  }  if(skipped  >  0  ||  skipped  >  0)  {  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    0    ||    skipped    >    0)    {    break;    }    if(skipped  >  0  ||  skipped  >  0)  {	  timeout    	non-compiled	[CE]  illegal  start  of  expression	252	None	add
1636	[BUG]  [BUGGY]  while(available  >  0)  {  skip  =  input.skip;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  skip  =  input.skip;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  skip  =  input.skip;	  while(available    >    0)    {    break;    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
1637	[BUG]  [BUGGY]  while(available  >  0)  {  skipped  =  input.skip();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  skipped  =  input.skip();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  skipped  =  input.skip();	  while(available    >    0)    {    break;    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
1638	[BUG]  [BUGGY]  while(available  >  0)  {  skip  =  input.skip();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  skip  =  input.skip();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  skip  =  input.skip();	  while(available    >    0)    {    break;    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
1639	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  ==  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >>  0)  {  break;  }  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  ==  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >>  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped    ==    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >>  0)  {  break;  }	  	non-compiled	[CE]  incompatible  types	40	None	add
1640	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  ==  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >=        0)        {        break;        }        if(skipped    ==    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	40	2	add
1641	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  ==  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  ==  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped    ==    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	40	2	add
1642	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  ==  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped!=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >=        0)        {        break;        }        if(skipped    ==    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped!=  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	40	2	add
1643	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  ==  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped!=  0)  {  break;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  ==  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped!=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped    ==    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped!=  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	40	2	add
1644	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  ==  0)  {  break;  }  if(skipped  >>  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [CE]  incompatible  types  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  ==  0)  {  break;  }  if(skipped  >>  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped    ==    0)    {    break;    }    if(skipped  >>  0)  {  break;  }  if(skipped  >=  0)  {  break;  }	  	non-compiled	[CE]  incompatible  types	40	None	add
1645	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  ==  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >=        0)        {        break;        }        if(skipped    ==    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  <  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	40	2	add
1646	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  ==  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  <  0)  {  break;  }  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  ==  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped    ==    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  <  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	40	2	add
1647	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  ==  0)  {  break;  }  if(skipped!=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >=        0)        {        break;        }        if(skipped    ==    0)    {    break;    }    if(skipped!=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	40	2	add
1648	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  ==  0)  {  break;  }  if(skipped!=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  ==  0)  {  break;  }  if(skipped!=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped    ==    0)    {    break;    }    if(skipped!=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	40	2	add
1649	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "   "  +  skipped);  throw  new  IllegalStateException(   "   "  +  skip);  [CE]  cannot  find  symbol  skip  [FE]    IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "   "  +  skipped);  throw  new  IllegalStateException(   "   "  +  skip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalStateException(   "   "    +    skipped);    throw  new  IllegalStateException(   "   "  +  skip);	  	non-compiled	[CE]  cannot  find  symbol  skip	173	None	add
1650	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  break;  }  while(available  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  0)  {  break;  }  while(available  <  0)  {  break;  }	  if(available    >    0)    {    break;    }    while(available    >    0)    {    break;    }    	compilable	  [FE]  AssertionError  	151	2	replace
1651	[BUG]  [BUGGY]  if(available  >  0)  {  break;  }  while(available  <  0)  {  break;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  break;  }  while(available  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  break;  }  while(available  <  0)  {  break;  }	  if(available    >    0)    {    break;    }    while(available    >    0)    {    break;    }    	compilable	  [FE]  AssertionError  	151	2	replace
1652	[BUG]  [BUGGY]  if(available  >  0)  {  break;  }  while(available  <  =  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  break;  }  while(available  <  =  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  break;  }  while(available  <  =  0)  {  break;  }	  if(available    >    0)    {    break;    }    while(available    >    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	151	None	replace
1653	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  break;  }  while(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  0)  {  break;  }  while(skipped  >  0)  {  break;  }	  if(available    >    0)    {    break;    }    while(available    >    0)    {    break;    }    	compilable	  [FE]  AssertionError  	151	2	replace
1654	[BUG]  [BUGGY]  if(available  >  0)  {  break;  }  while(skipped  >  0)  {  break;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  break;  }  while(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  break;  }  while(skipped  >  0)  {  break;  }	  if(available    >    0)    {    break;    }    while(available    >    0)    {    break;    }    	compilable	  [FE]  AssertionError  	151	2	replace
1655	[BUG]  [BUGGY]  luate(input,  numToSkip);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  luate(input,  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	luate(input,  numToSkip);	  if(available    >    0)    {    break;    }    while(available    >    0)    {    break;    }    	non-compiled	[CE]  cannot  find  symbol	151	None	replace
1656	[BUG]  [BUGGY]  InputStream  available  =  input.skip(available);  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  InputStream  available  =  input.skip(available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	InputStream  available  =  input.skip(available);	  n    =    input.skip(available);    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	234	None	replace
1657	[BUG]  [BUGGY]  InputStream  available  =  input.skip(skipped);  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  InputStream  available  =  input.skip(skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	InputStream  available  =  input.skip(skipped);	  n    =    input.skip(available);    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	234	None	replace
1658	[BUG]  [BUGGY]  Width  n  =  input.skip(available);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  Width  n  =  input.skip(available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	Width  n  =  input.skip(available);	  n    =    input.skip(available);    	non-compiled	[CE]  cannot  find  symbol	234	None	replace
1659	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(available);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(available);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.skip(available);    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
1660	[BUG]  [BUGGY]  if(available  >  0)  {  available  =  input.read();  for(int  i  =  0;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(available);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  available  =  input.read();  for(int  i  =  0;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  available  =  input.read();  for(int  i  =  0;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(available);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.skip(available);    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
1661	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(available  +  numToSkip);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(available  +  numToSkip);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.skip(available);    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
1662	[BUG]  [BUGGY]  if(available  >  0)  {  for(long  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(available);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(long  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(long  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(available);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.skip(available);    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
1663	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.next();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.skip(available);    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
1664	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skipped(available);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skipped(available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skipped(available);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.skip(available);    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
1665	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.close();  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.close();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.close();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.skip(available);    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
1666	[BUG]  [BUGGY]  if(available  >  0)  {  throw  new  IllegalStateException( " ".);  }  [CE]  <identifier>  expected  [FE]                  IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IllegalStateException( " ".);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  throw  new  IllegalStateException( " ".);  }	  throw    new    IllegalStateException(       "       ");    throw    new    IllegalStateException(   ".       ");    	non-compiled	[CE]  <identifier>  expected	26	None	replace
1667	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [CE]  '.class'  expected  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  For(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	For(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }	          if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  '.class'  expected	224	None	replace
1668	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  0L;  i  <  available;  ++i)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  0L;  i  <  available;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  0L;  i  <  available;  ++i)  {  available  +=  input.read();  }	          if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	224	None	replace
1669	[BUG]  [BUGGY]  timeout  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  -=  input.skip(available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped  -=  input.skip(available);	  skipped    =    input.skip(skipped);    timeout    	compilable	timeout	3	1	replace
1670	[BUG]  [BUGGY]  skipped  -=  input.skip(available);  timeout  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  -=  input.skip(available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped  -=  input.skip(available);	  skipped    =    input.skip(skipped);    timeout    	compilable	timeout	3	1	replace
1671	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }	  continue;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.length();    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
1672	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  skipped;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  skipped;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  skipped;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }	  continue;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.length();    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
1673	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(numToSkip);  skipped  =  input.skip(skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped    =    input.skip(numToSkip);    skipped  =  input.skip(skipped);	  timeout    	compilable	  [FE]  AssertionError  	80	2	add
1674	[BUG]  [BUGGY]  skipped  =  input.skip(numToSkip);  skipped  =  input.skip(skipped);  [FE]  AssertionError  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(numToSkip);  skipped  =  input.skip(skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(numToSkip);    skipped  =  input.skip(skipped);	  timeout    	compilable	  [FE]  AssertionError  	80	2	add
1675	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(numToSkip);  skipped  =  input.skip(available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped    =    input.skip(numToSkip);    skipped  =  input.skip(available);	  timeout    	compilable	  [FE]  AssertionError  	80	2	add
1676	[BUG]  [BUGGY]  skipped  =  input.skip(numToSkip);  skipped  =  input.skip(available);  [FE]  AssertionError  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(numToSkip);  skipped  =  input.skip(available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(numToSkip);    skipped  =  input.skip(available);	  timeout    	compilable	  [FE]  AssertionError  	80	2	add
1677	[BUG]  [BUGGY]  skipped  =  input.skip(numToSkip);  InputStream  available  =  input.readInt();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(numToSkip);  InputStream  available  =  input.readInt();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(numToSkip);    InputStream  available  =  input.readInt();	  timeout    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	80	None	add
1678	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(numToSkip);  if(available  >  0)  {  available  =  0;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped    =    input.skip(numToSkip);    if(available  >  0)  {  available  =  0;  }	  timeout    	compilable	  [FE]  AssertionError  	80	2	add
1679	[BUG]  [BUGGY]  skipped  =  input.skip(numToSkip);  if(available  >  0)  {  available  =  0;  }  [FE]  AssertionError  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(numToSkip);  if(available  >  0)  {  available  =  0;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(numToSkip);    if(available  >  0)  {  available  =  0;  }	  timeout    	compilable	  [FE]  AssertionError  	80	2	add
1680	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   "  +  skipped);  throw  new  IllegalArgumentException(   "   "  +  skip);  [CE]  cannot  find  symbol  skip  [FE]    IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException(   "   "  +  skipped);  throw  new  IllegalArgumentException(   "   "  +  skip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalArgumentException(   "   "    +    skipped);    throw  new  IllegalArgumentException(   "   "  +  skip);	  	non-compiled	[CE]  cannot  find  symbol  skip	169	None	add
1681	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  input;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  input;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  input;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
1682	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  skipped;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  skipped;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  available;  i  <  skipped;  i++)  {  available  +=  input.getLength();  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
1683	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skip(i);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skip(i);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skip(i);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    skipped    =    input.skip(i);    }    	non-compiled	[CE]  illegal  start  of  expression	177	None	replace
1684	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skip(i  +  1);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skip(i  +  1);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skip(i  +  1);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    skipped    =    input.skip(i);    }    	non-compiled	[CE]  illegal  start  of  expression	177	None	replace
1685	[BUG]  [BUGGY]  long  available  =  input.available();  if(available  >  0)  {  for(long  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skip(i);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  long  available  =  input.available();  if(available  >  0)  {  for(long  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skip(i);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	long  available  =  input.available();  if(available  >  0)  {  for(long  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skip(i);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    skipped    =    input.skip(i);    }    	non-compiled	[CE]  illegal  start  of  expression	177	None	replace
1686	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skip(0);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skip(0);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skip(0);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    skipped    =    input.skip(i);    }    	non-compiled	[CE]  illegal  start  of  expression	177	None	replace
1687	[BUG]  [BUGGY]  if(available  >  0)  {  for(long  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skip(i);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(long  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skip(i);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(long  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skip(i);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    skipped    =    input.skip(i);    }    	non-compiled	[CE]  illegal  start  of  expression	177	None	replace
1688	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skipped(i);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skipped(i);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skipped(i);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    skipped    =    input.skip(i);    }    	non-compiled	[CE]  illegal  start  of  expression	177	None	replace
1689	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  0  ||  skipped  >  -1)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  <  0  ||  skipped  >  -1)  {  break;  }	  if(available    <    0)    {    break;    }    timeout    	compilable	  [FE]  AssertionError  	94	2	replace
1690	[BUG]  [BUGGY]  if(available  <  0  ||  skipped  >  -1)  {  break;  }  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  0  ||  skipped  >  -1)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  0  ||  skipped  >  -1)  {  break;  }	  if(available    <    0)    {    break;    }    timeout    	compilable	  [FE]  AssertionError  	94	2	replace
1691	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >        available)        {        break;        }        if(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  }	  	compilable	  [FE]  AssertionError  	82	2	add
1692	[BUG]  [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >        available)        {        break;        }        if(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  }	  	compilable	  [FE]  AssertionError  	82	2	add
1693	[BUG]  [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >        available)        {        break;        }        if(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;	  	non-compiled	[CE]  illegal  start  of  expression	82	None	add
1694	[BUG]  [BUGGY]  if(available  <  =  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]        IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  =  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  =  0)  {  throw  new  IllegalStateException( " ");  }	  throw    new    IllegalStateException(       "       ");    throw    new    IllegalStateException(       "       ");    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
1695	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(. " ");  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException(. " ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException(. " ");	  throw    new    IllegalArgumentException(       "       ");    throw    new    IllegalArgumentException(.   "       ");    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
1696	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(available  +  skipped);  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(long)  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException(available  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException(available  +  skipped);	  throw    new    IllegalArgumentException(       "       ");    throw    new    IllegalArgumentException(.   "       ");    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(long)	9	None	replace
1697	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(available  +  numToSkip);  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(long)  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException(available  +  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException(available  +  numToSkip);	  throw    new    IllegalArgumentException(       "       ");    throw    new    IllegalArgumentException(.   "       ");    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(long)	9	None	replace
1698	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  <  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >=        0)        {        break;        }        if(skipped    <    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	43	2	add
1699	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  <  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  <  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped    <    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	43	2	add
1700	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  <  0)  {  break;  }  if(skipped  [Delete]  0)  {  break;  }  if(skipped  <  0)  {  break;  }  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  <  0)  {  break;  }  if(skipped  [Delete]  0)  {  break;  }  if(skipped  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped    <    0)    {    break;    }    if(skipped  [Delete]  0)  {  break;  }  if(skipped  <  0)  {  break;  }	  	non-compiled	[CE]  ')'  expected	43	None	add
1701	[BUG]  [BUGGY]  Throw  new  IllegalStateException( "Missing  input:   "  +  input.getName());  [CE]  not  a  statement  [FE]              IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  Throw  new  IllegalStateException( "Missing  input:   "  +  input.getName());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	Throw  new  IllegalStateException( "Missing  input:   "  +  input.getName());	  throw    new    IllegalStateException(   "Missing    input:   "    +    input.getName());    	non-compiled	[CE]  not  a  statement	244	None	replace
1702	[BUG]  [BUGGY]  new  IllegalStateException( "Missing  input:   "  +  input.getName());  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  new  IllegalStateException( "Missing  input:   "  +  input.getName());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	new  IllegalStateException( "Missing  input:   "  +  input.getName());	  throw    new    IllegalStateException(   "Missing    input:   "    +    input.getName());    	non-compiled	[CE]  cannot  find  symbol	244	None	replace
1703	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  numToSkip);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  numToSkip)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  numToSkip);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  numToSkip)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  numToSkip);  }	  if(skipped    >    available)    {    break;    }    if(skipped    >    available)    {    break;    System.arraycopy(input,    numToSkip,    available,    numToSkip);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	200	None	replace
1704	[BUG]  [BUGGY]  if(available  >  skipped)  {  break;  }  if(skipped  >  0)  {  System.arraycopy(input,  numToSkip,  available,  numToSkip);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  break;  }  if(skipped  >  0)  {  System.arraycopy(input,  numToSkip,  available,  numToSkip);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skipped)  {  break;  }  if(skipped  >  0)  {  System.arraycopy(input,  numToSkip,  available,  numToSkip);  }	  if(skipped    >    available)    {    break;    }    if(skipped    >    available)    {    break;    System.arraycopy(input,    numToSkip,    available,    numToSkip);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	200	None	replace
1705	[BUG]  [BUGGY]  if(available  >  skipped)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  numToSkip);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  numToSkip);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skipped)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  numToSkip);  }	  if(skipped    >    available)    {    break;    }    if(skipped    >    available)    {    break;    System.arraycopy(input,    numToSkip,    available,    numToSkip);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	200	None	replace
1706	[BUG]  [BUGGY]  if(available  >  skip)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  numToSkip);  }  [CE]  cannot  find  symbol  skip  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skip)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  numToSkip);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skip)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  numToSkip);  }	  if(skipped    >    available)    {    break;    }    if(skipped    >    available)    {    break;    System.arraycopy(input,    numToSkip,    available,    numToSkip);    }    	non-compiled	[CE]  cannot  find  symbol  skip	200	None	replace
1707	[BUG]  [BUGGY]  throw  new  IllegalStateException( "skipped  =   ".equals(available);  [CE]  [FE]            IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "skipped  =   ".equals(available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "skipped  =   ".equals(available);	  throw    new    IllegalStateException(   "   ".equals(available);    	non-compiled	[CE]  	243	None	replace
1708	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]              IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Invalid  available  ' "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalStateException( "Invalid  available  ' "  +  available);	  throw    new    IllegalStateException(   "   ".equals(available);    	compilable	  [FE]  IllegalStateException  	243	2	replace
1709	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Invalid  available  ' "  +  available);  [FE]  IllegalStateException  [FE]              IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Invalid  available  ' "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "Invalid  available  ' "  +  available);	  throw    new    IllegalStateException(   "   ".equals(available);    	compilable	  [FE]  IllegalStateException  	243	2	replace
1710	[BUG]  [BUGGY]  long  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  long  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	long  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.next();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
1711	[BUG]  [BUGGY]  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.next();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
1712	[BUG]  [BUGGY]  long  available  =  input.skip(skipped);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  long  available  =  input.skip(skipped);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	long  available  =  input.skip(skipped);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.next();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
1713	[BUG]  [BUGGY]  long  available  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  long  available  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	long  available  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.next();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
1714	[BUG]  [BUGGY]  InputStream  available  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  InputStream  available  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	InputStream  available  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.next();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
1715	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skip  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skip  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skip  =  input.next();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
1716	[BUG]  [BUGGY]  timeout  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  SKIP_BUF_SIZE)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  SKIP_BUF_SIZE)  {  break;  }	  if(available    >    skip)    {    break;    }    	compilable	timeout	46	1	replace
1717	[BUG]  [BUGGY]  if(available  >  SKIP_BUF_SIZE)  {  break;  }  timeout  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  SKIP_BUF_SIZE)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  SKIP_BUF_SIZE)  {  break;  }	  if(available    >    skip)    {    break;    }    	compilable	timeout	46	1	replace
1718	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    0)    {    break;    }    while(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  while(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >        0)        {        break;        }        while(skipped    >    0)    {    break;    }    if(skipped  >  0)  {  break;  }  while(available  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	102	2	add
1719	[BUG]  [BUGGY]  if(skipped    >    0)    {    break;    }    while(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  while(available  >  0)  {  break;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    0)    {    break;    }    while(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  while(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >        0)        {        break;        }        while(skipped    >    0)    {    break;    }    if(skipped  >  0)  {  break;  }  while(available  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	102	2	add
1720	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    0)    {    break;    }    while(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  while(skipped  >  0)  {  return  available;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >        0)        {        break;        }        while(skipped    >    0)    {    break;    }    if(skipped  >  0)  {  break;  }  while(skipped  >  0)  {  return  available;  }	  	compilable	  [FE]  AssertionError  	102	2	add
1721	[BUG]  [BUGGY]  if(skipped    >    0)    {    break;    }    while(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  while(skipped  >  0)  {  return  available;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    0)    {    break;    }    while(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  while(skipped  >  0)  {  return  available;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >        0)        {        break;        }        while(skipped    >    0)    {    break;    }    if(skipped  >  0)  {  break;  }  while(skipped  >  0)  {  return  available;  }	  	compilable	  [FE]  AssertionError  	102	2	add
1722	[BUG]  [BUGGY]  if(skipped    >    0)    {    break;    }    while(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  while(skip  >  0)  {  break;  }  [CE]  cannot  find  symbol  skip  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    0)    {    break;    }    while(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  while(skip  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >        0)        {        break;        }        while(skipped    >    0)    {    break;    }    if(skipped  >  0)  {  break;  }  while(skip  >  0)  {  break;  }	  	non-compiled	[CE]  cannot  find  symbol  skip	102	None	add
1723	[BUG]  [BUGGY]  throw  new  IOException(available  +  numToSkip);  [CE]  no  suitable  constructor  found  for  IOException(long)  [FE]    IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException(available  +  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException(available  +  numToSkip);	  throw    new    IOException(   "   "    +    available);    	non-compiled	[CE]  no  suitable  constructor  found  for  IOException(long)	160	None	replace
1724	[BUG]  [BUGGY]  throw  new  IOException(available  +  skipped);  [CE]  no  suitable  constructor  found  for  IOException(long)  [FE]      IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException(available  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException(available  +  skipped);	  throw    new    IOException(   "   "    +    available);    	non-compiled	[CE]  no  suitable  constructor  found  for  IOException(long)	160	None	replace
1725	[BUG]  [BUGGY]  numToSkip  =  input.skipped(available  +  numToSkip);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  numToSkip  =  input.skipped(available  +  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	numToSkip  =  input.skipped(available  +  numToSkip);	  numToSkip    =    input.skip(available    +    numToSkip);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
1726	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " "  +  skipped);  [CE]  <identifier>  expected  [FE]          IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	Throwables.throw  new  IllegalStateException( " "  +  skipped);	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	136	None	replace
1727	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( ", ");  [CE]  <identifier>  expected  [FE]            IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( ", ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	Throwables.throw  new  IllegalStateException( ", ");	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	136	None	replace
1728	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( ". ");  [CE]  <identifier>  expected  [FE]              IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( ". ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	Throwables.throw  new  IllegalStateException( ". ");	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	136	None	replace
1729	[BUG]  [BUGGY]  skip  =  input.skip(available  +  0);  [CE]  cannot  find  symbol  skip  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skip  =  input.skip(available  +  0);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skip  =  input.skip(available  +  0);	  skip    =    input.skip(available    +    skipped);    	non-compiled	[CE]  cannot  find  symbol  skip	64	None	replace
1730	[BUG]  [BUGGY]  if(available  >  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  System.arraycopy(input,  numToSkip,  available,  skipped);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]        IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  System.arraycopy(input,  numToSkip,  available,  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  System.arraycopy(input,  numToSkip,  available,  skipped);  }	  throw    new    IllegalArgumentException(       "       ");    new    IllegalArgumentException(       "       ");    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	180	None	replace
1731	[BUG]  [BUGGY]  if(available  >  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }	  throw    new    IllegalArgumentException(       "       ");    new    IllegalArgumentException(       "       ");    	non-compiled	[CE]  illegal  start  of  expression	180	None	replace
1732	[BUG]  [BUGGY]  if(available  >  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getLength();  }	  throw    new    IllegalArgumentException(       "       ");    new    IllegalArgumentException(       "       ");    	non-compiled	[CE]  illegal  start  of  expression	180	None	replace
1733	[BUG]  [BUGGY]  Throwables.throw  new  IOException( " ");  [CE]  <identifier>  expected  [FE]        IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  Throwables.throw  new  IOException( " ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	Throwables.throw  new  IOException( " ");	  throw    new    IOException(       "       ");    if(    available    >    0)    {    throw    new    IOException(       "       ");    }    	non-compiled	[CE]  <identifier>  expected	263	None	replace
1734	[BUG]  [BUGGY]  Throwables.checkState(available  >  0);  [CE]  cannot  find  symbol  Throwables  [FE]          IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  Throwables.checkState(available  >  0);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	Throwables.checkState(available  >  0);	  throw    new    IOException(       "       ");    if(    available    >    0)    {    throw    new    IOException(       "       ");    }    	non-compiled	[CE]  cannot  find  symbol  Throwables	263	None	replace
1735	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  n;  }  [CE]  possible  loss  of  precision  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  n;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  n;  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    i;    }    	non-compiled	[CE]  possible  loss  of  precision	56	None	replace
1736	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped!=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >>  0)  {  break;  }  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped!=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >>  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped!=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >>  0)  {  break;  }	  	non-compiled	[CE]  incompatible  types	37	None	add
1737	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped!=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  ==  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >=        0)        {        break;        }        if(skipped!=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  ==  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	37	2	add
1738	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped!=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  ==  0)  {  break;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped!=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  ==  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped!=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  ==  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	37	2	add
1739	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped!=  0)  {  break;  }  if(skipped  >>  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [CE]  incompatible  types  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped!=  0)  {  break;  }  if(skipped  >>  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped!=    0)    {    break;    }    if(skipped  >>  0)  {  break;  }  if(skipped  >=  0)  {  break;  }	  	non-compiled	[CE]  incompatible  types	37	None	add
1740	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped!=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >=        0)        {        break;        }        if(skipped!=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	37	2	add
1741	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped!=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped!=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped!=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	37	2	add
1742	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped!=  0)  {  break;  }  if(skipped  <  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >=        0)        {        break;        }        if(skipped!=    0)    {    break;    }    if(skipped  <  0)  {  break;  }  if(skipped  >=  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	37	2	add
1743	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped!=  0)  {  break;  }  if(skipped  <  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped!=  0)  {  break;  }  if(skipped  <  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped!=    0)    {    break;    }    if(skipped  <  0)  {  break;  }  if(skipped  >=  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	37	2	add
1744	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped!=  0)  {  break;  }  if(skipped!=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >=        0)        {        break;        }        if(skipped!=    0)    {    break;    }    if(skipped!=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	37	2	add
1745	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped!=  0)  {  break;  }  if(skipped!=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped!=  0)  {  break;  }  if(skipped!=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped!=    0)    {    break;    }    if(skipped!=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	37	2	add
1746	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  skipped);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  numToSkip)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  numToSkip)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  skipped);  }	  if(skipped    >    available)    {    break;    }    if(skipped    >    available)    {    break;    System.arraycopy(input,    numToSkip,    available,    skipped);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	203	None	replace
1747	[BUG]  [BUGGY]  if(available  >  skipped)  {  break;  }  if(skipped  >  0)  {  System.arraycopy(input,  numToSkip,  available,  skipped);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  break;  }  if(skipped  >  0)  {  System.arraycopy(input,  numToSkip,  available,  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skipped)  {  break;  }  if(skipped  >  0)  {  System.arraycopy(input,  numToSkip,  available,  skipped);  }	  if(skipped    >    available)    {    break;    }    if(skipped    >    available)    {    break;    System.arraycopy(input,    numToSkip,    available,    skipped);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	203	None	replace
1748	[BUG]  [BUGGY]  if(available  >  skipped)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  skipped);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skipped)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  skipped);  }	  if(skipped    >    available)    {    break;    }    if(skipped    >    available)    {    break;    System.arraycopy(input,    numToSkip,    available,    skipped);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	203	None	replace
1749	[BUG]  [BUGGY]  if(available  >  skip)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  skipped);  }  [CE]  cannot  find  symbol  skip  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skip)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skip)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  skipped);  }	  if(skipped    >    available)    {    break;    }    if(skipped    >    available)    {    break;    System.arraycopy(input,    numToSkip,    available,    skipped);    }    	non-compiled	[CE]  cannot  find  symbol  skip	203	None	replace
1750	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  break;  }  if(available  >  skipped)  {  break;  System.arraycopy(input,  numToSkip,  available,  skipped);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  numToSkip)  {  break;  }  if(available  >  skipped)  {  break;  System.arraycopy(input,  numToSkip,  available,  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  numToSkip)  {  break;  }  if(available  >  skipped)  {  break;  System.arraycopy(input,  numToSkip,  available,  skipped);  }	  if(skipped    >    available)    {    break;    }    if(skipped    >    available)    {    break;    System.arraycopy(input,    numToSkip,    available,    skipped);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	203	None	replace
1751	[BUG]  [BUGGY]  timeout  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  -  0);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped  =  input.skip(available  -  0);	  skipped    =    input.skip(available    -    numToSkip);    timeout    	compilable	timeout	75	1	replace
1752	[BUG]  [BUGGY]  skipped  =  input.skip(available  -  0);  timeout  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  -  0);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped  =  input.skip(available  -  0);	  skipped    =    input.skip(available    -    numToSkip);    timeout    	compilable	timeout	75	1	replace
1753	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.nextToken();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.nextToken();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.nextToken();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.nextToken();    }    	non-compiled	[CE]  illegal  start  of  expression	231	None	replace
1754	[BUG]  [BUGGY]  short  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.nextToken();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  short  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.nextToken();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	short  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.nextToken();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.nextToken();    }    	non-compiled	[CE]  illegal  start  of  expression	231	None	replace
1755	[BUG]  [BUGGY]  long  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.nextToken();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  long  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.nextToken();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	long  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.nextToken();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.nextToken();    }    	non-compiled	[CE]  illegal  start  of  expression	231	None	replace
1756	[BUG]  [BUGGY]  InputStream  available  =  input.skip(skipped);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.nextToken();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  InputStream  available  =  input.skip(skipped);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.nextToken();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	InputStream  available  =  input.skip(skipped);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.nextToken();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.nextToken();    }    	non-compiled	[CE]  illegal  start  of  expression	231	None	replace
1757	[BUG]  [BUGGY]  skipped  =  input.skip(skipped);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.nextToken();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(skipped);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.nextToken();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped  =  input.skip(skipped);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.nextToken();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.nextToken();    }    	non-compiled	[CE]  illegal  start  of  expression	231	None	replace
1758	[BUG]  [BUGGY]  if(available  >  safeSkip)  {  break;  }  [CE]  cannot  find  symbol  safeSkip  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  safeSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  safeSkip)  {  break;  }	  if(available    >    sink)    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  safeSkip	51	None	replace
1759	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  continue;  skipped  =  input.skip(numToSkip);  if(skipped  >  0)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  numToSkip)  {  continue;  skipped  =  input.skip(numToSkip);  if(skipped  >  0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  numToSkip)  {  continue;  skipped  =  input.skip(numToSkip);  if(skipped  >  0)  {  continue;  }	  continue;    long    skipped    =    input.skip(numToSkip);    if(skipped    >    0)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
1760	[BUG]  [BUGGY]  if(available  <  =  0)  {  continue;  skipped  =  input.skip(available);  if(skipped  >  0)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  =  0)  {  continue;  skipped  =  input.skip(available);  if(skipped  >  0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  =  0)  {  continue;  skipped  =  input.skip(available);  if(skipped  >  0)  {  continue;  }	  continue;    long    skipped    =    input.skip(numToSkip);    if(skipped    >    0)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
1761	[BUG]  [BUGGY]  throw  new  IOException( " ")+  available;  [CE]  bad  operand  types  for  binary  operator  [FE]          IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( " ")+  available;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( " ")+  available;	  throw    new    IOException(   "   "));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  	220	None	replace
1762	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  throw  new  IllegalStateException( " ");  System.arraycopy(input,  numToSkip,  available,  skipped);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]          IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  numToSkip)  {  throw  new  IllegalStateException( " ");  System.arraycopy(input,  numToSkip,  available,  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  numToSkip)  {  throw  new  IllegalStateException( " ");  System.arraycopy(input,  numToSkip,  available,  skipped);  }	  throw    new    IllegalStateException(       "       ");    System.arraycopy(input,    numToSkip,    available,    skipd);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	236	None	replace
1763	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  throw  new  IllegalStateException( " ");  System.arraycopy(input,  numToSkip,  available,  skip);  }  [CE]  cannot  find  symbol  skip  [FE]            IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  numToSkip)  {  throw  new  IllegalStateException( " ");  System.arraycopy(input,  numToSkip,  available,  skip);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  numToSkip)  {  throw  new  IllegalStateException( " ");  System.arraycopy(input,  numToSkip,  available,  skip);  }	  throw    new    IllegalStateException(       "       ");    System.arraycopy(input,    numToSkip,    available,    skipd);    	non-compiled	[CE]  cannot  find  symbol  skip	236	None	replace
1764	[BUG]  [BUGGY]  if(available  >  0)  {  throw  new  IllegalStateException( " ");  System.arraycopy(input,  numToSkip,  available,  skipped);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]              IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IllegalStateException( " ");  System.arraycopy(input,  numToSkip,  available,  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  throw  new  IllegalStateException( " ");  System.arraycopy(input,  numToSkip,  available,  skipped);  }	  throw    new    IllegalStateException(       "       ");    System.arraycopy(input,    numToSkip,    available,    skipd);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	236	None	replace
1765	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  input.length;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  input.length;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  input.length;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.length();    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
1766	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.length();  }  [CE]  possible  loss  of  precision  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.length();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.length();  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.length();    }    	non-compiled	[CE]  possible  loss  of  precision	53	None	replace
1767	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  skipped;  i++)  {  available  +=  input.length();  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  skipped;  i++)  {  available  +=  input.length();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  available;  i  <  skipped;  i++)  {  available  +=  input.length();  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.length();    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
1768	[BUG]  [BUGGY]  if(available  >  0  ||  skipped  <  0)  {  break;  }  if(available  >  0  ||  saved  <  0)  {  break;  }  [CE]  cannot  find  symbol  saved  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0  ||  skipped  <  0)  {  break;  }  if(available  >  0  ||  saved  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >    0    ||    skipped    <    0)    {    break;    }    if(available  >  0  ||  saved  <  0)  {  break;  }	  	non-compiled	[CE]  cannot  find  symbol  saved	183	None	add
1769	[BUG]  [BUGGY]  throw  new  IOException( ", "  +  input.getMillis());  [CE]  cannot  find  symbol  [FE]        IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( ", "  +  input.getMillis());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( ", "  +  input.getMillis());	  throw    new    IOException(   "   "    +    input.getMillis());    	non-compiled	[CE]  cannot  find  symbol	156	None	replace
1770	[BUG]  [BUGGY]  Throw  new  IOException( "   "  +  input.getMillis());  [CE]  not  a  statement  [FE]          IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  Throw  new  IOException( "   "  +  input.getMillis());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	Throw  new  IOException( "   "  +  input.getMillis());	  throw    new    IOException(   "   "    +    input.getMillis());    	non-compiled	[CE]  not  a  statement	156	None	replace
1771	[BUG]  [BUGGY]  throw  new  IOException( " ",  +  input.getMillis());  [CE]  cannot  find  symbol  [FE]            IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( " ",  +  input.getMillis());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( " ",  +  input.getMillis());	  throw    new    IOException(   "   "    +    input.getMillis());    	non-compiled	[CE]  cannot  find  symbol	156	None	replace
1772	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Skip  is  less  than  1:   ");  IllegalArgumentException(   "Skip  is  less  than  1:   ");  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException(   "Skip  is  less  than  1:   ");  IllegalArgumentException(   "Skip  is  less  than  1:   ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalArgumentException(   "Skip    is    less    than    1:   ");    IllegalArgumentException(   "Skip  is  less  than  1:   ");	  	non-compiled	[CE]  cannot  find  symbol	33	None	add
1773	[BUG]  [BUGGY]  readFully(input)  {  if(available  >  0)  {  break;  }  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  readFully(input)  {  if(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	readFully(input)  {  if(available  >  0)  {  break;  }	  if(available    >    0)    {    break;    }    int    available    =    input.read(skipped);    if(available    >    0)    {    break;    }    	non-compiled	[CE]  ';'  expected	207	None	replace
1774	[BUG]  [BUGGY]  if(available  >  0)  {  break;  }  int  available  =  input.read(available);  if(available  >  0)  {  break;  }  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  break;  }  int  available  =  input.read(available);  if(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  break;  }  int  available  =  input.read(available);  if(available  >  0)  {  break;  }	  if(available    >    0)    {    break;    }    int    available    =    input.read(skipped);    if(available    >    0)    {    break;    }    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	207	None	replace
1775	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getMillis();  }  [CE]  possible  loss  of  precision  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getMillis();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getMillis();  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.getMillis();    }    	non-compiled	[CE]  possible  loss  of  precision	226	None	replace
1776	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  0;  ++i)  {  available  +=  input.getMillis();  }  [CE]  possible  loss  of  precision  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  available;  i  <  0;  ++i)  {  available  +=  input.getMillis();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  available;  i  <  0;  ++i)  {  available  +=  input.getMillis();  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.getMillis();    }    	non-compiled	[CE]  possible  loss  of  precision	226	None	replace
1777	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  skipped;  ++i)  {  available  +=  input.getMillis();  }  [CE]  possible  loss  of  precision  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  available;  i  <  skipped;  ++i)  {  available  +=  input.getMillis();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  available;  i  <  skipped;  ++i)  {  available  +=  input.getMillis();  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.getMillis();    }    	non-compiled	[CE]  possible  loss  of  precision	226	None	replace
1778	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getMethod();  }  [CE]  possible  loss  of  precision  [FE]                                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getMethod();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getMethod();  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.getMillis();    }    	non-compiled	[CE]  possible  loss  of  precision	226	None	replace
1779	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  n;  ++i)  {  available  +=  input.getMillis();  }  [CE]  possible  loss  of  precision  [FE]                                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  available;  i  <  n;  ++i)  {  available  +=  input.getMillis();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  available;  i  <  n;  ++i)  {  available  +=  input.getMillis();  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.getMillis();    }    	non-compiled	[CE]  possible  loss  of  precision	226	None	replace
1780	[BUG]  [BUGGY]  if(available  >  skipped)  {  break;  }  if(skipped  >  0)  {  System.arraycopy(input,  numToSkip,  available,  numToSkip,  skipped);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  break;  }  if(skipped  >  0)  {  System.arraycopy(input,  numToSkip,  available,  numToSkip,  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skipped)  {  break;  }  if(skipped  >  0)  {  System.arraycopy(input,  numToSkip,  available,  numToSkip,  skipped);  }	  if(skipped    >    available)    {    break;    }    if(skipped    >    available)    {    break;    System.arraycopy(input,    numToSkip,    available,    numToSkip,    skipped);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	202	None	replace
1781	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  numToSkip,  skipped);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  numToSkip)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  numToSkip,  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  numToSkip)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  numToSkip,  skipped);  }	  if(skipped    >    available)    {    break;    }    if(skipped    >    available)    {    break;    System.arraycopy(input,    numToSkip,    available,    numToSkip,    skipped);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	202	None	replace
1782	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  numToSkip,  skipped);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  numToSkip)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  numToSkip,  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  numToSkip)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  numToSkip,  skipped);  }	  if(skipped    >    available)    {    break;    }    if(skipped    >    available)    {    break;    System.arraycopy(input,    numToSkip,    available,    numToSkip,    skipped);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	202	None	replace
1783	[BUG]  [BUGGY]  if(available  >  skipped)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  numToSkip,  skipped);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  numToSkip,  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skipped)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  numToSkip,  skipped);  }	  if(skipped    >    available)    {    break;    }    if(skipped    >    available)    {    break;    System.arraycopy(input,    numToSkip,    available,    numToSkip,    skipped);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	202	None	replace
1784	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  break;  }  if(available  >  skipped)  {  break;  System.arraycopy(input,  numToSkip,  available,  numToSkip,  skipped);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  numToSkip)  {  break;  }  if(available  >  skipped)  {  break;  System.arraycopy(input,  numToSkip,  available,  numToSkip,  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  numToSkip)  {  break;  }  if(available  >  skipped)  {  break;  System.arraycopy(input,  numToSkip,  available,  numToSkip,  skipped);  }	  if(skipped    >    available)    {    break;    }    if(skipped    >    available)    {    break;    System.arraycopy(input,    numToSkip,    available,    numToSkip,    skipped);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	202	None	replace
1785	[BUG]  [BUGGY]  System.arraycopy(input,  numToSkip,  available,  skipped,  chk);  [CE]  cannot  find  symbol  chk  [FE]        IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.arraycopy(input,  numToSkip,  available,  skipped,  chk);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	System.arraycopy(input,  numToSkip,  available,  skipped,  chk);	  throw    new    IllegalStateException(       "       ");    System.arraycopy(input,    numToSkip,    available,    skipped);    	non-compiled	[CE]  cannot  find  symbol  chk	235	None	replace
1786	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  throw  new  IllegalStateException( " ");  System.arraycopy(input,  skipped,  numToSkip,  available,  numToSkip);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]          IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  numToSkip)  {  throw  new  IllegalStateException( " ");  System.arraycopy(input,  skipped,  numToSkip,  available,  numToSkip);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  numToSkip)  {  throw  new  IllegalStateException( " ");  System.arraycopy(input,  skipped,  numToSkip,  available,  numToSkip);  }	  throw    new    IllegalStateException(       "       ");    System.arraycopy(input,    numToSkip,    available,    skipped);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	235	None	replace
1787	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.next();  }  [CE]  possible  loss  of  precision  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.next();  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.next();    }    	non-compiled	[CE]  possible  loss  of  precision	154	None	replace
1788	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  skipped;  i++)  {  available  +=  input.next();  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  skipped;  i++)  {  available  +=  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  available;  i  <  skipped;  i++)  {  available  +=  input.next();  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
1789	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getValue();  }  [CE]  possible  loss  of  precision  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getValue();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getValue();  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.next();    }    	non-compiled	[CE]  possible  loss  of  precision	154	None	replace
1790	[BUG]  [BUGGY]  throw  new  IOException( ".skipped  =  0;  [CE]  unclosed  string  literal  [FE]                IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( ".skipped  =  0;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( ".skipped  =  0;	  throw    new    IOException(       "       ");    throw    new    IOException(.   "       ");    	non-compiled	[CE]  unclosed  string  literal	110	None	replace
1791	[BUG]  [BUGGY]  throw  new  IOException(. " ");  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException(. " ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException(. " ");	  throw    new    IOException(       "       ");    throw    new    IOException(.   "       ");    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
1792	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getUpperBound();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getUpperBound();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getUpperBound();  }	  continue;    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	192	None	replace
1793	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getSize();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getSize();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getSize();  }	  continue;    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	192	None	replace
1794	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getHeaderSize();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getHeaderSize();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getHeaderSize();  }	  continue;    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	192	None	replace
1795	[BUG]  [BUGGY]  if(available  >>  0)  {  break;  }  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >>  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >>  0)  {  break;  }	  if(available!=    0)    {    break;    }    	non-compiled	[CE]  incompatible  types	114	None	replace
1796	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  break;  }  while(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  skipped)  {  break;  }  while(skipped  >  0)  {  break;  }	  if(skipped    >    available)    {    break;    }    while(skipped    >    available)    {    break;    }    	compilable	  [FE]  AssertionError  	86	2	replace
1797	[BUG]  [BUGGY]  if(available  >  skipped)  {  break;  }  while(skipped  >  0)  {  break;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  break;  }  while(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skipped)  {  break;  }  while(skipped  >  0)  {  break;  }	  if(skipped    >    available)    {    break;    }    while(skipped    >    available)    {    break;    }    	compilable	  [FE]  AssertionError  	86	2	replace
1798	[BUG]  [BUGGY]  if(available  >  skip)  {  break;  }  while(skipped  >  available)  {  break;  }  [CE]  cannot  find  symbol  skip  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skip)  {  break;  }  while(skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skip)  {  break;  }  while(skipped  >  available)  {  break;  }	  if(skipped    >    available)    {    break;    }    while(skipped    >    available)    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  skip	86	None	replace
1799	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  break;  }  while(skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  skipped)  {  break;  }  while(skipped  >  available)  {  break;  }	  if(skipped    >    available)    {    break;    }    while(skipped    >    available)    {    break;    }    	compilable	  [FE]  AssertionError  	86	2	replace
1800	[BUG]  [BUGGY]  if(available  >  skipped)  {  break;  }  while(skipped  >  available)  {  break;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  break;  }  while(skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skipped)  {  break;  }  while(skipped  >  available)  {  break;  }	  if(skipped    >    available)    {    break;    }    while(skipped    >    available)    {    break;    }    	compilable	  [FE]  AssertionError  	86	2	replace
1801	[BUG]  [BUGGY]  if(available  <  =  0)  {  break;  }  while(available  >  numToSkip)  {  break;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  =  0)  {  break;  }  while(available  >  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  =  0)  {  break;  }  while(available  >  numToSkip)  {  break;  }	  if(skipped    >    available)    {    break;    }    while(skipped    >    available)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
1802	[BUG]  [BUGGY]  if(available  <  =  0)  {  break;  }  while(skipped  >  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  =  0)  {  break;  }  while(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  =  0)  {  break;  }  while(skipped  >  0)  {  break;  }	  if(skipped    >    available)    {    break;    }    while(skipped    >    available)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
1803	[BUG]  [BUGGY]  if(available  >  0)  {  break;  }  else  if(skipped  >  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  break;  }  else  if(skipped  >  0)  {  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  break;  }  else  if(skipped  >  0)  {	  if(available    >    0)    {    break;    }    if(available    >    0)    {    break;    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
1804	[BUG]  [BUGGY]  int  skipped  =  input.skip(available  +  skipped);  [CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  int  skipped  =  input.skip(available  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	int  skipped  =  input.skip(available  +  skipped);	  int    skipped    =    input.skip(available);    	non-compiled	[CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)	189	None	replace
1805	[BUG]  [BUGGY]  int  skipped  =  input.skip(available,  skipped);  [CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  int  skipped  =  input.skip(available,  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	int  skipped  =  input.skip(available,  skipped);	  int    skipped    =    input.skip(available);    	non-compiled	[CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)	189	None	replace
1806	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Skipped:   "  +  skipped);  new  IllegalArgumentException(   "Skipped:   "  +  skipped);  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException(   "Skipped:   "  +  skipped);  new  IllegalArgumentException(   "Skipped:   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalArgumentException(   "Skipped:   "    +    skipped);    new  IllegalArgumentException(   "Skipped:   "  +  skipped);	  	non-compiled	[CE]  unreachable  statement	31	None	add
1807	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Skipped:   "  +  skipped);  throw  new  IllegalArgumentException(   "Skipped:   "  +  skip);  [CE]  cannot  find  symbol  skip  [FE]      IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException(   "Skipped:   "  +  skipped);  throw  new  IllegalArgumentException(   "Skipped:   "  +  skip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalArgumentException(   "Skipped:   "    +    skipped);    throw  new  IllegalArgumentException(   "Skipped:   "  +  skip);	  	non-compiled	[CE]  cannot  find  symbol  skip	31	None	add
1808	[BUG]  [BUGGY]  if(available  >  0  ||  skipped  >  0)  {  break;  }  if(available  >  0  ||  saved  >  0)  {  break;  }  [CE]  cannot  find  symbol  saved  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0  ||  skipped  >  0)  {  break;  }  if(available  >  0  ||  saved  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >    0    ||    skipped    >    0)    {    break;    }    if(available  >  0  ||  saved  >  0)  {  break;  }	  	non-compiled	[CE]  cannot  find  symbol  saved	181	None	add
1809	[BUG]  [BUGGY]  System.err.println( "Usage:  SKIP:   "  +  input.getName());  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.err.println( "Usage:  SKIP:   "  +  input.getName());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	System.err.println( "Usage:  SKIP:   "  +  input.getName());	  throw    new    IllegalArgumentException(       "       ");    System.err.println(   "Usage:    SKIP       "    +    input.getName());    	non-compiled	[CE]  cannot  find  symbol	238	None	replace
1810	[BUG]  [BUGGY]  System.err.println( "Usage:  SKIP_BUFFER:  SKIP "  +  input.getName());  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.err.println( "Usage:  SKIP_BUFFER:  SKIP "  +  input.getName());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	System.err.println( "Usage:  SKIP_BUFFER:  SKIP "  +  input.getName());	  throw    new    IllegalArgumentException(       "       ");    System.err.println(   "Usage:    SKIP       "    +    input.getName());    	non-compiled	[CE]  cannot  find  symbol	238	None	replace
1811	[BUG]  [BUGGY]  if(available  >  skipped)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skipped)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }	  continue;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	191	None	replace
1812	[BUG]  [BUGGY]  if(available  >  skipped)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getUpperBound();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getUpperBound();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skipped)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getUpperBound();  }	  continue;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	191	None	replace
1813	[BUG]  [BUGGY]  row  =  input.readLine();  [CE]  cannot  find  symbol  row  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  row  =  input.readLine();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	row  =  input.readLine();	  if(available    >    0)    {    break;    }    if(available    >    0)    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  row	146	None	replace
1814	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  return  skipped;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  0)  {  return  skipped;  }	  if(available    >    0)    {    break;    }    if(available    >    0)    {    break;    }    	compilable	  [FE]  AssertionError  	146	2	replace
1815	[BUG]  [BUGGY]  if(available  >  0)  {  return  skipped;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  return  skipped;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  return  skipped;  }	  if(available    >    0)    {    break;    }    if(available    >    0)    {    break;    }    	compilable	  [FE]  AssertionError  	146	2	replace
1816	[BUG]  [BUGGY]  luate(input,  skipped);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  luate(input,  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	luate(input,  skipped);	  if(available    >    0)    {    break;    }    if(available    >    0)    {    break;    }    	non-compiled	[CE]  cannot  find  symbol	146	None	replace
1817	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  +  skipped);  if(available  >  0)  {  available  =  input.read();  skipped  =  input.skip(available  +  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped    =    input.skip(available    +    skipped);    if(available  >  0)  {  available  =  input.read();  skipped  =  input.skip(available  +  skipped);  }	  timeout    	compilable	  [FE]  AssertionError  	78	2	add
1818	[BUG]  [BUGGY]  skipped  =  input.skip(available  +  skipped);  if(available  >  0)  {  available  =  input.read();  skipped  =  input.skip(available  +  skipped);  }  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  +  skipped);  if(available  >  0)  {  available  =  input.read();  skipped  =  input.skip(available  +  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    +    skipped);    if(available  >  0)  {  available  =  input.read();  skipped  =  input.skip(available  +  skipped);  }	  timeout    	compilable	  [FE]  AssertionError  	78	2	add
1819	[BUG]  [BUGGY]  skipped  =  input.skip(available  +  skipped);  skip  =  input.skip(available  +  skipped);  [CE]  cannot  find  symbol  skip  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  +  skipped);  skip  =  input.skip(available  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    +    skipped);    skip  =  input.skip(available  +  skipped);	  timeout    	non-compiled	[CE]  cannot  find  symbol  skip	78	None	add
1820	[BUG]  [BUGGY]  skipped  =  input.skip(available  +  skipped);  InputStream  available  =  input.readLine();  skipped  =  input.skip(available  +  skipped);  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  +  skipped);  InputStream  available  =  input.readLine();  skipped  =  input.skip(available  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    +    skipped);    InputStream  available  =  input.readLine();  skipped  =  input.skip(available  +  skipped);	  timeout    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	78	None	add
1821	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  +  skipped);  if(available  >  0)  {  available  =  input.read();  }  else  {  available  =  input.read();  skipped  =  input.skip(available  +  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped    =    input.skip(available    +    skipped);    if(available  >  0)  {  available  =  input.read();  }  else  {  available  =  input.read();  skipped  =  input.skip(available  +  skipped);  }	  timeout    	compilable	  [FE]  AssertionError  	78	2	add
1822	[BUG]  [BUGGY]  skipped  =  input.skip(available  +  skipped);  if(available  >  0)  {  available  =  input.read();  }  else  {  available  =  input.read();  skipped  =  input.skip(available  +  skipped);  }  [FE]  AssertionError  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  +  skipped);  if(available  >  0)  {  available  =  input.read();  }  else  {  available  =  input.read();  skipped  =  input.skip(available  +  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    +    skipped);    if(available  >  0)  {  available  =  input.read();  }  else  {  available  =  input.read();  skipped  =  input.skip(available  +  skipped);  }	  timeout    	compilable	  [FE]  AssertionError  	78	2	add
1823	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  +  skipped);  if(available  >  0)  {  available  =  input.read();  }  else  {  skipped  =  input.skip(available  +  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped    =    input.skip(available    +    skipped);    if(available  >  0)  {  available  =  input.read();  }  else  {  skipped  =  input.skip(available  +  skipped);  }	  timeout    	compilable	  [FE]  AssertionError  	78	2	add
1824	[BUG]  [BUGGY]  skipped  =  input.skip(available  +  skipped);  if(available  >  0)  {  available  =  input.read();  }  else  {  skipped  =  input.skip(available  +  skipped);  }  [FE]  AssertionError  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  +  skipped);  if(available  >  0)  {  available  =  input.read();  }  else  {  skipped  =  input.skip(available  +  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    +    skipped);    if(available  >  0)  {  available  =  input.read();  }  else  {  skipped  =  input.skip(available  +  skipped);  }	  timeout    	compilable	  [FE]  AssertionError  	78	2	add
1825	[BUG]  [BUGGY]  skipped  =  input.skip(available  +  skipped);  if(available  >  0)  {  available  =  input.read();  }  else  {  skip  =  input.skip(available  +  skipped);  }  [CE]  cannot  find  symbol  skip  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  +  skipped);  if(available  >  0)  {  available  =  input.read();  }  else  {  skip  =  input.skip(available  +  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    +    skipped);    if(available  >  0)  {  available  =  input.read();  }  else  {  skip  =  input.skip(available  +  skipped);  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  skip	78	None	add
1826	[BUG]  [BUGGY]  if(available  >  0)  {  continue;  }  else  {  skippe  =  input.read();  }  [CE]  cannot  find  symbol  skippe  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  continue;  }  else  {  skippe  =  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  continue;  }  else  {  skippe  =  input.read();  }	  if(skipped    >    0)    {    continue;    }    else    {    skip    =    input.read();    }    	non-compiled	[CE]  cannot  find  symbol  skippe	217	None	replace
1827	[BUG]  [BUGGY]  if(skip  >  0)  {  continue;  }  else  {  skip  =  input.read();  }  [CE]  cannot  find  symbol  skip  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skip  >  0)  {  continue;  }  else  {  skip  =  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skip  >  0)  {  continue;  }  else  {  skip  =  input.read();  }	  if(skipped    >    0)    {    continue;    }    else    {    skip    =    input.read();    }    	non-compiled	[CE]  cannot  find  symbol  skip	217	None	replace
1828	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.next();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skip  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skip  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.next();  }	  continue;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	196	None	replace
1829	[BUG]  [BUGGY]  if(available  >  skipped)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.next();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skipped)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.next();  }	  continue;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	196	None	replace
1830	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.next();  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.next();  }	  continue;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	196	None	replace
1831	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:    [FE]            IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IllegalArgumentException( ", ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  0)  {  throw  new  IllegalArgumentException( ", ");  }	  throw    new    IllegalArgumentException(       "       ");    throw    new    IllegalArgumentException(   ",       ");    	compilable	  [FE]  java.lang.IllegalArgumentException:    	7	2	replace
1832	[BUG]  [BUGGY]  if(available  >  0)  {  throw  new  IllegalArgumentException( ", ");  }  [FE]  java.lang.IllegalArgumentException:    [FE]            IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IllegalArgumentException( ", ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  throw  new  IllegalArgumentException( ", ");  }	  throw    new    IllegalArgumentException(       "       ");    throw    new    IllegalArgumentException(   ",       ");    	compilable	  [FE]  java.lang.IllegalArgumentException:    	7	2	replace
1833	[BUG]  [BUGGY]  if(available  >  0)  {  break;  }  if(Skip  >  0)  {  break;  }  [CE]  cannot  find  symbol  Skip  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  break;  }  if(Skip  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  break;  }  if(Skip  >  0)  {  break;  }	  if(skipped    >    0)    {    break;    }    if(Skipped    >    0)    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  Skip	258	None	replace
1834	[BUG]  [BUGGY]  if(available  ==  0)  {  break;  }  if(available  {  0)  {  break;  }  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  ==  0)  {  break;  }  if(available  {  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    ==    0)    {    break;    }    if(available  {  0)  {  break;  }	  timeout    	non-compiled	[CE]  ')'  expected	111	None	add
1835	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "skipped  =     "  +  skipped);  throw  new  IllegalStateException(   "skipped  =   "  +  skip);  [CE]  cannot  find  symbol  skip  [FE]    IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "skipped  =     "  +  skipped);  throw  new  IllegalStateException(   "skipped  =   "  +  skip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalStateException(   "skipped    =       "    +    skipped);    throw  new  IllegalStateException(   "skipped  =   "  +  skip);	  	non-compiled	[CE]  cannot  find  symbol  skip	139	None	add
1836	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  <  available)  {  break;  }  if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  if(skipped  <  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >        available)        {        break;        }        if(skipped    <    available)    {    break;    }    if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  if(skipped  <  available)  {  break;  }	  	compilable	  [FE]  AssertionError  	87	2	add
1837	[BUG]  [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  <  available)  {  break;  }  if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  if(skipped  <  available)  {  break;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  <  available)  {  break;  }  if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  if(skipped  <  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >        available)        {        break;        }        if(skipped    <    available)    {    break;    }    if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  if(skipped  <  available)  {  break;  }	  	compilable	  [FE]  AssertionError  	87	2	add
1838	[BUG]  [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  <  available)  {  break;  }  if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  if(skipped  <  available)  {  break;  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  <  available)  {  break;  }  if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  if(skipped  <  available)  {  break;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >        available)        {        break;        }        if(skipped    <    available)    {    break;    }    if(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  if(skipped  <  available)  {  break;	  	non-compiled	[CE]  illegal  start  of  expression	87	None	add
1839	[BUG]  [BUGGY]  if(skip  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  [CE]  cannot  find  symbol  skip  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skip  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skip  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }	  if(skipped    >    available)    {    break;    }    if(skip    >    available)    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  skip	254	None	replace
1840	[BUG]  [BUGGY]  luate(input,  numToSkip)>  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [CE]  not  a  statement  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  luate(input,  numToSkip)>  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	luate(input,  numToSkip)>  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.read();    }    	non-compiled	[CE]  not  a  statement	54	None	replace
1841	[BUG]  [BUGGY]  luate(input,  numToSkip)>  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.read();  }  [CE]  not  a  statement  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  luate(input,  numToSkip)>  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	luate(input,  numToSkip)>  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.read();  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.read();    }    	non-compiled	[CE]  not  a  statement	54	None	replace
1842	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  skipped;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  skipped;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  skipped;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
1843	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "skipped:  0 "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalStateException( "skipped:  0 "  +  skipped);	  throw    new    IllegalStateException(   "skipped:   "    +    skipped);    	compilable	  [FE]  IllegalStateException  	138	2	replace
1844	[BUG]  [BUGGY]  throw  new  IllegalStateException( "skipped:  0 "  +  skipped);  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "skipped:  0 "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "skipped:  0 "  +  skipped);	  throw    new    IllegalStateException(   "skipped:   "    +    skipped);    	compilable	  [FE]  IllegalStateException  	138	2	replace
1845	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  -  numToSkip);  if(available  >  numToSkip)  {  available  =  input.read();  skipped  =  input.skip(available  -  numToSkip);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped    =    input.skip(available    -    numToSkip);    if(available  >  numToSkip)  {  available  =  input.read();  skipped  =  input.skip(available  -  numToSkip);  }	  timeout    	compilable	  [FE]  AssertionError  	74	2	add
1846	[BUG]  [BUGGY]  skipped  =  input.skip(available  -  numToSkip);  if(available  >  numToSkip)  {  available  =  input.read();  skipped  =  input.skip(available  -  numToSkip);  }  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  -  numToSkip);  if(available  >  numToSkip)  {  available  =  input.read();  skipped  =  input.skip(available  -  numToSkip);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    -    numToSkip);    if(available  >  numToSkip)  {  available  =  input.read();  skipped  =  input.skip(available  -  numToSkip);  }	  timeout    	compilable	  [FE]  AssertionError  	74	2	add
1847	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  -  numToSkip);  if(available  >  numToSkip)  {  available  =  0;  }  else  {  skipped  =  input.skip(available  -  numToSkip);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped    =    input.skip(available    -    numToSkip);    if(available  >  numToSkip)  {  available  =  0;  }  else  {  skipped  =  input.skip(available  -  numToSkip);  }	  timeout    	compilable	  [FE]  AssertionError  	74	2	add
1848	[BUG]  [BUGGY]  skipped  =  input.skip(available  -  numToSkip);  if(available  >  numToSkip)  {  available  =  0;  }  else  {  skipped  =  input.skip(available  -  numToSkip);  }  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  -  numToSkip);  if(available  >  numToSkip)  {  available  =  0;  }  else  {  skipped  =  input.skip(available  -  numToSkip);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    -    numToSkip);    if(available  >  numToSkip)  {  available  =  0;  }  else  {  skipped  =  input.skip(available  -  numToSkip);  }	  timeout    	compilable	  [FE]  AssertionError  	74	2	add
1849	[BUG]  [BUGGY]  timeout  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  *  numToSkip)+  skipped;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped  =  input.skip(available  *  numToSkip)+  skipped;	  skipped    =    input.skip(available    *    numToSkip);    timeout    	compilable	timeout	77	1	replace
1850	[BUG]  [BUGGY]  skipped  =  input.skip(available  *  numToSkip)+  skipped;  timeout  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  *  numToSkip)+  skipped;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped  =  input.skip(available  *  numToSkip)+  skipped;	  skipped    =    input.skip(available    *    numToSkip);    timeout    	compilable	timeout	77	1	replace
1851	[BUG]  [BUGGY]  throw  new  IOException(   "   "  +  available);  if(  available  >  0)  {  throw  new  IOException(   "   "  +  available);  }  [CE]  unreachable  statement  [FE]    IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException(   "   "  +  available);  if(  available  >  0)  {  throw  new  IOException(   "   "  +  available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IOException(   "   "    +    available);    if(  available  >  0)  {  throw  new  IOException(   "   "  +  available);  }	  	non-compiled	[CE]  unreachable  statement	159	None	add
1852	[BUG]  [BUGGY]  throw  new  IOException(   "   "  +  available);  if(  available  >  0)  {  throw  new  IOException(   "   "  +  available);  }  else  {  for(int  i  =  0;  i  <  available;  i++)  {  available  =  input.skip(available);  }  [CE]  illegal  start  of  expression  [FE]      IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException(   "   "  +  available);  if(  available  >  0)  {  throw  new  IOException(   "   "  +  available);  }  else  {  for(int  i  =  0;  i  <  available;  i++)  {  available  =  input.skip(available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IOException(   "   "    +    available);    if(  available  >  0)  {  throw  new  IOException(   "   "  +  available);  }  else  {  for(int  i  =  0;  i  <  available;  i++)  {  available  =  input.skip(available);  }	  	non-compiled	[CE]  illegal  start  of  expression	159	None	add
1853	[BUG]  [BUGGY]  throw  new  IOException(   "   "  +  available);  if(  available  >  0)  {  throw  new  IOException(   "   "  +  available);  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  =  input.skip(available);  }  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException(   "   "  +  available);  if(  available  >  0)  {  throw  new  IOException(   "   "  +  available);  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  =  input.skip(available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IOException(   "   "    +    available);    if(  available  >  0)  {  throw  new  IOException(   "   "  +  available);  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  =  input.skip(available);  }	  	non-compiled	[CE]  illegal  start  of  expression	159	None	add
1854	[BUG]  [BUGGY]  throw  new  IOException(   "   "  +  available);  if(  available  >  0)  {  throw  new  IOException(   "   "  +  available);  }  else  {  for(int  i  =  0;  i  <  available;  i++)  {  available  =  input.read(available);  }  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException(   "   "  +  available);  if(  available  >  0)  {  throw  new  IOException(   "   "  +  available);  }  else  {  for(int  i  =  0;  i  <  available;  i++)  {  available  =  input.read(available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IOException(   "   "    +    available);    if(  available  >  0)  {  throw  new  IOException(   "   "  +  available);  }  else  {  for(int  i  =  0;  i  <  available;  i++)  {  available  =  input.read(available);  }	  	non-compiled	[CE]  illegal  start  of  expression	159	None	add
1855	[BUG]  [BUGGY]  throw  new  IOException(   "   "  +  available);  if(  available  >  0)  {  throw  new  IOException(   "   "  +  available);  }  else  {  for(int  i  =  0;  i  <  available;  i++)  {  available  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException(   "   "  +  available);  if(  available  >  0)  {  throw  new  IOException(   "   "  +  available);  }  else  {  for(int  i  =  0;  i  <  available;  i++)  {  available  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IOException(   "   "    +    available);    if(  available  >  0)  {  throw  new  IOException(   "   "  +  available);  }  else  {  for(int  i  =  0;  i  <  available;  i++)  {  available  =  input.next();  }	  	non-compiled	[CE]  illegal  start  of  expression	159	None	add
1856	[BUG]  [BUGGY]  throw  new  IOException(   "   "  +  available);  if(  available  >  0)  {  throw  new  IOException(   "   "  +  available);  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  =  input.read(available);  }  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException(   "   "  +  available);  if(  available  >  0)  {  throw  new  IOException(   "   "  +  available);  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  =  input.read(available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IOException(   "   "    +    available);    if(  available  >  0)  {  throw  new  IOException(   "   "  +  available);  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  =  input.read(available);  }	  	non-compiled	[CE]  illegal  start  of  expression	159	None	add
1857	[BUG]  [BUGGY]  if(available  >  0)  {  break;  }  else  {  System.arraycopy(input,  numToSkip,  available,  skipped);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  break;  }  else  {  System.arraycopy(input,  numToSkip,  available,  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  break;  }  else  {  System.arraycopy(input,  numToSkip,  available,  skipped);  }	  if(available    >    0)    {    break;    }    if(available    >    0)    {    break;    System.arraycopy(input,    numToSkip,    available,    skipped);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	208	None	replace
1858	[BUG]  [BUGGY]  if(skipped  >  0)  {  break;  }  if(available  >  0)  {  break;  System.arraycopy(input,  numToSkip,  available,  skipped);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  break;  }  if(available  >  0)  {  break;  System.arraycopy(input,  numToSkip,  available,  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  break;  }  if(available  >  0)  {  break;  System.arraycopy(input,  numToSkip,  available,  skipped);  }	  if(available    >    0)    {    break;    }    if(available    >    0)    {    break;    System.arraycopy(input,    numToSkip,    available,    skipped);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	208	None	replace
1859	[BUG]  [BUGGY]  if(available  >  0  ||  skipped  >  0)  {  break;  }  else  {  System.arraycopy(input,  numToSkip,  available,  skipped);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0  ||  skipped  >  0)  {  break;  }  else  {  System.arraycopy(input,  numToSkip,  available,  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0  ||  skipped  >  0)  {  break;  }  else  {  System.arraycopy(input,  numToSkip,  available,  skipped);  }	  if(available    >    0)    {    break;    }    if(available    >    0)    {    break;    System.arraycopy(input,    numToSkip,    available,    skipped);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	208	None	replace
1860	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "skipped:   "  +  available);  if(available  >  0)  {  throw  new  IllegalStateException(   "skipped:   "  +  available);  }  [CE]  unreachable  statement  [FE]    IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "skipped:   "  +  available);  if(available  >  0)  {  throw  new  IllegalStateException(   "skipped:   "  +  available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalStateException(   "skipped:   "    +    available);    if(available  >  0)  {  throw  new  IllegalStateException(   "skipped:   "  +  available);  }	  	non-compiled	[CE]  unreachable  statement	143	None	add
1861	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  if(skipped  >  0)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  if(skipped  >  0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  if(skipped  >  0)  {  continue;  }	  continue;    for(int    i    =    available;    i    <    numToSkip;    i++)    {    if(available    >    0)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
1862	[BUG]  [BUGGY]  if(skipped  >  0)  {  continue;  for(int  i  =  available;  i  <  numToSkip;  i++)  {  if(available  >  0)  {  continue;  }  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  continue;  for(int  i  =  available;  i  <  numToSkip;  i++)  {  if(available  >  0)  {  continue;  }  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  continue;  for(int  i  =  available;  i  <  numToSkip;  i++)  {  if(available  >  0)  {  continue;  }  }	  continue;    for(int    i    =    available;    i    <    numToSkip;    i++)    {    if(available    >    0)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
1863	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  if(skipped  >  0)  {  continue;  }  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  if(skipped  >  0)  {  continue;  }  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  if(skipped  >  0)  {  continue;  }  }	  continue;    for(int    i    =    available;    i    <    numToSkip;    i++)    {    if(available    >    0)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
1864	[BUG]  [BUGGY]  if(skipped  >  0)  {  continue;  for(int  i  =  available;  i  <  numToSkip;  i++)  {  if(available  >  0)  {  continue  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  continue;  for(int  i  =  available;  i  <  numToSkip;  i++)  {  if(available  >  0)  {  continue  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  continue;  for(int  i  =  available;  i  <  numToSkip;  i++)  {  if(available  >  0)  {  continue	  continue;    for(int    i    =    available;    i    <    numToSkip;    i++)    {    if(available    >    0)    {    continue;    }    	non-compiled	[CE]  ';'  expected	17	None	replace
1865	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  skipped);  [CE]  <identifier>  expected  [FE]        IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	Throwables.throw  new  IllegalArgumentException( " "  +  skipped);	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	27	None	replace
1866	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( ". ");  [CE]  <identifier>  expected  [FE]          IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( ". ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	Throwables.throw  new  IllegalArgumentException( ". ");	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	27	None	replace
1867	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.get(i);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.get(i);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.get(i);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	179	None	replace
1868	[BUG]  [BUGGY]  long  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.get(i);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  long  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.get(i);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	long  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.get(i);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	179	None	replace
1869	[BUG]  [BUGGY]  long  available  =  input.skip(skipped);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.get(i);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  long  available  =  input.skip(skipped);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.get(i);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	long  available  =  input.skip(skipped);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.get(i);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	179	None	replace
1870	[BUG]  [BUGGY]  InputStream  available  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.get(i);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  InputStream  available  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.get(i);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	InputStream  available  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.get(i);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	179	None	replace
1871	[BUG]  [BUGGY]  InputStream  available  =  input.skip(skipped);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.get(i);  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  InputStream  available  =  input.skip(skipped);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.get(i);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	InputStream  available  =  input.skip(skipped);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.get(i);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	179	None	replace
1872	[BUG]  [BUGGY]  long  available  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.get(i);  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  long  available  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.get(i);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	long  available  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.get(i);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	179	None	replace
1873	[BUG]  [BUGGY]  if(available  >  0)  {  int  available  =  input.available;  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.get(i);  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  int  available  =  input.available;  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.get(i);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  int  available  =  input.available;  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.get(i);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	179	None	replace
1874	[BUG]  [BUGGY]  if(available  >  0)  {  break;  }  when(skipped  >  0)  {  break;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  break;  }  when(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  break;  }  when(skipped  >  0)  {  break;  }	  if(available    >    0)    {    break;    }    when(available    >    0)    {    break;    }    	non-compiled	[CE]  ';'  expected	149	None	replace
1875	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  break;  }  else  if(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  0)  {  break;  }  else  if(skipped  >  0)  {  break;  }	  if(available    >    0)    {    break;    }    when(available    >    0)    {    break;    }    	compilable	  [FE]  AssertionError  	149	2	replace
1876	[BUG]  [BUGGY]  if(available  >  0)  {  break;  }  else  if(skipped  >  0)  {  break;  }  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  break;  }  else  if(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  break;  }  else  if(skipped  >  0)  {  break;  }	  if(available    >    0)    {    break;    }    when(available    >    0)    {    break;    }    	compilable	  [FE]  AssertionError  	149	2	replace
1877	[BUG]  [BUGGY]  if(available  >=  0)  {  break;  }  when(available  >  0)  {  break;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >=  0)  {  break;  }  when(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >=  0)  {  break;  }  when(available  >  0)  {  break;  }	  if(available    >    0)    {    break;    }    when(available    >    0)    {    break;    }    	non-compiled	[CE]  ';'  expected	149	None	replace
1878	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getSize();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getSize();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getSize();  }	  continue;    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.getSize();    }    	non-compiled	[CE]  illegal  start  of  expression	269	None	replace
1879	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getSize();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getSize();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getSize();  }	  continue;    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.getSize();    }    	non-compiled	[CE]  illegal  start  of  expression	269	None	replace
1880	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getUpperBound();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getUpperBound();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getUpperBound();  }	  continue;    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.getSize();    }    	non-compiled	[CE]  illegal  start  of  expression	269	None	replace
1881	[BUG]  [BUGGY]  if(skipped  >  0)  {  continue;  }  if(skipped  >  0)  {  continue;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  continue;  }  if(skipped  >  0)  {  continue;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    0)    {    continue;    }    if(skipped  >  0)  {  continue;	  timeout    	non-compiled	[CE]  illegal  start  of  expression	127	None	add
1882	[BUG]  [BUGGY]  if(skipped  >  0)  {  continue;  }  If(skipped  >  0)  {  continue;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  continue;  }  If(skipped  >  0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    0)    {    continue;    }    If(skipped  >  0)  {  continue;  }	  timeout    	non-compiled	[CE]  ';'  expected	127	None	add
1883	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  continue;  }  if(skipped  >  0.0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped    >    0)    {    continue;    }    if(skipped  >  0.0)  {  continue;  }	  timeout    	compilable	  [FE]  AssertionError  	127	2	add
1884	[BUG]  [BUGGY]  if(skipped  >  0)  {  continue;  }  if(skipped  >  0.0)  {  continue;  }  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  continue;  }  if(skipped  >  0.0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    0)    {    continue;    }    if(skipped  >  0.0)  {  continue;  }	  timeout    	compilable	  [FE]  AssertionError  	127	2	add
1885	[BUG]  [BUGGY]  if(skipped  >  0)  {  continue;  }  when(skipped  >  0)  {  continue;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  continue;  }  when(skipped  >  0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    0)    {    continue;    }    when(skipped  >  0)  {  continue;  }	  timeout    	non-compiled	[CE]  ';'  expected	127	None	add
1886	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  continue;  }  while(skipped  >  0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped    >    0)    {    continue;    }    while(skipped  >  0)  {  continue;  }	  timeout    	compilable	  [FE]  AssertionError  	127	2	add
1887	[BUG]  [BUGGY]  if(skipped  >  0)  {  continue;  }  while(skipped  >  0)  {  continue;  }  [FE]  AssertionError  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  continue;  }  while(skipped  >  0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    0)    {    continue;    }    while(skipped  >  0)  {  continue;  }	  timeout    	compilable	  [FE]  AssertionError  	127	2	add
1888	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(i  +  1);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(i  +  1);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(i  +  1);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.skip(i);    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
1889	[BUG]  [BUGGY]  if(available  >  0)  {  int  available  =  input.available;  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(i);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  int  available  =  input.available;  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(i);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  int  available  =  input.available;  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(i);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.skip(i);    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
1890	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(0);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(0);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(0);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.skip(i);    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
1891	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skipped(i);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skipped(i);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skipped(i);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.skip(i);    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
1892	[BUG]  [BUGGY]  if(available  >  0)  {  for(long  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(i);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(long  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(i);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(long  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(i);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.skip(i);    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
1893	[BUG]  [BUGGY]  if(available  >  0)  {  break;  }  if(missing  >  0)  {  break;  }  [CE]  cannot  find  symbol  missing  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  break;  }  if(missing  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  break;  }  if(missing  >  0)  {  break;  }	  if(skipped    >    0)    {    break;    }    if(skeipped    >    0)    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  missing	105	None	replace
1894	[BUG]  [BUGGY]  if(available  >  0)  {  break;  }  if(sumption  >  0)  {  break;  }  [CE]  cannot  find  symbol  sumption  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  break;  }  if(sumption  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  break;  }  if(sumption  >  0)  {  break;  }	  if(skipped    >    0)    {    break;    }    if(skeipped    >    0)    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  sumption	105	None	replace
1895	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    skipped    =    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	176	None	replace
1896	[BUG]  [BUGGY]  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    skipped    =    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	176	None	replace
1897	[BUG]  [BUGGY]  long  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  long  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	long  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    skipped    =    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	176	None	replace
1898	[BUG]  [BUGGY]  long  available  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  long  available  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	long  available  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    skipped    =    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	176	None	replace
1899	[BUG]  [BUGGY]  InputStream  available  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  InputStream  available  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	InputStream  available  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    skipped    =    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	176	None	replace
1900	[BUG]  [BUGGY]  Short  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  Short  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	Short  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    skipped    =    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	176	None	replace
1901	[BUG]  [BUGGY]  Short  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(long  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  Short  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(long  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	Short  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(long  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    skipped    =    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	176	None	replace
1902	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Skipped:   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalStateException( "Skipped:   "  +  skipped);	  throw    new    IllegalStateException(   "skipped:   "    +    available);    	compilable	  [FE]  IllegalStateException  	144	2	replace
1903	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Skipped:   "  +  skipped);  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Skipped:   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "Skipped:   "  +  skipped);	  throw    new    IllegalStateException(   "skipped:   "    +    available);    	compilable	  [FE]  IllegalStateException  	144	2	replace
1904	[BUG]  [BUGGY]  timeout  [FE]          IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.err.println( "Usage:  skipped= "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	System.err.println( "Usage:  skipped= "  +  skipped);	  throw    new    IllegalStateException(       "       ");    System.err.println(   "       ");    	compilable	timeout	198	1	replace
1905	[BUG]  [BUGGY]  System.err.println( "Usage:  skipped= "  +  skipped);  timeout  [FE]          IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.err.println( "Usage:  skipped= "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	System.err.println( "Usage:  skipped= "  +  skipped);	  throw    new    IllegalStateException(       "       ");    System.err.println(   "       ");    	compilable	timeout	198	1	replace
1906	[BUG]  [BUGGY]  timeout  [FE]            IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.err.println( "SUCCESS  -  skipped: "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	System.err.println( "SUCCESS  -  skipped: "  +  skipped);	  throw    new    IllegalStateException(       "       ");    System.err.println(   "       ");    	compilable	timeout	198	1	replace
1907	[BUG]  [BUGGY]  System.err.println( "SUCCESS  -  skipped: "  +  skipped);  timeout  [FE]            IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.err.println( "SUCCESS  -  skipped: "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	System.err.println( "SUCCESS  -  skipped: "  +  skipped);	  throw    new    IllegalStateException(       "       ");    System.err.println(   "       ");    	compilable	timeout	198	1	replace
1908	[BUG]  [BUGGY]  timeout  [FE]              IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.err.println( "SUCCESS  -  skipped:  missing ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	System.err.println( "SUCCESS  -  skipped:  missing ");	  throw    new    IllegalStateException(       "       ");    System.err.println(   "       ");    	compilable	timeout	198	1	replace
1909	[BUG]  [BUGGY]  System.err.println( "SUCCESS  -  skipped:  missing ");  timeout  [FE]              IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.err.println( "SUCCESS  -  skipped:  missing ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	System.err.println( "SUCCESS  -  skipped:  missing ");	  throw    new    IllegalStateException(       "       ");    System.err.println(   "       ");    	compilable	timeout	198	1	replace
1910	[BUG]  [BUGGY]  timeout  [FE]                IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.err.println( "Usage:  skipped=0 ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	System.err.println( "Usage:  skipped=0 ");	  throw    new    IllegalStateException(       "       ");    System.err.println(   "       ");    	compilable	timeout	198	1	replace
1911	[BUG]  [BUGGY]  System.err.println( "Usage:  skipped=0 ");  timeout  [FE]                IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.err.println( "Usage:  skipped=0 ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	System.err.println( "Usage:  skipped=0 ");	  throw    new    IllegalStateException(       "       ");    System.err.println(   "       ");    	compilable	timeout	198	1	replace
1912	[BUG]  [BUGGY]  timeout  [FE]                  IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.err.println( "SUCCESS  -  skipped: ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	System.err.println( "SUCCESS  -  skipped: ");	  throw    new    IllegalStateException(       "       ");    System.err.println(   "       ");    	compilable	timeout	198	1	replace
1913	[BUG]  [BUGGY]  System.err.println( "SUCCESS  -  skipped: ");  timeout  [FE]                  IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.err.println( "SUCCESS  -  skipped: ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	System.err.println( "SUCCESS  -  skipped: ");	  throw    new    IllegalStateException(       "       ");    System.err.println(   "       ");    	compilable	timeout	198	1	replace
1914	[BUG]  [BUGGY]  if(available  >  0)  {  throw  new  IllegalStateException( " ");  }  else  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.next();  }  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IllegalStateException( " ");  }  else  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  throw  new  IllegalStateException( " ");  }  else  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.next();  }	  throw    new    IllegalStateException(       "       ");    throw    new    IllegalStateException(,   "       ");    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
1915	[BUG]  [BUGGY]  if(available  >  0)  {  throw  new  IllegalStateException( " ");  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  skipped;  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IllegalStateException( " ");  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  skipped;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  throw  new  IllegalStateException( " ");  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  skipped;  }	  throw    new    IllegalStateException(       "       ");    throw    new    IllegalStateException(,   "       ");    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
1916	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "skipped  =   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalArgumentException( "skipped  =   "  +  available);	  throw    new    IllegalArgumentException(   "   ".equals(available);    	compilable	  [FE]  IllegalArgumentException  	239	2	replace
1917	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "skipped  =   "  +  available);  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "skipped  =   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException( "skipped  =   "  +  available);	  throw    new    IllegalArgumentException(   "   ".equals(available);    	compilable	  [FE]  IllegalArgumentException  	239	2	replace
1918	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Skip  is  less  than  1: ".equals(available);  [CE]  [FE]          IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Skip  is  less  than  1: ".equals(available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException( "Skip  is  less  than  1: ".equals(available);	  throw    new    IllegalArgumentException(   "   ".equals(available);    	non-compiled	[CE]  	239	None	replace
1919	[BUG]  [BUGGY]  skipped  =  input.skipWithSkipped(available);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skipWithSkipped(available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped  =  input.skipWithSkipped(available);	  skipped    =    input.skip(numToSkip);    timeout    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
1920	[BUG]  [BUGGY]  skipped  =  input.next();  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.next();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped  =  input.next();	  skipped    =    input.skip(numToSkip);    timeout    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
1921	[BUG]  [BUGGY]  if(available  +  numToSkip)  {  break;  }  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  +  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  +  numToSkip)  {  break;  }	  if(available    >=    numToSkip)    {    break;    }    	non-compiled	[CE]  incompatible  types	186	None	replace
1922	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skip  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skip  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }	  continue;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
1923	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }	  continue;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
1924	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }	  continue;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
1925	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  skipped;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  skipped;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  skipped;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }	  continue;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
1926	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skip  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skip  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.read();  }	  continue;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
1927	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(input!=  null)  {  throw  new  IllegalStateException( "InputStream  is  less  than  1: "  +  input.getClass());  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(input!=  null)  {  throw  new  IllegalStateException( "InputStream  is  less  than  1: "  +  input.getClass());  }	  throw    new    IllegalStateException(   "InputStream    is    less    than    1:   "    +    input.getClass());    	compilable	  [FE]  IllegalStateException  	242	2	replace
1928	[BUG]  [BUGGY]  if(input!=  null)  {  throw  new  IllegalStateException( "InputStream  is  less  than  1: "  +  input.getClass());  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(input!=  null)  {  throw  new  IllegalStateException( "InputStream  is  less  than  1: "  +  input.getClass());  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(input!=  null)  {  throw  new  IllegalStateException( "InputStream  is  less  than  1: "  +  input.getClass());  }	  throw    new    IllegalStateException(   "InputStream    is    less    than    1:   "    +    input.getClass());    	compilable	  [FE]  IllegalStateException  	242	2	replace
1929	[BUG]  [BUGGY]  Throw  new  IllegalStateException( "InputStream  is  less  than  1: "  +  input.getClass());  [CE]  not  a  statement  [FE]      IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  Throw  new  IllegalStateException( "InputStream  is  less  than  1: "  +  input.getClass());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	Throw  new  IllegalStateException( "InputStream  is  less  than  1: "  +  input.getClass());	  throw    new    IllegalStateException(   "InputStream    is    less    than    1:   "    +    input.getClass());    	non-compiled	[CE]  not  a  statement	242	None	replace
1930	[BUG]  [BUGGY]  timeout  [FE]        IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  new  IllegalStateException( "InputStream  is  less  than  1: "  +  input.getClass());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	new  IllegalStateException( "InputStream  is  less  than  1: "  +  input.getClass());	  throw    new    IllegalStateException(   "InputStream    is    less    than    1:   "    +    input.getClass());    	compilable	timeout	242	1	replace
1931	[BUG]  [BUGGY]  new  IllegalStateException( "InputStream  is  less  than  1: "  +  input.getClass());  timeout  [FE]        IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  new  IllegalStateException( "InputStream  is  less  than  1: "  +  input.getClass());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	new  IllegalStateException( "InputStream  is  less  than  1: "  +  input.getClass());	  throw    new    IllegalStateException(   "InputStream    is    less    than    1:   "    +    input.getClass());    	compilable	timeout	242	1	replace
1932	[BUG]  [BUGGY]  safeThan  <  =  0  ||  available  >  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]    IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  safeThan  <  =  0  ||  available  >  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	safeThan  <  =  0  ||  available  >  0)  {  throw  new  IllegalStateException( " ");  }	  if(available    >    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	172	None	replace
1933	[BUG]  [BUGGY]  safeThan  <  =  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]      IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  safeThan  <  =  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	safeThan  <  =  0)  {  throw  new  IllegalStateException( " ");  }	  if(available    >    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	172	None	replace
1934	[BUG]  [BUGGY]  safeGet(available)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]        IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  safeGet(available)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	safeGet(available)  {  throw  new  IllegalStateException( " ");  }	  if(available    >    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	172	None	replace
1935	[BUG]  [BUGGY]  While(available  >  0)  {  skipped  =  input.skip(skipped);  [CE]  ';'  expected  [FE]          IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  While(available  >  0)  {  skipped  =  input.skip(skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	While(available  >  0)  {  skipped  =  input.skip(skipped);	  if(available    >    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  ';'  expected	172	None	replace
1936	[BUG]  [BUGGY]  if(available  <  =  0)  {  break;  }  while(available  >  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  =  0)  {  break;  }  while(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  =  0)  {  break;  }  while(available  >  0)  {  break;  }	  if(skipped    >    0)    {    break;    }    while(skipped    >    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
1937	[BUG]  [BUGGY]  timeout  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  numToSkip)  {  break;  }  while(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  numToSkip)  {  break;  }  while(available  >  0)  {  break;  }	  if(skipped    >    0)    {    break;    }    while(skipped    >    0)    {    break;    }    	compilable	timeout	103	1	replace
1938	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  break;  }  while(available  >  0)  {  break;  }  timeout  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  numToSkip)  {  break;  }  while(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  numToSkip)  {  break;  }  while(available  >  0)  {  break;  }	  if(skipped    >    0)    {    break;    }    while(skipped    >    0)    {    break;    }    	compilable	timeout	103	1	replace
1939	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.next();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    i++)    {    skipped    =    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	175	None	replace
1940	[BUG]  [BUGGY]  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.next();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    i++)    {    skipped    =    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	175	None	replace
1941	[BUG]  [BUGGY]  long  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  long  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	long  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.next();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    i++)    {    skipped    =    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	175	None	replace
1942	[BUG]  [BUGGY]  InputStream  available  =  input.skip(skipped);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  InputStream  available  =  input.skip(skipped);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	InputStream  available  =  input.skip(skipped);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.next();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    i++)    {    skipped    =    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	175	None	replace
1943	[BUG]  [BUGGY]  skipped  =  input.skip(skipped);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(skipped);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped  =  input.skip(skipped);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.next();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    i++)    {    skipped    =    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	175	None	replace
1944	[BUG]  [BUGGY]  timeout  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  numToSkip)  {  break;  }  if(available  >  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  numToSkip)  {  break;  }  if(available  >  numToSkip)  {  break;  }	  if(skipped    >    0)    {    break;    }    If(skipped    >    0)    {    break;    }    	compilable	timeout	100	1	replace
1945	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  break;  }  if(available  >  numToSkip)  {  break;  }  timeout  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  numToSkip)  {  break;  }  if(available  >  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  numToSkip)  {  break;  }  if(available  >  numToSkip)  {  break;  }	  if(skipped    >    0)    {    break;    }    If(skipped    >    0)    {    break;    }    	compilable	timeout	100	1	replace
1946	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.next();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	178	None	replace
1947	[BUG]  [BUGGY]  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.next();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	178	None	replace
1948	[BUG]  [BUGGY]  long  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  long  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	long  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.next();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	178	None	replace
1949	[BUG]  [BUGGY]  InputStream  available  =  input.skip(skipped);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  InputStream  available  =  input.skip(skipped);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	InputStream  available  =  input.skip(skipped);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.next();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	178	None	replace
1950	[BUG]  [BUGGY]  skipped  =  input.skip(skipped);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(skipped);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped  =  input.skip(skipped);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.next();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	178	None	replace
1951	[BUG]  [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  skipped  =  input.skip(available);  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.next();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	178	None	replace
1952	[BUG]  [BUGGY]  skipped  =  input.skip(skipped  -  numToSkip);  int  skipped  =  input.skip(available  -  numToSkip);  [CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(skipped  -  numToSkip);  int  skipped  =  input.skip(available  -  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(skipped    -    numToSkip);    int  skipped  =  input.skip(available  -  numToSkip);	  timeout    	non-compiled	[CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)	213	None	add
1953	[BUG]  [BUGGY]  skipped  =  input.skip(skipped  -  numToSkip);  long  skipped  =  input.skip(available  -  numToSkip);  [CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(skipped  -  numToSkip);  long  skipped  =  input.skip(available  -  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(skipped    -    numToSkip);    long  skipped  =  input.skip(available  -  numToSkip);	  timeout    	non-compiled	[CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)	213	None	add
1954	[BUG]  [BUGGY]  skipped  =  input.skip(skipped  -  numToSkip);  InputStream  available  =  input.readInt();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(skipped  -  numToSkip);  InputStream  available  =  input.readInt();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(skipped    -    numToSkip);    InputStream  available  =  input.readInt();	  timeout    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	213	None	add
1955	[BUG]  [BUGGY]  skipped  =  input.skip(skipped  -  numToSkip);  int  numToSkip  =  input.getNumberOfLinks();  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(skipped  -  numToSkip);  int  numToSkip  =  input.getNumberOfLinks();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(skipped    -    numToSkip);    int  numToSkip  =  input.getNumberOfLinks();	  timeout    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	213	None	add
1956	[BUG]  [BUGGY]  if(available    >    0)    {    break;    }    while(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  while(available  >  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available    >    0)    {    break;    }    while(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  while(available  >  0)  {  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available        >        0)        {        break;        }        while(available    >    0)    {    break;    }    if(available  >  0)  {  break;  }  while(available  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	150	None	add
1957	[BUG]  [BUGGY]  InputStream  available  =  input.skip(available);  if(available  >  0)  {  break;  }  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  InputStream  available  =  input.skip(available);  if(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	InputStream  available  =  input.skip(available);  if(available  >  0)  {  break;  }	  if(available    >    0)    {    break;    }    InputStream    available    =    input.skip(skipped);    if(available    >    0)    {    break;    }    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	206	None	replace
1958	[BUG]  [BUGGY]  InputStream  available  =  input.skip(available);  if(skipped  >  0)  {  break;  }  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  InputStream  available  =  input.skip(available);  if(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	InputStream  available  =  input.skip(available);  if(skipped  >  0)  {  break;  }	  if(available    >    0)    {    break;    }    InputStream    available    =    input.skip(skipped);    if(available    >    0)    {    break;    }    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	206	None	replace
1959	[BUG]  [BUGGY]  InputStream  available  =  input.skip(available);  if(available  <  0)  {  break;  }  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  InputStream  available  =  input.skip(available);  if(available  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	InputStream  available  =  input.skip(available);  if(available  <  0)  {  break;  }	  if(available    >    0)    {    break;    }    InputStream    available    =    input.skip(skipped);    if(available    >    0)    {    break;    }    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	206	None	replace
1960	[BUG]  [BUGGY]  InputStream  available  =  input.skip(available);  if(available!=  0)  {  break;  }  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  InputStream  available  =  input.skip(available);  if(available!=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	InputStream  available  =  input.skip(available);  if(available!=  0)  {  break;  }	  if(available    >    0)    {    break;    }    InputStream    available    =    input.skip(skipped);    if(available    >    0)    {    break;    }    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	206	None	replace
1961	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i--)  {  skipped  =  input.skip(available);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i--)  {  skipped  =  input.skip(available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i--)  {  skipped  =  input.skip(available);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    0;    i--)    {    skipped    =    input.skip(available);    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
1962	[BUG]  [BUGGY]  if(available  >  0)  {  int  available  =  input.available();  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i--)  {  skipped  =  input.skip(available);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  int  available  =  input.available();  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i--)  {  skipped  =  input.skip(available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  int  available  =  input.available();  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i--)  {  skipped  =  input.skip(available);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    0;    i--)    {    skipped    =    input.skip(available);    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
1963	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i--)  {  skipped  =  input.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i--)  {  skipped  =  input.skip(available  +  numToSkip);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i--)  {  skipped  =  input.skip(available  +  numToSkip);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    0;    i--)    {    skipped    =    input.skip(available);    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
1964	[BUG]  [BUGGY]  if(available  >  0)  {  int  available  =  input.available();  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i--)  {  skipped  =  input.skip(available);  }  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  int  available  =  input.available();  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i--)  {  skipped  =  input.skip(available);  }  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  int  available  =  input.available();  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i--)  {  skipped  =  input.skip(available);  }  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    0;    i--)    {    skipped    =    input.skip(available);    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
1965	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i--)  {  skipped  =  input.skipped(available);  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i--)  {  skipped  =  input.skipped(available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i--)  {  skipped  =  input.skipped(available);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    0;    i--)    {    skipped    =    input.skip(available);    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
1966	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i--)  {  skipped  =  input.skip(0);  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i--)  {  skipped  =  input.skip(0);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i--)  {  skipped  =  input.skip(0);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    0;    i--)    {    skipped    =    input.skip(available);    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
1967	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i--)  {  skipped  =  input.close();  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i--)  {  skipped  =  input.close();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i--)  {  skipped  =  input.close();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    0;    i--)    {    skipped    =    input.skip(available);    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
1968	[BUG]  [BUGGY]  skip  =  input.skip(available  *  numToSkip  +  skipped);  [CE]  cannot  find  symbol  skip  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skip  =  input.skip(available  *  numToSkip  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skip  =  input.skip(available  *  numToSkip  +  skipped);	  skip    =    input.skip(available    *    numToSkip);    	non-compiled	[CE]  cannot  find  symbol  skip	163	None	replace
1969	[BUG]  [BUGGY]  if(skip  >  0)  {  break  available;  }  [CE]  cannot  find  symbol  skip  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skip  >  0)  {  break  available;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skip  >  0)  {  break  available;  }	  if(skipped    >    0)    {    break    available;    }    	non-compiled	[CE]  cannot  find  symbol  skip	199	None	replace
1970	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  numToSkip)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  numToSkip)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  }	  if(skipped    >    available)    {    break;    }    if(skipped    >    available)    {    break;    System.arraycopy(input,    0,    available,    numToSkip,    skipped);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	201	None	replace
1971	[BUG]  [BUGGY]  if(available  >  skipped)  {  break;  }  if(skipped  >  0)  {  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  break;  }  if(skipped  >  0)  {  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skipped)  {  break;  }  if(skipped  >  0)  {  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  }	  if(skipped    >    available)    {    break;    }    if(skipped    >    available)    {    break;    System.arraycopy(input,    0,    available,    numToSkip,    skipped);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	201	None	replace
1972	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  break;  }  if(available  >  skipped)  {  break;  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  numToSkip)  {  break;  }  if(available  >  skipped)  {  break;  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  numToSkip)  {  break;  }  if(available  >  skipped)  {  break;  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  }	  if(skipped    >    available)    {    break;    }    if(skipped    >    available)    {    break;    System.arraycopy(input,    0,    available,    numToSkip,    skipped);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	201	None	replace
1973	[BUG]  [BUGGY]  if(available  >  skipped)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skipped)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  }	  if(skipped    >    available)    {    break;    }    if(skipped    >    available)    {    break;    System.arraycopy(input,    0,    available,    numToSkip,    skipped);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	201	None	replace
1974	[BUG]  [BUGGY]  skip  =  input.skip(SKIP_BUF_SIZE);  [CE]  cannot  find  symbol  skip  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skip  =  input.skip(SKIP_BUF_SIZE);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skip  =  input.skip(SKIP_BUF_SIZE);	  skip    =    input.skip(buffersize);    	non-compiled	[CE]  cannot  find  symbol  skip	165	None	replace
1975	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IllegalStateException( ", ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  0)  {  throw  new  IllegalStateException( ", ");  }	  throw    new    IllegalStateException(       "       ");    throw    new    IllegalStateException(   ",       ");    	compilable	  [FE]  IllegalStateException  	23	2	replace
1976	[BUG]  [BUGGY]  if(available  >  0)  {  throw  new  IllegalStateException( ", ");  }  [FE]  IllegalStateException  [FE]            IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IllegalStateException( ", ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  throw  new  IllegalStateException( ", ");  }	  throw    new    IllegalStateException(       "       ");    throw    new    IllegalStateException(   ",       ");    	compilable	  [FE]  IllegalStateException  	23	2	replace
1977	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ",  SKIP_BUF_SIZE);  [CE]  no  suitable  constructor  found  for  IllegalStateException(String,int)  [FE]              IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( " ",  SKIP_BUF_SIZE);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( " ",  SKIP_BUF_SIZE);	  throw    new    IllegalStateException(       "       ");    throw    new    IllegalStateException(   ",       ");    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalStateException(String,int)	23	None	replace
1978	[BUG]  [BUGGY]  if(available  >  0)  {  continue;  }  int  available  =  input.skip(skipped);  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  continue;  }  int  available  =  input.skip(skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >    0)    {    continue;    }    int  available  =  input.skip(skipped);	  timeout    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	125	None	add
1979	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  numToSkip  =  input.skip(skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	numToSkip  =  input.skip(skipped);	  skip    =    input.skip(numToSkip);    	compilable	  [FE]  AssertionError  	115	2	replace
1980	[BUG]  [BUGGY]  numToSkip  =  input.skip(skipped);  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  numToSkip  =  input.skip(skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	numToSkip  =  input.skip(skipped);	  skip    =    input.skip(numToSkip);    	compilable	  [FE]  AssertionError  	115	2	replace
1981	[BUG]  [BUGGY]  init(input,  numToSkip);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  init(input,  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	init(input,  numToSkip);	  skip    =    input.skip(numToSkip);    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
1982	[BUG]  [BUGGY]  if(skipped  >  0)  {  continue;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  continue;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  continue;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  }	  continue;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	267	None	replace
1983	[BUG]  [BUGGY]  if(available  >  skipped)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.flush();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.flush();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skipped)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.flush();  }	  continue;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	267	None	replace
1984	[BUG]  [BUGGY]  if(skipped  >  0)  {  continue;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  continue;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  continue;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  continue;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	267	None	replace
1985	[BUG]  [BUGGY]  if(available  >  skipped)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.skip(skipped);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.skip(skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skipped)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.skip(skipped);  }	  continue;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	267	None	replace
1986	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Skip  cannot  be  skipped.   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IOException( "Skip  cannot  be  skipped.   "  +  available);	  throw    new    IOException(   "Skip    cannot    be    skipped.   ");    	compilable	  [FE]  IOException  	219	2	replace
1987	[BUG]  [BUGGY]  throw  new  IOException( "Skip  cannot  be  skipped.   "  +  available);  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Skip  cannot  be  skipped.   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( "Skip  cannot  be  skipped.   "  +  available);	  throw    new    IOException(   "Skip    cannot    be    skipped.   ");    	compilable	  [FE]  IOException  	219	2	replace
1988	[BUG]  [BUGGY]  [FE]  IOException  [FE]      IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Skip  cannot  be  skipped.   "  +  input);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IOException( "Skip  cannot  be  skipped.   "  +  input);	  throw    new    IOException(   "Skip    cannot    be    skipped.   ");    	compilable	  [FE]  IOException  	219	2	replace
1989	[BUG]  [BUGGY]  throw  new  IOException( "Skip  cannot  be  skipped.   "  +  input);  [FE]  IOException  [FE]      IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Skip  cannot  be  skipped.   "  +  input);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( "Skip  cannot  be  skipped.   "  +  input);	  throw    new    IOException(   "Skip    cannot    be    skipped.   ");    	compilable	  [FE]  IOException  	219	2	replace
1990	[BUG]  [BUGGY]  [FE]  IOException  [FE]        IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Skip  cannot  be  skipped.  Please  check  that  available  does  not  exist. ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IOException( "Skip  cannot  be  skipped.  Please  check  that  available  does  not  exist. ");	  throw    new    IOException(   "Skip    cannot    be    skipped.   ");    	compilable	  [FE]  IOException  	219	2	replace
1991	[BUG]  [BUGGY]  throw  new  IOException( "Skip  cannot  be  skipped.  Please  check  that  available  does  not  exist. ");  [FE]  IOException  [FE]        IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Skip  cannot  be  skipped.  Please  check  that  available  does  not  exist. ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( "Skip  cannot  be  skipped.  Please  check  that  available  does  not  exist. ");	  throw    new    IOException(   "Skip    cannot    be    skipped.   ");    	compilable	  [FE]  IOException  	219	2	replace
1992	[BUG]  [BUGGY]  [FE]  IOException  [FE]          IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Skip  cannot  be  skipped.  Please  check  that  the  available  length  does  not  exist. ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IOException( "Skip  cannot  be  skipped.  Please  check  that  the  available  length  does  not  exist. ");	  throw    new    IOException(   "Skip    cannot    be    skipped.   ");    	compilable	  [FE]  IOException  	219	2	replace
1993	[BUG]  [BUGGY]  throw  new  IOException( "Skip  cannot  be  skipped.  Please  check  that  the  available  length  does  not  exist. ");  [FE]  IOException  [FE]          IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Skip  cannot  be  skipped.  Please  check  that  the  available  length  does  not  exist. ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( "Skip  cannot  be  skipped.  Please  check  that  the  available  length  does  not  exist. ");	  throw    new    IOException(   "Skip    cannot    be    skipped.   ");    	compilable	  [FE]  IOException  	219	2	replace
1994	[BUG]  [BUGGY]  throw  new  IOException( "Skip  cannot  be  skipped.  Please  check  that  the  available  is  less  than  1 ",  available);  [CE]  no  suitable  constructor  found  for  IOException(String,long)  [FE]            IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Skip  cannot  be  skipped.  Please  check  that  the  available  is  less  than  1 ",  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( "Skip  cannot  be  skipped.  Please  check  that  the  available  is  less  than  1 ",  available);	  throw    new    IOException(   "Skip    cannot    be    skipped.   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  IOException(String,long)	219	None	replace
1995	[BUG]  [BUGGY]  if(available  >=  numToSkip)  {  if(skipped  >  0)  {  break;  }  when(skipped  >  0)  {  break;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >=  numToSkip)  {  if(skipped  >  0)  {  break;  }  when(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >=  numToSkip)  {  if(skipped  >  0)  {  break;  }  when(skipped  >  0)  {  break;  }	  if(skipped    >    0)    {    break;    }    when(skipped    >    0)    {    break;    }    	non-compiled	[CE]  ';'  expected	104	None	replace
1996	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  break;  }  while(available  >  0)  {  skipped  =  input.skip(available);  available  =  numToSkip;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  0)  {  break;  }  while(available  >  0)  {  skipped  =  input.skip(available);  available  =  numToSkip;  }	  if(skipped    >    0)    {    break;    }    when(skipped    >    0)    {    break;    }    	compilable	  [FE]  AssertionError  	104	2	replace
1997	[BUG]  [BUGGY]  if(available  >  0)  {  break;  }  while(available  >  0)  {  skipped  =  input.skip(available);  available  =  numToSkip;  }  [FE]  AssertionError  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  break;  }  while(available  >  0)  {  skipped  =  input.skip(available);  available  =  numToSkip;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  break;  }  while(available  >  0)  {  skipped  =  input.skip(available);  available  =  numToSkip;  }	  if(skipped    >    0)    {    break;    }    when(skipped    >    0)    {    break;    }    	compilable	  [FE]  AssertionError  	104	2	replace
1998	[BUG]  [BUGGY]  System.arraycopy(input,  numToSkip,  available,  skip,  skipped);  [CE]  cannot  find  symbol  skip  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.arraycopy(input,  numToSkip,  available,  skip,  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	System.arraycopy(input,  numToSkip,  available,  skip,  skipped);	          System.arraycopy(input,    numToSkip,    available,    skipped);    	non-compiled	[CE]  cannot  find  symbol  skip	223	None	replace
1999	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IllegalStateException( "InputStream  is  less  than  1: ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  0)  {  throw  new  IllegalStateException( "InputStream  is  less  than  1: ");  }	  throw    new    IllegalStateException(   "InputStream    is    less    than    1:   ");    	compilable	  [FE]  IllegalStateException  	246	2	replace
2000	[BUG]  [BUGGY]  if(available  >  0)  {  throw  new  IllegalStateException( "InputStream  is  less  than  1: ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IllegalStateException( "InputStream  is  less  than  1: ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  throw  new  IllegalStateException( "InputStream  is  less  than  1: ");  }	  throw    new    IllegalStateException(   "InputStream    is    less    than    1:   ");    	compilable	  [FE]  IllegalStateException  	246	2	replace
2001	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "skipped  in  the  stream.   "  +  input);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IOException( "skipped  in  the  stream.   "  +  input);	  throw    new    IOException(   "skipped    in    the    stream.   ");    	compilable	  [FE]  IOException  	222	2	replace
2002	[BUG]  [BUGGY]  throw  new  IOException( "skipped  in  the  stream.   "  +  input);  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "skipped  in  the  stream.   "  +  input);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( "skipped  in  the  stream.   "  +  input);	  throw    new    IOException(   "skipped    in    the    stream.   ");    	compilable	  [FE]  IOException  	222	2	replace
2003	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >=  numToSkip  ||  skipped  >  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >=  numToSkip  ||  skipped  >  numToSkip)  {  break;  }	  if(skipped    >    available    ||    skipped    >    numToSkip)    {    break;    }    timeout    	compilable	  [FE]  AssertionError  	262	2	replace
2004	[BUG]  [BUGGY]  if(available  >=  numToSkip  ||  skipped  >  numToSkip)  {  break;  }  [FE]  AssertionError  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >=  numToSkip  ||  skipped  >  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >=  numToSkip  ||  skipped  >  numToSkip)  {  break;  }	  if(skipped    >    available    ||    skipped    >    numToSkip)    {    break;    }    timeout    	compilable	  [FE]  AssertionError  	262	2	replace
2005	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  if(skipped  >>  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  numToSkip)  {  if(skipped  >>  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  numToSkip)  {  if(skipped  >>  0)  {  break;  }	  if(skipped    >=    0)    {    break;    }    if(skipped    >=    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
2006	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  if(skipped!=  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  numToSkip)  {  if(skipped!=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  numToSkip)  {  if(skipped!=  0)  {  break;  }	  if(skipped    >=    0)    {    break;    }    if(skipped    >=    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
2007	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }	  continue;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
2008	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }	  continue;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
2009	[BUG]  [BUGGY]  pending  ||  skipped  >  0)  {  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  pending  ||  skipped  >  0)  {  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	pending  ||  skipped  >  0)  {	  if(skipped    >    0)    {    continue;    }    timeout    	non-compiled	[CE]  not  a  statement	128	None	replace
2010	[BUG]  [BUGGY]  if(skip  >  0)  {  continue;  }  [CE]  cannot  find  symbol  skip  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skip  >  0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skip  >  0)  {  continue;  }	  if(skipped    >    0)    {    continue;    }    timeout    	non-compiled	[CE]  cannot  find  symbol  skip	128	None	replace
2011	[BUG]  [BUGGY]  if(skipped  >  0)  {  continue  available;  }  [CE]  undefined  label:  available  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  continue  available;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  continue  available;  }	  if(skipped    >    0)    {    continue;    }    timeout    	non-compiled	[CE]  undefined  label:  available	128	None	replace
2012	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getUpperBound();  }  [CE]  possible  loss  of  precision  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getUpperBound();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getUpperBound();  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  possible  loss  of  precision	155	None	replace
2013	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  0;  ++i)  {  available  +=  input.getLength();  }  [CE]  possible  loss  of  precision  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  available;  i  <  0;  ++i)  {  available  +=  input.getLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  available;  i  <  0;  ++i)  {  available  +=  input.getLength();  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  possible  loss  of  precision	155	None	replace
2014	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getEnd();  }  [CE]  possible  loss  of  precision  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getEnd();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getEnd();  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  possible  loss  of  precision	155	None	replace
2015	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getHeaderLength();  }  [CE]  possible  loss  of  precision  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getHeaderLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getHeaderLength();  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  possible  loss  of  precision	155	None	replace
2016	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  skipped;  ++i)  {  available  +=  input.getLength();  }  [CE]  possible  loss  of  precision  [FE]                                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  available;  i  <  skipped;  ++i)  {  available  +=  input.getLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  available;  i  <  skipped;  ++i)  {  available  +=  input.getLength();  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  possible  loss  of  precision	155	None	replace
2017	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(available  +  i);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(available  +  i);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(available  +  i);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.skip(available    +    i);    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
2018	[BUG]  [BUGGY]  if(available  >  0)  {  for(long  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(available  +  i);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(long  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(available  +  i);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(long  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(available  +  i);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.skip(available    +    i);    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
2019	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skipped(available  +  i);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skipped(available  +  i);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skipped(available  +  i);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.skip(available    +    i);    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
2020	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skip  =  input.skip(available  +  i);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skip  =  input.skip(available  +  i);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skip  =  input.skip(available  +  i);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.skip(available    +    i);    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
2021	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  this.available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(available  +  i);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  this.available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(available  +  i);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  this.available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(available  +  i);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.skip(available    +    i);    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
2022	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  output.skip(available  +  i);  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  output.skip(available  +  i);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  output.skip(available  +  i);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.skip(available    +    i);    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
2023	[BUG]  [BUGGY]  if(skipped    >    available)    {    break;    }    while(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  while(skip  >  available)  {  break;  }  [CE]  cannot  find  symbol  skip  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    available)    {    break;    }    while(skipped  >  available)  {  break;  }  if(skipped  >  available)  {  break;  }  while(skip  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >        available)        {        break;        }        while(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  }  while(skip  >  available)  {  break;  }	  	non-compiled	[CE]  cannot  find  symbol  skip	85	None	add
2024	[BUG]  [BUGGY]  int  numToSkip  =  available.size();  for(int  i  =  0;  i  <  numToSkip;  ++i)  {  available  +=  input.read();  }  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  int  numToSkip  =  available.size();  for(int  i  =  0;  i  <  numToSkip;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	int  numToSkip  =  available.size();  for(int  i  =  0;  i  <  numToSkip;  ++i)  {  available  +=  input.read();  }	          if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	227	None	replace
2025	[BUG]  [BUGGY]  if(skipped  >  0  ||  available  >  numToSkip)  {  break;  }  if(skipped  >  0  ||  available  >  numtoSkip)  {  break;  }  [CE]  cannot  find  symbol  numtoSkip  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0  ||  available  >  numToSkip)  {  break;  }  if(skipped  >  0  ||  available  >  numtoSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    0    ||    available    >    numToSkip)    {    break;    }    if(skipped  >  0  ||  available  >  numtoSkip)  {  break;  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  numtoSkip	250	None	add
2026	[BUG]  [BUGGY]  timeout  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  skipped  =  input.skip(available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  0)  {  skipped  =  input.skip(available);  skipped  =  input.skip(available);  }	  skipped    =    input.skip(available);    skipped    =    input.skip(available);    	compilable	timeout	66	1	replace
2027	[BUG]  [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  skipped  =  input.skip(available);  }  timeout  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  skipped  =  input.skip(available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  skipped  =  input.skip(available);  skipped  =  input.skip(available);  }	  skipped    =    input.skip(available);    skipped    =    input.skip(available);    	compilable	timeout	66	1	replace
2028	[BUG]  [BUGGY]  timeout  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  skipped  =  input.skip(skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  0)  {  skipped  =  input.skip(available);  skipped  =  input.skip(skipped);  }	  skipped    =    input.skip(available);    skipped    =    input.skip(available);    	compilable	timeout	66	1	replace
2029	[BUG]  [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  skipped  =  input.skip(skipped);  }  timeout  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  skipped  =  input.skip(skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  skipped  =  input.skip(available);  skipped  =  input.skip(skipped);  }	  skipped    =    input.skip(available);    skipped    =    input.skip(available);    	compilable	timeout	66	1	replace
2030	[BUG]  [BUGGY]  timeout  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  skipped  =  input.skip(available  +  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  0)  {  skipped  =  input.skip(available);  skipped  =  input.skip(available  +  skipped);  }	  skipped    =    input.skip(available);    skipped    =    input.skip(available);    	compilable	timeout	66	1	replace
2031	[BUG]  [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  skipped  =  input.skip(available  +  skipped);  }  timeout  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  skipped  =  input.skip(available  +  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  skipped  =  input.skip(available);  skipped  =  input.skip(available  +  skipped);  }	  skipped    =    input.skip(available);    skipped    =    input.skip(available);    	compilable	timeout	66	1	replace
2032	[BUG]  [BUGGY]  if(available  <  =  0)  {  skipped  =  input.skip(available);  skipped  =  input.skip(available  +  skipped);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  =  0)  {  skipped  =  input.skip(available);  skipped  =  input.skip(available  +  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  =  0)  {  skipped  =  input.skip(available);  skipped  =  input.skip(available  +  skipped);  }	  skipped    =    input.skip(available);    skipped    =    input.skip(available);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
2033	[BUG]  [BUGGY]  if(available  >  0)  {  continue  -  skipped;  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  continue  -  skipped;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  continue  -  skipped;  }	  if(available    >    0)    {    continue;    }    timeout    	non-compiled	[CE]  ';'  expected	126	None	replace
2034	[BUG]  [BUGGY]  timeout  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0  ||  skipped  >  0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  0  ||  skipped  >  0)  {  continue;  }	  if(available    >    0)    {    continue;    }    timeout    	compilable	timeout	126	1	replace
2035	[BUG]  [BUGGY]  if(available  >  0  ||  skipped  >  0)  {  continue;  }  timeout  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0  ||  skipped  >  0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0  ||  skipped  >  0)  {  continue;  }	  if(available    >    0)    {    continue;    }    timeout    	compilable	timeout	126	1	replace
2036	[BUG]  [BUGGY]  timeout  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >=  0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >=  0)  {  continue;  }	  if(available    >    0)    {    continue;    }    timeout    	compilable	timeout	126	1	replace
2037	[BUG]  [BUGGY]  if(available  >=  0)  {  continue;  }  timeout  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >=  0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >=  0)  {  continue;  }	  if(available    >    0)    {    continue;    }    timeout    	compilable	timeout	126	1	replace
2038	[BUG]  [BUGGY]  if(available  >  0)  {  continue  -1;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  continue  -1;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  continue  -1;  }	  if(available    >    0)    {    continue;    }    timeout    	non-compiled	[CE]  ';'  expected	126	None	replace
2039	[BUG]  [BUGGY]  if(available  >=  0)  {  break;  }  if(available  >=  0)  {  break;  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >=  0)  {  break;  }  if(available  >=  0)  {  break;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >=    0)    {    break;    }    if(available  >=  0)  {  break;	  	non-compiled	[CE]  illegal  start  of  expression	95	None	add
2040	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "skip  =   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalStateException( "skip  =   "  +  available);	  throw    new    IllegalStateException(   "skipped    =       "    +    available);    	compilable	  [FE]  IllegalStateException  	142	2	replace
2041	[BUG]  [BUGGY]  throw  new  IllegalStateException( "skip  =   "  +  available);  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "skip  =   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "skip  =   "  +  available);	  throw    new    IllegalStateException(   "skipped    =       "    +    available);    	compilable	  [FE]  IllegalStateException  	142	2	replace
2042	[BUG]  [BUGGY]  luate(input,  numToSkip)>  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.read();  }  [CE]  not  a  statement  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  luate(input,  numToSkip)>  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	luate(input,  numToSkip)>  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.read();  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  not  a  statement	225	None	replace
2043	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  skipped;  ++i)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  skipped;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  available;  i  <  skipped;  ++i)  {  available  +=  input.read();  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	225	None	replace
2044	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "skipped:   "  +  skipped);  new  IllegalArgumentException(   "skipped:   "  +  skipped);  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException(   "skipped:   "  +  skipped);  new  IllegalArgumentException(   "skipped:   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalArgumentException(   "skipped:   "    +    skipped);    new  IllegalArgumentException(   "skipped:   "  +  skipped);	  	non-compiled	[CE]  unreachable  statement	29	None	add
2045	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "skipped:   "  +  skipped);  throw  new  IllegalArgumentException(   "skipped:   "  +  skip);  [CE]  cannot  find  symbol  skip  [FE]      IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException(   "skipped:   "  +  skipped);  throw  new  IllegalArgumentException(   "skipped:   "  +  skip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalArgumentException(   "skipped:   "    +    skipped);    throw  new  IllegalArgumentException(   "skipped:   "  +  skip);	  	non-compiled	[CE]  cannot  find  symbol  skip	29	None	add
2046	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getUpperBound();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getUpperBound();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getUpperBound();  }	          if(available    >    0)    {    for(int    i    =    0;    i    <    available;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
2047	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getHeaderLength();  }  [CE]  cannot  find  symbol  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getHeaderLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getHeaderLength();  }	          if(available    >    0)    {    for(int    i    =    0;    i    <    available;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
2048	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }	  continue;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	195	None	replace
2049	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }	  continue;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	195	None	replace
2050	[BUG]  [BUGGY]  timeout  [FE]        IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  <  0)  {  throw  new  IllegalArgumentException( " ");  }	  throw    new    IllegalArgumentException(       "       ");    throw    new    IllegalArgumentException(       "       ");    	compilable	timeout	5	1	replace
2051	[BUG]  [BUGGY]  if(available  <  0)  {  throw  new  IllegalArgumentException( " ");  }  timeout  [FE]        IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  0)  {  throw  new  IllegalArgumentException( " ");  }	  throw    new    IllegalArgumentException(       "       ");    throw    new    IllegalArgumentException(       "       ");    	compilable	timeout	5	1	replace
2052	[BUG]  [BUGGY]  timeout  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  numToSkip)  {  break;  }  if(skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  <  numToSkip)  {  break;  }  if(skipped  >  available)  {  break;  }	  if(skipped    >    available)    {    break;    }    if(skipped    >    available)    {    break;    	compilable	timeout	89	1	replace
2053	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  break;  }  if(skipped  >  available)  {  break;  }  timeout  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  numToSkip)  {  break;  }  if(skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  numToSkip)  {  break;  }  if(skipped  >  available)  {  break;  }	  if(skipped    >    available)    {    break;    }    if(skipped    >    available)    {    break;    	compilable	timeout	89	1	replace
2054	[BUG]  [BUGGY]  if(available  >  skipped)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.length();  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.length();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skipped)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.length();  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.length();    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
2055	[BUG]  [BUGGY]  if(available  >  skipped)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skipped)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.length();    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
2056	[BUG]  [BUGGY]  int  numToSkip  =  available.length();  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]                                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  int  numToSkip  =  available.length();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	int  numToSkip  =  available.length();	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.length();    }    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	57	None	replace
2057	[BUG]  [BUGGY]  if(available  >  skipped)  {  for(int  i  =  accessible;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [CE]  illegal  start  of  expression  [FE]                                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  for(int  i  =  accessible;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skipped)  {  for(int  i  =  accessible;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.length();    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
2058	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Skipping:   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalArgumentException( "Skipping:   "  +  skipped);	  throw    new    IllegalArgumentException(   "Skipped:   "    +    skipped);    	compilable	  [FE]  IllegalArgumentException  	32	2	replace
2059	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Skipping:   "  +  skipped);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Skipping:   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException( "Skipping:   "  +  skipped);	  throw    new    IllegalArgumentException(   "Skipped:   "    +    skipped);    	compilable	  [FE]  IllegalArgumentException  	32	2	replace
2060	[BUG]  [BUGGY]  timeout  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  numToSkip)  {  break;  }  else  if(available  >  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  numToSkip)  {  break;  }  else  if(available  >  numToSkip)  {  break;  }	  if(skipped    >    available)    {    break;    }    If(skipped    >    available)    {    break;    }    	compilable	timeout	84	1	replace
2061	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  break;  }  else  if(available  >  numToSkip)  {  break;  }  timeout  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  numToSkip)  {  break;  }  else  if(available  >  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  numToSkip)  {  break;  }  else  if(available  >  numToSkip)  {  break;  }	  if(skipped    >    available)    {    break;    }    If(skipped    >    available)    {    break;    }    	compilable	timeout	84	1	replace
2062	[BUG]  [BUGGY]  throw  new  IOException(   "skipped:   "  +  skipped);  throw  new  IOException(   "skipped:   "  +  skip);  [CE]  cannot  find  symbol  skip  [FE]    IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException(   "skipped:   "  +  skipped);  throw  new  IOException(   "skipped:   "  +  skip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IOException(   "skipped:   "    +    skipped);    throw  new  IOException(   "skipped:   "  +  skip);	  	non-compiled	[CE]  cannot  find  symbol  skip	121	None	add
2063	[BUG]  [BUGGY]  throw  new  IOException(   "skipped:   "  +  skipped);  new  IOException(   "skipped:   "  +  skipped);  [CE]  unreachable  statement  [FE]      IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException(   "skipped:   "  +  skipped);  new  IOException(   "skipped:   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IOException(   "skipped:   "    +    skipped);    new  IOException(   "skipped:   "  +  skipped);	  	non-compiled	[CE]  unreachable  statement	121	None	add
2064	[BUG]  [BUGGY]  skip  =  input.skip(available  -  numToSkip  +  1);  [CE]  cannot  find  symbol  skip  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skip  =  input.skip(available  -  numToSkip  +  1);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skip  =  input.skip(available  -  numToSkip  +  1);	  skip    =    input.skip(available    -    numToSkip);    	non-compiled	[CE]  cannot  find  symbol  skip	162	None	replace
2065	[BUG]  [BUGGY]  skipped  =  input.skip(skipped);  long  skipped  =  input.skip(available);  [CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(skipped);  long  skipped  =  input.skip(available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(skipped);    long  skipped  =  input.skip(available);	  timeout    	non-compiled	[CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)	2	None	add
2066	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(skipped);  skipped  =  input.skip(available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped    =    input.skip(skipped);    skipped  =  input.skip(available);	  timeout    	compilable	  [FE]  AssertionError  	2	2	add
2067	[BUG]  [BUGGY]  skipped  =  input.skip(skipped);  skipped  =  input.skip(available);  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(skipped);  skipped  =  input.skip(available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(skipped);    skipped  =  input.skip(available);	  timeout    	compilable	  [FE]  AssertionError  	2	2	add
2068	[BUG]  [BUGGY]  skipped  =  input.skip(skipped);  InputStream  available  =  input.readInt();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(skipped);  InputStream  available  =  input.readInt();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(skipped);    InputStream  available  =  input.readInt();	  timeout    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	2	None	add
2069	[BUG]  [BUGGY]  skipped  =  input.skip(skipped);  Short  skipped  =  input.shortValue(available);  [CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(skipped);  Short  skipped  =  input.shortValue(available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(skipped);    Short  skipped  =  input.shortValue(available);	  timeout    	non-compiled	[CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)	2	None	add
2070	[BUG]  [BUGGY]  skipped  =  input.skip(skipped);  Short  skipped  =  input.shortValue();  [CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(skipped);  Short  skipped  =  input.shortValue();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(skipped);    Short  skipped  =  input.shortValue();	  timeout    	non-compiled	[CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)	2	None	add
2071	[BUG]  [BUGGY]  skipped  =  input.skip(available  -  numToSkip);  long  available  =  input.available();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  -  numToSkip);  long  available  =  input.available();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped  =  input.skip(available  -  numToSkip);  long  available  =  input.available();	  skipped    =    input.skip(available);    long    available    =    input.available();    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	233	None	replace
2072	[BUG]  [BUGGY]  skipped  =  input.skip(available  +  numToSkip);  long  available  =  input.available();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  +  numToSkip);  long  available  =  input.available();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped  =  input.skip(available  +  numToSkip);  long  available  =  input.available();	  skipped    =    input.skip(available);    long    available    =    input.available();    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	233	None	replace
2073	[BUG]  [BUGGY]  skipped  =  input.skip(available,  numToSkip);  long  available  =  input.available();  [CE]  method  skip  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available,  numToSkip);  long  available  =  input.available();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped  =  input.skip(available,  numToSkip);  long  available  =  input.available();	  skipped    =    input.skip(available);    long    available    =    input.available();    	non-compiled	[CE]  method  skip  in  class  InputStream  cannot  be  applied  to  given  types;	233	None	replace
2074	[BUG]  [BUGGY]  skipped  =  input.skip(available);  int  available  =  input.available();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available);  int  available  =  input.available();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped  =  input.skip(available);  int  available  =  input.available();	  skipped    =    input.skip(available);    long    available    =    input.available();    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	233	None	replace
2075	[BUG]  [BUGGY]  throw  new  IOException(   "   "  +  skipped);  throw  new  IOException(   "   "  +  skip);  [CE]  cannot  find  symbol  skip  [FE]    IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException(   "   "  +  skipped);  throw  new  IOException(   "   "  +  skip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IOException(   "   "    +    skipped);    throw  new  IOException(   "   "  +  skip);	  	non-compiled	[CE]  cannot  find  symbol  skip	123	None	add
2076	[BUG]  [BUGGY]  if(available  >  skipped)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skipped)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getLength();  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
2077	[BUG]  [BUGGY]  int  numToSkip  =  available.size();  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  int  numToSkip  =  available.size();  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	int  numToSkip  =  available.size();  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	55	None	replace
2078	[BUG]  [BUGGY]  int  numToSkip  =  available.size();  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  int  numToSkip  =  available.size();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	int  numToSkip  =  available.size();	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	55	None	replace
2079	[BUG]  [BUGGY]  if(available  >  skipped)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getUpperBound();  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getUpperBound();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skipped)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getUpperBound();  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
2080	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >=        0)        {        break;        }        if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  <  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	35	2	add
2081	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  <  0)  {  break;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  <  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	35	2	add
2082	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >=        0)        {        break;        }        if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	35	2	add
2083	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	35	2	add
2084	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >>  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [CE]  incompatible  types  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >>  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped    >=    0)    {    break;    }    if(skipped  >>  0)  {  break;  }  if(skipped  >=  0)  {  break;  }	  	non-compiled	[CE]  incompatible  types	35	None	add
2085	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  ==  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >=        0)        {        break;        }        if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  ==  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	35	2	add
2086	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  ==  0)  {  break;  }  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  ==  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  ==  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	35	2	add
2087	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  <  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >=        0)        {        break;        }        if(skipped    >=    0)    {    break;    }    if(skipped  <  0)  {  break;  }  if(skipped  >=  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	35	2	add
2088	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  <  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  <  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped    >=    0)    {    break;    }    if(skipped  <  0)  {  break;  }  if(skipped  >=  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	35	2	add
2089	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped!=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >=        0)        {        break;        }        if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped!=  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	35	2	add
2090	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped!=  0)  {  break;  }  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped!=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped!=  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	35	2	add
2091	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >>  0)  {  break;  }  [CE]  incompatible  types  [FE]                AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >>  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >>  0)  {  break;  }	  	non-compiled	[CE]  incompatible  types	35	None	add
2092	[BUG]  [BUGGY]  if(available  >  0)  {  throw  new  IOException( " ");  }  else  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]          IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IOException( " ");  }  else  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  throw  new  IOException( " ");  }  else  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }	  throw    new    IOException(       "       ");    Throw    new    IOException(       "       ");    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
2093	[BUG]  [BUGGY]  if(available  >  0)  {  throw  new  IOException( " ");  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IOException( " ");  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  throw  new  IOException( " ");  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getLength();  }	  throw    new    IOException(       "       ");    Throw    new    IOException(       "       ");    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
2094	[BUG]  [BUGGY]  if(available  >  0)  {  throw  new  IOException( " ");  }  else  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.next();  }  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IOException( " ");  }  else  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  throw  new  IOException( " ");  }  else  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.next();  }	  throw    new    IOException(       "       ");    Throw    new    IOException(       "       ");    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
2095	[BUG]  [BUGGY]  skipped  =  input.skip(available  *  numToSkip);  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.skip(i  *  numToSkip);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  *  numToSkip);  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.skip(i  *  numToSkip);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    *    numToSkip);    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.skip(i  *  numToSkip);  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	76	None	add
2096	[BUG]  [BUGGY]  skipped  =  input.skip(available  *  numToSkip);  long  available  =  input.available  *  numToSkip;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  *  numToSkip);  long  available  =  input.available  *  numToSkip;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    *    numToSkip);    long  available  =  input.available  *  numToSkip;	  timeout    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	76	None	add
2097	[BUG]  [BUGGY]  skipped  =  input.skip(available  *  numToSkip);  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.skip(available  *  numToSkip);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  *  numToSkip);  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.skip(available  *  numToSkip);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    *    numToSkip);    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.skip(available  *  numToSkip);  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	76	None	add
2098	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  *  numToSkip);  if(available  >  numToSkip)  {  available  =  input.read();  skipped  =  input.skip(available  *  numToSkip);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped    =    input.skip(available    *    numToSkip);    if(available  >  numToSkip)  {  available  =  input.read();  skipped  =  input.skip(available  *  numToSkip);  }	  timeout    	compilable	  [FE]  AssertionError  	76	2	add
2099	[BUG]  [BUGGY]  skipped  =  input.skip(available  *  numToSkip);  if(available  >  numToSkip)  {  available  =  input.read();  skipped  =  input.skip(available  *  numToSkip);  }  [FE]  AssertionError  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  *  numToSkip);  if(available  >  numToSkip)  {  available  =  input.read();  skipped  =  input.skip(available  *  numToSkip);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    *    numToSkip);    if(available  >  numToSkip)  {  available  =  input.read();  skipped  =  input.skip(available  *  numToSkip);  }	  timeout    	compilable	  [FE]  AssertionError  	76	2	add
2100	[BUG]  [BUGGY]  while(available  >  0)  {  break;  }  long  available  =  input.skip(available);  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  break;  }  long  available  =  input.skip(available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available    >    0)    {    break;    }    long  available  =  input.skip(available);	  timeout    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	90	None	add
2101	[BUG]  [BUGGY]  while(available  >  0)  {  break;  }  While(available  >  0)  {  break;  }  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  break;  }  While(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available    >    0)    {    break;    }    While(available  >  0)  {  break;  }	  timeout    	non-compiled	[CE]  ';'  expected	90	None	add
2102	[BUG]  [BUGGY]  while(available  >  0)  {  break;  }  long  available  =  input.skip(skipped);  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  break;  }  long  available  =  input.skip(skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available    >    0)    {    break;    }    long  available  =  input.skip(skipped);	  timeout    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	90	None	add
2103	[BUG]  [BUGGY]  while(available  >  0)  {  break;  }  long  available  =  input.skip(numToSkip);  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  break;  }  long  available  =  input.skip(numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available    >    0)    {    break;    }    long  available  =  input.skip(numToSkip);	  timeout    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	90	None	add
2104	[BUG]  [BUGGY]  while(available  >  0)  {  break;  }  InputStream  available  =  input.skip(skipped);  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  break;  }  InputStream  available  =  input.skip(skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available    >    0)    {    break;    }    InputStream  available  =  input.skip(skipped);	  timeout    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	90	None	add
2105	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "   ".equals(available)+  skip);  [CE]  cannot  find  symbol  skip  [FE]          IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "   ".equals(available)+  skip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException( "   ".equals(available)+  skip);	  throw    new    IllegalArgumentException(   "   ".equals(available));    	non-compiled	[CE]  cannot  find  symbol  skip	168	None	replace
2106	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "   ".equals(available,  skipped));  [CE]  no  suitable  method  found  for  equals(long,long)  [FE]            IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "   ".equals(available,  skipped));  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException( "   ".equals(available,  skipped));	  throw    new    IllegalArgumentException(   "   ".equals(available));    	non-compiled	[CE]  no  suitable  method  found  for  equals(long,long)	168	None	replace
2107	[BUG]  [BUGGY]  if(available  >  0)  {  throw  new  IOException( " ");  System.err.println( "Usage:  SKIP_BUF_SIZE   ");  }  [CE]  unreachable  statement  [FE]          IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IOException( " ");  System.err.println( "Usage:  SKIP_BUF_SIZE   ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  throw  new  IOException( " ");  System.err.println( "Usage:  SKIP_BUF_SIZE   ");  }	  throw    new    IOException(       "       ");    System.err.println(   "Usage:    SKIP_BUF_SIZE       ");    	non-compiled	[CE]  unreachable  statement	264	None	replace
2108	[BUG]  [BUGGY]  if(available  >  0)  {  throw  new  IOException( " ");  System.err.println( "Usage:  SKIP_BUF_SIZE:  SKIP_BUF_SIZE   ");  }  [CE]  unreachable  statement  [FE]            IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IOException( " ");  System.err.println( "Usage:  SKIP_BUF_SIZE:  SKIP_BUF_SIZE   ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  throw  new  IOException( " ");  System.err.println( "Usage:  SKIP_BUF_SIZE:  SKIP_BUF_SIZE   ");  }	  throw    new    IOException(       "       ");    System.err.println(   "Usage:    SKIP_BUF_SIZE       ");    	non-compiled	[CE]  unreachable  statement	264	None	replace
2109	[BUG]  [BUGGY]  timeout  [FE]              IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.err.println( "Usage:  SKIP_BUF_SIZE  [ ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	System.err.println( "Usage:  SKIP_BUF_SIZE  [ ");	  throw    new    IOException(       "       ");    System.err.println(   "Usage:    SKIP_BUF_SIZE       ");    	compilable	timeout	264	1	replace
2110	[BUG]  [BUGGY]  System.err.println( "Usage:  SKIP_BUF_SIZE  [ ");  timeout  [FE]              IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.err.println( "Usage:  SKIP_BUF_SIZE  [ ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	System.err.println( "Usage:  SKIP_BUF_SIZE  [ ");	  throw    new    IOException(       "       ");    System.err.println(   "Usage:    SKIP_BUF_SIZE       ");    	compilable	timeout	264	1	replace
2111	[BUG]  [BUGGY]  if(available  >  0  ||  skip  >  numToSkip)  {  break;  }  [CE]  cannot  find  symbol  skip  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0  ||  skip  >  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0  ||  skip  >  numToSkip)  {  break;  }	  if(skipped    >    0    ||    available    >    numToSkip)    {    break;    }    timeout    	non-compiled	[CE]  cannot  find  symbol  skip	251	None	replace
2112	[BUG]  [BUGGY]  timeout  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0  &&  available  >  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  0  &&  available  >  numToSkip)  {  break;  }	  if(skipped    >    0    ||    available    >    numToSkip)    {    break;    }    timeout    	compilable	timeout	251	1	replace
2113	[BUG]  [BUGGY]  if(available  >  0  &&  available  >  numToSkip)  {  break;  }  timeout  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0  &&  available  >  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0  &&  available  >  numToSkip)  {  break;  }	  if(skipped    >    0    ||    available    >    numToSkip)    {    break;    }    timeout    	compilable	timeout	251	1	replace
2114	[BUG]  [BUGGY]  if(skipped  >  0)  {  break;  }  else  {  System.arraycopy(input,  numToSkip,  available,  skipped);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  break;  }  else  {  System.arraycopy(input,  numToSkip,  available,  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  break;  }  else  {  System.arraycopy(input,  numToSkip,  available,  skipped);  }	  if(available    >    0)    {    break;    }    if(available    >    0)    {    break;    System.arraycopy(input,    numToSkip,    available,    skipped);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	210	None	replace
2115	[BUG]  [BUGGY]  if(available  <  =  0)  {  break;  }  else  {  System.arraycopy(input,  numToSkip,  available,  skipped);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  =  0)  {  break;  }  else  {  System.arraycopy(input,  numToSkip,  available,  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  =  0)  {  break;  }  else  {  System.arraycopy(input,  numToSkip,  available,  skipped);  }	  if(available    >    0)    {    break;    }    if(available    >    0)    {    break;    System.arraycopy(input,    numToSkip,    available,    skipped);    	non-compiled	[CE]  illegal  start  of  expression	210	None	replace
2116	[BUG]  [BUGGY]  if(skip  >  0)  {  break;  }  else  {  System.arraycopy(input,  numToSkip,  available,  skipped);  }  [CE]  cannot  find  symbol  skip  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skip  >  0)  {  break;  }  else  {  System.arraycopy(input,  numToSkip,  available,  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skip  >  0)  {  break;  }  else  {  System.arraycopy(input,  numToSkip,  available,  skipped);  }	  if(available    >    0)    {    break;    }    if(available    >    0)    {    break;    System.arraycopy(input,    numToSkip,    available,    skipped);    	non-compiled	[CE]  cannot  find  symbol  skip	210	None	replace
2117	[BUG]  [BUGGY]  if(available  >  0)  {  input  =  input.read();  }  else  {  System.arraycopy(input,  numToSkip,  available,  skipped);  }  [CE]  incompatible  types  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  input  =  input.read();  }  else  {  System.arraycopy(input,  numToSkip,  available,  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  input  =  input.read();  }  else  {  System.arraycopy(input,  numToSkip,  available,  skipped);  }	  if(available    >    0)    {    break;    }    if(available    >    0)    {    break;    System.arraycopy(input,    numToSkip,    available,    skipped);    	non-compiled	[CE]  incompatible  types	210	None	replace
2118	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skip  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skip  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getLength();  }	  continue;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	190	None	replace
2119	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getLength();  }	  continue;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	190	None	replace
2120	[BUG]  [BUGGY]  if(available  >  0)  {  break;  }  int  available  =  input.read(skipped  +  skipped);  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  break;  }  int  available  =  input.read(skipped  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  break;  }  int  available  =  input.read(skipped  +  skipped);	  if(available    >    0)    {    break;    }    int    available    =    input.read(skipped);    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	152	None	replace
2121	[BUG]  [BUGGY]  if(skipped  >  0)  {  break;  }  if(available  >  0)  {  break;  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  break;  }  if(available  >  0)  {  break;  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  break;  }  if(available  >  0)  {  break;  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  }	  if(available    >    0)    {    break;    }    if(available    >    0)    {    break;    System.arraycopy(input,    0,    available,    numToSkip,    skipped);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	209	None	replace
2122	[BUG]  [BUGGY]  if(available  >  0)  {  break;  }  else  {  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  break;  }  else  {  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  break;  }  else  {  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  }	  if(available    >    0)    {    break;    }    if(available    >    0)    {    break;    System.arraycopy(input,    0,    available,    numToSkip,    skipped);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	209	None	replace
2123	[BUG]  [BUGGY]  if(skip  >  0)  {  break;  }  else  {  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  }  [CE]  cannot  find  symbol  skip  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skip  >  0)  {  break;  }  else  {  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skip  >  0)  {  break;  }  else  {  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  }	  if(available    >    0)    {    break;    }    if(available    >    0)    {    break;    System.arraycopy(input,    0,    available,    numToSkip,    skipped);    }    	non-compiled	[CE]  cannot  find  symbol  skip	209	None	replace
2124	[BUG]  [BUGGY]  if(available  >  0)  {  throw  new  IOException( " ");  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  skipped;  }  [CE]  illegal  start  of  expression  [FE]        IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IOException( " ");  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  skipped;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  throw  new  IOException( " ");  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  skipped;  }	  throw    new    IOException(       "       ");    throw    new    IOException(       "       ");    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
2125	[BUG]  [BUGGY]  timeout  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  numToSkip)  {  break;  }  if(available  <  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  numToSkip)  {  break;  }  if(available  <  numToSkip)  {  break;  }	  if(skipped    >    available)    {    break;    }    if(skipped    <    available)    {    break;    }    	compilable	timeout	88	1	replace
2126	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  break;  }  if(available  <  numToSkip)  {  break;  }  timeout  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  numToSkip)  {  break;  }  if(available  <  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  numToSkip)  {  break;  }  if(available  <  numToSkip)  {  break;  }	  if(skipped    >    available)    {    break;    }    if(skipped    <    available)    {    break;    }    	compilable	timeout	88	1	replace
2127	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  ++i)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  ++i)  {  available  +=  input.getLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  ++i)  {  available  +=  input.getLength();  }	  continue;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	193	None	replace
2128	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  ++i)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  ++i)  {  available  +=  input.getLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  ++i)  {  available  +=  input.getLength();  }	  continue;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	193	None	replace
2129	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  input.length;  i  <  numToSkip;  ++i)  {  available  +=  input.length();  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  input.length;  i  <  numToSkip;  ++i)  {  available  +=  input.length();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  input.length;  i  <  numToSkip;  ++i)  {  available  +=  input.length();  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.length();    }    	non-compiled	[CE]  illegal  start  of  expression	228	None	replace
2130	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  0;  ++i)  {  available  +=  input.length();  }  [CE]  possible  loss  of  precision  [FE]                                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  available;  i  <  0;  ++i)  {  available  +=  input.length();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  available;  i  <  0;  ++i)  {  available  +=  input.length();  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.length();    }    	non-compiled	[CE]  possible  loss  of  precision	228	None	replace
2131	[BUG]  [BUGGY]  if(available  >  skipped)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getSize();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getSize();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skipped)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getSize();  }	  continue;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.getMillis();    }    	non-compiled	[CE]  illegal  start  of  expression	272	None	replace
2132	[BUG]  [BUGGY]  if(available  <  =  skip)  {  break;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  =  skip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  =  skip)  {  break;  }	  if(skipped    <    available)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
2133	[BUG]  [BUGGY]  timeout  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  +  numToSkip)+  skipped;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped  =  input.skip(available  +  numToSkip)+  skipped;	  skipped    =    input.skip(available    +    numToSkip);    timeout    	compilable	timeout	60	1	replace
2134	[BUG]  [BUGGY]  skipped  =  input.skip(available  +  numToSkip)+  skipped;  timeout  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  +  numToSkip)+  skipped;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped  =  input.skip(available  +  numToSkip)+  skipped;	  skipped    =    input.skip(available    +    numToSkip);    timeout    	compilable	timeout	60	1	replace
2135	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  skipped;  i++)  {  available--;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  skipped;  i++)  {  available--;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  available;  i  <  skipped;  i++)  {  available--;  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available--;    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
2136	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read(available);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read(available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read(available);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.read(available);    }    	non-compiled	[CE]  illegal  start  of  expression	232	None	replace
2137	[BUG]  [BUGGY]  short  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read(available);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  short  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read(available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	short  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read(available);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.read(available);    }    	non-compiled	[CE]  illegal  start  of  expression	232	None	replace
2138	[BUG]  [BUGGY]  InputStream  available  =  input.read();  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read(available);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  InputStream  available  =  input.read();  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read(available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	InputStream  available  =  input.read();  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read(available);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.read(available);    }    	non-compiled	[CE]  illegal  start  of  expression	232	None	replace
2139	[BUG]  [BUGGY]  if(available  >  0)  {  int  available  =  input.read();  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read(available);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  int  available  =  input.read();  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read(available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  int  available  =  input.read();  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read(available);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.read(available);    }    	non-compiled	[CE]  illegal  start  of  expression	232	None	replace
2140	[BUG]  [BUGGY]  if(available  >  0)  {  int  available  =  input.read();  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read(available);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  int  available  =  input.read();  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read(available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  int  available  =  input.read();  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read(available);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.read(available);    }    	non-compiled	[CE]  illegal  start  of  expression	232	None	replace
2141	[BUG]  [BUGGY]  if(available  >  0)  {  int  available  =  input.read();  if(available  >  0)  {  skipped  =  input.skip(available);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  int  available  =  input.read();  if(available  >  0)  {  skipped  =  input.skip(available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  int  available  =  input.read();  if(available  >  0)  {  skipped  =  input.skip(available);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.read(available);    }    	non-compiled	[CE]  illegal  start  of  expression	232	None	replace
2142	[BUG]  [BUGGY]  if(available  >  0)  {  throw  new  IOException( " ");  System.err.println( "Skip  skipped: "  +  available);  }  [CE]  unreachable  statement  [FE]            IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IOException( " ");  System.err.println( "Skip  skipped: "  +  available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  throw  new  IOException( " ");  System.err.println( "Skip  skipped: "  +  available);  }	  throw    new    IOException(       "       ");    System.err.println(   "Skip    skipped:       "    +    available);    	non-compiled	[CE]  unreachable  statement	265	None	replace
2143	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skip(available);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skip(available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skip(available);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    skipped    =    input.skip(available);    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
2144	[BUG]  [BUGGY]  if(available  >  0)  {  available  =  input.read();  for(int  i  =  0;  i  <  numToSkip;  ++i)  {  skipped  =  input.skip(available);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  available  =  input.read();  for(int  i  =  0;  i  <  numToSkip;  ++i)  {  skipped  =  input.skip(available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  available  =  input.read();  for(int  i  =  0;  i  <  numToSkip;  ++i)  {  skipped  =  input.skip(available);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    skipped    =    input.skip(available);    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
2145	[BUG]  [BUGGY]  if(available  >  0)  {  for(long  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skip(available);  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(long  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skip(available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(long  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skip(available);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    skipped    =    input.skip(available);    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
2146	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skipped(available);  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skipped(available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skipped(available);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    skipped    =    input.skip(available);    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
2147	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skip(available  +  numToSkip);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skip(available  +  numToSkip);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    skipped    =    input.skip(available);    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
2148	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.close();  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.close();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.close();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    skipped    =    input.skip(available);    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
2149	[BUG]  [BUGGY]  safeThan  <  =  0  ||  available  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]    IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  safeThan  <  =  0  ||  available  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	safeThan  <  =  0  ||  available  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(available    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	167	None	replace
2150	[BUG]  [BUGGY]  safeThan  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]      IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  safeThan  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	safeThan  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(available    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	167	None	replace
2151	[BUG]  [BUGGY]  safeThanSubtract(available)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  safeThanSubtract(available)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	safeThanSubtract(available)  {  throw  new  IllegalArgumentException( " ");  }	  if(available    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	167	None	replace
2152	[BUG]  [BUGGY]  safeGet(available)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  safeGet(available)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	safeGet(available)  {  throw  new  IllegalArgumentException( " ");  }	  if(available    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	167	None	replace
2153	[BUG]  [BUGGY]  safeThan  <  =  0  ||  available  >  0)  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  safeThan  <  =  0  ||  available  >  0)  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	safeThan  <  =  0  ||  available  >  0)  {  throw  new  IllegalArgumentException( " ".);  }	  if(available    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	167	None	replace
2154	[BUG]  [BUGGY]  numToSkip  =  input.skip(available  +  numToSkip);  InputStream  numToSkip  =  input.skip(available  +  numToSkip);  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  numToSkip  =  input.skip(available  +  numToSkip);  InputStream  numToSkip  =  input.skip(available  +  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	numToSkip    =    input.skip(available    +    numToSkip);    InputStream  numToSkip  =  input.skip(available  +  numToSkip);	  	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	61	None	add
2155	[BUG]  [BUGGY]  int  skipped  =  input.skip(available  +  numToSkip)+  skipped;  [CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  int  skipped  =  input.skip(available  +  numToSkip)+  skipped;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	int  skipped  =  input.skip(available  +  numToSkip)+  skipped;	  int    skipped    =    input.skip(available    +    numToSkip);    	non-compiled	[CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)	212	None	replace
2156	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Kip  skipped:   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IOException( "Kip  skipped:   "  +  skipped);	  throw    new    IOException(   "   "    +    skipped);    	compilable	  [FE]  IOException  	124	2	replace
2157	[BUG]  [BUGGY]  throw  new  IOException( "Kip  skipped:   "  +  skipped);  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Kip  skipped:   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( "Kip  skipped:   "  +  skipped);	  throw    new    IOException(   "   "    +    skipped);    	compilable	  [FE]  IOException  	124	2	replace
2158	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >=  numToSkip)  {  break;  }  while(available  >=  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available    >=    numToSkip)    {    break;    }    while(available  >=  numToSkip)  {  break;  }	  	compilable	  [FE]  AssertionError  	185	2	add
2159	[BUG]  [BUGGY]  if(available  >=  numToSkip)  {  break;  }  while(available  >=  numToSkip)  {  break;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >=  numToSkip)  {  break;  }  while(available  >=  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >=    numToSkip)    {    break;    }    while(available  >=  numToSkip)  {  break;  }	  	compilable	  [FE]  AssertionError  	185	2	add
2160	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  break;  }  if(available  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available    >    skipped)    {    break;    }    if(available  >  available)  {  break;  }	  	compilable	  [FE]  AssertionError  	47	2	add
2161	[BUG]  [BUGGY]  if(available  >  skipped)  {  break;  }  if(available  >  available)  {  break;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  break;  }  if(available  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >    skipped)    {    break;    }    if(available  >  available)  {  break;  }	  	compilable	  [FE]  AssertionError  	47	2	add
2162	[BUG]  [BUGGY]  if(available  >  skipped)  {  break;  }  int  available  =  input.read(skipped);  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  break;  }  int  available  =  input.read(skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >    skipped)    {    break;    }    int  available  =  input.read(skipped);	  	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	47	None	add
2163	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Missing  ' "  +  input.getMessage());  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Missing  ' "  +  input.getMessage());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException( "Missing  ' "  +  input.getMessage());	  throw    new    IllegalArgumentException(   "   ".getMessage());    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
2164	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Missing  input: "  +  input.getMessage());  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Missing  input: "  +  input.getMessage());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException( "Missing  input: "  +  input.getMessage());	  throw    new    IllegalArgumentException(   "   ".getMessage());    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
2165	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  -  skipped)+  1;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped  =  input.skip(available  -  skipped)+  1;	  skipped    =    input.skip(available    -    skipped);    timeout    	compilable	  [FE]  AssertionError  	188	2	replace
2166	[BUG]  [BUGGY]  skipped  =  input.skip(available  -  skipped)+  1;  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  -  skipped)+  1;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped  =  input.skip(available  -  skipped)+  1;	  skipped    =    input.skip(available    -    skipped);    timeout    	compilable	  [FE]  AssertionError  	188	2	replace
2167	[BUG]  [BUGGY]  if(available  >  0)  {  continue;  skipped  =  input.skip(skipped);  }  [CE]  unreachable  statement  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  continue;  skipped  =  input.skip(skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  continue;  skipped  =  input.skip(skipped);  }	  continue;    long    skipped    =    input.skip(numToSkip);    	non-compiled	[CE]  unreachable  statement	13	None	replace
2168	[BUG]  [BUGGY]  if(available  >  0)  {  continue;  skipped  =  input.skip(numToSkip);  }  [CE]  unreachable  statement  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  continue;  skipped  =  input.skip(numToSkip);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  continue;  skipped  =  input.skip(numToSkip);  }	  continue;    long    skipped    =    input.skip(numToSkip);    	non-compiled	[CE]  unreachable  statement	13	None	replace
2169	[BUG]  [BUGGY]  while(available  >  0)  {  skip  =  input.skip(skipped);  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  skip  =  input.skip(skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  skip  =  input.skip(skipped);	  while(available    >    0)    {    break;    }    timeout    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
2170	[BUG]  [BUGGY]  while(available  >  0)  {  skip  =  input.skip(skipped);  }  [CE]  cannot  find  symbol  skip  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  skip  =  input.skip(skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  skip  =  input.skip(skipped);  }	  while(available    >    0)    {    break;    }    timeout    	non-compiled	[CE]  cannot  find  symbol  skip	91	None	replace
2171	[BUG]  [BUGGY]  throw  new  IllegalStateException( "   ".equals(available,  skipped));  [CE]  no  suitable  method  found  for  equals(long,long)  [FE]        IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "   ".equals(available,  skipped));  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "   ".equals(available,  skipped));	  throw    new    IllegalStateException(   "   ".equals(available));    	non-compiled	[CE]  no  suitable  method  found  for  equals(long,long)	240	None	replace
2172	[BUG]  [BUGGY]  throw  new  IllegalStateException( "   ".equals(available)+  skip);  [CE]  cannot  find  symbol  skip  [FE]          IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "   ".equals(available)+  skip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "   ".equals(available)+  skip);	  throw    new    IllegalStateException(   "   ".equals(available));    	non-compiled	[CE]  cannot  find  symbol  skip	240	None	replace
2173	[BUG]  [BUGGY]  if(available  >  0  ||  skipped  <  available)  {  break;  }  AssertionError  if(available  >  0  ||  skipped  <  available)  {  break;  }  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0  ||  skipped  <  available)  {  break;  }  AssertionError  if(available  >  0  ||  skipped  <  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >    0    ||    skipped    <    available)    {    break;    }    AssertionError  if(available  >  0  ||  skipped  <  available)  {  break;  }	  	non-compiled	[CE]  not  a  statement	255	None	add
2174	[BUG]  [BUGGY]  if(available  >  0)  {  continue;  skipped  =  input.skip(skipped);  }  else  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  continue;  skipped  =  input.skip(skipped);  }  else  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  +=  input.getLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  continue;  skipped  =  input.skip(skipped);  }  else  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  +=  input.getLength();  }	  continue;    long    skipped    =    input.skip(skipped);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
2175	[BUG]  [BUGGY]  if(available  >  0)  {  continue;  skipped  =  input.skip(skipped);  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  continue;  skipped  =  input.skip(skipped);  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  +=  input.getLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  continue;  skipped  =  input.skip(skipped);  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  +=  input.getLength();  }	  continue;    long    skipped    =    input.skip(skipped);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
2176	[BUG]  [BUGGY]  if(available  >  0)  {  continue;  skipped  =  input.skip(skipped);  }  else  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  +=  input.getSize();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  continue;  skipped  =  input.skip(skipped);  }  else  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  +=  input.getSize();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  continue;  skipped  =  input.skip(skipped);  }  else  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  +=  input.getSize();  }	  continue;    long    skipped    =    input.skip(skipped);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
2177	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }	  continue;    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	270	None	replace
2178	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  unavailable  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  unavailable  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  unavailable  +=  input.read();  }	  continue;    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	270	None	replace
2179	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  unavailable  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  unavailable  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  unavailable  +=  input.read();  }	  continue;    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	270	None	replace
2180	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  available.length;  ++i)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  available.length;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  available.length;  ++i)  {  available  +=  input.read();  }	  continue;    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	270	None	replace
2181	[BUG]  [BUGGY]  if(available  <  =  numToSkip)  {  if(sunkipped  >  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  =  numToSkip)  {  if(sunkipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  =  numToSkip)  {  if(sunkipped  >  0)  {  break;  }	  if(skipped    >    0)    {    break;    }    if(skipped    >    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
2182	[BUG]  [BUGGY]  timeout  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  ==  0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  ==  0)  {  continue;  }	  if(available    <    =    0)    {    continue;    }    	compilable	timeout	132	1	replace
2183	[BUG]  [BUGGY]  if(available  ==  0)  {  continue;  }  timeout  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  ==  0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  ==  0)  {  continue;  }	  if(available    <    =    0)    {    continue;    }    	compilable	timeout	132	1	replace
2184	[BUG]  [BUGGY]  new  IOException( ".skipped  =  0;  [CE]  unclosed  string  literal  [FE]        IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  new  IOException( ".skipped  =  0;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	new  IOException( ".skipped  =  0;	  throw    new    IOException(       "       ");    new    IOException(       "       ");    	non-compiled	[CE]  unclosed  string  literal	164	None	replace
2185	[BUG]  [BUGGY]  if(available  <  0)  {  break;  }  if(available  <  =  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  0)  {  break;  }  if(available  <  =  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    <    0)    {    break;    }    if(available  <  =  0)  {  break;  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	93	None	add
2186	[BUG]  [BUGGY]  if(skipped    >    0)    {    break;    }    if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    0)    {    break;    }    if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >        0)        {        break;        }        if(skipped    >    0)    {    break;    }    if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	98	None	add
2187	[BUG]  [BUGGY]  if(skipped    >    0)    {    break;    }    if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    0)    {    break;    }    if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >        0)        {        break;        }        if(skipped    >    0)    {    break;    }    if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break	  	non-compiled	[CE]  ';'  expected	98	None	add
2188	[BUG]  [BUGGY]  if(skipped    >    0)    {    break;    }    if(skipped  >  0)  {  break;  }  if(skip  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [CE]  cannot  find  symbol  skip  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    0)    {    break;    }    if(skipped  >  0)  {  break;  }  if(skip  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >        0)        {        break;        }        if(skipped    >    0)    {    break;    }    if(skip  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }	  	non-compiled	[CE]  cannot  find  symbol  skip	98	None	add
2189	[BUG]  [BUGGY]  if(available  >  skipped)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getUpperBound();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getUpperBound();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skipped)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getUpperBound();  }	  continue;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	268	None	replace
2190	[BUG]  [BUGGY]  if(available    >    0)    {    break;    }    if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available    >    0)    {    break;    }    if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available        >        0)        {        break;        }        if(available    >    0)    {    break;    }    if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  if(available  >  0)  {  break;	  	non-compiled	[CE]  illegal  start  of  expression	145	None	add
2191	[BUG]  [BUGGY]  if(available    >    0)    {    break;    }    if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  if(available  >  0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available    >    0)    {    break;    }    if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  if(available  >  0)  {  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available        >        0)        {        break;        }        if(available    >    0)    {    break;    }    if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  if(available  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	145	None	add
2192	[BUG]  [BUGGY]  if(available    >    0)    {    break;    }    if(available  >  0)  {  break;  }  If(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available    >    0)    {    break;    }    if(available  >  0)  {  break;  }  If(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available        >        0)        {        break;        }        if(available    >    0)    {    break;    }    If(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }	  	non-compiled	[CE]  ';'  expected	145	None	add
2193	[BUG]  [BUGGY]  if(available  >  0)  {  continue;  skipped  =  input.skip(available);  if(skipped  >  0)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  continue;  skipped  =  input.skip(available);  if(skipped  >  0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  continue;  skipped  =  input.skip(available);  if(skipped  >  0)  {  continue;  }	  continue;    long    skipped    =    input.skip(skipped);    if(skipped    >    0)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
2194	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  continue;  skipped  =  input.skip(available);  if(skipped  >  0)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  numToSkip)  {  continue;  skipped  =  input.skip(available);  if(skipped  >  0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  numToSkip)  {  continue;  skipped  =  input.skip(available);  if(skipped  >  0)  {  continue;  }	  continue;    long    skipped    =    input.skip(skipped);    if(skipped    >    0)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
2195	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  numToSkip)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  numToSkip)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  continue;  }	  continue;    long    skipped    =    input.skip(skipped);    if(skipped    >    0)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
2196	[BUG]  [BUGGY]  if(available  >  0)  {  throw  new  IllegalArgumentException( " ");  System.err.println( "Usage:  SKIP_BUF_SIZE   ");  }  [CE]  unreachable  statement  [FE]        IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IllegalArgumentException( " ");  System.err.println( "Usage:  SKIP_BUF_SIZE   ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  throw  new  IllegalArgumentException( " ");  System.err.println( "Usage:  SKIP_BUF_SIZE   ");  }	  throw    new    IllegalArgumentException(       "       ");    System.err.println(   "Usage:    SKIP_BUF_SIZE       ");    	non-compiled	[CE]  unreachable  statement	237	None	replace
2197	[BUG]  [BUGGY]  if(available  >  0)  {  throw  new  IllegalArgumentException( " ");  System.err.println( "Usage:  SKIP_BUF_SIZE:  SKIP_BUF_SIZE   ");  }  [CE]  unreachable  statement  [FE]          IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IllegalArgumentException( " ");  System.err.println( "Usage:  SKIP_BUF_SIZE:  SKIP_BUF_SIZE   ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  throw  new  IllegalArgumentException( " ");  System.err.println( "Usage:  SKIP_BUF_SIZE:  SKIP_BUF_SIZE   ");  }	  throw    new    IllegalArgumentException(       "       ");    System.err.println(   "Usage:    SKIP_BUF_SIZE       ");    	non-compiled	[CE]  unreachable  statement	237	None	replace
2198	[BUG]  [BUGGY]  if(available  >  0)  {  throw  new  IllegalArgumentException( " ");  System.err.println( "Usage:  SKIP_BUF_SIZE. ");  }  [CE]  unreachable  statement  [FE]            IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IllegalArgumentException( " ");  System.err.println( "Usage:  SKIP_BUF_SIZE. ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  throw  new  IllegalArgumentException( " ");  System.err.println( "Usage:  SKIP_BUF_SIZE. ");  }	  throw    new    IllegalArgumentException(       "       ");    System.err.println(   "Usage:    SKIP_BUF_SIZE       ");    	non-compiled	[CE]  unreachable  statement	237	None	replace
2199	[BUG]  [BUGGY]  if(available  >  0)  {  throw  new  IllegalArgumentException( " ");  System.err.println( "Usage:  SKIP_BUF_SIZE:   "  +  available);  }  [CE]  unreachable  statement  [FE]              IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IllegalArgumentException( " ");  System.err.println( "Usage:  SKIP_BUF_SIZE:   "  +  available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  throw  new  IllegalArgumentException( " ");  System.err.println( "Usage:  SKIP_BUF_SIZE:   "  +  available);  }	  throw    new    IllegalArgumentException(       "       ");    System.err.println(   "Usage:    SKIP_BUF_SIZE       ");    	non-compiled	[CE]  unreachable  statement	237	None	replace
2200	[BUG]  [BUGGY]  if(available  >  0)  {  throw  new  IllegalArgumentException( " ");  System.err.println( "Usage:  SKIP_BUF_SIZE= ");  }  [CE]  unreachable  statement  [FE]                IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IllegalArgumentException( " ");  System.err.println( "Usage:  SKIP_BUF_SIZE= ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  throw  new  IllegalArgumentException( " ");  System.err.println( "Usage:  SKIP_BUF_SIZE= ");  }	  throw    new    IllegalArgumentException(       "       ");    System.err.println(   "Usage:    SKIP_BUF_SIZE       ");    	non-compiled	[CE]  unreachable  statement	237	None	replace
2201	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  numToSkip  +  skipped);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  numToSkip)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  numToSkip  +  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  numToSkip)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  numToSkip  +  skipped);  }	  if(skipped    >    available)    {    break;    }    if(skipped    >    available)    {    break;    System.arraycopy(input,    numToSkip,    available,    numToSkip    +    skipped);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	204	None	replace
2202	[BUG]  [BUGGY]  if(available  >  skipped)  {  break;  }  if(skipped  >  0)  {  System.arraycopy(input,  numToSkip,  available,  numToSkip  +  skipped);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  break;  }  if(skipped  >  0)  {  System.arraycopy(input,  numToSkip,  available,  numToSkip  +  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skipped)  {  break;  }  if(skipped  >  0)  {  System.arraycopy(input,  numToSkip,  available,  numToSkip  +  skipped);  }	  if(skipped    >    available)    {    break;    }    if(skipped    >    available)    {    break;    System.arraycopy(input,    numToSkip,    available,    numToSkip    +    skipped);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	204	None	replace
2203	[BUG]  [BUGGY]  if(available  >  skipped)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  numToSkip  +  skipped);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  numToSkip  +  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skipped)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  numToSkip  +  skipped);  }	  if(skipped    >    available)    {    break;    }    if(skipped    >    available)    {    break;    System.arraycopy(input,    numToSkip,    available,    numToSkip    +    skipped);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	204	None	replace
2204	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  numToSkip  +  skipped);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  numToSkip)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  numToSkip  +  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  numToSkip)  {  break;  }  if(skipped  >  available)  {  break;  System.arraycopy(input,  numToSkip,  available,  numToSkip  +  skipped);  }	  if(skipped    >    available)    {    break;    }    if(skipped    >    available)    {    break;    System.arraycopy(input,    numToSkip,    available,    numToSkip    +    skipped);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	204	None	replace
2205	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  break;  }  if(available  >  numToSkip)  {  System.arraycopy(input,  numToSkip,  available,  numToSkip  +  skipped);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  numToSkip)  {  break;  }  if(available  >  numToSkip)  {  System.arraycopy(input,  numToSkip,  available,  numToSkip  +  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  numToSkip)  {  break;  }  if(available  >  numToSkip)  {  System.arraycopy(input,  numToSkip,  available,  numToSkip  +  skipped);  }	  if(skipped    >    available)    {    break;    }    if(skipped    >    available)    {    break;    System.arraycopy(input,    numToSkip,    available,    numToSkip    +    skipped);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	204	None	replace
2206	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Kip  skipped  =   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalStateException( "Kip  skipped  =   "  +  skipped);	  throw    new    IllegalStateException(   "skipped    =       "    +    skipped);    	compilable	  [FE]  IllegalStateException  	140	2	replace
2207	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Kip  skipped  =   "  +  skipped);  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Kip  skipped  =   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "Kip  skipped  =   "  +  skipped);	  throw    new    IllegalStateException(   "skipped    =       "    +    skipped);    	compilable	  [FE]  IllegalStateException  	140	2	replace
2208	[BUG]  [BUGGY]  int  skipped  =  input.skip(input);  [CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  int  skipped  =  input.skip(input);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	int  skipped  =  input.skip(input);	  long    skipped    =    input.skip(skipped);    	non-compiled	[CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)	131	None	replace
2209	[BUG]  [BUGGY]  skip  =  input.skip(kipped);  [CE]  cannot  find  symbol  skip  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skip  =  input.skip(kipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skip  =  input.skip(kipped);	  skip    =    input.skip(saved);    	non-compiled	[CE]  cannot  find  symbol  skip	116	None	replace
2210	[BUG]  [BUGGY]  [FE]  java.io.IOException:    [FE]            IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IOException( ", ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  0)  {  throw  new  IOException( ", ");  }	  throw    new    IOException(       "       ");    throw    new    IOException(   ",       ");    	compilable	  [FE]  java.io.IOException:    	108	2	replace
2211	[BUG]  [BUGGY]  if(available  >  0)  {  throw  new  IOException( ", ");  }  [FE]  java.io.IOException:    [FE]            IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IOException( ", ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  throw  new  IOException( ", ");  }	  throw    new    IOException(       "       ");    throw    new    IOException(   ",       ");    	compilable	  [FE]  java.io.IOException:    	108	2	replace
2212	[BUG]  [BUGGY]  skipped  =  input.skip(available  -  skipped);  skip  =  input.skip(available  -  skipped);  [CE]  cannot  find  symbol  skip  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  -  skipped);  skip  =  input.skip(available  -  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    -    skipped);    skip  =  input.skip(available  -  skipped);	  timeout    	non-compiled	[CE]  cannot  find  symbol  skip	187	None	add
2213	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  -  skipped);  if(available  >  0)  {  available  =  0;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped    =    input.skip(available    -    skipped);    if(available  >  0)  {  available  =  0;  }	  timeout    	compilable	  [FE]  AssertionError  	187	2	add
2214	[BUG]  [BUGGY]  skipped  =  input.skip(available  -  skipped);  if(available  >  0)  {  available  =  0;  }  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  -  skipped);  if(available  >  0)  {  available  =  0;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    -    skipped);    if(available  >  0)  {  available  =  0;  }	  timeout    	compilable	  [FE]  AssertionError  	187	2	add
2215	[BUG]  [BUGGY]  skipped  =  input.skip(available  -  skipped);  InputStream  available  =  input.readInt();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  -  skipped);  InputStream  available  =  input.readInt();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    -    skipped);    InputStream  available  =  input.readInt();	  timeout    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	187	None	add
2216	[BUG]  [BUGGY]  skipped  =  input.skip(available  -  skipped);  int  available  =  input.read();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  -  skipped);  int  available  =  input.read();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    -    skipped);    int  available  =  input.read();	  timeout    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	187	None	add
2217	[BUG]  [BUGGY]  skipped  =  input.skip(available  -  skipped);  InputStream  available  =  input.readIn();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  -  skipped);  InputStream  available  =  input.readIn();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    -    skipped);    InputStream  available  =  input.readIn();	  timeout    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	187	None	add
2218	[BUG]  [BUGGY]  skipped  =  input.skip(available  -  skipped);  InputStream  available  =  input.readLine();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  -  skipped);  InputStream  available  =  input.readLine();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    -    skipped);    InputStream  available  =  input.readLine();	  timeout    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	187	None	add
2219	[BUG]  [BUGGY]  if(available  >  skipped)  {  for(int  i  =  0;  i  <  available;  ++i)  {  unavailable  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  for(int  i  =  0;  i  <  available;  ++i)  {  unavailable  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skipped)  {  for(int  i  =  0;  i  <  available;  ++i)  {  unavailable  +=  input.read();  }	  continue;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	271	None	replace
2220	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  skipped;  i  <  numToSkip;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  skipped;  i  <  numToSkip;  i++)  {  input.close();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  skipped;  i  <  numToSkip;  i++)  {  input.close();  }	  continue;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	194	None	replace
2221	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.flush();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skip  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.flush();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skip  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.flush();  }	  continue;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	194	None	replace
2222	[BUG]  [BUGGY]  timeout  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >=  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped  >=  available)  {  break;  }	  if(skipped    >=    0)    {    break;    }    if(skipped    >>    0)    {    break;    }    	compilable	timeout	39	1	replace
2223	[BUG]  [BUGGY]  if(skipped  >=  available)  {  break;  }  timeout  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >=  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >=  available)  {  break;  }	  if(skipped    >=    0)    {    break;    }    if(skipped    >>    0)    {    break;    }    	compilable	timeout	39	1	replace
2224	[BUG]  [BUGGY]  skipped  =  input.skip(available  -  skipped);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  -  skipped);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    -    skipped);    if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.next();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	187	None	add
2225	[BUG]  [BUGGY]  skipped  =  input.skip(available  -  skipped);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  -  skipped);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    -    skipped);    if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.next();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	187	None	add
2226	[BUG]  [BUGGY]  skipped  =  input.skip(available  -  skipped);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  -  skipped);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    -    skipped);    if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	187	None	add
2227	[BUG]  [BUGGY]  skipped  =  input.skip(available  -  skipped);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  -  skipped);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    -    skipped);    if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	187	None	add
2228	[BUG]  [BUGGY]  skipped  =  input.skip(available  -  skipped);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.nextToken();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  -  skipped);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.nextToken();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    -    skipped);    if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.nextToken();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	187	None	add
2229	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Skipped:   "  +  skipped);  System.err.println( "Skipped:   "  +  skipped);  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException(   "Skipped:   "  +  skipped);  System.err.println( "Skipped:   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalArgumentException(   "Skipped:   "    +    skipped);    System.err.println( "Skipped:   "  +  skipped);	  	non-compiled	[CE]  unreachable  statement	31	None	add
2230	[BUG]  [BUGGY]  skip  =  input.skip(skipped  -  skipped);  [CE]  cannot  find  symbol  skip  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skip  =  input.skip(skipped  -  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skip  =  input.skip(skipped  -  skipped);	  skip    =    input.skip(num);    	non-compiled	[CE]  cannot  find  symbol  skip	117	None	replace
2231	[BUG]  [BUGGY]  timeout  [FE]          IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.err.println( "Skip  skipped:  missing ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	System.err.println( "Skip  skipped:  missing ");	  throw    new    IllegalStateException(       "       ");    System.err.println(   "       ");    	compilable	timeout	198	1	replace
2232	[BUG]  [BUGGY]  System.err.println( "Skip  skipped:  missing ");  timeout  [FE]          IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.err.println( "Skip  skipped:  missing ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	System.err.println( "Skip  skipped:  missing ");	  throw    new    IllegalStateException(       "       ");    System.err.println(   "       ");    	compilable	timeout	198	1	replace
2233	[BUG]  [BUGGY]  timeout  [FE]            IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.err.println( "Usage:  SKIP_BUF_SIZE=0 ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	System.err.println( "Usage:  SKIP_BUF_SIZE=0 ");	  throw    new    IllegalStateException(       "       ");    System.err.println(   "       ");    	compilable	timeout	198	1	replace
2234	[BUG]  [BUGGY]  System.err.println( "Usage:  SKIP_BUF_SIZE=0 ");  timeout  [FE]            IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.err.println( "Usage:  SKIP_BUF_SIZE=0 ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	System.err.println( "Usage:  SKIP_BUF_SIZE=0 ");	  throw    new    IllegalStateException(       "       ");    System.err.println(   "       ");    	compilable	timeout	198	1	replace
2235	[BUG]  [BUGGY]  timeout  [FE]              IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.err.println( "Usage:  skipped  =  ' "  +  skipped  + "' ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	System.err.println( "Usage:  skipped  =  ' "  +  skipped  + "' ");	  throw    new    IllegalStateException(       "       ");    System.err.println(   "       ");    	compilable	timeout	198	1	replace
2236	[BUG]  [BUGGY]  System.err.println( "Usage:  skipped  =  ' "  +  skipped  + "' ");  timeout  [FE]              IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.err.println( "Usage:  skipped  =  ' "  +  skipped  + "' ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	System.err.println( "Usage:  skipped  =  ' "  +  skipped  + "' ");	  throw    new    IllegalStateException(       "       ");    System.err.println(   "       ");    	compilable	timeout	198	1	replace
2237	[BUG]  [BUGGY]  if(skip  >  0)  {  break;  }  InputStream  available  =  input.skip(skipped);  if(available  >  0)  {  break;  }  [CE]  cannot  find  symbol  skip  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skip  >  0)  {  break;  }  InputStream  available  =  input.skip(skipped);  if(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skip  >  0)  {  break;  }  InputStream  available  =  input.skip(skipped);  if(available  >  0)  {  break;  }	  if(available    >    0)    {    break;    }    InputStream    available    =    input.skip(skipped);    if(available    >    0)    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  skip	206	None	replace
2238	[BUG]  [BUGGY]  if(skip  >  0)  {  break;  }  InputStream  available  =  input.skip(available);  if(available  >  0)  {  break;  }  [CE]  cannot  find  symbol  skip  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skip  >  0)  {  break;  }  InputStream  available  =  input.skip(available);  if(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skip  >  0)  {  break;  }  InputStream  available  =  input.skip(available);  if(available  >  0)  {  break;  }	  if(available    >    0)    {    break;    }    InputStream    available    =    input.skip(skipped);    if(available    >    0)    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  skip	206	None	replace
2239	[BUG]  [BUGGY]  if(skipped  >  0)  {  break;  }  InputStream  available  =  input.skip(available);  if(available  >  0)  {  break;  }  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  break;  }  InputStream  available  =  input.skip(available);  if(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  break;  }  InputStream  available  =  input.skip(available);  if(available  >  0)  {  break;  }	  if(available    >    0)    {    break;    }    InputStream    available    =    input.skip(skipped);    if(available    >    0)    {    break;    }    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	206	None	replace
2240	[BUG]  [BUGGY]  if(skip  >  0)  {  break;  }  InputStream  available  =  input.skip(available,  skipped);  if(available  >  0)  {  break;  }  [CE]  cannot  find  symbol  skip  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skip  >  0)  {  break;  }  InputStream  available  =  input.skip(available,  skipped);  if(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skip  >  0)  {  break;  }  InputStream  available  =  input.skip(available,  skipped);  if(available  >  0)  {  break;  }	  if(available    >    0)    {    break;    }    InputStream    available    =    input.skip(skipped);    if(available    >    0)    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  skip	206	None	replace
2241	[BUG]  [BUGGY]  if(skipped  >  0)  {  break;  }  InputStream  available  =  input.skip(skipped);  if(available  >  0)  {  break;  }  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  break;  }  InputStream  available  =  input.skip(skipped);  if(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  break;  }  InputStream  available  =  input.skip(skipped);  if(available  >  0)  {  break;  }	  if(available    >    0)    {    break;    }    InputStream    available    =    input.skip(skipped);    if(available    >    0)    {    break;    }    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	206	None	replace
2242	[BUG]  [BUGGY]  pendingReturn(1)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available--;  }  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  pendingReturn(1)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available--;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	pendingReturn(1)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available--;  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available--;    }    	non-compiled	[CE]  ';'  expected	119	None	replace
2243	[BUG]  [BUGGY]  while(available  >  0)  {  available--;  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  available--;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  available--;	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available--;    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
2244	[BUG]  [BUGGY]  while(available  >  0)  {  available  =  input.skip(numToSkip;  i  <  numToSkip;  i++)  {  available--;  }  [CE]  ')'  expected  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  available  =  input.skip(numToSkip;  i  <  numToSkip;  i++)  {  available--;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  available  =  input.skip(numToSkip;  i  <  numToSkip;  i++)  {  available--;  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available--;    }    	non-compiled	[CE]  ')'  expected	119	None	replace
2245	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }	  continue;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	195	None	replace
2246	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skip  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skip  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes();  }	  continue;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	195	None	replace
2247	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  numToSkip  =  input.skip(available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	numToSkip  =  input.skip(available);	  skip    =    input.skip(numToSkip);    	compilable	  [FE]  AssertionError  	115	2	replace
2248	[BUG]  [BUGGY]  numToSkip  =  input.skip(available);  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  numToSkip  =  input.skip(available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	numToSkip  =  input.skip(available);	  skip    =    input.skip(numToSkip);    	compilable	  [FE]  AssertionError  	115	2	replace
2249	[BUG]  [BUGGY]  skip  =  input.skip(0,  skipped);  [CE]  cannot  find  symbol  skip  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skip  =  input.skip(0,  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skip  =  input.skip(0,  skipped);	  skip    =    input.skip(switch);    	non-compiled	[CE]  cannot  find  symbol  skip	215	None	replace
2250	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Should  have  been  skipped  in  the  stream. ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IOException( "Should  have  been  skipped  in  the  stream. ");	  throw    new    IOException(   "skipped    in    the    stream.   ");    	compilable	  [FE]  IOException  	222	2	replace
2251	[BUG]  [BUGGY]  throw  new  IOException( "Should  have  been  skipped  in  the  stream. ");  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Should  have  been  skipped  in  the  stream. ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( "Should  have  been  skipped  in  the  stream. ");	  throw    new    IOException(   "skipped    in    the    stream.   ");    	compilable	  [FE]  IOException  	222	2	replace
2252	[BUG]  [BUGGY]  [FE]  IOException  [FE]      IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Should  have  been  skipped: ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IOException( "Should  have  been  skipped: ");	  throw    new    IOException(   "skipped    in    the    stream.   ");    	compilable	  [FE]  IOException  	222	2	replace
2253	[BUG]  [BUGGY]  throw  new  IOException( "Should  have  been  skipped: ");  [FE]  IOException  [FE]      IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Should  have  been  skipped: ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( "Should  have  been  skipped: ");	  throw    new    IOException(   "skipped    in    the    stream.   ");    	compilable	  [FE]  IOException  	222	2	replace
2254	[BUG]  [BUGGY]  [FE]  IOException  [FE]        IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Should  have  been  skipped. ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IOException( "Should  have  been  skipped. ");	  throw    new    IOException(   "skipped    in    the    stream.   ");    	compilable	  [FE]  IOException  	222	2	replace
2255	[BUG]  [BUGGY]  throw  new  IOException( "Should  have  been  skipped. ");  [FE]  IOException  [FE]        IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Should  have  been  skipped. ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( "Should  have  been  skipped. ");	  throw    new    IOException(   "skipped    in    the    stream.   ");    	compilable	  [FE]  IOException  	222	2	replace
2256	[BUG]  [BUGGY]  throw  new  IOException(   "Skip  cannot  be  skipped.   ");  if(input  ==  null)  {  throw  new  IOException( "Skip  cannot  be  skipped.   ");  }  [CE]  unreachable  statement  [FE]    IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException(   "Skip  cannot  be  skipped.   ");  if(input  ==  null)  {  throw  new  IOException( "Skip  cannot  be  skipped.   ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IOException(   "Skip    cannot    be    skipped.   ");    if(input  ==  null)  {  throw  new  IOException( "Skip  cannot  be  skipped.   ");  }	  	non-compiled	[CE]  unreachable  statement	218	None	add
2257	[BUG]  [BUGGY]  throw  new  IOException(   "Skip  cannot  be  skipped.   ");  System.err.println( "Skip  cannot  be  skipped.   ");  [CE]  unreachable  statement  [FE]      IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException(   "Skip  cannot  be  skipped.   ");  System.err.println( "Skip  cannot  be  skipped.   ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IOException(   "Skip    cannot    be    skipped.   ");    System.err.println( "Skip  cannot  be  skipped.   ");	  	non-compiled	[CE]  unreachable  statement	218	None	add
2258	[BUG]  [BUGGY]  if(available  >  skipped)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skipped)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }	  continue;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	196	None	replace
2259	[BUG]  [BUGGY]  input  =  input.skip(skipped);  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  input  =  input.skip(skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	input  =  input.skip(skipped);	  skip    =    input.skip(saved);    	non-compiled	[CE]  incompatible  types	116	None	replace
2260	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }	  continue;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.length();    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
2261	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }	  continue;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.length();    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
2262	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  skipped.length();  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  skipped.length();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  skipped.length();  }	  continue;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.length();    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
2263	[BUG]  [BUGGY]  [FE]  IOException  [FE]            IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Should  have  side  effects  and  can't  be  skipped. ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IOException( "Should  have  side  effects  and  can't  be  skipped. ");	  throw    new    IOException(       "       ");    throw    new    IOException(   ",       ");    	compilable	  [FE]  IOException  	108	2	replace
2264	[BUG]  [BUGGY]  throw  new  IOException( "Should  have  side  effects  and  can't  be  skipped. ");  [FE]  IOException  [FE]            IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Should  have  side  effects  and  can't  be  skipped. ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( "Should  have  side  effects  and  can't  be  skipped. ");	  throw    new    IOException(       "       ");    throw    new    IOException(   ",       ");    	compilable	  [FE]  IOException  	108	2	replace
2265	[BUG]  [BUGGY]  [FE]  IOException  [FE]              IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Should  have  skipped  at  index "  +  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IOException( "Should  have  skipped  at  index "  +  numToSkip);	  throw    new    IOException(       "       ");    throw    new    IOException(   ",       ");    	compilable	  [FE]  IOException  	108	2	replace
2266	[BUG]  [BUGGY]  throw  new  IOException( "Should  have  skipped  at  index "  +  numToSkip);  [FE]  IOException  [FE]              IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Should  have  skipped  at  index "  +  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( "Should  have  skipped  at  index "  +  numToSkip);	  throw    new    IOException(       "       ");    throw    new    IOException(   ",       ");    	compilable	  [FE]  IOException  	108	2	replace
2267	[BUG]  [BUGGY]  [FE]  IOException  [FE]                IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Should  have  skipped: ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IOException( "Should  have  skipped: ");	  throw    new    IOException(       "       ");    throw    new    IOException(   ",       ");    	compilable	  [FE]  IOException  	108	2	replace
2268	[BUG]  [BUGGY]  throw  new  IOException( "Should  have  skipped: ");  [FE]  IOException  [FE]                IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Should  have  skipped: ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( "Should  have  skipped: ");	  throw    new    IOException(       "       ");    throw    new    IOException(   ",       ");    	compilable	  [FE]  IOException  	108	2	replace
2269	[BUG]  [BUGGY]  pendingInput()  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.length();  }  [CE]  ';'  expected  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  pendingInput()  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.length();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	pendingInput()  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.length();  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.length();    }    	non-compiled	[CE]  ';'  expected	228	None	replace
2270	[BUG]  [BUGGY]  pendingReturn(1)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.length();  }  [CE]  ';'  expected  [FE]                                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  pendingReturn(1)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.length();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	pendingReturn(1)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.length();  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.length();    }    	non-compiled	[CE]  ';'  expected	228	None	replace
2271	[BUG]  [BUGGY]  pendingInput()  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  skipped.length();  }  [CE]  ';'  expected  [FE]                                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  pendingInput()  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  skipped.length();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	pendingInput()  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  skipped.length();  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.length();    }    	non-compiled	[CE]  ';'  expected	228	None	replace
2272	[BUG]  [BUGGY]  if(available  >  0  ||  skipped  >  0)  {  break;  }  int  available  =  input.read(skipped);  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0  ||  skipped  >  0)  {  break;  }  int  available  =  input.read(skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0  ||  skipped  >  0)  {  break;  }  int  available  =  input.read(skipped);	  if(available    >    0)    {    break;    }    int    available    =    input.read(skipped);    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	152	None	replace
2273	[BUG]  [BUGGY]  if(available  >  0)  {  skip  =  input.read();  }  [CE]  cannot  find  symbol  skip  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  skip  =  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  skip  =  input.read();  }	  if(available    >    0)    {    break;    }    int    available    =    input.read(skipped);    	non-compiled	[CE]  cannot  find  symbol  skip	152	None	replace
2274	[BUG]  [BUGGY]  if(available  >  0)  {  break;  }  int  available  =  input.read(buffer,  skipped);  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  break;  }  int  available  =  input.read(buffer,  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  break;  }  int  available  =  input.read(buffer,  skipped);	  if(available    >    0)    {    break;    }    int    available    =    input.read(skipped);    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	152	None	replace
2275	[BUG]  [BUGGY]  if(available  >  0)  {  break;  }  int  available  =  input.read(skipped  +  skipped);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  break;  }  int  available  =  input.read(skipped  +  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  break;  }  int  available  =  input.read(skipped  +  skipped);  }	  if(available    >    0)    {    break;    }    int    available    =    input.read(skipped);    	non-compiled	[CE]  illegal  start  of  type	152	None	replace
2276	[BUG]  [BUGGY]  throw  new  IllegalStateException( "InputStream  is  less  than  1: "  +  input.getClass(),  skipd);  [CE]  cannot  find  symbol  skipd  [FE]    IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "InputStream  is  less  than  1: "  +  input.getClass(),  skipd);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "InputStream  is  less  than  1: "  +  input.getClass(),  skipd);	  throw    new    IllegalStateException(   "InputStream    is    less    than    1:   "    +    input.getClass());    	non-compiled	[CE]  cannot  find  symbol  skipd	242	None	replace
2277	[BUG]  [BUGGY]  if(skip  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [CE]  cannot  find  symbol  skip  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skip  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skip  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }	  if(skipped    >    0)    {    break;    }    if(skeipped    >    0)    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  skip	105	None	replace
2278	[BUG]  [BUGGY]  if(skip  >  0)  {  break;  }  if(skip  >  0)  {  break;  }  [CE]  cannot  find  symbol  skip  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skip  >  0)  {  break;  }  if(skip  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skip  >  0)  {  break;  }  if(skip  >  0)  {  break;  }	  if(skipped    >    0)    {    break;    }    if(skeipped    >    0)    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  skip	105	None	replace
2279	[BUG]  [BUGGY]  while(skipped  >  0  ||  available  >  numToSkip)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(skipped  >  0  ||  available  >  numToSkip)  {  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(skipped  >  0  ||  available  >  numToSkip)  {	  while(skipped    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
2280	[BUG]  [BUGGY]  while(skipped  >  0  ||  available  <  numToSkip)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(skipped  >  0  ||  available  <  numToSkip)  {  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(skipped  >  0  ||  available  <  numToSkip)  {	  while(skipped    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
2281	[BUG]  [BUGGY]  while(skipped  >  0  &&  available  <  =  numToSkip)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(skipped  >  0  &&  available  <  =  numToSkip)  {  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(skipped  >  0  &&  available  <  =  numToSkip)  {	  while(skipped    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
2282	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0  ||  skipped  >=  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  0  ||  skipped  >=  available)  {  break;  }	  if(available    >    0    ||    skipped    <    available)    {    break;    }    	compilable	  [FE]  AssertionError  	256	2	replace
2283	[BUG]  [BUGGY]  if(available  >  0  ||  skipped  >=  available)  {  break;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0  ||  skipped  >=  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0  ||  skipped  >=  available)  {  break;  }	  if(available    >    0    ||    skipped    <    available)    {    break;    }    	compilable	  [FE]  AssertionError  	256	2	replace
2284	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  available.getMessage());  [CE]  long  cannot  be  dereferenced  [FE]          IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  available.getMessage());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException( " "  +  available.getMessage());	  throw    new    IllegalArgumentException(   "   ".equals(available));    	non-compiled	[CE]  long  cannot  be  dereferenced	168	None	replace
2285	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  input.getMillis());  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  input.getMillis());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException( " "  +  input.getMillis());	  throw    new    IllegalArgumentException(   "   ".equals(available));    	non-compiled	[CE]  cannot  find  symbol	168	None	replace
2286	[BUG]  [BUGGY]  throw  new  IOException( " ".equals(available));  [CE]  no  suitable  constructor  found  for  IOException(boolean)  [FE]                IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( " ".equals(available));  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( " ".equals(available));	  throw    new    IOException(       "       ");    throw    new    IOException(.   "       ");    	non-compiled	[CE]  no  suitable  constructor  found  for  IOException(boolean)	110	None	replace
2287	[BUG]  [BUGGY]  throw  new  IOException( ".skipped  =  0, " ");  [CE]  unclosed  string  literal  [FE]                  IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( ".skipped  =  0, " ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( ".skipped  =  0, " ");	  throw    new    IOException(       "       ");    throw    new    IOException(.   "       ");    	non-compiled	[CE]  unclosed  string  literal	110	None	replace
2288	[BUG]  [BUGGY]  [FE]  IOException  [FE]                    IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( ".skipped  =  0. ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IOException( ".skipped  =  0. ");	  throw    new    IOException(       "       ");    throw    new    IOException(.   "       ");    	compilable	  [FE]  IOException  	110	2	replace
2289	[BUG]  [BUGGY]  throw  new  IOException( ".skipped  =  0. ");  [FE]  IOException  [FE]                    IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( ".skipped  =  0. ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( ".skipped  =  0. ");	  throw    new    IOException(       "       ");    throw    new    IOException(.   "       ");    	compilable	  [FE]  IOException  	110	2	replace
2290	[BUG]  [BUGGY]  throw  new  IOException( " ".equals(available);  [CE]  [FE]                      IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( " ".equals(available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( " ".equals(available);	  throw    new    IOException(       "       ");    throw    new    IOException(.   "       ");    	non-compiled	[CE]  	110	None	replace
2291	[BUG]  [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  available  =  0;  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  available  =  0;  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  skipped  =  input.skip(available);  available  =  0;  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.next();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	178	None	replace
2292	[BUG]  [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  skipped  =  input.next();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	178	None	replace
2293	[BUG]  [BUGGY]  if(skipped  >  0  ||  available  >  numToSkip)  {  break;  }  if(skip  >  0  ||  available  >  numToSkip)  {  break;  }  [CE]  cannot  find  symbol  skip  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0  ||  available  >  numToSkip)  {  break;  }  if(skip  >  0  ||  available  >  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    0    ||    available    >    numToSkip)    {    break;    }    if(skip  >  0  ||  available  >  numToSkip)  {  break;  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  skip	250	None	add
2294	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  continue;  }  if(disp  >  numToSkip)  {  continue;  }  [CE]  cannot  find  symbol  disp  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  numToSkip)  {  continue;  }  if(disp  >  numToSkip)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >    numToSkip)    {    continue;    }    if(disp  >  numToSkip)  {  continue;  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  disp	129	None	add
2295	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( " "  +  input.getClass().getName());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalStateException( " "  +  input.getClass().getName());	  throw    new    IllegalStateException(   "   ".equals(available);    	compilable	  [FE]  IllegalStateException  	243	2	replace
2296	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  input.getClass().getName());  [FE]  IllegalStateException  [FE]            IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( " "  +  input.getClass().getName());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( " "  +  input.getClass().getName());	  throw    new    IllegalStateException(   "   ".equals(available);    	compilable	  [FE]  IllegalStateException  	243	2	replace
2297	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  input.getName());  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( " "  +  input.getName());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( " "  +  input.getName());	  throw    new    IllegalStateException(   "   ".equals(available);    	non-compiled	[CE]  cannot  find  symbol	243	None	replace
2298	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Skipped:   " "  +  skipped);  [CE]  unclosed  string  literal  [FE]    IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Skipped:   " "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException( "Skipped:   " "  +  skipped);	  throw    new    IllegalArgumentException(   "Skipped:   "    +    skipped);    	non-compiled	[CE]  unclosed  string  literal	32	None	replace
2299	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Skipped:   "  +  input.toString());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalArgumentException( "Skipped:   "  +  input.toString());	  throw    new    IllegalArgumentException(   "Skipped:   "    +    skipped);    	compilable	  [FE]  IllegalArgumentException  	32	2	replace
2300	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Skipped:   "  +  input.toString());  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Skipped:   "  +  input.toString());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException( "Skipped:   "  +  input.toString());	  throw    new    IllegalArgumentException(   "Skipped:   "    +    skipped);    	compilable	  [FE]  IllegalArgumentException  	32	2	replace
2301	[BUG]  [BUGGY]  throw  new  IOException( "skipped  =   "  +  skipd);  [CE]  cannot  find  symbol  skipd  [FE]    IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "skipped  =   "  +  skipd);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( "skipped  =   "  +  skipd);	  throw    new    IOException(   "skipped    =       "    +    available);    	non-compiled	[CE]  cannot  find  symbol  skipd	158	None	replace
2302	[BUG]  [BUGGY]  throw  new  IllegalStateException( "InputStream  is  less  than  1: ".equals(available));  [CE]  no  suitable  constructor  found  for  IllegalStateException(boolean)  [FE]        IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "InputStream  is  less  than  1: ".equals(available));  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "InputStream  is  less  than  1: ".equals(available));	  throw    new    IllegalStateException(   "   ".equals(available));    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalStateException(boolean)	240	None	replace
2303	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Missing  available  input: "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalStateException( "Missing  available  input: "  +  available);	  throw    new    IllegalStateException(   "   ".equals(available));    	compilable	  [FE]  IllegalStateException  	240	2	replace
2304	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Missing  available  input: "  +  available);  [FE]  IllegalStateException  [FE]          IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Missing  available  input: "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "Missing  available  input: "  +  available);	  throw    new    IllegalStateException(   "   ".equals(available));    	compilable	  [FE]  IllegalStateException  	240	2	replace
2305	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "InputStream  is  less  than  1: "  +  input.getClass().getName());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalStateException( "InputStream  is  less  than  1: "  +  input.getClass().getName());	  throw    new    IllegalStateException(   "   ".equals(available));    	compilable	  [FE]  IllegalStateException  	240	2	replace
2306	[BUG]  [BUGGY]  throw  new  IllegalStateException( "InputStream  is  less  than  1: "  +  input.getClass().getName());  [FE]  IllegalStateException  [FE]            IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "InputStream  is  less  than  1: "  +  input.getClass().getName());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "InputStream  is  less  than  1: "  +  input.getClass().getName());	  throw    new    IllegalStateException(   "   ".equals(available));    	compilable	  [FE]  IllegalStateException  	240	2	replace
2307	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  available  ||  skipped  >  numToSkip)  {  break;  }  if(skipped  <  available  ||  skipped  >  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped    >    available    ||    skipped    >    numToSkip)    {    break;    }    if(skipped  <  available  ||  skipped  >  numToSkip)  {  break;  }	  timeout    	compilable	  [FE]  AssertionError  	261	2	add
2308	[BUG]  [BUGGY]  if(skipped  >  available  ||  skipped  >  numToSkip)  {  break;  }  if(skipped  <  available  ||  skipped  >  numToSkip)  {  break;  }  [FE]  AssertionError  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  available  ||  skipped  >  numToSkip)  {  break;  }  if(skipped  <  available  ||  skipped  >  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    available    ||    skipped    >    numToSkip)    {    break;    }    if(skipped  <  available  ||  skipped  >  numToSkip)  {  break;  }	  timeout    	compilable	  [FE]  AssertionError  	261	2	add
2309	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  available  ||  skipped  >  numToSkip)  {  break;  }  if(skipped  >=  available  ||  skipped  >  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped    >    available    ||    skipped    >    numToSkip)    {    break;    }    if(skipped  >=  available  ||  skipped  >  numToSkip)  {  break;  }	  timeout    	compilable	  [FE]  AssertionError  	261	2	add
2310	[BUG]  [BUGGY]  if(skipped  >  available  ||  skipped  >  numToSkip)  {  break;  }  if(skipped  >=  available  ||  skipped  >  numToSkip)  {  break;  }  [FE]  AssertionError  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  available  ||  skipped  >  numToSkip)  {  break;  }  if(skipped  >=  available  ||  skipped  >  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    available    ||    skipped    >    numToSkip)    {    break;    }    if(skipped  >=  available  ||  skipped  >  numToSkip)  {  break;  }	  timeout    	compilable	  [FE]  AssertionError  	261	2	add
2311	[BUG]  [BUGGY]  if(available  >  skip)  {  break;  }  while(skipped  >  0)  {  break;  }  [CE]  cannot  find  symbol  skip  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skip)  {  break;  }  while(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skip)  {  break;  }  while(skipped  >  0)  {  break;  }	  if(skipped    >    available)    {    break;    }    while(skipped    >    available)    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  skip	86	None	replace
2312	[BUG]  [BUGGY]  timeout  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(skipped  <  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	while(skipped  <  available)  {  break;  }	  if(skipped    >    available)    {    break;    }    while(skipped    >    available)    {    break;    }    	compilable	timeout	86	1	replace
2313	[BUG]  [BUGGY]  while(skipped  <  available)  {  break;  }  timeout  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(skipped  <  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(skipped  <  available)  {  break;  }	  if(skipped    >    available)    {    break;    }    while(skipped    >    available)    {    break;    }    	compilable	timeout	86	1	replace
2314	[BUG]  [BUGGY]  if(available  >  0)  {  break;  }  while(skip  >  0)  {  break;  }  [CE]  cannot  find  symbol  skip  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  break;  }  while(skip  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  break;  }  while(skip  >  0)  {  break;  }	  if(skipped    >    available)    {    break;    }    while(skipped    >    available)    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  skip	86	None	replace
2315	[BUG]  [BUGGY]  if(skipped  >  0)  {  continue;  }  if(Skipped  >  0)  {  continue;  }  [CE]  cannot  find  symbol  Skipped  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  continue;  }  if(Skipped  >  0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    0)    {    continue;    }    if(Skipped  >  0)  {  continue;  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  Skipped	127	None	add
2316	[BUG]  [BUGGY]  if(skipped  >  0)  {  continue;  }  if(skip  >  0)  {  continue;  }  [CE]  cannot  find  symbol  skip  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  continue;  }  if(skip  >  0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    0)    {    continue;    }    if(skip  >  0)  {  continue;  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  skip	127	None	add
2317	[BUG]  [BUGGY]  read()  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  read()  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	read()  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }	          if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  ';'  expected	224	None	replace
2318	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  0;  i  <  available  +  1;  ++i)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  0;  i  <  available  +  1;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  0;  i  <  available  +  1;  ++i)  {  available  +=  input.read();  }	          if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	224	None	replace
2319	[BUG]  [BUGGY]  While(available  >  0)  {  available  +=  input.read();  [CE]  ';'  expected  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  While(available  >  0)  {  available  +=  input.read();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	While(available  >  0)  {  available  +=  input.read();	          if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  ';'  expected	224	None	replace
2320	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  0;  i  <  available  +=  input.read();  ++i)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  0;  i  <  available  +=  input.read();  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  0;  i  <  available  +=  input.read();  ++i)  {  available  +=  input.read();  }	          if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	224	None	replace
2321	[BUG]  [BUGGY]  if(available  <  =  0  ||  skipped  >  numToSkip)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  =  0  ||  skipped  >  numToSkip)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  =  0  ||  skipped  >  numToSkip)  {  continue;  }	  if(available    <    =    0)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
2322	[BUG]  [BUGGY]  int  skipped  =  input.skip(skipped  +  numToSkip);  [CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  int  skipped  =  input.skip(skipped  +  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	int  skipped  =  input.skip(skipped  +  numToSkip);	  int    skipped    =    input.skip(available    +    numToSkip);    	non-compiled	[CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)	212	None	replace
2323	[BUG]  [BUGGY]  int  skipped  =  input.skip(available  -  skipped);  [CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  int  skipped  =  input.skip(available  -  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	int  skipped  =  input.skip(available  -  skipped);	  int    skipped    =    input.skip(available);    	non-compiled	[CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)	189	None	replace
2324	[BUG]  [BUGGY]  if(available  <  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(i);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(i);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(i);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.skip(i);    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
2325	[BUG]  [BUGGY]  if(available  <  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(i);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(i);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(i);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.skip(i);    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
2326	[BUG]  [BUGGY]  if(available  >  0)  {  available  =  input.read();  for(int  i  =  0;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(i);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  available  =  input.read();  for(int  i  =  0;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(i);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  available  =  input.read();  for(int  i  =  0;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(i);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.skip(i);    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
2327	[BUG]  [BUGGY]  if(available  <  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  skipped  =  input.next();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.skip(i);    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
2328	[BUG]  [BUGGY]  if(available  <  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.next();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.skip(i);    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
2329	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip();  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.skip(i);    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
2330	[BUG]  [BUGGY]  pendingInput()  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  pendingInput()  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	pendingInput()  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }	          if(available    >    0)    {    for(int    i    =    0;    i    <    available;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  ';'  expected	153	None	replace
2331	[BUG]  [BUGGY]  While(input!=  null  &&  available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  While(input!=  null  &&  available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	While(input!=  null  &&  available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }	          if(available    >    0)    {    for(int    i    =    0;    i    <    available;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  ';'  expected	153	None	replace
2332	[BUG]  [BUGGY]  pendingFor(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [CE]  '.class'  expected  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  pendingFor(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	pendingFor(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }	          if(available    >    0)    {    for(int    i    =    0;    i    <    available;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  '.class'  expected	153	None	replace
2333	[BUG]  [BUGGY]  While(input!=  null  &&  available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getUpperBound();  }  [CE]  ';'  expected  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  While(input!=  null  &&  available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getUpperBound();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	While(input!=  null  &&  available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getUpperBound();  }	          if(available    >    0)    {    for(int    i    =    0;    i    <    available;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  ';'  expected	153	None	replace
2334	[BUG]  [BUGGY]  skipped  =  input.skip(numToSkip);  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip++)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(numToSkip);  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip++)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(numToSkip);    if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip++)  {  skipped  =  input.next();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	80	None	add
2335	[BUG]  [BUGGY]  skipped  =  input.skip(numToSkip);  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip--)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(numToSkip);  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip--)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(numToSkip);    if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip--)  {  skipped  =  input.next();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	80	None	add
2336	[BUG]  [BUGGY]  skipped  =  input.skip(numToSkip);  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip++)  {  skipped  =  input.skip(numToSkip);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(numToSkip);  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip++)  {  skipped  =  input.skip(numToSkip);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(numToSkip);    if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip++)  {  skipped  =  input.skip(numToSkip);  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	80	None	add
2337	[BUG]  [BUGGY]  skipped  =  input.skip(numToSkip);  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip--)  {  skipped  =  input.skip(numToSkip);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(numToSkip);  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip--)  {  skipped  =  input.skip(numToSkip);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(numToSkip);    if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip--)  {  skipped  =  input.skip(numToSkip);  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	80	None	add
2338	[BUG]  [BUGGY]  skipped  =  input.skip(numToSkip);  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip--)  {  skipped  =  input.read();  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(numToSkip);  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip--)  {  skipped  =  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(numToSkip);    if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip--)  {  skipped  =  input.read();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	80	None	add
2339	[BUG]  [BUGGY]  skipped  =  input.skip(numToSkip);  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip--)  {  skipped  =  input.length();  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(numToSkip);  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip--)  {  skipped  =  input.length();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(numToSkip);    if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip--)  {  skipped  =  input.length();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	80	None	add
2340	[BUG]  [BUGGY]  skipped  =  input.skip(numToSkip);  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip++)  {  skipped  =  input.read();  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(numToSkip);  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip++)  {  skipped  =  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(numToSkip);    if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip++)  {  skipped  =  input.read();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	80	None	add
2341	[BUG]  [BUGGY]  skipped  =  input.skip(numToSkip);  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip--)  {  skipped  +=  input.length;  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(numToSkip);  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip--)  {  skipped  +=  input.length;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(numToSkip);    if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip--)  {  skipped  +=  input.length;  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	80	None	add
2342	[BUG]  [BUGGY]  if(available!=  0)  {  break;  }  If(available!=  0)  {  break;  }  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available!=  0)  {  break;  }  If(available!=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available!=    0)    {    break;    }    If(available!=  0)  {  break;  }	  	non-compiled	[CE]  ';'  expected	113	None	add
2343	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
2344	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getLength();  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
2345	[BUG]  [BUGGY]  if(available  >  skipped)break;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skipped)break;  }	  if(available    >    escape)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	211	None	replace
2346	[BUG]  [BUGGY]  if(available  >  Skip)  {  break;  }  [CE]  cannot  find  symbol  Skip  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  Skip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  Skip)  {  break;  }	  if(available    >    escape)    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  Skip	211	None	replace
2347	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped  ||  skipped  <  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  skipped  ||  skipped  <  available)  {  break;  }	  if(available    >    skipped)    {    break;    }    	compilable	  [FE]  AssertionError  	48	2	replace
2348	[BUG]  [BUGGY]  if(available  >  skipped  ||  skipped  <  available)  {  break;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped  ||  skipped  <  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skipped  ||  skipped  <  available)  {  break;  }	  if(available    >    skipped)    {    break;    }    	compilable	  [FE]  AssertionError  	48	2	replace
2349	[BUG]  [BUGGY]  if(skip  >  available)  {  break;  }  [CE]  cannot  find  symbol  skip  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skip  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skip  >  available)  {  break;  }	  if(available    >    skipped)    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  skip	48	None	replace
2350	[BUG]  [BUGGY]  While(available  <  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [CE]  ';'  expected  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  While(available  <  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	While(available  <  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.read();    }    	non-compiled	[CE]  ';'  expected	54	None	replace
2351	[BUG]  [BUGGY]  While(available  <  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.read();  }  [CE]  ';'  expected  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  While(available  <  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	While(available  <  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.read();  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.read();    }    	non-compiled	[CE]  ';'  expected	54	None	replace
2352	[BUG]  [BUGGY]  While(input!=  null)  {  available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [CE]  ';'  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  While(input!=  null)  {  available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	While(input!=  null)  {  available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.read();    }    	non-compiled	[CE]  ';'  expected	54	None	replace
2353	[BUG]  [BUGGY]  While(available  <  numToSkip)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.read();  }  [CE]  ';'  expected  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  While(available  <  numToSkip)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	While(available  <  numToSkip)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.read();  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.read();    }    	non-compiled	[CE]  ';'  expected	54	None	replace
2354	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Skip  cannot  be  skipped.  Try  again. ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IOException( "Skip  cannot  be  skipped.  Try  again. ");	  throw    new    IOException(   "Skip    cannot    be    skipped.   ");    	compilable	  [FE]  IOException  	219	2	replace
2355	[BUG]  [BUGGY]  throw  new  IOException( "Skip  cannot  be  skipped.  Try  again. ");  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Skip  cannot  be  skipped.  Try  again. ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( "Skip  cannot  be  skipped.  Try  again. ");	  throw    new    IOException(   "Skip    cannot    be    skipped.   ");    	compilable	  [FE]  IOException  	219	2	replace
2356	[BUG]  [BUGGY]  [FE]  IOException  [FE]      IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Skip  cannot  be  skipped.  Please  check  that  the  input  is  closed. ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IOException( "Skip  cannot  be  skipped.  Please  check  that  the  input  is  closed. ");	  throw    new    IOException(   "Skip    cannot    be    skipped.   ");    	compilable	  [FE]  IOException  	219	2	replace
2357	[BUG]  [BUGGY]  throw  new  IOException( "Skip  cannot  be  skipped.  Please  check  that  the  input  is  closed. ");  [FE]  IOException  [FE]      IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Skip  cannot  be  skipped.  Please  check  that  the  input  is  closed. ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( "Skip  cannot  be  skipped.  Please  check  that  the  input  is  closed. ");	  throw    new    IOException(   "Skip    cannot    be    skipped.   ");    	compilable	  [FE]  IOException  	219	2	replace
2358	[BUG]  [BUGGY]  [FE]  IOException  [FE]        IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Skip  cannot  be  skipped.  Please  check  that  the  input  is  empty. ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IOException( "Skip  cannot  be  skipped.  Please  check  that  the  input  is  empty. ");	  throw    new    IOException(   "Skip    cannot    be    skipped.   ");    	compilable	  [FE]  IOException  	219	2	replace
2359	[BUG]  [BUGGY]  throw  new  IOException( "Skip  cannot  be  skipped.  Please  check  that  the  input  is  empty. ");  [FE]  IOException  [FE]        IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Skip  cannot  be  skipped.  Please  check  that  the  input  is  empty. ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( "Skip  cannot  be  skipped.  Please  check  that  the  input  is  empty. ");	  throw    new    IOException(   "Skip    cannot    be    skipped.   ");    	compilable	  [FE]  IOException  	219	2	replace
2360	[BUG]  [BUGGY]  [FE]  IOException  [FE]          IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Skip  cannot  be  skipped.  Please  check  that  the  file  is  closed. ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IOException( "Skip  cannot  be  skipped.  Please  check  that  the  file  is  closed. ");	  throw    new    IOException(   "Skip    cannot    be    skipped.   ");    	compilable	  [FE]  IOException  	219	2	replace
2361	[BUG]  [BUGGY]  throw  new  IOException( "Skip  cannot  be  skipped.  Please  check  that  the  file  is  closed. ");  [FE]  IOException  [FE]          IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "Skip  cannot  be  skipped.  Please  check  that  the  file  is  closed. ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( "Skip  cannot  be  skipped.  Please  check  that  the  file  is  closed. ");	  throw    new    IOException(   "Skip    cannot    be    skipped.   ");    	compilable	  [FE]  IOException  	219	2	replace
2362	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numToSkip;  ++i)  {  available  +=  input.getLength();  }  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  0;  i  <  numToSkip;  ++i)  {  available  +=  input.getLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  0;  i  <  numToSkip;  ++i)  {  available  +=  input.getLength();  }	  continue;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  cannot  find  symbol	193	None	replace
2363	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getUpperBound();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skip  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getUpperBound();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skip  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getUpperBound();  }	  continue;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	193	None	replace
2364	[BUG]  [BUGGY]  timeout  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  }  else  if(available  >  numToSkip)  {  if(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	}  else  if(available  >  numToSkip)  {  if(skipped  >  0)  {  break;  }	  if(skipped    >    0)    {    break;    }    If(skipped    >    0)    {    break;    }    	compilable	timeout	100	1	replace
2365	[BUG]  [BUGGY]  }  else  if(available  >  numToSkip)  {  if(skipped  >  0)  {  break;  }  timeout  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  }  else  if(available  >  numToSkip)  {  if(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	}  else  if(available  >  numToSkip)  {  if(skipped  >  0)  {  break;  }	  if(skipped    >    0)    {    break;    }    If(skipped    >    0)    {    break;    }    	compilable	timeout	100	1	replace
2366	[BUG]  [BUGGY]  }  else  if(available  <  =  numToSkip)  {  if(skipped  >  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  }  else  if(available  <  =  numToSkip)  {  if(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	}  else  if(available  <  =  numToSkip)  {  if(skipped  >  0)  {  break;  }	  if(skipped    >    0)    {    break;    }    If(skipped    >    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
2367	[BUG]  [BUGGY]  if(available  <  =  0)  {  break;  }  else  if(skipped  >  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  =  0)  {  break;  }  else  if(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  =  0)  {  break;  }  else  if(skipped  >  0)  {  break;  }	  if(skipped    >    0)    {    break;    }    If(skipped    >    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
2368	[BUG]  [BUGGY]  }  else  if(available  >  numToSkip)  {  if(skip  >  0)  {  break;  }  [CE]  cannot  find  symbol  skip  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  }  else  if(available  >  numToSkip)  {  if(skip  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	}  else  if(available  >  numToSkip)  {  if(skip  >  0)  {  break;  }	  if(skipped    >    0)    {    break;    }    If(skipped    >    0)    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  skip	100	None	replace
2369	[BUG]  [BUGGY]  pendingInput()  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  pendingInput()  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	pendingInput()  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.next();    }    	non-compiled	[CE]  ';'  expected	154	None	replace
2370	[BUG]  [BUGGY]  pendingReturn(1)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [CE]  ';'  expected  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  pendingReturn(1)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	pendingReturn(1)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.next();    }    	non-compiled	[CE]  ';'  expected	154	None	replace
2371	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.next();  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.next();  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
2372	[BUG]  [BUGGY]  pendingInput()  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getParent();  }  [CE]  ';'  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  pendingInput()  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getParent();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	pendingInput()  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getParent();  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.next();    }    	non-compiled	[CE]  ';'  expected	154	None	replace
2373	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available    >    0)    {    break;    }    if(available  >  0)  {  break;  }  if(available  <  0)  {  break;  }  if(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available        >        0)        {        break;        }        if(available    >    0)    {    break;    }    if(available  <  0)  {  break;  }  if(available  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	145	2	add
2374	[BUG]  [BUGGY]  if(available    >    0)    {    break;    }    if(available  >  0)  {  break;  }  if(available  <  0)  {  break;  }  if(available  >  0)  {  break;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available    >    0)    {    break;    }    if(available  >  0)  {  break;  }  if(available  <  0)  {  break;  }  if(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available        >        0)        {        break;        }        if(available    >    0)    {    break;    }    if(available  <  0)  {  break;  }  if(available  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	145	2	add
2375	[BUG]  [BUGGY]  if(available    >    0)    {    break;    }    if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  if(available  >  0)  <  break;  }  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available    >    0)    {    break;    }    if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  if(available  >  0)  <  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available        >        0)        {        break;        }        if(available    >    0)    {    break;    }    if(available  >  0)  {  break;  }  if(available  >  0)  <  break;  }	  	non-compiled	[CE]  illegal  start  of  type	145	None	add
2376	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  <  available)  {  break;  }  if(skipped  <  available)  {  break;  }  if(skipped  <  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >        available)        {        break;        }        if(skipped    <    available)    {    break;    }    if(skipped  <  available)  {  break;  }  if(skipped  <  available)  {  break;  }	  	compilable	  [FE]  AssertionError  	87	2	add
2377	[BUG]  [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  <  available)  {  break;  }  if(skipped  <  available)  {  break;  }  if(skipped  <  available)  {  break;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  <  available)  {  break;  }  if(skipped  <  available)  {  break;  }  if(skipped  <  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >        available)        {        break;        }        if(skipped    <    available)    {    break;    }    if(skipped  <  available)  {  break;  }  if(skipped  <  available)  {  break;  }	  	compilable	  [FE]  AssertionError  	87	2	add
2378	[BUG]  [BUGGY]  While(available  <  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.read();  }  [CE]  ';'  expected  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  While(available  <  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	While(available  <  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.read();  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  ';'  expected	225	None	replace
2379	[BUG]  [BUGGY]  While(available  <  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [CE]  ';'  expected  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  While(available  <  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	While(available  <  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  ';'  expected	225	None	replace
2380	[BUG]  [BUGGY]  While(input!=  null)  {  available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.read();  }  [CE]  ';'  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  While(input!=  null)  {  available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	While(input!=  null)  {  available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.read();  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  ';'  expected	225	None	replace
2381	[BUG]  [BUGGY]  While(available  <  numToSkip)  {  for(int  i  =  available;  i  <  0;  ++i)  {  available  +=  input.read();  }  [CE]  ';'  expected  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  While(available  <  numToSkip)  {  for(int  i  =  available;  i  <  0;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	While(available  <  numToSkip)  {  for(int  i  =  available;  i  <  0;  ++i)  {  available  +=  input.read();  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  ';'  expected	225	None	replace
2382	[BUG]  [BUGGY]  if(available  >  0)  {  throw  new  IllegalStateException( " ");  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]        IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IllegalStateException( " ");  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  throw  new  IllegalStateException( " ");  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }	  throw    new    IllegalStateException(       "       ");    throw    new    IllegalStateException(       "       ");    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
2383	[BUG]  [BUGGY]  timeout  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  break;  }  else  if(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped  >  0)  {  break;  }  else  if(skipped  >  0)  {  break;  }	  if(skipped    >    0)    {    break;    }    if(Skipped    >    0)    {    break;    }    	compilable	timeout	258	1	replace
2384	[BUG]  [BUGGY]  if(skipped  >  0)  {  break;  }  else  if(skipped  >  0)  {  break;  }  timeout  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  break;  }  else  if(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  break;  }  else  if(skipped  >  0)  {  break;  }	  if(skipped    >    0)    {    break;    }    if(Skipped    >    0)    {    break;    }    	compilable	timeout	258	1	replace
2385	[BUG]  [BUGGY]  skipped  =  input.skip(skipped);  if(available  >  0)  {  for(int  i  =  available;  i  <  available;  i++)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(skipped);  if(available  >  0)  {  for(int  i  =  available;  i  <  available;  i++)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(skipped);    if(available  >  0)  {  for(int  i  =  available;  i  <  available;  i++)  {  skipped  =  input.next();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	2	None	add
2386	[BUG]  [BUGGY]  skipped  =  input.skip(skipped);  if(available  <  =  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(skipped);  if(available  <  =  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(skipped);    if(available  <  =  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.next();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	2	None	add
2387	[BUG]  [BUGGY]  skipped  =  input.skip(skipped);  if(available  >  0)  {  for(int  i  =  available;  i  <  available;  ++i)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(skipped);  if(available  >  0)  {  for(int  i  =  available;  i  <  available;  ++i)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(skipped);    if(available  >  0)  {  for(int  i  =  available;  i  <  available;  ++i)  {  skipped  =  input.next();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	2	None	add
2388	[BUG]  [BUGGY]  skipped  =  input.skip(skipped);  if(available  <  =  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(skipped);  if(available  <  =  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(skipped);    if(available  <  =  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.next();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	2	None	add
2389	[BUG]  [BUGGY]  long  available  =  numToSkip  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [CE]  ';'  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  long  available  =  numToSkip  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	long  available  =  numToSkip  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }	          if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  ';'  expected	227	None	replace
2390	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available  +  numToSkip;  ++i)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available  +  numToSkip;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available  +  numToSkip;  ++i)  {  available  +=  input.read();  }	          if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	227	None	replace
2391	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available  +  1;  ++i)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available  +  1;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available  +  1;  ++i)  {  available  +=  input.read();  }	          if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	227	None	replace
2392	[BUG]  [BUGGY]  timeout  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  skipped  =  input.skip(skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	while(available  >  0)  {  skipped  =  input.skip(skipped);  }	  while(available    >    0)    {    break;    }    timeout    	compilable	timeout	91	1	replace
2393	[BUG]  [BUGGY]  while(available  >  0)  {  skipped  =  input.skip(skipped);  }  timeout  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  skipped  =  input.skip(skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  skipped  =  input.skip(skipped);  }	  while(available    >    0)    {    break;    }    timeout    	compilable	timeout	91	1	replace
2394	[BUG]  [BUGGY]  while(available  >  0)  {  skipd  =  skipped;  }  [CE]  cannot  find  symbol  skipd  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  skipd  =  skipped;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  skipd  =  skipped;  }	  while(available    >    0)    {    break;    }    timeout    	non-compiled	[CE]  cannot  find  symbol  skipd	91	None	replace
2395	[BUG]  [BUGGY]  while(available  >  0)  {  skipd  =  input.skip(skipped);  }  [CE]  cannot  find  symbol  skipd  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  skipd  =  input.skip(skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  skipd  =  input.skip(skipped);  }	  while(available    >    0)    {    break;    }    timeout    	non-compiled	[CE]  cannot  find  symbol  skipd	91	None	replace
2396	[BUG]  [BUGGY]  int  skipped  =  input.skip(available);  int  available  =  input.available();  [CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  int  skipped  =  input.skip(available);  int  available  =  input.available();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	int  skipped  =  input.skip(available);  int  available  =  input.available();	  skipped    =    input.skip(available);    long    available    =    input.available();    	non-compiled	[CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)	233	None	replace
2397	[BUG]  [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  long  available  =  input.available();  }  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  long  available  =  input.available();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  skipped  =  input.skip(available);  long  available  =  input.available();  }	  skipped    =    input.skip(available);    long    available    =    input.available();    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	233	None	replace
2398	[BUG]  [BUGGY]  Short  skipped  =  input.skip(available);  long  available  =  input.available();  [CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  Short  skipped  =  input.skip(available);  long  available  =  input.available();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	Short  skipped  =  input.skip(available);  long  available  =  input.available();	  skipped    =    input.skip(available);    long    available    =    input.available();    	non-compiled	[CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)	233	None	replace
2399	[BUG]  [BUGGY]  throw  new  IOException( " "),  input.getMessage());  [CE]  [FE]        IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( " "),  input.getMessage());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( " "),  input.getMessage());	  throw    new    IOException(   "   ".getMessage());    	non-compiled	[CE]  	120	None	replace
2400	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "InputStream  is  less  than  1:   ");  System.err.println( "InputStream  is  less  than  1:   ");  [CE]  unreachable  statement  [FE]    IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "InputStream  is  less  than  1:   ");  System.err.println( "InputStream  is  less  than  1:   ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalStateException(   "InputStream    is    less    than    1:   ");    System.err.println( "InputStream  is  less  than  1:   ");	  	non-compiled	[CE]  unreachable  statement	245	None	add
2401	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "InputStream  is  less  than  1:   ");  InputStream  is  less  than  1:   ");  [CE]  [FE]      IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "InputStream  is  less  than  1:   ");  InputStream  is  less  than  1:   ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalStateException(   "InputStream    is    less    than    1:   ");    InputStream  is  less  than  1:   ");	  	non-compiled	[CE]  	245	None	add
2402	[BUG]  [BUGGY]  throw  new  IOException( " "  +  input.getName());  [CE]  cannot  find  symbol  [FE]    IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( " "  +  input.getName());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( " "  +  input.getName());	  throw    new    IOException(   "   "    +    skipped);    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
2403	[BUG]  [BUGGY]  throw  new  IOException( " "  +  input.getCharset());  [CE]  cannot  find  symbol  [FE]      IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( " "  +  input.getCharset());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( " "  +  input.getCharset());	  throw    new    IOException(   "   "    +    skipped);    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
2404	[BUG]  [BUGGY]  throw  new  IOException( " "  +  input.getVersion());  [CE]  cannot  find  symbol  [FE]        IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( " "  +  input.getVersion());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( " "  +  input.getVersion());	  throw    new    IOException(   "   "    +    skipped);    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
2405	[BUG]  [BUGGY]  jumpToSkip  =  input.skipToSkip();  [CE]  cannot  find  symbol  jumpToSkip  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  jumpToSkip  =  input.skipToSkip();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	jumpToSkip  =  input.skipToSkip();	  if(available    >    0)    {    break;    }    while(available    >    0)    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  jumpToSkip	151	None	replace
2406	[BUG]  [BUGGY]  jumpToSkip  =  input.skipToSkip(skipped);  [CE]  cannot  find  symbol  jumpToSkip  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  jumpToSkip  =  input.skipToSkip(skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	jumpToSkip  =  input.skipToSkip(skipped);	  if(available    >    0)    {    break;    }    while(available    >    0)    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  jumpToSkip	151	None	replace
2407	[BUG]  [BUGGY]  jumpToSkip  =  input.skipToSkip(available);  [CE]  cannot  find  symbol  jumpToSkip  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  jumpToSkip  =  input.skipToSkip(available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	jumpToSkip  =  input.skipToSkip(available);	  if(available    >    0)    {    break;    }    while(available    >    0)    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  jumpToSkip	151	None	replace
2408	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   "  +  skipped);  IllegalArgumentException(   "   "  +  skipped);  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException(   "   "  +  skipped);  IllegalArgumentException(   "   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalArgumentException(   "   "    +    skipped);    IllegalArgumentException(   "   "  +  skipped);	  	non-compiled	[CE]  cannot  find  symbol	169	None	add
2409	[BUG]  [BUGGY]  while(available  >  0)  {  if(skipped  >  available)  {  break;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  if(skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  if(skipped  >  available)  {  break;  }	  if(skipped    >    available)    {    break;    }    if(skipped    <    available)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
2410	[BUG]  [BUGGY]  timeout  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0  ||  available  >  numToSkip)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped  >  0  ||  available  >  numToSkip)  {  continue;  }	  if(skipped    >    0)    {    continue;    }    timeout    	compilable	timeout	128	1	replace
2411	[BUG]  [BUGGY]  if(skipped  >  0  ||  available  >  numToSkip)  {  continue;  }  timeout  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0  ||  available  >  numToSkip)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0  ||  available  >  numToSkip)  {  continue;  }	  if(skipped    >    0)    {    continue;    }    timeout    	compilable	timeout	128	1	replace
2412	[BUG]  [BUGGY]  timeout  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0  ||  skipped  >  0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped  >  0  ||  skipped  >  0)  {  continue;  }	  if(skipped    >    0)    {    continue;    }    timeout    	compilable	timeout	128	1	replace
2413	[BUG]  [BUGGY]  if(skipped  >  0  ||  skipped  >  0)  {  continue;  }  timeout  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0  ||  skipped  >  0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0  ||  skipped  >  0)  {  continue;  }	  if(skipped    >    0)    {    continue;    }    timeout    	compilable	timeout	128	1	replace
2414	[BUG]  [BUGGY]  timeout  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0  ||  skipped  <  available)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped  >  0  ||  skipped  <  available)  {  continue;  }	  if(skipped    >    0)    {    continue;    }    timeout    	compilable	timeout	128	1	replace
2415	[BUG]  [BUGGY]  if(skipped  >  0  ||  skipped  <  available)  {  continue;  }  timeout  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0  ||  skipped  <  available)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0  ||  skipped  <  available)  {  continue;  }	  if(skipped    >    0)    {    continue;    }    timeout    	compilable	timeout	128	1	replace
2416	[BUG]  [BUGGY]  throw  new  IOException(   "   "  +  skipped);  System.err.println( "   "  +  skipped);  [CE]  unreachable  statement  [FE]    IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException(   "   "  +  skipped);  System.err.println( "   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IOException(   "   "    +    skipped);    System.err.println( "   "  +  skipped);	  	non-compiled	[CE]  unreachable  statement	123	None	add
2417	[BUG]  [BUGGY]  throw  new  IOException(   "   "  +  skipped);  return  new  IOException(   "   "  +  skipped);  [CE]  incompatible  types  [FE]      IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException(   "   "  +  skipped);  return  new  IOException(   "   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IOException(   "   "    +    skipped);    return  new  IOException(   "   "  +  skipped);	  	non-compiled	[CE]  incompatible  types	123	None	add
2418	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(input,  skipped);  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  aughtExceptionHandler.handleMissingName(input,  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	aughtExceptionHandler.handleMissingName(input,  skipped);	  if(available    >    0)    {    break;    }    if(available    >    0)    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	146	None	replace
2419	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(input,  numToSkip);  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  aughtExceptionHandler.handleMissingName(input,  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	aughtExceptionHandler.handleMissingName(input,  numToSkip);	  if(available    >    0)    {    break;    }    if(available    >    0)    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	146	None	replace
2420	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(input);  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  aughtExceptionHandler.handleMissingName(input);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	aughtExceptionHandler.handleMissingName(input);	  if(available    >    0)    {    break;    }    if(available    >    0)    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	146	None	replace
2421	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingClass(input,  numToSkip);  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  aughtExceptionHandler.handleMissingClass(input,  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	aughtExceptionHandler.handleMissingClass(input,  numToSkip);	  if(available    >    0)    {    break;    }    if(available    >    0)    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	146	None	replace
2422	[BUG]  [BUGGY]  aughtExceptionHandler.handleSkip(input,  skipped);  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  aughtExceptionHandler.handleSkip(input,  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	aughtExceptionHandler.handleSkip(input,  skipped);	  if(available    >    0)    {    break;    }    if(available    >    0)    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	146	None	replace
2423	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingClass(input);  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  aughtExceptionHandler.handleMissingClass(input);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	aughtExceptionHandler.handleMissingClass(input);	  if(available    >    0)    {    break;    }    if(available    >    0)    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	146	None	replace
2424	[BUG]  [BUGGY]  aughtExceptionHandler(input,  numToSkip);  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  aughtExceptionHandler(input,  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	aughtExceptionHandler(input,  numToSkip);	  if(available    >    0)    {    break;    }    if(available    >    0)    {    break;    }    	non-compiled	[CE]  cannot  find  symbol	146	None	replace
2425	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  }  if(available  >  numToSkip)  {  break;  }  if(available  >  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >        available)        {        break;        }        if(skipped    >    available)    {    break;    }    if(available  >  numToSkip)  {  break;  }  if(available  >  numToSkip)  {  break;  }	  	compilable	  [FE]  AssertionError  	82	2	add
2426	[BUG]  [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  }  if(available  >  numToSkip)  {  break;  }  if(available  >  numToSkip)  {  break;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  }  if(available  >  numToSkip)  {  break;  }  if(available  >  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >        available)        {        break;        }        if(skipped    >    available)    {    break;    }    if(available  >  numToSkip)  {  break;  }  if(available  >  numToSkip)  {  break;  }	  	compilable	  [FE]  AssertionError  	82	2	add
2427	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  }  if(skipped  >=  available)  {  break;  }  if(skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >        available)        {        break;        }        if(skipped    >    available)    {    break;    }    if(skipped  >=  available)  {  break;  }  if(skipped  >  available)  {  break;  }	  	compilable	  [FE]  AssertionError  	82	2	add
2428	[BUG]  [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  }  if(skipped  >=  available)  {  break;  }  if(skipped  >  available)  {  break;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  }  if(skipped  >=  available)  {  break;  }  if(skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >        available)        {        break;        }        if(skipped    >    available)    {    break;    }    if(skipped  >=  available)  {  break;  }  if(skipped  >  available)  {  break;  }	  	compilable	  [FE]  AssertionError  	82	2	add
2429	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  }  if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >        available)        {        break;        }        if(skipped    >    available)    {    break;    }    if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	82	2	add
2430	[BUG]  [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  }  if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  }  if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >        available)        {        break;        }        if(skipped    >    available)    {    break;    }    if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	82	2	add
2431	[BUG]  [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  }  if(available  <  =  0)  {  break;  }  if(available  >  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  }  if(available  <  =  0)  {  break;  }  if(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >        available)        {        break;        }        if(skipped    >    available)    {    break;    }    if(available  <  =  0)  {  break;  }  if(available  >  0)  {  break;  }	  	non-compiled	[CE]  illegal  start  of  expression	82	None	add
2432	[BUG]  [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  }  if(available  <  =  numToSkip)  {  break;  }  if(available  >  numToSkip)  {  break;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  }  if(available  <  =  numToSkip)  {  break;  }  if(available  >  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >        available)        {        break;        }        if(skipped    >    available)    {    break;    }    if(available  <  =  numToSkip)  {  break;  }  if(available  >  numToSkip)  {  break;  }	  	non-compiled	[CE]  illegal  start  of  expression	82	None	add
2433	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  }  if(available  >  0)  {  break;  }  if(available  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >        available)        {        break;        }        if(skipped    >    available)    {    break;    }    if(available  >  0)  {  break;  }  if(available  <  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	82	2	add
2434	[BUG]  [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  }  if(available  >  0)  {  break;  }  if(available  <  0)  {  break;  }  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    available)    {    break;    }    if(skipped  >  available)  {  break;  }  if(available  >  0)  {  break;  }  if(available  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >        available)        {        break;        }        if(skipped    >    available)    {    break;    }    if(available  >  0)  {  break;  }  if(available  <  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	82	2	add
2435	[BUG]  [BUGGY]  if(input!=  null)  {  continue;  skipped  =  input.skip(numToSkip);  }  [CE]  unreachable  statement  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(input!=  null)  {  continue;  skipped  =  input.skip(numToSkip);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(input!=  null)  {  continue;  skipped  =  input.skip(numToSkip);  }	  continue;    long    skipped    =    input.skip(numToSkip);    	non-compiled	[CE]  unreachable  statement	13	None	replace
2436	[BUG]  [BUGGY]  if(input!=  null)  {  continue;  skipped  =  input.skip(skipped);  }  [CE]  unreachable  statement  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(input!=  null)  {  continue;  skipped  =  input.skip(skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(input!=  null)  {  continue;  skipped  =  input.skip(skipped);  }	  continue;    long    skipped    =    input.skip(numToSkip);    	non-compiled	[CE]  unreachable  statement	13	None	replace
2437	[BUG]  [BUGGY]  }  else  if(skipped  >  available)  {  break;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  }  else  if(skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	}  else  if(skipped  >  available)  {  break;  }	  if(skipped    >    available)    {    break;    }    If(skipped    >    available)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
2438	[BUG]  [BUGGY]  }  else  if(available  >  skipped)  {  break;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  }  else  if(available  >  skipped)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	}  else  if(available  >  skipped)  {  break;  }	  if(skipped    >    available)    {    break;    }    If(skipped    >    available)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
2439	[BUG]  [BUGGY]  SecuritySystem.err.println( "Usage:  SKIP   "  +  input.getName());  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  SecuritySystem.err.println( "Usage:  SKIP   "  +  input.getName());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	SecuritySystem.err.println( "Usage:  SKIP   "  +  input.getName());	  throw    new    IllegalArgumentException(       "       ");    System.err.println(   "Usage:    SKIP       "    +    input.getName());    	non-compiled	[CE]  cannot  find  symbol	238	None	replace
2440	[BUG]  [BUGGY]  System.err.println( "Usage:  SKIP_BUF_SIZE:  SKIP   "  +  input.getName());  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.err.println( "Usage:  SKIP_BUF_SIZE:  SKIP   "  +  input.getName());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	System.err.println( "Usage:  SKIP_BUF_SIZE:  SKIP   "  +  input.getName());	  throw    new    IllegalArgumentException(       "       ");    System.err.println(   "Usage:    SKIP       "    +    input.getName());    	non-compiled	[CE]  cannot  find  symbol	238	None	replace
2441	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  <  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >=        0)        {        break;        }        if(skipped    >=    0)    {    break;    }    if(skipped  <  0)  {  break;  }  if(skipped  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	35	2	add
2442	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  <  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  <  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped    >=    0)    {    break;    }    if(skipped  <  0)  {  break;  }  if(skipped  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	35	2	add
2443	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >  0)  {  break;  }  if(skipped  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >=        0)        {        break;        }        if(skipped    >=    0)    {    break;    }    if(skipped  >  0)  {  break;  }  if(skipped  <  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	35	2	add
2444	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >  0)  {  break;  }  if(skipped  <  0)  {  break;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >  0)  {  break;  }  if(skipped  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped    >=    0)    {    break;    }    if(skipped  >  0)  {  break;  }  if(skipped  <  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	35	2	add
2445	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >=        0)        {        break;        }        if(skipped    >=    0)    {    break;    }    if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	35	2	add
2446	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped    >=    0)    {    break;    }    if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	35	2	add
2447	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(available  >=  0)  {  break;  }  if(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >=        0)        {        break;        }        if(skipped    >=    0)    {    break;    }    if(available  >=  0)  {  break;  }  if(available  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	35	2	add
2448	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(available  >=  0)  {  break;  }  if(available  >  0)  {  break;  }  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(available  >=  0)  {  break;  }  if(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped    >=    0)    {    break;    }    if(available  >=  0)  {  break;  }  if(available  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	35	2	add
2449	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0  ||  skipped  >  0)  {  break;  }  if(skipped  >  0  ||  skipped  >  0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped    >    0    ||    skipped    >    0)    {    break;    }    if(skipped  >  0  ||  skipped  >  0)  {  continue;  }	  timeout    	compilable	  [FE]  AssertionError  	252	2	add
2450	[BUG]  [BUGGY]  if(skipped  >  0  ||  skipped  >  0)  {  break;  }  if(skipped  >  0  ||  skipped  >  0)  {  continue;  }  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0  ||  skipped  >  0)  {  break;  }  if(skipped  >  0  ||  skipped  >  0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    >    0    ||    skipped    >    0)    {    break;    }    if(skipped  >  0  ||  skipped  >  0)  {  continue;  }	  timeout    	compilable	  [FE]  AssertionError  	252	2	add
2451	[BUG]  [BUGGY]  if(available  >  0)  {  available  =  input.read();  for(int  num  =  available;  num  <  0;  num++)  {  skipped  =  input.skip(available);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  available  =  input.read();  for(int  num  =  available;  num  <  0;  num++)  {  skipped  =  input.skip(available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  available  =  input.read();  for(int  num  =  available;  num  <  0;  num++)  {  skipped  =  input.skip(available);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    num    =    available;    num    <    0;    num++)    {    skipped    =    input.skip(available);    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
2452	[BUG]  [BUGGY]  if(available  <  =  0)  {  skipped  =  input.skip(available);  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  =  0)  {  skipped  =  input.skip(available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  =  0)  {  skipped  =  input.skip(available);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    num    =    available;    num    <    0;    num++)    {    skipped    =    input.skip(available);    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
2453	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  num  =  available;  num  <  0;  num++)  {  skipped  =  input.skip();  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  num  =  available;  num  <  0;  num++)  {  skipped  =  input.skip();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  num  =  available;  num  <  0;  num++)  {  skipped  =  input.skip();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    num    =    available;    num    <    0;    num++)    {    skipped    =    input.skip(available);    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
2454	[BUG]  [BUGGY]  if(available  >  0)  {  available  =  input.read();  for(int  num  =  available;  num  <  0;  num++)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  available  =  input.read();  for(int  num  =  available;  num  <  0;  num++)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  available  =  input.read();  for(int  num  =  available;  num  <  0;  num++)  {  skipped  =  input.next();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    num    =    available;    num    <    0;    num++)    {    skipped    =    input.skip(available);    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
2455	[BUG]  [BUGGY]  if(available  >  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  skipped;  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  skipped;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  skipped;  }	  throw    new    IllegalArgumentException(       "       ");    new    IllegalArgumentException(       "       ");    	non-compiled	[CE]  illegal  start  of  expression	180	None	replace
2456	[BUG]  [BUGGY]  if(available  >  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.next();  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.next();  }	  throw    new    IllegalArgumentException(       "       ");    new    IllegalArgumentException(       "       ");    	non-compiled	[CE]  illegal  start  of  expression	180	None	replace
2457	[BUG]  [BUGGY]  if(available  >  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  throw  new  IllegalArgumentException( " ");  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }	  throw    new    IllegalArgumentException(       "       ");    new    IllegalArgumentException(       "       ");    	non-compiled	[CE]  illegal  start  of  expression	180	None	replace
2458	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    0)    {    break;    }    while(skipped  >  0)  {  break;  }  if(skipped  <  0)  {  break;  }  while(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >        0)        {        break;        }        while(skipped    >    0)    {    break;    }    if(skipped  <  0)  {  break;  }  while(skipped  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	102	2	add
2459	[BUG]  [BUGGY]  if(skipped    >    0)    {    break;    }    while(skipped  >  0)  {  break;  }  if(skipped  <  0)  {  break;  }  while(skipped  >  0)  {  break;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    0)    {    break;    }    while(skipped  >  0)  {  break;  }  if(skipped  <  0)  {  break;  }  while(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >        0)        {        break;        }        while(skipped    >    0)    {    break;    }    if(skipped  <  0)  {  break;  }  while(skipped  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	102	2	add
2460	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    0)    {    break;    }    while(skipped  >  0)  {  break;  }  if(available  >  0)  {  break;  }  while(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >        0)        {        break;        }        while(skipped    >    0)    {    break;    }    if(available  >  0)  {  break;  }  while(available  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	102	2	add
2461	[BUG]  [BUGGY]  if(skipped    >    0)    {    break;    }    while(skipped  >  0)  {  break;  }  if(available  >  0)  {  break;  }  while(available  >  0)  {  break;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    0)    {    break;    }    while(skipped  >  0)  {  break;  }  if(available  >  0)  {  break;  }  while(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >        0)        {        break;        }        while(skipped    >    0)    {    break;    }    if(available  >  0)  {  break;  }  while(available  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	102	2	add
2462	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    0)    {    break;    }    while(skipped  >  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  while(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >        0)        {        break;        }        while(skipped    >    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  while(skipped  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	102	2	add
2463	[BUG]  [BUGGY]  if(skipped    >    0)    {    break;    }    while(skipped  >  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  while(skipped  >  0)  {  break;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    0)    {    break;    }    while(skipped  >  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  while(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >        0)        {        break;        }        while(skipped    >    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  while(skipped  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	102	2	add
2464	[BUG]  [BUGGY]  if(skipped    >    0)    {    break;    }    while(skipped  >  0)  {  break;  }  if(skip  >  0)  {  break;  }  while(skip  >  0)  {  break;  }  [CE]  cannot  find  symbol  skip  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    0)    {    break;    }    while(skipped  >  0)  {  break;  }  if(skip  >  0)  {  break;  }  while(skip  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >        0)        {        break;        }        while(skipped    >    0)    {    break;    }    if(skip  >  0)  {  break;  }  while(skip  >  0)  {  break;  }	  	non-compiled	[CE]  cannot  find  symbol  skip	102	None	add
2465	[BUG]  [BUGGY]  if(available  <  =  0)  {  break;  }  else  if(skipped  >=  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  =  0)  {  break;  }  else  if(skipped  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  =  0)  {  break;  }  else  if(skipped  >=  0)  {  break;  }	  if(skipped    >=    0)    {    break;    }    If(skipped    >=    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
2466	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >=  0)  {  break;  }  else  if(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >=  0)  {  break;  }  else  if(skipped  >  0)  {  break;  }	  if(skipped    >=    0)    {    break;    }    If(skipped    >=    0)    {    break;    }    	compilable	  [FE]  AssertionError  	45	2	replace
2467	[BUG]  [BUGGY]  if(available  >=  0)  {  break;  }  else  if(skipped  >  0)  {  break;  }  [FE]  AssertionError  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >=  0)  {  break;  }  else  if(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >=  0)  {  break;  }  else  if(skipped  >  0)  {  break;  }	  if(skipped    >=    0)    {    break;    }    If(skipped    >=    0)    {    break;    }    	compilable	  [FE]  AssertionError  	45	2	replace
2468	[BUG]  [BUGGY]  if(available  >  0)  {  available  =  input.read();  for(int  i  =  0;  i  <  numToSkip;  i++)  {  skipped  =  input.get(i);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  available  =  input.read();  for(int  i  =  0;  i  <  numToSkip;  i++)  {  skipped  =  input.get(i);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  available  =  input.read();  for(int  i  =  0;  i  <  numToSkip;  i++)  {  skipped  =  input.get(i);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	179	None	replace
2469	[BUG]  [BUGGY]  if(available  >  0)  {  available  =  input.skip();  for(int  i  =  0;  i  <  numToSkip;  i++)  {  skipped  =  input.get(i);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  available  =  input.skip();  for(int  i  =  0;  i  <  numToSkip;  i++)  {  skipped  =  input.get(i);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  available  =  input.skip();  for(int  i  =  0;  i  <  numToSkip;  i++)  {  skipped  =  input.get(i);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	179	None	replace
2470	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.get(0);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.get(0);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.get(0);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	179	None	replace
2471	[BUG]  [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  for(int  i  =  0;  i  <  numToSkip;  i++)  {  skipped  =  input.get(i);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  for(int  i  =  0;  i  <  numToSkip;  i++)  {  skipped  =  input.get(i);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  skipped  =  input.skip(available);  for(int  i  =  0;  i  <  numToSkip;  i++)  {  skipped  =  input.get(i);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	179	None	replace
2472	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  skipped  =  input.get(i);  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  skipped  =  input.get(i);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  skipped  =  input.get(i);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	179	None	replace
2473	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipd  =  input.get(i);  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipd  =  input.get(i);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipd  =  input.get(i);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	179	None	replace
2474	[BUG]  [BUGGY]  timeout  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(skipped  -  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped  =  input.skip(skipped  -  skipped);	  skipped    =    input.skip(available    -    skipped);    timeout    	compilable	timeout	188	1	replace
2475	[BUG]  [BUGGY]  skipped  =  input.skip(skipped  -  skipped);  timeout  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(skipped  -  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped  =  input.skip(skipped  -  skipped);	  skipped    =    input.skip(available    -    skipped);    timeout    	compilable	timeout	188	1	replace
2476	[BUG]  [BUGGY]  numToSkip  =  input.seek(available  +  skipped);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  numToSkip  =  input.seek(available  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	numToSkip  =  input.seek(available  +  skipped);	  numToSkip    =    input.skip(available    +    numToSkip);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
2477	[BUG]  [BUGGY]  pendingInput()  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  pendingInput()  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	pendingInput()  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  ';'  expected	52	None	replace
2478	[BUG]  [BUGGY]  pendingInput()  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  pendingInput()  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	pendingInput()  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  ';'  expected	52	None	replace
2479	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.getUpperBound();  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.getUpperBound();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.getUpperBound();  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
2480	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingException( " ");  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  aughtExceptionHandler.handleMissingException( " ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	aughtExceptionHandler.handleMissingException( " ");	  if(skipped    >=    0)    {    break;    }    if(skipped    <    0)    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	44	None	replace
2481	[BUG]  [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.nextToken();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.nextToken();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  skipped  =  input.skip(available);  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.nextToken();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.nextToken();    }    	non-compiled	[CE]  illegal  start  of  expression	231	None	replace
2482	[BUG]  [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  available  =  0;  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.nextToken();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  available  =  0;  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.nextToken();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  skipped  =  input.skip(available);  available  =  0;  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.nextToken();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.nextToken();    }    	non-compiled	[CE]  illegal  start  of  expression	231	None	replace
2483	[BUG]  [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  skipped  =  input.nextToken();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  skipped  =  input.nextToken();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  skipped  =  input.nextToken();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.nextToken();    }    	non-compiled	[CE]  illegal  start  of  expression	231	None	replace
2484	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  numToSkip  =  input.skip(available  +  numToSkip);  if(available  >  numToSkip)  {  numToSkip  =  input.skip(available  +  numToSkip);  }  else  {  numToSkip  =  input.skip(available  +  numToSkip);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	numToSkip    =    input.skip(available    +    numToSkip);    if(available  >  numToSkip)  {  numToSkip  =  input.skip(available  +  numToSkip);  }  else  {  numToSkip  =  input.skip(available  +  numToSkip);  }	  	compilable	  [FE]  AssertionError  	61	2	add
2485	[BUG]  [BUGGY]  numToSkip  =  input.skip(available  +  numToSkip);  if(available  >  numToSkip)  {  numToSkip  =  input.skip(available  +  numToSkip);  }  else  {  numToSkip  =  input.skip(available  +  numToSkip);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  numToSkip  =  input.skip(available  +  numToSkip);  if(available  >  numToSkip)  {  numToSkip  =  input.skip(available  +  numToSkip);  }  else  {  numToSkip  =  input.skip(available  +  numToSkip);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	numToSkip    =    input.skip(available    +    numToSkip);    if(available  >  numToSkip)  {  numToSkip  =  input.skip(available  +  numToSkip);  }  else  {  numToSkip  =  input.skip(available  +  numToSkip);  }	  	compilable	  [FE]  AssertionError  	61	2	add
2486	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  numToSkip  =  input.skip(available  +  numToSkip);  if(available  >  numToSkip)  {  numToSkip  =  input.skip(available  +  numToSkip);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	numToSkip    =    input.skip(available    +    numToSkip);    if(available  >  numToSkip)  {  numToSkip  =  input.skip(available  +  numToSkip);  }	  	compilable	  [FE]  AssertionError  	61	2	add
2487	[BUG]  [BUGGY]  numToSkip  =  input.skip(available  +  numToSkip);  if(available  >  numToSkip)  {  numToSkip  =  input.skip(available  +  numToSkip);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  numToSkip  =  input.skip(available  +  numToSkip);  if(available  >  numToSkip)  {  numToSkip  =  input.skip(available  +  numToSkip);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	numToSkip    =    input.skip(available    +    numToSkip);    if(available  >  numToSkip)  {  numToSkip  =  input.skip(available  +  numToSkip);  }	  	compilable	  [FE]  AssertionError  	61	2	add
2488	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  numToSkip  =  input.skip(available  +  numToSkip);  if(numToSkip  <  available)  {  numToSkip  =  input.skip(available  +  numToSkip);  }  else  {  numToSkip  =  input.skip(available  +  numToSkip);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	numToSkip    =    input.skip(available    +    numToSkip);    if(numToSkip  <  available)  {  numToSkip  =  input.skip(available  +  numToSkip);  }  else  {  numToSkip  =  input.skip(available  +  numToSkip);  }	  	compilable	  [FE]  AssertionError  	61	2	add
2489	[BUG]  [BUGGY]  numToSkip  =  input.skip(available  +  numToSkip);  if(numToSkip  <  available)  {  numToSkip  =  input.skip(available  +  numToSkip);  }  else  {  numToSkip  =  input.skip(available  +  numToSkip);  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  numToSkip  =  input.skip(available  +  numToSkip);  if(numToSkip  <  available)  {  numToSkip  =  input.skip(available  +  numToSkip);  }  else  {  numToSkip  =  input.skip(available  +  numToSkip);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	numToSkip    =    input.skip(available    +    numToSkip);    if(numToSkip  <  available)  {  numToSkip  =  input.skip(available  +  numToSkip);  }  else  {  numToSkip  =  input.skip(available  +  numToSkip);  }	  	compilable	  [FE]  AssertionError  	61	2	add
2490	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  numToSkip  =  input.skip(available  +  numToSkip);  if(numToSkip  <  available)  {  numToSkip  =  input.skip(available  +  numToSkip);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	numToSkip    =    input.skip(available    +    numToSkip);    if(numToSkip  <  available)  {  numToSkip  =  input.skip(available  +  numToSkip);  }	  	compilable	  [FE]  AssertionError  	61	2	add
2491	[BUG]  [BUGGY]  numToSkip  =  input.skip(available  +  numToSkip);  if(numToSkip  <  available)  {  numToSkip  =  input.skip(available  +  numToSkip);  }  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  numToSkip  =  input.skip(available  +  numToSkip);  if(numToSkip  <  available)  {  numToSkip  =  input.skip(available  +  numToSkip);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	numToSkip    =    input.skip(available    +    numToSkip);    if(numToSkip  <  available)  {  numToSkip  =  input.skip(available  +  numToSkip);  }	  	compilable	  [FE]  AssertionError  	61	2	add
2492	[BUG]  [BUGGY]  numToSkip  =  input.skip(available  +  numToSkip);  if(available  >  numToSkip)  {  numToSkip  =  input.skip(available  +  numToSkip);  }  else  {  int  numToSkip  =  input.skip(available  +  numToSkip);  }  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  numToSkip  =  input.skip(available  +  numToSkip);  if(available  >  numToSkip)  {  numToSkip  =  input.skip(available  +  numToSkip);  }  else  {  int  numToSkip  =  input.skip(available  +  numToSkip);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	numToSkip    =    input.skip(available    +    numToSkip);    if(available  >  numToSkip)  {  numToSkip  =  input.skip(available  +  numToSkip);  }  else  {  int  numToSkip  =  input.skip(available  +  numToSkip);  }	  	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	61	None	add
2493	[BUG]  [BUGGY]  skipped  =  input.skip(available  -  numToSkip);  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  -  numToSkip);  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    -    numToSkip);    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.next();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	74	None	add
2494	[BUG]  [BUGGY]  skipped  =  input.skip(available  -  numToSkip);  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  -  numToSkip);  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    -    numToSkip);    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.next();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	74	None	add
2495	[BUG]  [BUGGY]  skipped  =  input.skip(available  -  numToSkip);  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  -  numToSkip);  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    -    numToSkip);    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	74	None	add
2496	[BUG]  [BUGGY]  skipped  =  input.skip(available  -  numToSkip);  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  -  numToSkip);  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    -    numToSkip);    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	74	None	add
2497	[BUG]  [BUGGY]  skipped  =  input.skip(available  -  numToSkip);  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.read();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  -  numToSkip);  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    -    numToSkip);    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.read();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	74	None	add
2498	[BUG]  [BUGGY]  skipped  =  input.skip(available  -  numToSkip);  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.read();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  -  numToSkip);  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    -    numToSkip);    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.read();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	74	None	add
2499	[BUG]  [BUGGY]  if(available  >  skipd)  {  break;  }  [CE]  cannot  find  symbol  skipd  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipd)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skipd)  {  break;  }	  if(available    >    sink)    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  skipd	51	None	replace
2500	[BUG]  [BUGGY]  skipped  =  input.skip(available  *  numToSkip);  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  *  numToSkip);  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    *    numToSkip);    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.next();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	76	None	add
2501	[BUG]  [BUGGY]  skipped  =  input.skip(available  *  numToSkip);  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  *  numToSkip);  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    *    numToSkip);    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.next();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	76	None	add
2502	[BUG]  [BUGGY]  skipped  =  input.skip(available  *  numToSkip);  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skip(available  *  numToSkip);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  *  numToSkip);  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skip(available  *  numToSkip);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    *    numToSkip);    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skip(available  *  numToSkip);  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	76	None	add
2503	[BUG]  [BUGGY]  skipped  =  input.skip(available  *  numToSkip);  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  *  numToSkip);  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    *    numToSkip);    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	76	None	add
2504	[BUG]  [BUGGY]  skipped  =  input.skip(available  *  numToSkip);  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  *  numToSkip);  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    *    numToSkip);    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	76	None	add
2505	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "skipped:   "  +  available);  System.err.println( "skipped:   "  +  available);  [CE]  unreachable  statement  [FE]    IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "skipped:   "  +  available);  System.err.println( "skipped:   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalStateException(   "skipped:   "    +    available);    System.err.println( "skipped:   "  +  available);	  	non-compiled	[CE]  unreachable  statement	143	None	add
2506	[BUG]  [BUGGY]  throw  new  IOException(   "skipped  in  the  stream.   ");  System.err.println( "skipped  in  the  stream.   ");  [CE]  unreachable  statement  [FE]    IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException(   "skipped  in  the  stream.   ");  System.err.println( "skipped  in  the  stream.   ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IOException(   "skipped    in    the    stream.   ");    System.err.println( "skipped  in  the  stream.   ");	  	non-compiled	[CE]  unreachable  statement	221	None	add
2507	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  skipped  =  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  0)  {  skipped  =  input.read();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.read();    }    	compilable	  [FE]  AssertionError  	230	2	replace
2508	[BUG]  [BUGGY]  if(available  >  0)  {  skipped  =  input.read();  }  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  skipped  =  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  skipped  =  input.read();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.read();    }    	compilable	  [FE]  AssertionError  	230	2	replace
2509	[BUG]  [BUGGY]  int  available  =  input.read();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  int  available  =  input.read();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	int  available  =  input.read();	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.read();    }    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	230	None	replace
2510	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipd  =  input.read();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipd  =  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipd  =  input.read();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	230	None	replace
2511	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  skipped  =  input.read();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  0)  {  skipped  =  input.read();  }  else  {  throw  new  IllegalStateException( " ");  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.read();    }    	compilable	  [FE]  AssertionError  	230	2	replace
2512	[BUG]  [BUGGY]  if(available  >  0)  {  skipped  =  input.read();  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  AssertionError  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  skipped  =  input.read();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  skipped  =  input.read();  }  else  {  throw  new  IllegalStateException( " ");  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.read();    }    	compilable	  [FE]  AssertionError  	230	2	replace
2513	[BUG]  [BUGGY]  if(available  >  0)  {  skipped  =  input.skip();  }  [CE]  method  skip  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  skipped  =  input.skip();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  skipped  =  input.skip();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.read();    }    	non-compiled	[CE]  method  skip  in  class  InputStream  cannot  be  applied  to  given  types;	230	None	replace
2514	[BUG]  [BUGGY]  if(summary  >  0)  {  break;  }  [CE]  cannot  find  symbol  summary  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(summary  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(summary  >  0)  {  break;  }	  if(skip    >    0)    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  summary	11	None	replace
2515	[BUG]  [BUGGY]  if(switched  >  0)  {  break;  }  [CE]  cannot  find  symbol  switched  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(switched  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(switched  >  0)  {  break;  }	  if(skip    >    0)    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  switched	11	None	replace
2516	[BUG]  [BUGGY]  if(switch  >=  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(switch  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(switch  >=  0)  {  break;  }	  if(skip    >=    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	247	None	replace
2517	[BUG]  [BUGGY]  if(skipped  >>  0)  {  break;  }  [CE]  incompatible  types  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >>  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >>  0)  {  break;  }	  if(skip    >=    0)    {    break;    }    	non-compiled	[CE]  incompatible  types	247	None	replace
2518	[BUG]  [BUGGY]  if(skipped  >  0)  {  break;  }  else  {  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  break;  }  else  {  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  break;  }  else  {  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  }	  if(available    >    0)    {    break;    }    if(available    >    0)    {    break;    System.arraycopy(input,    0,    available,    numToSkip,    skipped);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	209	None	replace
2519	[BUG]  [BUGGY]  if(skipped  >  0)  {  break;  }  int  available  =  input.read(available);  if(available  >  0)  {  break;  }  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  break;  }  int  available  =  input.read(available);  if(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  break;  }  int  available  =  input.read(available);  if(available  >  0)  {  break;  }	  if(available    >    0)    {    break;    }    int    available    =    input.read(skipped);    if(available    >    0)    {    break;    }    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	207	None	replace
2520	[BUG]  [BUGGY]  if(skip  >  0)  {  break;  }  int  available  =  input.read(skipped);  if(available  >  0)  {  break;  }  [CE]  cannot  find  symbol  skip  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skip  >  0)  {  break;  }  int  available  =  input.read(skipped);  if(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skip  >  0)  {  break;  }  int  available  =  input.read(skipped);  if(available  >  0)  {  break;  }	  if(available    >    0)    {    break;    }    int    available    =    input.read(skipped);    if(available    >    0)    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  skip	207	None	replace
2521	[BUG]  [BUGGY]  if(skip  >  0)  {  break;  }  int  available  =  input.read(available);  if(available  >  0)  {  break;  }  [CE]  cannot  find  symbol  skip  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skip  >  0)  {  break;  }  int  available  =  input.read(available);  if(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skip  >  0)  {  break;  }  int  available  =  input.read(available);  if(available  >  0)  {  break;  }	  if(available    >    0)    {    break;    }    int    available    =    input.read(skipped);    if(available    >    0)    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  skip	207	None	replace
2522	[BUG]  [BUGGY]  if(skip  >  0)  {  break;  }  available  =  input.read(skipped);  if(available  >  0)  {  break;  }  [CE]  cannot  find  symbol  skip  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skip  >  0)  {  break;  }  available  =  input.read(skipped);  if(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skip  >  0)  {  break;  }  available  =  input.read(skipped);  if(available  >  0)  {  break;  }	  if(available    >    0)    {    break;    }    int    available    =    input.read(skipped);    if(available    >    0)    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  skip	207	None	replace
2523	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getMillis();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getMillis();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getMillis();  }	  continue;    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.getSize();    }    	non-compiled	[CE]  illegal  start  of  expression	269	None	replace
2524	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getImpl();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getImpl();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getImpl();  }	  continue;    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.getSize();    }    	non-compiled	[CE]  illegal  start  of  expression	269	None	replace
2525	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getRead();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getRead();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getRead();  }	  continue;    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.getSize();    }    	non-compiled	[CE]  illegal  start  of  expression	269	None	replace
2526	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getRawOffset();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getRawOffset();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getRawOffset();  }	  continue;    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.getSize();    }    	non-compiled	[CE]  illegal  start  of  expression	269	None	replace
2527	[BUG]  [BUGGY]  if(available  >  0)  {  available  =  input.read();  for(int  i  =  0;  i  <  numToSkip;  i++)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  available  =  input.read();  for(int  i  =  0;  i  <  numToSkip;  i++)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  available  =  input.read();  for(int  i  =  0;  i  <  numToSkip;  i++)  {  skipped  =  input.next();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.skip(available);    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
2528	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  input.toString());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalArgumentException( " "  +  input.toString());	  throw    new    IllegalArgumentException(   "   "    +    skipped);    	compilable	  [FE]  IllegalArgumentException  	170	2	replace
2529	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  input.toString());  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  input.toString());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException( " "  +  input.toString());	  throw    new    IllegalArgumentException(   "   "    +    skipped);    	compilable	  [FE]  IllegalArgumentException  	170	2	replace
2530	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  input.getClass());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalArgumentException( " "  +  input.getClass());	  throw    new    IllegalArgumentException(   "   "    +    skipped);    	compilable	  [FE]  IllegalArgumentException  	170	2	replace
2531	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  input.getClass());  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  input.getClass());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException( " "  +  input.getClass());	  throw    new    IllegalArgumentException(   "   "    +    skipped);    	compilable	  [FE]  IllegalArgumentException  	170	2	replace
2532	[BUG]  [BUGGY]  pendingReturn(1)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  i;  }  [CE]  ';'  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  pendingReturn(1)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  i;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	pendingReturn(1)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  i;  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    i;    }    	non-compiled	[CE]  ';'  expected	56	None	replace
2533	[BUG]  [BUGGY]  pendingReturn(1)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  skipped;  }  [CE]  ';'  expected  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  pendingReturn(1)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  skipped;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	pendingReturn(1)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  skipped;  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    i;    }    	non-compiled	[CE]  ';'  expected	56	None	replace
2534	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  i;  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  i;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  i;  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    i;    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
2535	[BUG]  [BUGGY]  [Delete]  else  if(available  >  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  [Delete]  else  if(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	[Delete]  else  if(available  >  0)  {  break;  }	  if(available    >    0)    {    break;    }    if(available    >    0)    {    break;    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
2536	[BUG]  [BUGGY]  throw  new  IOException(   "   "  +  available);  if(  available  >  0)  {  throw  new  IOException(   "   "  +  available);  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException(   "   "  +  available);  if(  available  >  0)  {  throw  new  IOException(   "   "  +  available);  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IOException(   "   "    +    available);    if(  available  >  0)  {  throw  new  IOException(   "   "  +  available);  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }	  	non-compiled	[CE]  illegal  start  of  expression	159	None	add
2537	[BUG]  [BUGGY]  throw  new  IOException(   "   "  +  available);  if(  available  >  0)  {  throw  new  IOException(   "   "  +  available);  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  =  input.read();  }  [CE]  illegal  start  of  expression  [FE]      IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException(   "   "  +  available);  if(  available  >  0)  {  throw  new  IOException(   "   "  +  available);  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  =  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IOException(   "   "    +    available);    if(  available  >  0)  {  throw  new  IOException(   "   "  +  available);  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  =  input.read();  }	  	non-compiled	[CE]  illegal  start  of  expression	159	None	add
2538	[BUG]  [BUGGY]  throw  new  IOException(   "   "  +  available);  if(  available  >  0)  {  throw  new  IOException(   "   "  +  available);  }  else  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException(   "   "  +  available);  if(  available  >  0)  {  throw  new  IOException(   "   "  +  available);  }  else  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IOException(   "   "    +    available);    if(  available  >  0)  {  throw  new  IOException(   "   "  +  available);  }  else  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  	non-compiled	[CE]  illegal  start  of  expression	159	None	add
2539	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  break;  }  else  if(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped  >  0)  {  break;  }  else  if(available  >  0)  {  break;  }	  if(skipped    >    0)    {    break;    }    if(skip    >    0)    {    break;    }    	compilable	  [FE]  AssertionError  	161	2	replace
2540	[BUG]  [BUGGY]  if(skipped  >  0)  {  break;  }  else  if(available  >  0)  {  break;  }  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  break;  }  else  if(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  break;  }  else  if(available  >  0)  {  break;  }	  if(skipped    >    0)    {    break;    }    if(skip    >    0)    {    break;    }    	compilable	  [FE]  AssertionError  	161	2	replace
2541	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  numToSkip)  {  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  numToSkip)  {	  if(skipped    >    0)    {    break;    }    while(skipped    >    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
2542	[BUG]  [BUGGY]  timeout  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  }  while(skipped  >  0)  {  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	}  while(skipped  >  0)  {	  if(skipped    >    0)    {    break;    }    while(skipped    >    0)    {    break;    }    	compilable	timeout	103	1	replace
2543	[BUG]  [BUGGY]  }  while(skipped  >  0)  {  timeout  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  }  while(skipped  >  0)  {  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	}  while(skipped  >  0)  {	  if(skipped    >    0)    {    break;    }    while(skipped    >    0)    {    break;    }    	compilable	timeout	103	1	replace
2544	[BUG]  [BUGGY]  timeout  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  }  while(skipped  >  0)  {  break;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	}  while(skipped  >  0)  {  break;	  if(skipped    >    0)    {    break;    }    while(skipped    >    0)    {    break;    }    	compilable	timeout	103	1	replace
2545	[BUG]  [BUGGY]  }  while(skipped  >  0)  {  break;  timeout  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  }  while(skipped  >  0)  {  break;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	}  while(skipped  >  0)  {  break;	  if(skipped    >    0)    {    break;    }    while(skipped    >    0)    {    break;    }    	compilable	timeout	103	1	replace
2546	[BUG]  [BUGGY]  timeout  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  }  while(available  >  0)  {  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	}  while(available  >  0)  {	  if(skipped    >    0)    {    break;    }    while(skipped    >    0)    {    break;    }    	compilable	timeout	103	1	replace
2547	[BUG]  [BUGGY]  }  while(available  >  0)  {  timeout  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  }  while(available  >  0)  {  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	}  while(available  >  0)  {	  if(skipped    >    0)    {    break;    }    while(skipped    >    0)    {    break;    }    	compilable	timeout	103	1	replace
2548	[BUG]  [BUGGY]  >>  [Delete]  else  if(available  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  >>  [Delete]  else  if(available  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	>>  [Delete]  else  if(available  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(available    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	167	None	replace
2549	[BUG]  [BUGGY]  aught(InputStream.MILLIS_PER_SIZE,  available)>  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]      IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  aught(InputStream.MILLIS_PER_SIZE,  available)>  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	aught(InputStream.MILLIS_PER_SIZE,  available)>  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(available    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	167	None	replace
2550	[BUG]  [BUGGY]  aught(InputStream.MILLIS_PER_SECOND,  available)>  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]        IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  aught(InputStream.MILLIS_PER_SECOND,  available)>  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	aught(InputStream.MILLIS_PER_SECOND,  available)>  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(available    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	167	None	replace
2551	[BUG]  [BUGGY]  >>  [Delete]  else  if(available  >  0)  {  throw  new  IllegalArgumentException( " ".equalsIgnoreCase(available));  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  >>  [Delete]  else  if(available  >  0)  {  throw  new  IllegalArgumentException( " ".equalsIgnoreCase(available));  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	>>  [Delete]  else  if(available  >  0)  {  throw  new  IllegalArgumentException( " ".equalsIgnoreCase(available));  }	  if(available    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	167	None	replace
2552	[BUG]  [BUGGY]  >>  [Delete]  else  if(available  >  0)  {  throw  new  IllegalArgumentException( " ".equals(available.getBytes()));  }  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  >>  [Delete]  else  if(available  >  0)  {  throw  new  IllegalArgumentException( " ".equals(available.getBytes()));  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	>>  [Delete]  else  if(available  >  0)  {  throw  new  IllegalArgumentException( " ".equals(available.getBytes()));  }	  if(available    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	167	None	replace
2553	[BUG]  [BUGGY]  >>  [Delete]  else  if(available  >  0)  {  throw  new  IllegalArgumentException( " ".equalsIgnoreCase(available);  }  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  >>  [Delete]  else  if(available  >  0)  {  throw  new  IllegalArgumentException( " ".equalsIgnoreCase(available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	>>  [Delete]  else  if(available  >  0)  {  throw  new  IllegalArgumentException( " ".equalsIgnoreCase(available);  }	  if(available    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	167	None	replace
2554	[BUG]  [BUGGY]  System.arraycopy(input,  numToSkip,  available,  skipped,  -1);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]        IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.arraycopy(input,  numToSkip,  available,  skipped,  -1);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	System.arraycopy(input,  numToSkip,  available,  skipped,  -1);	  throw    new    IllegalStateException(       "       ");    System.arraycopy(input,    numToSkip,    available,    skipped);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	235	None	replace
2555	[BUG]  [BUGGY]  System.arraycopy(input,  numToSkip,  available,  skipped,  chunk);  [CE]  cannot  find  symbol  chunk  [FE]          IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.arraycopy(input,  numToSkip,  available,  skipped,  chunk);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	System.arraycopy(input,  numToSkip,  available,  skipped,  chunk);	  throw    new    IllegalStateException(       "       ");    System.arraycopy(input,    numToSkip,    available,    skipped);    	non-compiled	[CE]  cannot  find  symbol  chunk	235	None	replace
2556	[BUG]  [BUGGY]  System.arraycopy(input,  numToSkip,  available,  skipped,  bufsize);  [CE]  cannot  find  symbol  bufsize  [FE]            IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.arraycopy(input,  numToSkip,  available,  skipped,  bufsize);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	System.arraycopy(input,  numToSkip,  available,  skipped,  bufsize);	  throw    new    IllegalStateException(       "       ");    System.arraycopy(input,    numToSkip,    available,    skipped);    	non-compiled	[CE]  cannot  find  symbol  bufsize	235	None	replace
2557	[BUG]  [BUGGY]  if(available  >  0)  {  throw  new  IllegalStateException( " ");  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getLongValue();  }  [CE]  illegal  start  of  expression  [FE]          IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IllegalStateException( " ");  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getLongValue();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  throw  new  IllegalStateException( " ");  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getLongValue();  }	  throw    new    IllegalStateException(       "       ");    Throw    new    IllegalStateException(       "       ");    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
2558	[BUG]  [BUGGY]  if(skipped  <  available)  {  break;  }  if(skip  <  available)  {  break;  }  [CE]  cannot  find  symbol  skip  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  <  available)  {  break;  }  if(skip  <  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped    <    available)    {    break;    }    if(skip  <  available)  {  break;  }	  	non-compiled	[CE]  cannot  find  symbol  skip	49	None	add
2559	[BUG]  [BUGGY]  if(skipped  >  0  ||  available  <  =  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0  ||  available  <  =  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0  ||  available  <  =  0)  {  break;  }	  if(available    >    0    ||    skipped    <    =    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	257	None	replace
2560	[BUG]  [BUGGY]  if(skip  >  0  ||  skipped  <  =  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skip  >  0  ||  skipped  <  =  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skip  >  0  ||  skipped  <  =  0)  {  break;  }	  if(available    >    0    ||    skipped    <    =    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	257	None	replace
2561	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Skipped  =   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalStateException( "Skipped  =   "  +  skipped);	  throw    new    IllegalStateException(   "skipped    =       "    +    available);    	compilable	  [FE]  IllegalStateException  	142	2	replace
2562	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Skipped  =   "  +  skipped);  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Skipped  =   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "Skipped  =   "  +  skipped);	  throw    new    IllegalStateException(   "skipped    =       "    +    available);    	compilable	  [FE]  IllegalStateException  	142	2	replace
2563	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Skip  skipped  =   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalStateException( "Skip  skipped  =   "  +  available);	  throw    new    IllegalStateException(   "skipped    =       "    +    available);    	compilable	  [FE]  IllegalStateException  	142	2	replace
2564	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Skip  skipped  =   "  +  available);  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Skip  skipped  =   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "Skip  skipped  =   "  +  available);	  throw    new    IllegalStateException(   "skipped    =       "    +    available);    	compilable	  [FE]  IllegalStateException  	142	2	replace
2565	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ")  :  input.getMessage();  [CE]  [FE]        IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( " ")  :  input.getMessage();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( " ")  :  input.getMessage();	  throw    new    IllegalStateException(   "   ".getMessage());    	non-compiled	[CE]  	135	None	replace
2566	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "),  input.getMessage());  [CE]  [FE]          IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( " "),  input.getMessage());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( " "),  input.getMessage());	  throw    new    IllegalStateException(   "   ".getMessage());    	non-compiled	[CE]  	135	None	replace
2567	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Input  stream  is  less  than  1: "  +  input.getMessage());  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Input  stream  is  less  than  1: "  +  input.getMessage());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "Input  stream  is  less  than  1: "  +  input.getMessage());	  throw    new    IllegalStateException(   "   ".getMessage());    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
2568	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  =  input.skip(available);  available  =  0;  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read(available);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  skipped  =  input.skip(available);  available  =  0;  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read(available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  skipped  =  input.skip(available);  available  =  0;  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.read(available);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    skipped    =    input.read(available);    }    	non-compiled	[CE]  illegal  start  of  expression	232	None	replace
2569	[BUG]  [BUGGY]  if(skip  ==  0)  {  break;  }  [CE]  cannot  find  symbol  skip  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skip  ==  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skip  ==  0)  {  break;  }	  if(skipped    ==    0)    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  skip	249	None	replace
2570	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skip();  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skip();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.skip();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    skipped    =    input.skip(available);    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
2571	[BUG]  [BUGGY]  if(available  >  0)  {  available  =  input.read();  for(int  i  =  0;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  available  =  input.read();  for(int  i  =  0;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  available  =  input.read();  for(int  i  =  0;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    skipped    =    input.skip(available);    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
2572	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }	  continue;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
2573	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }	  continue;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
2574	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    0)    {    break;    }    if(skipped  >  0)  {  break;  }  if(skipped  <  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >        0)        {        break;        }        if(skipped    >    0)    {    break;    }    if(skipped  <  0)  {  break;  }  if(skipped  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	98	2	add
2575	[BUG]  [BUGGY]  if(skipped    >    0)    {    break;    }    if(skipped  >  0)  {  break;  }  if(skipped  <  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    0)    {    break;    }    if(skipped  >  0)  {  break;  }  if(skipped  <  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >        0)        {        break;        }        if(skipped    >    0)    {    break;    }    if(skipped  <  0)  {  break;  }  if(skipped  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	98	2	add
2576	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    0)    {    break;    }    if(skipped  >  0)  {  break;  }  if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >        0)        {        break;        }        if(skipped    >    0)    {    break;    }    if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	98	2	add
2577	[BUG]  [BUGGY]  if(skipped    >    0)    {    break;    }    if(skipped  >  0)  {  break;  }  if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    0)    {    break;    }    if(skipped  >  0)  {  break;  }  if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >        0)        {        break;        }        if(skipped    >    0)    {    break;    }    if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	98	2	add
2578	[BUG]  [BUGGY]  if(skipped    >    0)    {    break;    }    if(skipped  >  0)  {  break;  }  if(skipped  <  =  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    0)    {    break;    }    if(skipped  >  0)  {  break;  }  if(skipped  <  =  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >        0)        {        break;        }        if(skipped    >    0)    {    break;    }    if(skipped  <  =  0)  {  break;  }  if(skipped  >  0)  {  break;  }	  	non-compiled	[CE]  illegal  start  of  expression	98	None	add
2579	[BUG]  [BUGGY]  if(skipped    >    0)    {    break;    }    if(skipped  >  0)  {  break;  }  if(skip  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [CE]  cannot  find  symbol  skip  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    0)    {    break;    }    if(skipped  >  0)  {  break;  }  if(skip  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >        0)        {        break;        }        if(skipped    >    0)    {    break;    }    if(skip  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }	  	non-compiled	[CE]  cannot  find  symbol  skip	98	None	add
2580	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    0)    {    break;    }    if(skipped  >  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >        0)        {        break;        }        if(skipped    >    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	98	2	add
2581	[BUG]  [BUGGY]  if(skipped    >    0)    {    break;    }    if(skipped  >  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    0)    {    break;    }    if(skipped  >  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >        0)        {        break;        }        if(skipped    >    0)    {    break;    }    if(skipped  >=  0)  {  break;  }  if(skipped  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	98	2	add
2582	[BUG]  [BUGGY]  int  numToSkip  =  input.read();  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  int  numToSkip  =  input.read();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	int  numToSkip  =  input.read();	  continue;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	271	None	replace
2583	[BUG]  [BUGGY]  long  skipped  =  input.read();  [CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  long  skipped  =  input.read();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	long  skipped  =  input.read();	  continue;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)	271	None	replace
2584	[BUG]  [BUGGY]  if(skipped  <  =  0  ||  available  >  numToSkip)  {  break;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  <  =  0  ||  available  >  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  <  =  0  ||  available  >  numToSkip)  {  break;  }	  if(skipped    <    =    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
2585	[BUG]  [BUGGY]  new  IOException( " ".equals(available));  [CE]  no  suitable  constructor  found  for  IOException(boolean)  [FE]        IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  new  IOException( " ".equals(available));  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	new  IOException( " ".equals(available));	  throw    new    IOException(       "       ");    new    IOException(       "       ");    	non-compiled	[CE]  no  suitable  constructor  found  for  IOException(boolean)	164	None	replace
2586	[BUG]  [BUGGY]  timeout  [FE]          IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.err.println( "Usage:  SKIP_BUF_SIZE  ( ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	System.err.println( "Usage:  SKIP_BUF_SIZE  ( ");	  throw    new    IOException(       "       ");    System.err.println(   "Usage:    SKIP_BUF_SIZE       ");    	compilable	timeout	264	1	replace
2587	[BUG]  [BUGGY]  System.err.println( "Usage:  SKIP_BUF_SIZE  ( ");  timeout  [FE]          IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.err.println( "Usage:  SKIP_BUF_SIZE  ( ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	System.err.println( "Usage:  SKIP_BUF_SIZE  ( ");	  throw    new    IOException(       "       ");    System.err.println(   "Usage:    SKIP_BUF_SIZE       ");    	compilable	timeout	264	1	replace
2588	[BUG]  [BUGGY]  timeout  [FE]            IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.err.println( "Usage:  SKIP_BUF_SIZE  ( "  +  available  + ") ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	System.err.println( "Usage:  SKIP_BUF_SIZE  ( "  +  available  + ") ");	  throw    new    IOException(       "       ");    System.err.println(   "Usage:    SKIP_BUF_SIZE       ");    	compilable	timeout	264	1	replace
2589	[BUG]  [BUGGY]  System.err.println( "Usage:  SKIP_BUF_SIZE  ( "  +  available  + ") ");  timeout  [FE]            IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.err.println( "Usage:  SKIP_BUF_SIZE  ( "  +  available  + ") ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	System.err.println( "Usage:  SKIP_BUF_SIZE  ( "  +  available  + ") ");	  throw    new    IOException(       "       ");    System.err.println(   "Usage:    SKIP_BUF_SIZE       ");    	compilable	timeout	264	1	replace
2590	[BUG]  [BUGGY]  timeout  [FE]              IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.err.println( "Usage:  SKIP_BUF_SIZE:  missing ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	System.err.println( "Usage:  SKIP_BUF_SIZE:  missing ");	  throw    new    IOException(       "       ");    System.err.println(   "Usage:    SKIP_BUF_SIZE       ");    	compilable	timeout	264	1	replace
2591	[BUG]  [BUGGY]  System.err.println( "Usage:  SKIP_BUF_SIZE:  missing ");  timeout  [FE]              IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.err.println( "Usage:  SKIP_BUF_SIZE:  missing ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	System.err.println( "Usage:  SKIP_BUF_SIZE:  missing ");	  throw    new    IOException(       "       ");    System.err.println(   "Usage:    SKIP_BUF_SIZE       ");    	compilable	timeout	264	1	replace
2592	[BUG]  [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  for(int  i  =  0;  i  <  numToSkip;  i++)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  for(int  i  =  0;  i  <  numToSkip;  i++)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  skipped  =  input.skip(available);  for(int  i  =  0;  i  <  numToSkip;  i++)  {  skipped  =  input.next();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
2593	[BUG]  [BUGGY]  pendingReturn(1)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getBytes(i);  }  [CE]  ';'  expected  [FE]                                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  pendingReturn(1)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getBytes(i);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	pendingReturn(1)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getBytes(i);  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.getBytes(i);    }    	non-compiled	[CE]  ';'  expected	229	None	replace
2594	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  ++i)  {  available  +=  input.getBytes();  }  [CE]  illegal  start  of  expression  [FE]                                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  ++i)  {  available  +=  input.getBytes();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  ++i)  {  available  +=  input.getBytes();  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.getBytes(i);    }    	non-compiled	[CE]  illegal  start  of  expression	229	None	replace
2595	[BUG]  [BUGGY]  skipped  =  input.skip(available  +  numToSkip);  int  numToSkip  =  input.lastIndexOf(available);  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  +  numToSkip);  int  numToSkip  =  input.lastIndexOf(available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    +    numToSkip);    int  numToSkip  =  input.lastIndexOf(available);	  timeout    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	59	None	add
2596	[BUG]  [BUGGY]  skipped  =  input.skip(available  +  numToSkip);  int  numToSkip  =  input.lastIndexOf(skipped);  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  +  numToSkip);  int  numToSkip  =  input.lastIndexOf(skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    +    numToSkip);    int  numToSkip  =  input.lastIndexOf(skipped);	  timeout    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	59	None	add
2597	[BUG]  [BUGGY]  skipped  =  input.skip(available  +  numToSkip);  int  numToSkip  =  input.getCount();  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  +  numToSkip);  int  numToSkip  =  input.getCount();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    +    numToSkip);    int  numToSkip  =  input.getCount();	  timeout    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	59	None	add
2598	[BUG]  [BUGGY]  if(skipped  >  0  ||  skipped  >  0)  {  break  available;  }  [CE]  undefined  label:  available  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0  ||  skipped  >  0)  {  break  available;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0  ||  skipped  >  0)  {  break  available;  }	  if(skipped    >    0)    {    break    available;    }    	non-compiled	[CE]  undefined  label:  available	199	None	replace
2599	[BUG]  [BUGGY]  if(skipped  >  0  ||  skipped  <  available)  {  break  available;  }  [CE]  undefined  label:  available  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0  ||  skipped  <  available)  {  break  available;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0  ||  skipped  <  available)  {  break  available;  }	  if(skipped    >    0)    {    break    available;    }    	non-compiled	[CE]  undefined  label:  available	199	None	replace
2600	[BUG]  [BUGGY]  timeout  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  return  available;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped  >  0)  {  return  available;  }	  if(skipped    >    0)    {    break    available;    }    	compilable	timeout	199	1	replace
2601	[BUG]  [BUGGY]  if(skipped  >  0)  {  return  available;  }  timeout  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  return  available;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  return  available;  }	  if(skipped    >    0)    {    break    available;    }    	compilable	timeout	199	1	replace
2602	[BUG]  [BUGGY]  if(skipped  >  0)  {  break  available  +  skipped;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  break  available  +  skipped;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  break  available  +  skipped;  }	  if(skipped    >    0)    {    break    available;    }    	non-compiled	[CE]  ';'  expected	199	None	replace
2603	[BUG]  [BUGGY]  continue;  skipped  =  input.skip(skipped  -  numToSkip);  [CE]  unreachable  statement  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  continue;  skipped  =  input.skip(skipped  -  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	continue;  skipped  =  input.skip(skipped  -  numToSkip);	  continue;    long    skipped    =    input.skip(skipped);    	non-compiled	[CE]  unreachable  statement	15	None	replace
2604	[BUG]  [BUGGY]  continue;  skipped  =  input.skip(skipped);  [CE]  unreachable  statement  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  continue;  skipped  =  input.skip(skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	continue;  skipped  =  input.skip(skipped);	  continue;    long    skipped    =    input.skip(skipped);    	non-compiled	[CE]  unreachable  statement	15	None	replace
2605	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( " "  +  input.getClass());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IOException( " "  +  input.getClass());	  throw    new    IOException(   "   "    +    available);    	compilable	  [FE]  IOException  	160	2	replace
2606	[BUG]  [BUGGY]  throw  new  IOException( " "  +  input.getClass());  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( " "  +  input.getClass());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( " "  +  input.getClass());	  throw    new    IOException(   "   "    +    available);    	compilable	  [FE]  IOException  	160	2	replace
2607	[BUG]  [BUGGY]  pendingTail()  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]    IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  pendingTail()  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	pendingTail()  {  throw  new  IllegalStateException( " ");  }	  if(available    >    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	172	None	replace
2608	[BUG]  [BUGGY]  pendingTry()  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]      IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  pendingTry()  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	pendingTry()  {  throw  new  IllegalStateException( " ");  }	  if(available    >    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	172	None	replace
2609	[BUG]  [BUGGY]  pendingtries  |=  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]        IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  pendingtries  |=  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	pendingtries  |=  0)  {  throw  new  IllegalStateException( " ");  }	  if(available    >    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	172	None	replace
2610	[BUG]  [BUGGY]  pendingTwins  =  new  LinkedHashMap  <  Long,Integer>();  [CE]  cannot  find  symbol  pendingTwins  [FE]          IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  pendingTwins  =  new  LinkedHashMap  <  Long,Integer>();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	pendingTwins  =  new  LinkedHashMap  <  Long,Integer>();	  if(available    >    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  pendingTwins	172	None	replace
2611	[BUG]  [BUGGY]  pendingTwins  =  new  LinkedHashMap  <  Long,Integer>(available);  [CE]  cannot  find  symbol  pendingTwins  [FE]            IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  pendingTwins  =  new  LinkedHashMap  <  Long,Integer>(available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	pendingTwins  =  new  LinkedHashMap  <  Long,Integer>(available);	  if(available    >    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  pendingTwins	172	None	replace
2612	[BUG]  [BUGGY]  pendingTwins  =  new  LinkedHashMap  <  String,Integer>(available));  [CE]  ';'  expected  [FE]              IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  pendingTwins  =  new  LinkedHashMap  <  String,Integer>(available));  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	pendingTwins  =  new  LinkedHashMap  <  String,Integer>(available));	  if(available    >    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  ';'  expected	172	None	replace
2613	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "skipped  =     "  +  skipped);  System.err.println( "skipped  =   "  +  skipped);  [CE]  unreachable  statement  [FE]    IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "skipped  =     "  +  skipped);  System.err.println( "skipped  =   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalStateException(   "skipped    =       "    +    skipped);    System.err.println( "skipped  =   "  +  skipped);	  	non-compiled	[CE]  unreachable  statement	139	None	add
2614	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    available)    {    break;    }    while(skipped  >  available)  {  break;  }  if(skipped  >=  available)  {  break;  }  while(skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >        available)        {        break;        }        while(skipped    >    available)    {    break;    }    if(skipped  >=  available)  {  break;  }  while(skipped  >  available)  {  break;  }	  	compilable	  [FE]  AssertionError  	85	2	add
2615	[BUG]  [BUGGY]  if(skipped    >    available)    {    break;    }    while(skipped  >  available)  {  break;  }  if(skipped  >=  available)  {  break;  }  while(skipped  >  available)  {  break;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    available)    {    break;    }    while(skipped  >  available)  {  break;  }  if(skipped  >=  available)  {  break;  }  while(skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >        available)        {        break;        }        while(skipped    >    available)    {    break;    }    if(skipped  >=  available)  {  break;  }  while(skipped  >  available)  {  break;  }	  	compilable	  [FE]  AssertionError  	85	2	add
2616	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    available)    {    break;    }    while(skipped  >  available)  {  break;  }  if(skipped  ==  available)  {  break;  }  while(skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >        available)        {        break;        }        while(skipped    >    available)    {    break;    }    if(skipped  ==  available)  {  break;  }  while(skipped  >  available)  {  break;  }	  	compilable	  [FE]  AssertionError  	85	2	add
2617	[BUG]  [BUGGY]  if(skipped    >    available)    {    break;    }    while(skipped  >  available)  {  break;  }  if(skipped  ==  available)  {  break;  }  while(skipped  >  available)  {  break;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    available)    {    break;    }    while(skipped  >  available)  {  break;  }  if(skipped  ==  available)  {  break;  }  while(skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >        available)        {        break;        }        while(skipped    >    available)    {    break;    }    if(skipped  ==  available)  {  break;  }  while(skipped  >  available)  {  break;  }	  	compilable	  [FE]  AssertionError  	85	2	add
2618	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    available)    {    break;    }    while(skipped  >  available)  {  break;  }  if(available  >  0)  {  break;  }  while(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >        available)        {        break;        }        while(skipped    >    available)    {    break;    }    if(available  >  0)  {  break;  }  while(available  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	85	2	add
2619	[BUG]  [BUGGY]  if(skipped    >    available)    {    break;    }    while(skipped  >  available)  {  break;  }  if(available  >  0)  {  break;  }  while(available  >  0)  {  break;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    available)    {    break;    }    while(skipped  >  available)  {  break;  }  if(available  >  0)  {  break;  }  while(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >        available)        {        break;        }        while(skipped    >    available)    {    break;    }    if(available  >  0)  {  break;  }  while(available  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	85	2	add
2620	[BUG]  [BUGGY]  if(skipped    >    available)    {    break;    }    while(skipped  >  available)  {  break;  }  if(available  <  =  0)  {  break;  }  while(available  >  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >    available)    {    break;    }    while(skipped  >  available)  {  break;  }  if(available  <  =  0)  {  break;  }  while(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >        available)        {        break;        }        while(skipped    >    available)    {    break;    }    if(available  <  =  0)  {  break;  }  while(available  >  0)  {  break;  }	  	non-compiled	[CE]  illegal  start  of  expression	85	None	add
2621	[BUG]  [BUGGY]  if(available  <  =  numToSkip)  {  continue;  skipped  =  input.skip(available);  if(skipped  >  0)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  =  numToSkip)  {  continue;  skipped  =  input.skip(available);  if(skipped  >  0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  =  numToSkip)  {  continue;  skipped  =  input.skip(available);  if(skipped  >  0)  {  continue;  }	  continue;    long    skipped    =    input.skip(skipped);    if(skipped    >    0)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
2622	[BUG]  [BUGGY]  if(available  >  skipped)  {  break;  }  if(available  >  saved)  {  break;  }  [CE]  cannot  find  symbol  saved  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  break;  }  if(available  >  saved)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available    >    skipped)    {    break;    }    if(available  >  saved)  {  break;  }	  	non-compiled	[CE]  cannot  find  symbol  saved	47	None	add
2623	[BUG]  [BUGGY]  if(available  >  0)  {  available  =  input.read();  for(int  i  =  0;  i  <  skipped;  i--)  {  skipped  =  input.skip(available);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  available  =  input.read();  for(int  i  =  0;  i  <  skipped;  i--)  {  skipped  =  input.skip(available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  available  =  input.read();  for(int  i  =  0;  i  <  skipped;  i--)  {  skipped  =  input.skip(available);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    0;    i--)    {    skipped    =    input.skip(available);    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
2624	[BUG]  [BUGGY]  if(available  >  0)  {  available  =  input.read();  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  =  input.skip(available);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  available  =  input.read();  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  =  input.skip(available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  available  =  input.read();  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  =  input.skip(available);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    0;    i--)    {    skipped    =    input.skip(available);    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
2625	[BUG]  [BUGGY]  if(available  >  0)  {  available  =  input.read();  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  =  input.skip(available);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  available  =  input.read();  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  =  input.skip(available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  available  =  input.read();  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  =  input.skip(available);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    0;    i--)    {    skipped    =    input.skip(available);    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
2626	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped!=  0)  {  break;  }  if(skipped  <  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >=        0)        {        break;        }        if(skipped!=    0)    {    break;    }    if(skipped  <  0)  {  break;  }  if(skipped  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	37	2	add
2627	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped!=  0)  {  break;  }  if(skipped  <  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped!=  0)  {  break;  }  if(skipped  <  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped!=    0)    {    break;    }    if(skipped  <  0)  {  break;  }  if(skipped  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	37	2	add
2628	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped!=  0)  {  break;  }  if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >=        0)        {        break;        }        if(skipped!=    0)    {    break;    }    if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	37	2	add
2629	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped!=  0)  {  break;  }  if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped!=  0)  {  break;  }  if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped!=    0)    {    break;    }    if(skipped  >  0)  {  break;  }  if(skipped  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	37	2	add
2630	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped!=  0)  {  break;  }  if(skipped  >  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >=        0)        {        break;        }        if(skipped!=    0)    {    break;    }    if(skipped  >  0)  {  break;  }  if(skipped  >=  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	37	2	add
2631	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped!=  0)  {  break;  }  if(skipped  >  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped!=  0)  {  break;  }  if(skipped  >  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped!=    0)    {    break;    }    if(skipped  >  0)  {  break;  }  if(skipped  >=  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	37	2	add
2632	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped!=  0)  {  break;  }  if(skipped  >  0)  {  break;  }  if(skipped  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >=        0)        {        break;        }        if(skipped!=    0)    {    break;    }    if(skipped  >  0)  {  break;  }  if(skipped  <  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	37	2	add
2633	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped!=  0)  {  break;  }  if(skipped  >  0)  {  break;  }  if(skipped  <  0)  {  break;  }  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped!=  0)  {  break;  }  if(skipped  >  0)  {  break;  }  if(skipped  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped!=    0)    {    break;    }    if(skipped  >  0)  {  break;  }  if(skipped  <  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	37	2	add
2634	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped!=  0)  {  break;  }  if(skipped  ==  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >=        0)        {        break;        }        if(skipped!=    0)    {    break;    }    if(skipped  ==  0)  {  break;  }  if(skipped  >=  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	37	2	add
2635	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped!=  0)  {  break;  }  if(skipped  ==  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped!=  0)  {  break;  }  if(skipped  ==  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped!=    0)    {    break;    }    if(skipped  ==  0)  {  break;  }  if(skipped  >=  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	37	2	add
2636	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "   "  +  skipped);  System.err.println( "   "  +  skipped);  [CE]  unreachable  statement  [FE]    IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "   "  +  skipped);  System.err.println( "   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalStateException(   "   "    +    skipped);    System.err.println( "   "  +  skipped);	  	non-compiled	[CE]  unreachable  statement	173	None	add
2637	[BUG]  [BUGGY]  if(available  >  0)  {  available  =  input.read();  for(int  i  =  0;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(available  +  i);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  available  =  input.read();  for(int  i  =  0;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(available  +  i);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  available  =  input.read();  for(int  i  =  0;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(available  +  i);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.skip(available    +    i);    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
2638	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(available  +  i);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(available  +  i);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(available  +  i);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.skip(available    +    i);    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
2639	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(available  +  i);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(available  +  i);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(available  +  i);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.skip(available    +    i);    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
2640	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(available  +  i  [CE]  ')'  expected  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(available  +  i  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(available  +  i	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.skip(available    +    i);    }    	non-compiled	[CE]  ')'  expected	69	None	replace
2641	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipd  =  input.skip(available  +  i);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipd  =  input.skip(available  +  i);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipd  =  input.skip(available  +  i);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    skipped    =    input.skip(available    +    i);    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
2642	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  this.available;  ++i)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  this.available;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  0;  i  <  this.available;  ++i)  {  available  +=  input.read();  }	  continue;    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	270	None	replace
2643	[BUG]  [BUGGY]  if(available  <  >  0  ||  skipped  <  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  >  0  ||  skipped  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  >  0  ||  skipped  <  0)  {  break;  }	  if(available    >    0    ||    skipped    <    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	184	None	replace
2644	[BUG]  [BUGGY]  timeout  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0  ||  skipped  <  available)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  0  ||  skipped  <  available)  {  continue;  }	  if(available    >    0)    {    continue;    }    timeout    	compilable	timeout	126	1	replace
2645	[BUG]  [BUGGY]  if(available  >  0  ||  skipped  <  available)  {  continue;  }  timeout  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0  ||  skipped  <  available)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0  ||  skipped  <  available)  {  continue;  }	  if(available    >    0)    {    continue;    }    timeout    	compilable	timeout	126	1	replace
2646	[BUG]  [BUGGY]  Throw  new  IllegalStateException( " ");  System.arraycopy(input,  numToSkip,  available,  skipped);  [CE]  not  a  statement  [FE]          IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  Throw  new  IllegalStateException( " ");  System.arraycopy(input,  numToSkip,  available,  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	Throw  new  IllegalStateException( " ");  System.arraycopy(input,  numToSkip,  available,  skipped);	  throw    new    IllegalStateException(       "       ");    System.arraycopy(input,    numToSkip,    available,    skipd);    	non-compiled	[CE]  not  a  statement	236	None	replace
2647	[BUG]  [BUGGY]  System.arraycopy(input,  numToSkip,  available,  skipd);  [CE]  cannot  find  symbol  skipd  [FE]            IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  System.arraycopy(input,  numToSkip,  available,  skipd);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	System.arraycopy(input,  numToSkip,  available,  skipd);	  throw    new    IllegalStateException(       "       ");    System.arraycopy(input,    numToSkip,    available,    skipd);    	non-compiled	[CE]  cannot  find  symbol  skipd	236	None	replace
2648	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  input.getClass().getName());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalArgumentException( " "  +  input.getClass().getName());	  throw    new    IllegalArgumentException(   "   ".equals(available);    	compilable	  [FE]  IllegalArgumentException  	239	2	replace
2649	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  input.getClass().getName());  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  input.getClass().getName());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException( " "  +  input.getClass().getName());	  throw    new    IllegalArgumentException(   "   ".equals(available);    	compilable	  [FE]  IllegalArgumentException  	239	2	replace
2650	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Skip  is  less  than  1: "  +  saved);  [CE]  cannot  find  symbol  saved  [FE]    IllegalArgumentException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Skip  is  less  than  1: "  +  saved);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException( "Skip  is  less  than  1: "  +  saved);	  throw    new    IllegalArgumentException(   "Skip    is    less    than    1:   ");    	non-compiled	[CE]  cannot  find  symbol  saved	34	None	replace
2651	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "skipped:  available:   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IOException( "skipped:  available:   "  +  available);	  throw    new    IOException(   "skipped:   "    +    skipped);    	compilable	  [FE]  IOException  	122	2	replace
2652	[BUG]  [BUGGY]  throw  new  IOException( "skipped:  available:   "  +  available);  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( "skipped:  available:   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( "skipped:  available:   "  +  available);	  throw    new    IOException(   "skipped:   "    +    skipped);    	compilable	  [FE]  IOException  	122	2	replace
2653	[BUG]  [BUGGY]  if(available  >  0)  {  throw  new  IOException( " ");  }  else  {  System.arraycopy(input,  numToSkip,  available,  skipped);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]              IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IOException( " ");  }  else  {  System.arraycopy(input,  numToSkip,  available,  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  throw  new  IOException( " ");  }  else  {  System.arraycopy(input,  numToSkip,  available,  skipped);  }	  throw    new    IOException(       "       ");    throw    new    IOException(,   "       ");    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	109	None	replace
2654	[BUG]  [BUGGY]  if(available  >  0)  {  throw  new  IOException( " ");  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  available--;  }  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IOException( " ");  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  available--;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  throw  new  IOException( " ");  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  available--;  }	  throw    new    IOException(       "       ");    throw    new    IOException(,   "       ");    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
2655	[BUG]  [BUGGY]  if(available  >  0)  {  throw  new  IOException( " ");  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.next();  }  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IOException( " ");  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  throw  new  IOException( " ");  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.next();  }	  throw    new    IOException(       "       ");    throw    new    IOException(,   "       ");    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
2656	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  <  available  ||  skipped  >  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped  <  available  ||  skipped  >  numToSkip)  {  break;  }	  if(skipped    >    available    ||    skipped    >    numToSkip)    {    break;    }    timeout    	compilable	  [FE]  AssertionError  	262	2	replace
2657	[BUG]  [BUGGY]  if(skipped  <  available  ||  skipped  >  numToSkip)  {  break;  }  [FE]  AssertionError  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  <  available  ||  skipped  >  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  <  available  ||  skipped  >  numToSkip)  {  break;  }	  if(skipped    >    available    ||    skipped    >    numToSkip)    {    break;    }    timeout    	compilable	  [FE]  AssertionError  	262	2	replace
2658	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( " "  +  input.toString());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalStateException( " "  +  input.toString());	  throw    new    IllegalStateException(   "   "    +    skipped);    	compilable	  [FE]  IllegalStateException  	174	2	replace
2659	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  input.toString());  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( " "  +  input.toString());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( " "  +  input.toString());	  throw    new    IllegalStateException(   "   "    +    skipped);    	compilable	  [FE]  IllegalStateException  	174	2	replace
2660	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( ".skipped  =  0, " ");  [CE]  unclosed  string  literal  [FE]                IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( ".skipped  =  0, " ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException( ".skipped  =  0, " ");	  throw    new    IllegalArgumentException(       "       ");    throw    new    IllegalArgumentException(.   "       ");    	non-compiled	[CE]  unclosed  string  literal	9	None	replace
2661	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( ".skipped  =  0. ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalArgumentException( ".skipped  =  0. ");	  throw    new    IllegalArgumentException(       "       ");    throw    new    IllegalArgumentException(.   "       ");    	compilable	  [FE]  IllegalArgumentException  	9	2	replace
2662	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( ".skipped  =  0. ");  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( ".skipped  =  0. ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException( ".skipped  =  0. ");	  throw    new    IllegalArgumentException(       "       ");    throw    new    IllegalArgumentException(.   "       ");    	compilable	  [FE]  IllegalArgumentException  	9	2	replace
2663	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  =  input.skip(available);  skipped  =  input.skip(available);  }  else  {  System.arraycopy(input,  numToSkip,  skipped);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  skipped  =  input.skip(available);  skipped  =  input.skip(available);  }  else  {  System.arraycopy(input,  numToSkip,  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  skipped  =  input.skip(available);  skipped  =  input.skip(available);  }  else  {  System.arraycopy(input,  numToSkip,  skipped);  }	  skipped    =    input.skip(available);    skipped    =    input.skip(available);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	66	None	replace
2664	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  =  input.skip(available);  skipped  =  input.skip(available);  }  else  {  System.arraycopy(input,  available,  skipped);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  skipped  =  input.skip(available);  skipped  =  input.skip(available);  }  else  {  System.arraycopy(input,  available,  skipped);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  skipped  =  input.skip(available);  skipped  =  input.skip(available);  }  else  {  System.arraycopy(input,  available,  skipped);  }	  skipped    =    input.skip(available);    skipped    =    input.skip(available);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	66	None	replace
2665	[BUG]  [BUGGY]  throw  new  IOException( " ");  System.err.println( "Skip  skipped: "  +  skipped);  [CE]  unreachable  statement  [FE]            IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( " ");  System.err.println( "Skip  skipped: "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( " ");  System.err.println( "Skip  skipped: "  +  skipped);	  throw    new    IOException(       "       ");    System.err.println(   "Skip    skipped:       "    +    available);    	non-compiled	[CE]  unreachable  statement	265	None	replace
2666	[BUG]  [BUGGY]  [FE]  IOException  [FE]              IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IOException( " ");  }  else  {  System.err.println( "Skip  skipped: "  +  available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available  >  0)  {  throw  new  IOException( " ");  }  else  {  System.err.println( "Skip  skipped: "  +  available);  }	  throw    new    IOException(       "       ");    System.err.println(   "Skip    skipped:       "    +    available);    	compilable	  [FE]  IOException  	265	2	replace
2667	[BUG]  [BUGGY]  if(available  >  0)  {  throw  new  IOException( " ");  }  else  {  System.err.println( "Skip  skipped: "  +  available);  }  [FE]  IOException  [FE]              IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IOException( " ");  }  else  {  System.err.println( "Skip  skipped: "  +  available);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  throw  new  IOException( " ");  }  else  {  System.err.println( "Skip  skipped: "  +  available);  }	  throw    new    IOException(       "       ");    System.err.println(   "Skip    skipped:       "    +    available);    	compilable	  [FE]  IOException  	265	2	replace
2668	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Skip  skipped:   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalStateException( "Skip  skipped:   "  +  skipped);	  throw    new    IllegalStateException(   "skipped:   "    +    skipped);    	compilable	  [FE]  IllegalStateException  	138	2	replace
2669	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Skip  skipped:   "  +  skipped);  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Skip  skipped:   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "Skip  skipped:   "  +  skipped);	  throw    new    IllegalStateException(   "skipped:   "    +    skipped);    	compilable	  [FE]  IllegalStateException  	138	2	replace
2670	[BUG]  [BUGGY]  if(skipped  >  available)  {  continue  -  skipped;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  available)  {  continue  -  skipped;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  available)  {  continue  -  skipped;  }	  if(skipped    >    available)    {    continue;    }    timeout    	non-compiled	[CE]  ';'  expected	134	None	replace
2671	[BUG]  [BUGGY]  if(skipped  >  available)  {  continue  -1;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  available)  {  continue  -1;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  available)  {  continue  -1;  }	  if(skipped    >    available)    {    continue;    }    timeout    	non-compiled	[CE]  ';'  expected	134	None	replace
2672	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available    >    0)    {    break;    }    while(available  >  0)  {  break;  }  if(available  <  0)  {  break;  }  while(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(available        >        0)        {        break;        }        while(available    >    0)    {    break;    }    if(available  <  0)  {  break;  }  while(available  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	150	2	add
2673	[BUG]  [BUGGY]  if(available    >    0)    {    break;    }    while(available  >  0)  {  break;  }  if(available  <  0)  {  break;  }  while(available  >  0)  {  break;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available    >    0)    {    break;    }    while(available  >  0)  {  break;  }  if(available  <  0)  {  break;  }  while(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available        >        0)        {        break;        }        while(available    >    0)    {    break;    }    if(available  <  0)  {  break;  }  while(available  >  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	150	2	add
2674	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equalsIgnoreCase(available));  [CE]  <identifier>  expected  [FE]          IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equalsIgnoreCase(available));  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	Throwables.throw  new  IllegalStateException( " ".equalsIgnoreCase(available));	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	136	None	replace
2675	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Missing  input  for  path: "  +  input.getPath());  [CE]  <identifier>  expected  [FE]            IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Missing  input  for  path: "  +  input.getPath());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	Throwables.throw  new  IllegalStateException( "Missing  input  for  path: "  +  input.getPath());	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	136	None	replace
2676	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Missing  input: "  +  input);  [CE]  <identifier>  expected  [FE]              IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Missing  input: "  +  input);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	Throwables.throw  new  IllegalStateException( "Missing  input: "  +  input);	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	136	None	replace
2677	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Missing  input  for  path: "  +  input.getName());  [CE]  <identifier>  expected  [FE]                IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Missing  input  for  path: "  +  input.getName());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	Throwables.throw  new  IllegalStateException( "Missing  input  for  path: "  +  input.getName());	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	136	None	replace
2678	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingException(input,  numToSkip);  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  aughtExceptionHandler.handleMissingException(input,  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	aughtExceptionHandler.handleMissingException(input,  numToSkip);	  if(skipped    >    available)    {    break;    }    if(skipped    >    available)    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	83	None	replace
2679	[BUG]  [BUGGY]  if(available  >  0)  {  available  =  input.read();  for(int  i  =  0;  i  <  numToSkip;  ++i)  {  skipped  =  input.skip(i);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  available  =  input.read();  for(int  i  =  0;  i  <  numToSkip;  ++i)  {  skipped  =  input.skip(i);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  available  =  input.read();  for(int  i  =  0;  i  <  numToSkip;  ++i)  {  skipped  =  input.skip(i);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    skipped    =    input.skip(i);    }    	non-compiled	[CE]  illegal  start  of  expression	177	None	replace
2680	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipd  =  input.skip(i);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipd  =  input.skip(i);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipd  =  input.skip(i);  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    skipped    =    input.skip(i);    }    	non-compiled	[CE]  illegal  start  of  expression	177	None	replace
2681	[BUG]  [BUGGY]  InputStream  input  =  input.skip(available);  [CE]  variable  input  is  already  defined  in  method  skip(InputStream,long)  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  InputStream  input  =  input.skip(available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	InputStream  input  =  input.skip(available);	  n    =    input.skip(available);    	non-compiled	[CE]  variable  input  is  already  defined  in  method  skip(InputStream,long)	234	None	replace
2682	[BUG]  [BUGGY]  this.available  =  input.skip(available);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  this.available  =  input.skip(available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	this.available  =  input.skip(available);	  n    =    input.skip(available);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	234	None	replace
2683	[BUG]  [BUGGY]  n  =  input.skip(available  +  skipped);  [CE]  cannot  find  symbol  n  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  n  =  input.skip(available  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	n  =  input.skip(available  +  skipped);	  n    =    input.skip(available);    	non-compiled	[CE]  cannot  find  symbol  n	234	None	replace
2684	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Should  have  skipped  ' "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalStateException( "Should  have  skipped  ' "  +  skipped);	  throw    new    IllegalStateException(   "skipped    =       "    +    skipped);    	compilable	  [FE]  IllegalStateException  	140	2	replace
2685	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Should  have  skipped  ' "  +  skipped);  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Should  have  skipped  ' "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "Should  have  skipped  ' "  +  skipped);	  throw    new    IllegalStateException(   "skipped    =       "    +    skipped);    	compilable	  [FE]  IllegalStateException  	140	2	replace
2686	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Should  have  been  skipped: "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IllegalStateException( "Should  have  been  skipped: "  +  skipped);	  throw    new    IllegalStateException(   "skipped    =       "    +    skipped);    	compilable	  [FE]  IllegalStateException  	140	2	replace
2687	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Should  have  been  skipped: "  +  skipped);  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Should  have  been  skipped: "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( "Should  have  been  skipped: "  +  skipped);	  throw    new    IllegalStateException(   "skipped    =       "    +    skipped);    	compilable	  [FE]  IllegalStateException  	140	2	replace
2688	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "),  input.getMessage());  [CE]  [FE]          IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " "),  input.getMessage());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException( " "),  input.getMessage());	  throw    new    IllegalArgumentException(   "   ".getMessage());    	non-compiled	[CE]  	28	None	replace
2689	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ")  :  input.getMessage();  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " ")  :  input.getMessage();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalArgumentException( " ")  :  input.getMessage();	  throw    new    IllegalArgumentException(   "   ".getMessage());    	non-compiled	[CE]  	28	None	replace
2690	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "InputStream  is  less  than  1:   "  +  input.getClass());  InputStream  is  less  than  1:   "  +  input.getClass());  [CE]  [FE]    IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "InputStream  is  less  than  1:   "  +  input.getClass());  InputStream  is  less  than  1:   "  +  input.getClass());  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalStateException(   "InputStream    is    less    than    1:   "    +    input.getClass());    InputStream  is  less  than  1:   "  +  input.getClass());	  	non-compiled	[CE]  	241	None	add
2691	[BUG]  [BUGGY]  }  else  if(available  >  0)  {  break;  }  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  }  else  if(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	}  else  if(available  >  0)  {  break;  }	  if(available    >    0)    {    break;    }    If(available    >    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
2692	[BUG]  [BUGGY]  [Delete]  else  if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  [Delete]  else  if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	[Delete]  else  if(available  >  0)  {  break;  }  if(available  >  0)  {  break;  }	  if(available    >    0)    {    break;    }    If(available    >    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
2693	[BUG]  [BUGGY]  [Delete]  else  if(available  >  0)  {  break;  }  else  if(available  >  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  [Delete]  else  if(available  >  0)  {  break;  }  else  if(available  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	[Delete]  else  if(available  >  0)  {  break;  }  else  if(available  >  0)  {  break;  }	  if(available    >    0)    {    break;    }    If(available    >    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
2694	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ".equalsIgnoreCase(available));  [CE]  method  equalsIgnoreCase  in  class  String  cannot  be  applied  to  given  types;  [FE]                  IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( " ".equalsIgnoreCase(available));  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IllegalStateException( " ".equalsIgnoreCase(available));	  throw    new    IllegalStateException(       "       ");    throw    new    IllegalStateException(   ".       ");    	non-compiled	[CE]  method  equalsIgnoreCase  in  class  String  cannot  be  applied  to  given  types;	26	None	replace
2695	[BUG]  [BUGGY]  pendingInput()  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  pendingInput()  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	pendingInput()  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.length();    }    	non-compiled	[CE]  ';'  expected	53	None	replace
2696	[BUG]  [BUGGY]  pendingInput()  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  skipped.length();  }  [CE]  ';'  expected  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  pendingInput()  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  skipped.length();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	pendingInput()  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  skipped.length();  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.length();    }    	non-compiled	[CE]  ';'  expected	53	None	replace
2697	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.length();  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.length();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.length();  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.length();    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
2698	[BUG]  [BUGGY]  if(available  >  skipped)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.skip();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  skipped)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.skip();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  skipped)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.skip();  }	  continue;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	267	None	replace
2699	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.skip();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.skip();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.skip();  }	  continue;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	267	None	replace
2700	[BUG]  [BUGGY]  while(available  >  0)  {  skipd  =  input.skip(skipped);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  skipd  =  input.skip(skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  skipd  =  input.skip(skipped);	  while(available    >    0)    {    break;    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
2701	[BUG]  [BUGGY]  pendingReturn(1)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getMillis();  }  [CE]  ';'  expected  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  pendingReturn(1)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getMillis();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	pendingReturn(1)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getMillis();  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.getMillis();    }    	non-compiled	[CE]  ';'  expected	226	None	replace
2702	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getMillis();  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getMillis();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getMillis();  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.getMillis();    }    	non-compiled	[CE]  illegal  start  of  expression	226	None	replace
2703	[BUG]  [BUGGY]  pendingReturn(1)  {  for(int  i  =  available;  i  <  0;  ++i)  {  available  +=  input.getMillis();  }  [CE]  ';'  expected  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  pendingReturn(1)  {  for(int  i  =  available;  i  <  0;  ++i)  {  available  +=  input.getMillis();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	pendingReturn(1)  {  for(int  i  =  available;  i  <  0;  ++i)  {  available  +=  input.getMillis();  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.getMillis();    }    	non-compiled	[CE]  ';'  expected	226	None	replace
2704	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "skipped:   "  +  skipped);  System.err.println( "skipped:   "  +  skipped);  [CE]  unreachable  statement  [FE]    IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "skipped:   "  +  skipped);  System.err.println( "skipped:   "  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalStateException(   "skipped:   "    +    skipped);    System.err.println( "skipped:   "  +  skipped);	  	non-compiled	[CE]  unreachable  statement	137	None	add
2705	[BUG]  [BUGGY]  timeout  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(skipped  -  1);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped  =  input.skip(skipped  -  1);	  skipped    =    input.skip(skipped);    timeout    	compilable	timeout	3	1	replace
2706	[BUG]  [BUGGY]  skipped  =  input.skip(skipped  -  1);  timeout  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(skipped  -  1);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped  =  input.skip(skipped  -  1);	  skipped    =    input.skip(skipped);    timeout    	compilable	timeout	3	1	replace
2707	[BUG]  [BUGGY]  timeout  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  -=  input.skip(skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped  -=  input.skip(skipped);	  skipped    =    input.skip(skipped);    timeout    	compilable	timeout	3	1	replace
2708	[BUG]  [BUGGY]  skipped  -=  input.skip(skipped);  timeout  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  -=  input.skip(skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped  -=  input.skip(skipped);	  skipped    =    input.skip(skipped);    timeout    	compilable	timeout	3	1	replace
2709	[BUG]  [BUGGY]  n  =  input.skip(available  -  numToSkip);  [CE]  cannot  find  symbol  n  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  n  =  input.skip(available  -  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	n  =  input.skip(available  -  numToSkip);	  skip    =    input.skip(available    -    numToSkip);    	non-compiled	[CE]  cannot  find  symbol  n	162	None	replace
2710	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  ==  0)  {  break;  }  if(skipped  >  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >=        0)        {        break;        }        if(skipped    ==    0)    {    break;    }    if(skipped  >  0)  {  break;  }  if(skipped  >=  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	40	2	add
2711	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  ==  0)  {  break;  }  if(skipped  >  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  ==  0)  {  break;  }  if(skipped  >  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped    ==    0)    {    break;    }    if(skipped  >  0)  {  break;  }  if(skipped  >=  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	40	2	add
2712	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  ==  0)  {  break;  }  if(skipped  <  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >=        0)        {        break;        }        if(skipped    ==    0)    {    break;    }    if(skipped  <  0)  {  break;  }  if(skipped  >=  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	40	2	add
2713	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  ==  0)  {  break;  }  if(skipped  <  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  ==  0)  {  break;  }  if(skipped  <  0)  {  break;  }  if(skipped  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped    ==    0)    {    break;    }    if(skipped  <  0)  {  break;  }  if(skipped  >=  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	40	2	add
2714	[BUG]  [BUGGY]  skipped    =    input.skip(available);    skipped  =  input.skip(available);  long  available  =  numToSkip;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped    =    input.skip(available);    skipped  =  input.skip(available);  long  available  =  numToSkip;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped        =        input.skip(available);        skipped    =    input.skip(available);    long  available  =  numToSkip;	  	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	65	None	add
2715	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped    =    input.skip(available);    skipped  =  input.skip(available);  if(available  >  0)  {  available  =  0;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped        =        input.skip(available);        skipped    =    input.skip(available);    if(available  >  0)  {  available  =  0;  }	  	compilable	  [FE]  AssertionError  	65	2	add
2716	[BUG]  [BUGGY]  skipped    =    input.skip(available);    skipped  =  input.skip(available);  if(available  >  0)  {  available  =  0;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped    =    input.skip(available);    skipped  =  input.skip(available);  if(available  >  0)  {  available  =  0;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped        =        input.skip(available);        skipped    =    input.skip(available);    if(available  >  0)  {  available  =  0;  }	  	compilable	  [FE]  AssertionError  	65	2	add
2717	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped    =    input.skip(available);    skipped  =  input.skip(available);  if(available  >  0)  {  available  =  -1;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped        =        input.skip(available);        skipped    =    input.skip(available);    if(available  >  0)  {  available  =  -1;  }	  	compilable	  [FE]  AssertionError  	65	2	add
2718	[BUG]  [BUGGY]  skipped    =    input.skip(available);    skipped  =  input.skip(available);  if(available  >  0)  {  available  =  -1;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped    =    input.skip(available);    skipped  =  input.skip(available);  if(available  >  0)  {  available  =  -1;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped        =        input.skip(available);        skipped    =    input.skip(available);    if(available  >  0)  {  available  =  -1;  }	  	compilable	  [FE]  AssertionError  	65	2	add
2719	[BUG]  [BUGGY]  skipped    =    input.skip(available);    skipped  =  input.skip(available);  InputStream  available  =  input.read();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped    =    input.skip(available);    skipped  =  input.skip(available);  InputStream  available  =  input.read();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped        =        input.skip(available);        skipped    =    input.skip(available);    InputStream  available  =  input.read();	  	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	65	None	add
2720	[BUG]  [BUGGY]  skipped    =    input.skip(available);    skipped  =  input.skip(available);  long  available  =  numToSkip  +  1;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped    =    input.skip(available);    skipped  =  input.skip(available);  long  available  =  numToSkip  +  1;  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped        =        input.skip(available);        skipped    =    input.skip(available);    long  available  =  numToSkip  +  1;	  	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	65	None	add
2721	[BUG]  [BUGGY]  if(available  <  =  0  ||  skipped  >  numToSkip)  {  break;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  =  0  ||  skipped  >  numToSkip)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  =  0  ||  skipped  >  numToSkip)  {  break;  }	  if(available    <    =    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
2722	[BUG]  [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  for(int  i  =  0;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  for(int  i  =  0;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  skipped  =  input.skip(available);  for(int  i  =  0;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    skipped    =    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	176	None	replace
2723	[BUG]  [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    skipped    =    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	176	None	replace
2724	[BUG]  [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    skipped    =    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	176	None	replace
2725	[BUG]  [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  available  =  0;  for(int  i  =  0;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  available  =  0;  for(int  i  =  0;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  skipped  =  input.skip(available);  available  =  0;  for(int  i  =  0;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    skipped    =    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	176	None	replace
2726	[BUG]  [BUGGY]  if(available  <  =  numToSkip)  {  continue;  skipped  =  input.skip(numToSkip);  if(skipped  >  0)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  <  =  numToSkip)  {  continue;  skipped  =  input.skip(numToSkip);  if(skipped  >  0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  <  =  numToSkip)  {  continue;  skipped  =  input.skip(numToSkip);  if(skipped  >  0)  {  continue;  }	  continue;    long    skipped    =    input.skip(numToSkip);    if(skipped    >    0)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
2727	[BUG]  [BUGGY]  if(skipped  <  =  0  ||  skipped  >  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  <  =  0  ||  skipped  >  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  <  =  0  ||  skipped  >  0)  {  break;  }	  if(skipped    >    0    ||    skipped    >    0)    {    break;    }    timeout    	non-compiled	[CE]  illegal  start  of  expression	253	None	replace
2728	[BUG]  [BUGGY]  [FE]  IOException  [FE]          IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( ".skipped  =  0 ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	throw  new  IOException( ".skipped  =  0 ");	  throw    new    IOException(   "   "));    	compilable	  [FE]  IOException  	220	2	replace
2729	[BUG]  [BUGGY]  throw  new  IOException( ".skipped  =  0 ");  [FE]  IOException  [FE]          IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException( ".skipped  =  0 ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw  new  IOException( ".skipped  =  0 ");	  throw    new    IOException(   "   "));    	compilable	  [FE]  IOException  	220	2	replace
2730	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "skipped  =     "  +  available);  System.err.println( "skipped  =   "  +  available);  [CE]  unreachable  statement  [FE]    IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "skipped  =     "  +  available);  System.err.println( "skipped  =   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalStateException(   "skipped    =       "    +    available);    System.err.println( "skipped  =   "  +  available);	  	non-compiled	[CE]  unreachable  statement	141	None	add
2731	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "skipped  =     "  +  available);  if(available  >  0)  {  available  =  0;  }  [CE]  unreachable  statement  [FE]      IllegalStateException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "skipped  =     "  +  available);  if(available  >  0)  {  available  =  0;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IllegalStateException(   "skipped    =       "    +    available);    if(available  >  0)  {  available  =  0;  }	  	non-compiled	[CE]  unreachable  statement	141	None	add
2732	[BUG]  [BUGGY]  pendingReturn(available,  numToSkip)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  skipped;  }  [CE]  ';'  expected  [FE]                                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  pendingReturn(available,  numToSkip)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  skipped;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	pendingReturn(available,  numToSkip)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  skipped;  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    skipped;    }    	non-compiled	[CE]  ';'  expected	58	None	replace
2733	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  available  +  numToSkip;  i  <  numToSkip;  i++)  {  available  +=  skipped;  }  [CE]  illegal  start  of  expression  [FE]                                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  available  +  numToSkip;  i  <  numToSkip;  i++)  {  available  +=  skipped;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  available  +  numToSkip;  i  <  numToSkip;  i++)  {  available  +=  skipped;  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    skipped;    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
2734	[BUG]  [BUGGY]  pendingFor(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getLength();  }  [CE]  '.class'  expected  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  pendingFor(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	pendingFor(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getLength();  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  '.class'  expected	155	None	replace
2735	[BUG]  [BUGGY]  pendingInput()  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getLength();  }  [CE]  ';'  expected  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  pendingInput()  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getLength();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	pendingInput()  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getLength();  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  ';'  expected	155	None	replace
2736	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  ++i)  {  available  +=  input.getUpperBound();  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  ++i)  {  available  +=  input.getUpperBound();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  ++i)  {  available  +=  input.getUpperBound();  }	          if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    ++i)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
2737	[BUG]  [BUGGY]  skip  =  input.skip(available  *  skipped);  [CE]  cannot  find  symbol  skip  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skip  =  input.skip(available  *  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skip  =  input.skip(available  *  skipped);	  skip    =    input.skip(available    *    numToSkip);    	non-compiled	[CE]  cannot  find  symbol  skip	163	None	replace
2738	[BUG]  [BUGGY]  timeout  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  Long  skip  =  input.skip(available  +  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	Long  skip  =  input.skip(available  +  numToSkip);	  int    skip    =    input.skip(available    +    numToSkip);    	compilable	timeout	63	1	replace
2739	[BUG]  [BUGGY]  Long  skip  =  input.skip(available  +  numToSkip);  timeout  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  Long  skip  =  input.skip(available  +  numToSkip);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	Long  skip  =  input.skip(available  +  numToSkip);	  int    skip    =    input.skip(available    +    numToSkip);    	compilable	timeout	63	1	replace
2740	[BUG]  [BUGGY]  timeout  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  available)  {  break;  }  else  if(skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped  >  available)  {  break;  }  else  if(skipped  >  available)  {  break;  }	  if(skipped    >    available)    {    break;    }    if(skip    >    available)    {    break;    }    	compilable	timeout	254	1	replace
2741	[BUG]  [BUGGY]  if(skipped  >  available)  {  break;  }  else  if(skipped  >  available)  {  break;  }  timeout  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  available)  {  break;  }  else  if(skipped  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  available)  {  break;  }  else  if(skipped  >  available)  {  break;  }	  if(skipped    >    available)    {    break;    }    if(skip    >    available)    {    break;    }    	compilable	timeout	254	1	replace
2742	[BUG]  [BUGGY]  if(skipped  >  available)  {  break;  }  else  if(skip  >  available)  {  break;  }  [CE]  cannot  find  symbol  skip  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped  >  available)  {  break;  }  else  if(skip  >  available)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped  >  available)  {  break;  }  else  if(skip  >  available)  {  break;  }	  if(skipped    >    available)    {    break;    }    if(skip    >    available)    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  skip	254	None	replace
2743	[BUG]  [BUGGY]  if(available  >  0)  {  throw  new  IllegalStateException( " ");  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.next();  }  [CE]  illegal  start  of  expression  [FE]        IllegalStateException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IllegalStateException( " ");  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  throw  new  IllegalStateException( " ");  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.next();  }	  throw    new    IllegalStateException(       "       ");    new    IllegalStateException(       "       ");    	non-compiled	[CE]  illegal  start  of  expression	197	None	replace
2744	[BUG]  [BUGGY]  parent  ==  if(available  >=  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  parent  ==  if(available  >=  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	parent  ==  if(available  >=  0)  {  break;  }	  if(skipped    >=    0)    {    break;    }    if(skipped    ==    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
2745	[BUG]  [BUGGY]  if(input!=  null)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  if(available  >  0)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(input!=  null)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  if(available  >  0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(input!=  null)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  if(available  >  0)  {  continue;  }	  continue;    for(int    i    =    available;    i    <    numToSkip;    i++)    {    if(available    >    0)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
2746	[BUG]  [BUGGY]  if(input!=  null)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  if(skipped  >  0)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(input!=  null)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  if(skipped  >  0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(input!=  null)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  if(skipped  >  0)  {  continue;  }	  continue;    for(int    i    =    available;    i    <    numToSkip;    i++)    {    if(available    >    0)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
2747	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  if(skip  >  0)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  if(skip  >  0)  {  continue;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  if(skip  >  0)  {  continue;  }	  continue;    for(int    i    =    available;    i    <    numToSkip;    i++)    {    if(available    >    0)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
2748	[BUG]  [BUGGY]  if(available  >  0)  {  throw  new  IOException( " ");  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getSize();  }  [CE]  illegal  start  of  expression  [FE]        IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IOException( " ");  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getSize();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  throw  new  IOException( " ");  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getSize();  }	  throw    new    IOException(       "       ");    throw    new    IOException(       "       ");    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
2749	[BUG]  [BUGGY]  if(available  >  0)  {  throw  new  IOException( " ");  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]          IOException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  throw  new  IOException( " ");  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  throw  new  IOException( " ");  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }	  throw    new    IOException(       "       ");    throw    new    IOException(       "       ");    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
2750	[BUG]  [BUGGY]  skipped  =  input.skip(available  +  skipped);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  +  skipped);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    +    skipped);    if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.next();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	78	None	add
2751	[BUG]  [BUGGY]  skipped  =  input.skip(available  +  skipped);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  +  skipped);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    +    skipped);    if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.next();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	78	None	add
2752	[BUG]  [BUGGY]  skipped  =  input.skip(available  +  skipped);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  +  skipped);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    +    skipped);    if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  skipped  =  input.next();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	78	None	add
2753	[BUG]  [BUGGY]  skipped  =  input.skip(available  +  skipped);  int  skipped  =  input.skip(available  +  skipped);  [CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  +  skipped);  int  skipped  =  input.skip(available  +  skipped);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    +    skipped);    int  skipped  =  input.skip(available  +  skipped);	  timeout    	non-compiled	[CE]  variable  skipped  is  already  defined  in  method  skip(InputStream,long)	78	None	add
2754	[BUG]  [BUGGY]  skipped  =  input.skip(available  +  skipped);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.skip(available  +  i);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  +  skipped);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.skip(available  +  i);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    +    skipped);    if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.skip(available  +  i);  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	78	None	add
2755	[BUG]  [BUGGY]  skipped  =  input.skip(available  +  skipped);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.skip(available  +  i);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(available  +  skipped);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.skip(available  +  i);  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(available    +    skipped);    if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.skip(available  +  i);  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	78	None	add
2756	[BUG]  [BUGGY]  skip  =  input.skip(Short.MAX_VALUE);  [CE]  cannot  find  symbol  skip  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skip  =  input.skip(Short.MAX_VALUE);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skip  =  input.skip(Short.MAX_VALUE);	  skip    =    input.skip(short);    	non-compiled	[CE]  cannot  find  symbol  skip	216	None	replace
2757	[BUG]  [BUGGY]  skip  =  input.skip(skipped  -  0);  [CE]  cannot  find  symbol  skip  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skip  =  input.skip(skipped  -  0);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skip  =  input.skip(skipped  -  0);	  skip    =    input.skip(short);    	non-compiled	[CE]  cannot  find  symbol  skip	216	None	replace
2758	[BUG]  [BUGGY]  skip  =  input.skip(Short.MIN_VALUE);  [CE]  cannot  find  symbol  skip  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skip  =  input.skip(Short.MIN_VALUE);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skip  =  input.skip(Short.MIN_VALUE);	  skip    =    input.skip(short);    	non-compiled	[CE]  cannot  find  symbol  skip	216	None	replace
2759	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equalsIgnoreCase(available));  [CE]  <identifier>  expected  [FE]        IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equalsIgnoreCase(available));  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	Throwables.throw  new  IllegalArgumentException( " ".equalsIgnoreCase(available));	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	27	None	replace
2760	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( ", ");  [CE]  <identifier>  expected  [FE]          IllegalArgumentException      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( ", ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	Throwables.throw  new  IllegalArgumentException( ", ");	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	27	None	replace
2761	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  <  0)  {  break;  }  if(skipped  >  0)  {  break;  }  if(skipped  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >=        0)        {        break;        }        if(skipped    <    0)    {    break;    }    if(skipped  >  0)  {  break;  }  if(skipped  <  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	43	2	add
2762	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  <  0)  {  break;  }  if(skipped  >  0)  {  break;  }  if(skipped  <  0)  {  break;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  <  0)  {  break;  }  if(skipped  >  0)  {  break;  }  if(skipped  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped    <    0)    {    break;    }    if(skipped  >  0)  {  break;  }  if(skipped  <  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	43	2	add
2763	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  <  0)  {  break;  }  if(available  >=  0)  {  break;  }  if(available  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	if(skipped        >=        0)        {        break;        }        if(skipped    <    0)    {    break;    }    if(available  >=  0)  {  break;  }  if(available  <  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	43	2	add
2764	[BUG]  [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  <  0)  {  break;  }  if(available  >=  0)  {  break;  }  if(available  <  0)  {  break;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skipped    >=    0)    {    break;    }    if(skipped  <  0)  {  break;  }  if(available  >=  0)  {  break;  }  if(available  <  0)  {  break;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skipped        >=        0)        {        break;        }        if(skipped    <    0)    {    break;    }    if(available  >=  0)  {  break;  }  if(available  <  0)  {  break;  }	  	compilable	  [FE]  AssertionError  	43	2	add
2765	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.skip();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.skip();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.skip();  }	  continue;    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	266	None	replace
2766	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getMillis();  }  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getMillis();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getMillis();  }	  continue;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.getMillis();    }    	non-compiled	[CE]  cannot  find  symbol	272	None	replace
2767	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIOException( " ");  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  aughtExceptionHandler.throwAsIOException( " ");  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	aughtExceptionHandler.throwAsIOException( " ");	  if(skipped    >    0)    {    break;    }    if(skipped    >    0)    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	99	None	replace
2768	[BUG]  [BUGGY]  if(skip  >  0)  {  continue;  }  else  {  skipped  =  input.read();  }  [CE]  cannot  find  symbol  skip  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(skip  >  0)  {  continue;  }  else  {  skipped  =  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(skip  >  0)  {  continue;  }  else  {  skipped  =  input.read();  }	  if(skipped    >    0)    {    continue;    }    else    {    skip    =    input.read();    }    	non-compiled	[CE]  cannot  find  symbol  skip	217	None	replace
2769	[BUG]  [BUGGY]  if(switch  >  0)  {  continue;  }  else  {  skip  =  input.read();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(switch  >  0)  {  continue;  }  else  {  skip  =  input.read();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(switch  >  0)  {  continue;  }  else  {  skip  =  input.read();  }	  if(skipped    >    0)    {    continue;    }    else    {    skip    =    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	217	None	replace
2770	[BUG]  [BUGGY]  throw  new  IOException(   "skipped  =     "  +  available);  System.err.println( "skipped  =   "  +  available);  [CE]  unreachable  statement  [FE]    IOException    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  throw  new  IOException(   "skipped  =     "  +  available);  System.err.println( "skipped  =   "  +  available);  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	throw    new    IOException(   "skipped    =       "    +    available);    System.err.println( "skipped  =   "  +  available);	  	non-compiled	[CE]  unreachable  statement	157	None	add
2771	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getUpperBound();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getUpperBound();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getUpperBound();  }	  continue;    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	192	None	replace
2772	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.length();    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
2773	[BUG]  [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  skipped  =  input.skip(available);  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.next();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    i++)    {    skipped    =    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	175	None	replace
2774	[BUG]  [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  available  =  0;  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.next();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  if(available  >  0)  {  skipped  =  input.skip(available);  available  =  0;  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.next();  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	if(available  >  0)  {  skipped  =  input.skip(available);  available  =  0;  for(int  i  =  0;  i  <  available;  i++)  {  skipped  =  input.next();  }	  skipped    =    input.skip(available);    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    i++)    {    skipped    =    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	175	None	replace
2775	[BUG]  [BUGGY]  skipped  =  input.skip(skipped  -  numToSkip);  int  numToSkip  =  input.size();  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(skipped  -  numToSkip);  int  numToSkip  =  input.size();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(skipped    -    numToSkip);    int  numToSkip  =  input.size();	  timeout    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	213	None	add
2776	[BUG]  [BUGGY]  skipped  =  input.skip(skipped  -  numToSkip);  int  numToSkip  =  input.getCount();  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(skipped  -  numToSkip);  int  numToSkip  =  input.getCount();  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(skipped    -    numToSkip);    int  numToSkip  =  input.getCount();	  timeout    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	213	None	add
2777	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(skipped  -  numToSkip);  if(available  >  numToSkip)  {  available  =  numToSkip;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped    =    input.skip(skipped    -    numToSkip);    if(available  >  numToSkip)  {  available  =  numToSkip;  }	  timeout    	compilable	  [FE]  AssertionError  	213	2	add
2778	[BUG]  [BUGGY]  skipped  =  input.skip(skipped  -  numToSkip);  if(available  >  numToSkip)  {  available  =  numToSkip;  }  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(skipped  -  numToSkip);  if(available  >  numToSkip)  {  available  =  numToSkip;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(skipped    -    numToSkip);    if(available  >  numToSkip)  {  available  =  numToSkip;  }	  timeout    	compilable	  [FE]  AssertionError  	213	2	add
2779	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(skipped  -  numToSkip);  if(available  <  numToSkip)  {  available  =  numToSkip;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	add	skipped    =    input.skip(skipped    -    numToSkip);    if(available  <  numToSkip)  {  available  =  numToSkip;  }	  timeout    	compilable	  [FE]  AssertionError  	213	2	add
2780	[BUG]  [BUGGY]  skipped  =  input.skip(skipped  -  numToSkip);  if(available  <  numToSkip)  {  available  =  numToSkip;  }  [FE]  AssertionError  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {      [BUGGY]  skipped  =  input.skip(skipped  -  numToSkip);  if(available  <  numToSkip)  {  available  =  numToSkip;  }  [BUGGY]      }  numToSkip  -=  skipped;  }  return  available  -  numToSkip;  }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	1.0	99	99	2	replace	skipped    =    input.skip(skipped    -    numToSkip);    if(available  <  numToSkip)  {  available  =  numToSkip;  }	  timeout    	compilable	  [FE]  AssertionError  	213	2	add
