bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(available  +  i);  }  [CE]  possible  loss  of  precision  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(available  +  i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(available  +  i);  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.skip(available    +    i);    }    	non-compiled	[CE]  possible  loss  of  precision	102	None	replace
2	[BUG]  [BUGGY]  For(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(available  +  i);  }  [CE]  '.class'  expected  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  For(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(available  +  i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	For(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(available  +  i);  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.skip(available    +    i);    }    	non-compiled	[CE]  '.class'  expected	102	None	replace
3	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(available  +  i);  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(available  +  i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(available  +  i);  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.skip(available    +    i);    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
4	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.seek(available  +  i);  }  [CE]  possible  loss  of  precision  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.seek(available  +  i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.seek(available  +  i);  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.skip(available    +    i);    }    	non-compiled	[CE]  possible  loss  of  precision	102	None	replace
5	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(available  +  i);  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(available  +  i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(available  +  i);  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.skip(available    +    i);    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
6	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(skipped  +  i);  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(skipped  +  i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(skipped  +  i);  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.skip(available    +    i);    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
7	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  skipped;  }  [CE]  illegal  start  of  expression  [FE]                                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  skipped;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  skipped;  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.skip(available    +    i);    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
8	[BUG]  [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  /  numToSkip;  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
9	[BUG]  [BUGGY]  long  available  =  available  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
10	[BUG]  [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  <  =  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  <  =  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  /  numToSkip;  if(available  <  =  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
11	[BUG]  [BUGGY]  long  available  =  available  /  numToSkip;  if(available  <  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  /  numToSkip;  if(available  <  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  /  numToSkip;  if(available  <  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
12	[BUG]  [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  >=  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  >=  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  /  numToSkip;  if(available  >=  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
13	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +  i  +=  skipped;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +  i  +=  skipped;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +  i  +=  skipped;  }	  return    available    +    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +    i    +=    skipped;    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
14	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  return  available  +  numToSkip;  }  [CE]  missing  return  statement  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  <  numToSkip)  {  return  available  +  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  <  numToSkip)  {  return  available  +  numToSkip;  }	  return    available    +    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +    i    +=    skipped;    }    	non-compiled	[CE]  missing  return  statement	122	None	replace
15	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  return  available  +  numToSkip;  }  else  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +  i  +=  skipped;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  <  numToSkip)  {  return  available  +  numToSkip;  }  else  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +  i  +=  skipped;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  <  numToSkip)  {  return  available  +  numToSkip;  }  else  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +  i  +=  skipped;  }	  return    available    +    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +    i    +=    skipped;    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
16	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  skipped;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  skipped;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  skipped;  }	  return    available    +    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +    i    +=    skipped;    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
17	[BUG]  [BUGGY]  long  available  =  input.skip(numToSkip);  if(available  <  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +  i  +=  skipped;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  input.skip(numToSkip);  if(available  <  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +  i  +=  skipped;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  input.skip(numToSkip);  if(available  <  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +  i  +=  skipped;  }	  return    available    +    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +    i    +=    skipped;    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
18	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +  i  +=  skipd;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +  i  +=  skipd;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +  i  +=  skipd;  }	  return    available    +    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +    i    +=    skipped;    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
19	[BUG]  [BUGGY]  long  available  =  input.skip(numToSkip);  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +  i  +=  skipped;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  input.skip(numToSkip);  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +  i  +=  skipped;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  input.skip(numToSkip);  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +  i  +=  skipped;  }	  return    available    +    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +    i    +=    skipped;    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
20	[BUG]  [BUGGY]  long  available  =  numToSkip  -  output.available;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  output.available;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  output.available;	  long    available    =    output.available    -    numToSkip;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	15	None	replace
21	[BUG]  [BUGGY]  long  available  =  input.available  /  numToSkip;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  input.available  /  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  input.available  /  numToSkip;	  long    available    =    output.available    -    numToSkip;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	15	None	replace
22	[BUG]  [BUGGY]  int  available  =  input.available  -  numToSkip;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  int  available  =  input.available  -  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	int  available  =  input.available  -  numToSkip;	  long    available    =    output.available    -    numToSkip;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	15	None	replace
23	[BUG]  [BUGGY]  int  available  =  output.available  -  numToSkip;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  int  available  =  output.available  -  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	int  available  =  output.available  -  numToSkip;	  long    available    =    output.available    -    numToSkip;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	15	None	replace
24	[BUG]  [BUGGY]  long  available  =  numToSkip  -  input.available;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  input.available;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  input.available;	  long    available    =    output.available    -    numToSkip;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	15	None	replace
25	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [CE]  missing  return  statement  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }	  if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.close();    }    	non-compiled	[CE]  missing  return  statement	144	None	replace
26	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }	  if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
27	[BUG]  [BUGGY]  long  available  =  numToSkip;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip;	  if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.close();    }    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	144	None	replace
28	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.flush();  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.flush();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.flush();  }	  if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
29	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  output.close();  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  output.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  output.close();  }	  if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
30	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available.length;  ++i)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available.length;  ++i)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available.length;  ++i)  {  input.close();  }	  if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
31	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  in.close();  }  [CE]  illegal  start  of  expression  [FE]                                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  in.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  in.close();  }	  if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
32	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  if(skipped  >  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  if(skipped  >  0)  {  break;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	for(int  i  =  available;  i  <  numToSkip;  i++)  {  if(skipped  >  0)  {  break;  }	  for(int    i    =    available;    i    <    numToSkip;    i++)    {    if(available    >    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
33	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  if(skip  >  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  if(skip  >  0)  {  break;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	for(int  i  =  available;  i  <  numToSkip;  i++)  {  if(skip  >  0)  {  break;  }	  for(int    i    =    available;    i    <    numToSkip;    i++)    {    if(available    >    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
34	[BUG]  [BUGGY]  for(int  i  =  available;  i  >=  numToSkip;  i++)  {  if(available  >  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  for(int  i  =  available;  i  >=  numToSkip;  i++)  {  if(available  >  0)  {  break;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	for(int  i  =  available;  i  >=  numToSkip;  i++)  {  if(available  >  0)  {  break;  }	  for(int    i    =    available;    i    <    numToSkip;    i++)    {    if(available    >    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
35	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  if(skipped  >=  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  if(skipped  >=  0)  {  break;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	for(int  i  =  available;  i  <  numToSkip;  i++)  {  if(skipped  >=  0)  {  break;  }	  for(int    i    =    available;    i    <    numToSkip;    i++)    {    if(available    >    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
36	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  available;  i++)  {  if(available  >  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  for(int  i  =  0;  i  <  available;  i++)  {  if(available  >  0)  {  break;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	for(int  i  =  0;  i  <  available;  i++)  {  if(available  >  0)  {  break;  }	  for(int    i    =    available;    i    <    numToSkip;    i++)    {    if(available    >    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
37	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  if(skip  ==  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  if(skip  ==  0)  {  break;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	for(int  i  =  available;  i  <  numToSkip;  i++)  {  if(skip  ==  0)  {  break;  }	  for(int    i    =    available;    i    <    numToSkip;    i++)    {    if(available    >    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
38	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
39	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [CE]  possible  loss  of  precision  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.close();    }    	non-compiled	[CE]  possible  loss  of  precision	67	None	replace
40	[BUG]  [BUGGY]  For(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [CE]  '.class'  expected  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  For(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	For(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.close();    }    	non-compiled	[CE]  '.class'  expected	67	None	replace
41	[BUG]  [BUGGY]  while(numToSkip  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(numToSkip  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(numToSkip  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
42	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(numToSkip);  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(numToSkip);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(numToSkip);  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
43	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  available.size();  i  <  numToSkip;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  0)  {  for(int  i  =  available.size();  i  <  numToSkip;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  0)  {  for(int  i  =  available.size();  i  <  numToSkip;  i++)  {  input.close();  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
44	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.flush();  }  [CE]  illegal  start  of  expression  [FE]                                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.flush();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.flush();  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
45	[BUG]  [BUGGY]  return  numToSkip  /  available;  numToSkip  /  available;  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  /  available;  numToSkip  /  available;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    /    available;    numToSkip  /  available;	  	non-compiled	[CE]  not  a  statement	33	None	add
46	[BUG]  [BUGGY]  return  numToSkip  /  available;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  /  available;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    /    available;    if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
47	[BUG]  [BUGGY]  return  numToSkip  /  available;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  /  available;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    /    available;    if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
48	[BUG]  [BUGGY]  return  numToSkip  /  available;  InputStream  available  =  input.readInput();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  /  available;  InputStream  available  =  input.readInput();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    /    available;    InputStream  available  =  input.readInput();	  	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	33	None	add
49	[BUG]  [BUGGY]  return  numToSkip  /  available;  if(available  <  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  /  available;  if(available  <  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    /    available;    if(available  <  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
50	[BUG]  [BUGGY]  return  numToSkip  /  available;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  /  available;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    /    available;    if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
51	[BUG]  [BUGGY]  return  numToSkip  /  available;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  /  available;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    /    available;    if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
52	[BUG]  [BUGGY]  return  numToSkip  /  available;  if(available  <  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  /  available;  if(available  <  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    /    available;    if(available  <  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
53	[BUG]  [BUGGY]  return  available  -  numToSkip;  numToSkip  -=  numToSkip;  [CE]  unreachable  statement  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip;  numToSkip  -=  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  numToSkip;  numToSkip  -=  numToSkip;	  return    numToSkip    -    available;    numToSkip    -=    available;    	non-compiled	[CE]  unreachable  statement	35	None	replace
54	[BUG]  [BUGGY]  return  numToSkip  -  available;  numToSkip  -=  skipped;  [CE]  cannot  find  symbol  skipped  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  -  available;  numToSkip  -=  skipped;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  numToSkip  -  available;  numToSkip  -=  skipped;	  return    numToSkip    -    available;    numToSkip    -=    available;    	non-compiled	[CE]  cannot  find  symbol  skipped	35	None	replace
55	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  return  numToSkip  -  available;  numToSkip  -=  available;  }  [CE]  unreachable  statement  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  <  numToSkip)  {  return  numToSkip  -  available;  numToSkip  -=  available;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  <  numToSkip)  {  return  numToSkip  -  available;  numToSkip  -=  available;  }	  return    numToSkip    -    available;    numToSkip    -=    available;    	non-compiled	[CE]  unreachable  statement	35	None	replace
56	[BUG]  [BUGGY]  int  numToSkip  =  available;  numToSkip  -=  numToSkip;  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  int  numToSkip  =  available;  numToSkip  -=  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	int  numToSkip  =  available;  numToSkip  -=  numToSkip;	  return    numToSkip    -    available;    numToSkip    -=    available;    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	35	None	replace
57	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  return  numToSkip  -  available;  numToSkip  -=  available;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  <  numToSkip)  {  return  numToSkip  -  available;  numToSkip  -=  available;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  <  numToSkip)  {  return  numToSkip  -  available;  numToSkip  -=  available;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    numToSkip    -    available;    numToSkip    -=    available;    	non-compiled	[CE]  unreachable  statement	35	None	replace
58	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  numToSkip  -=  available;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  numToSkip  -=  available;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  numToSkip  -=  available;	  return    numToSkip    -    available;    numToSkip    -=    available;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	35	None	replace
59	[BUG]  [BUGGY]  return  available  -  skipd  *  numToSkip;  [CE]  cannot  find  symbol  skipd  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  skipd  *  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  skipd  *  numToSkip;	  return    available    -    skipped    *    numToSkip;    	non-compiled	[CE]  cannot  find  symbol  skipd	119	None	replace
60	[BUG]  [BUGGY]  return  available  -  numtoSkip  *  numToSkip;  [CE]  cannot  find  symbol  numtoSkip  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numtoSkip  *  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  numtoSkip  *  numToSkip;	  return    available    -    skipped    *    numToSkip;    	non-compiled	[CE]  cannot  find  symbol  numtoSkip	119	None	replace
61	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  /  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  available  -  numToSkip  /  numToSkip;	  return    available    -    skipped    *    numToSkip;    	compilable	  [FE]  AssertionError  	119	3	replace
62	[BUG]  [BUGGY]  return  available  -  numToSkip  /  numToSkip;  [FE]  AssertionError  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  /  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  numToSkip  /  numToSkip;	  return    available    -    skipped    *    numToSkip;    	compilable	  [FE]  AssertionError  	119	3	replace
63	[BUG]  [BUGGY]  return  available  -  skip  *  numToSkip;  [CE]  cannot  find  symbol  skip  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  skip  *  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  skip  *  numToSkip;	  return    available    -    skipped    *    numToSkip;    	non-compiled	[CE]  cannot  find  symbol  skip	119	None	replace
64	[BUG]  [BUGGY]  return  available  -  numToSkip.length;  [CE]  long  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip.length;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  numToSkip.length;	  return    available    -    skipped.length;    	non-compiled	[CE]  long  cannot  be  dereferenced	46	None	replace
65	[BUG]  [BUGGY]  return  available  -  input.length;  [CE]  cannot  find  symbol  length  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  input.length;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  input.length;	  return    available    -    skipped.length;    	non-compiled	[CE]  cannot  find  symbol  length	46	None	replace
66	[BUG]  [BUGGY]  return  available  -  skip.length;  [CE]  cannot  find  symbol  skip  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  skip.length;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  skip.length;	  return    available    -    skipped.length;    	non-compiled	[CE]  cannot  find  symbol  skip	46	None	replace
67	[BUG]  [BUGGY]  return  available  -  skipd.length;  [CE]  cannot  find  symbol  skipd  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  skipd.length;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  skipd.length;	  return    available    -    skipped.length;    	non-compiled	[CE]  cannot  find  symbol  skipd	46	None	replace
68	[BUG]  [BUGGY]  return  available  -  skipped.length  +  1;  [CE]  cannot  find  symbol  skipped  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  skipped.length  +  1;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  skipped.length  +  1;	  return    available    -    skipped.length;    	non-compiled	[CE]  cannot  find  symbol  skipped	46	None	replace
69	[BUG]  [BUGGY]  long  available  =  available  *  numToSkip;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  *  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  *  numToSkip;	  return    available    *    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available.size();    ++i)    {    input.close();    }    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	166	None	replace
70	[BUG]  [BUGGY]  long  numToSkip  =  available  *  numToSkip;  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  numToSkip  =  available  *  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  numToSkip  =  available  *  numToSkip;	  return    available    *    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available.size();    ++i)    {    input.close();    }    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	166	None	replace
71	[BUG]  [BUGGY]  long  available  =  numToSkip  *  available;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  *  available;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  *  available;	  return    available    *    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available.size();    ++i)    {    input.close();    }    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	166	None	replace
72	[BUG]  [BUGGY]  numToSkip  *=  available;  [CE]  missing  return  statement  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  numToSkip  *=  available;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	numToSkip  *=  available;	  return    available    *    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available.size();    ++i)    {    input.close();    }    	non-compiled	[CE]  missing  return  statement	166	None	replace
73	[BUG]  [BUGGY]  long  available  =  available  *  numToSkip;  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  *  numToSkip;  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  *  numToSkip;  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }	  return    available    *    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.close();    }    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	165	None	replace
74	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.flush();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.flush();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.flush();  }	  return    available    *    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
75	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.skip(numToSkip);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.skip(numToSkip);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.skip(numToSkip);  }	  return    available    *    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
76	[BUG]  [BUGGY]  return  available  -  numToSkip  +  available;  InputStream  available  =  input.readInput();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  +  available;  InputStream  available  =  input.readInput();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -    numToSkip    +    available;    InputStream  available  =  input.readInput();	  	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	55	None	add
77	[BUG]  [BUGGY]  return  available  -  numToSkip  +  available;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  +  available;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -    numToSkip    +    available;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }	  	non-compiled	[CE]  illegal  start  of  expression	55	None	add
78	[BUG]  [BUGGY]  return  available  -  numToSkip  +  available;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  +  available;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -    numToSkip    +    available;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }	  	non-compiled	[CE]  illegal  start  of  expression	55	None	add
79	[BUG]  [BUGGY]  return  available  -  numToSkip  +  available;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  i++)  {  available  +=  input.getValue(i);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  +  available;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  i++)  {  available  +=  input.getValue(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -    numToSkip    +    available;    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  i++)  {  available  +=  input.getValue(i);  }	  	non-compiled	[CE]  illegal  start  of  expression	55	None	add
80	[BUG]  [BUGGY]  return  available  -  numToSkip  +  available;  if(available  <  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  i++)  {  available  +=  input.getBytes(i);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  +  available;  if(available  <  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  i++)  {  available  +=  input.getBytes(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -    numToSkip    +    available;    if(available  <  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  i++)  {  available  +=  input.getBytes(i);  }	  	non-compiled	[CE]  illegal  start  of  expression	55	None	add
81	[BUG]  [BUGGY]  return  available  -  numToSkip  +  available;  if(available  <  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  i++)  {  available  +=  input.getChars(i);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  +  available;  if(available  <  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  i++)  {  available  +=  input.getChars(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -    numToSkip    +    available;    if(available  <  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  i++)  {  available  +=  input.getChars(i);  }	  	non-compiled	[CE]  illegal  start  of  expression	55	None	add
82	[BUG]  [BUGGY]  return  available  -  numToSkip  +  available;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  i++)  {  available  +=  input.getBytes(i);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  +  available;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  i++)  {  available  +=  input.getBytes(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -    numToSkip    +    available;    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  i++)  {  available  +=  input.getBytes(i);  }	  	non-compiled	[CE]  illegal  start  of  expression	55	None	add
83	[BUG]  [BUGGY]  return  available  -  numToSkip  +  available;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  i++)  {  available  +=  input.getChars(i);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  +  available;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  i++)  {  available  +=  input.getChars(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -    numToSkip    +    available;    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  i++)  {  available  +=  input.getChars(i);  }	  	non-compiled	[CE]  illegal  start  of  expression	55	None	add
84	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
85	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(numToSkip);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(numToSkip);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(numToSkip);  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
86	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.flush();  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.flush();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.flush();  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
87	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  output.close();  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  output.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  output.close();  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
88	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.flush();  }  [CE]  possible  loss  of  precision  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.flush();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.flush();  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.close();    }    	non-compiled	[CE]  possible  loss  of  precision	101	None	replace
89	[BUG]  [BUGGY]  long  available  =  numToSkip  -  skipped;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  skipped;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  skipped;	  long    available    =    available    -    skipped;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	133	None	replace
90	[BUG]  [BUGGY]  long  available  =  input.available  -  skipped;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  input.available  -  skipped;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  input.available  -  skipped;	  long    available    =    available    -    skipped;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	133	None	replace
91	[BUG]  [BUGGY]  long  available  =  available  -  skipped  +  1;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  -  skipped  +  1;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  -  skipped  +  1;	  long    available    =    available    -    skipped;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	133	None	replace
92	[BUG]  [BUGGY]  int  available  =  available  -  skipped;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  int  available  =  available  -  skipped;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	int  available  =  available  -  skipped;	  long    available    =    available    -    skipped;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	133	None	replace
93	[BUG]  [BUGGY]  long  available  =  this.available  -  skipped;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  this.available  -  skipped;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  this.available  -  skipped;	  long    available    =    available    -    skipped;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	133	None	replace
94	[BUG]  [BUGGY]  long  available  =  skipped  -  available;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  skipped  -  available;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  skipped  -  available;	  long    available    =    available    -    skipped;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	133	None	replace
95	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
96	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  possible  loss  of  precision	112	None	replace
97	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(available  <  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(available  <  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(available  <  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
98	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >=  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >=  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(available  >=  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
99	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(long  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(long  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(long  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
100	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(available  ==  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(available  ==  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(available  ==  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
101	[BUG]  [BUGGY]  numToSkip  =  available  /  numToSkip;  [CE]  missing  return  statement  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  numToSkip  =  available  /  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	numToSkip  =  available  /  numToSkip;	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    i;    }    	non-compiled	[CE]  missing  return  statement	84	None	replace
102	[BUG]  [BUGGY]  long  numToSkip  =  available  /  numToSkip;  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  numToSkip  =  available  /  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  numToSkip  =  available  /  numToSkip;	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    i;    }    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	84	None	replace
103	[BUG]  [BUGGY]  numToSkip  =  available  *  numToSkip;  [CE]  missing  return  statement  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  numToSkip  =  available  *  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	numToSkip  =  available  *  numToSkip;	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    i;    }    	non-compiled	[CE]  missing  return  statement	84	None	replace
104	[BUG]  [BUGGY]  long  available  =  numToSkip  /  numToSkip;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  /  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  /  numToSkip;	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    i;    }    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	84	None	replace
105	[BUG]  [BUGGY]  long  available  =  available  /  numToSkip;  if(available  <  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  /  numToSkip;  if(available  <  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  /  numToSkip;  if(available  <  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
106	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  return  available  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  <  numToSkip)  {  return  available  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  <  numToSkip)  {  return  available  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
107	[BUG]  [BUGGY]  long  available  =  available  /  numToSkip;  if(available  >=  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  /  numToSkip;  if(available  >=  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  /  numToSkip;  if(available  >=  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
108	[BUG]  [BUGGY]  long  available  =  available  *  numToSkip;  if(available  <  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  *  numToSkip;  if(available  <  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  *  numToSkip;  if(available  <  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
109	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  return  available  /  numToSkip;  }  else  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  <  numToSkip)  {  return  available  /  numToSkip;  }  else  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  <  numToSkip)  {  return  available  /  numToSkip;  }  else  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
110	[BUG]  [BUGGY]  long  available  =  available  /  numToSkip;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  /  numToSkip;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  /  numToSkip;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
111	[BUG]  [BUGGY]  long  available  =  numToSkip  -  this.available;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  this.available;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  this.available;	  long    available    =    this.available    -    numToSkip;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	107	None	replace
112	[BUG]  [BUGGY]  int  available  =  this.available  -  numToSkip;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  int  available  =  this.available  -  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	int  available  =  this.available  -  numToSkip;	  long    available    =    this.available    -    numToSkip;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	107	None	replace
113	[BUG]  [BUGGY]  long  available  =  this.available  /  numToSkip;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  this.available  /  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  this.available  /  numToSkip;	  long    available    =    this.available    -    numToSkip;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	107	None	replace
114	[BUG]  [BUGGY]  return  available  /  numToSkip  +  skip;  [CE]  cannot  find  symbol  skip  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  numToSkip  +  skip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /  numToSkip  +  skip;	  return    available    /    numToSkip    +    skipped;    	non-compiled	[CE]  cannot  find  symbol  skip	138	None	replace
115	[BUG]  [BUGGY]  return  available  /  numToSkip  +  input.length;  [CE]  cannot  find  symbol  length  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  numToSkip  +  input.length;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /  numToSkip  +  input.length;	  return    available    /    numToSkip    +    skipped;    	non-compiled	[CE]  cannot  find  symbol  length	138	None	replace
116	[BUG]  [BUGGY]  return  available  /  numToSkip  +  offset;  [CE]  cannot  find  symbol  offset  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  numToSkip  +  offset;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /  numToSkip  +  offset;	  return    available    /    numToSkip    +    skipped;    	non-compiled	[CE]  cannot  find  symbol  offset	138	None	replace
117	[BUG]  [BUGGY]  return  available  *  numToSkip  /  numToSkip;  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  *  numToSkip  /  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  /  numToSkip;  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  *  numToSkip  /  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    /    numToSkip;    if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  *  numToSkip  /  numToSkip;  }	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
118	[BUG]  [BUGGY]  return  available  *  numToSkip  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  *  numToSkip  /  numToSkip;  }  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  *  numToSkip  /  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    /    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  *  numToSkip  /  numToSkip;  }	  	non-compiled	[CE]  not  a  statement	19	None	add
119	[BUG]  [BUGGY]  return  available  *  numToSkip  /  numToSkip;  if(available  >  numToSkip)  {  if(skipped  >  0)  {  return  available  *  numToSkip  /  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  /  numToSkip;  if(available  >  numToSkip)  {  if(skipped  >  0)  {  return  available  *  numToSkip  /  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    /    numToSkip;    if(available  >  numToSkip)  {  if(skipped  >  0)  {  return  available  *  numToSkip  /  numToSkip;  }	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
120	[BUG]  [BUGGY]  return  available  *  numToSkip  /  numToSkip;  if(available  >  numToSkip)  {  if(skipped  >=  0)  {  return  available  *  numToSkip  /  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  /  numToSkip;  if(available  >  numToSkip)  {  if(skipped  >=  0)  {  return  available  *  numToSkip  /  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    /    numToSkip;    if(available  >  numToSkip)  {  if(skipped  >=  0)  {  return  available  *  numToSkip  /  numToSkip;  }	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
121	[BUG]  [BUGGY]  return  available  *  numToSkip  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  *  numToSkip  /  numToSkip;  }  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  *  numToSkip  /  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    /    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  *  numToSkip  /  numToSkip;  }	  	non-compiled	[CE]  not  a  statement	19	None	add
122	[BUG]  [BUGGY]  return  available  *  numToSkip  /  numToSkip;  InputStream  available  =  input.readInput();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  /  numToSkip;  InputStream  available  =  input.readInput();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    /    numToSkip;    InputStream  available  =  input.readInput();	  	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	19	None	add
123	[BUG]  [BUGGY]  return  available  *  numToSkip  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  *  numToSkip  -=  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  *  numToSkip  -=  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    /    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  *  numToSkip  -=  numToSkip;  }	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
124	[BUG]  [BUGGY]  return  available  *  numToSkip  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  *  numToSkip  +=  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  *  numToSkip  +=  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    /    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  *  numToSkip  +=  numToSkip;  }	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
125	[BUG]  [BUGGY]  return  available  -(numToSkip  *  numToSkip);  InputStream  available  =  input.readInput();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -(numToSkip  *  numToSkip);  InputStream  available  =  input.readInput();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -(numToSkip    *    numToSkip);    InputStream  available  =  input.readInput();	  	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	151	None	add
126	[BUG]  [BUGGY]  return  available  -(numToSkip  *  numToSkip);  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip  +=  numToSkip;  numToSkip  +=  numToSkip);  }  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -(numToSkip  *  numToSkip);  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip  +=  numToSkip;  numToSkip  +=  numToSkip);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -(numToSkip    *    numToSkip);    if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip  +=  numToSkip;  numToSkip  +=  numToSkip);  }	  	non-compiled	[CE]  ')'  expected	151	None	add
127	[BUG]  [BUGGY]  return  available  -(numToSkip  *  numToSkip);  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  available  +=  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -(numToSkip  *  numToSkip);  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  available  +=  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -(numToSkip    *    numToSkip);    if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  available  +=  numToSkip;  }	  	non-compiled	[CE]  illegal  start  of  expression	151	None	add
128	[BUG]  [BUGGY]  return  available  -(numToSkip  *  numToSkip);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -(numToSkip  *  numToSkip);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -(numToSkip    *    numToSkip);    if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }	  	non-compiled	[CE]  illegal  start  of  expression	151	None	add
129	[BUG]  [BUGGY]  return  available  -(numToSkip  *  numToSkip);  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -(numToSkip  *  numToSkip);  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -(numToSkip    *    numToSkip);    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }	  	non-compiled	[CE]  illegal  start  of  expression	151	None	add
130	[BUG]  [BUGGY]  return  available  -(numToSkip  *  numToSkip);  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -(numToSkip  *  numToSkip);  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -(numToSkip    *    numToSkip);    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }	  	non-compiled	[CE]  illegal  start  of  expression	151	None	add
131	[BUG]  [BUGGY]  return  available  -(numToSkip  *  numToSkip);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -(numToSkip  *  numToSkip);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -(numToSkip    *    numToSkip);    if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }	  	non-compiled	[CE]  illegal  start  of  expression	151	None	add
132	[BUG]  [BUGGY]  return  available  -(numToSkip  *  numToSkip);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -(numToSkip  *  numToSkip);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -(numToSkip    *    numToSkip);    if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }	  	non-compiled	[CE]  illegal  start  of  expression	151	None	add
133	[BUG]  [BUGGY]  System.arraycopy(input,  numToSkip,  available,  numToSkip);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  System.arraycopy(input,  numToSkip,  available,  numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	System.arraycopy(input,  numToSkip,  available,  numToSkip);	  return    available    *    numToSkip;    System.arraycopy(input,    numToSkip,    available,    numToSkip);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	168	None	replace
134	[BUG]  [BUGGY]  return  available  *  numToSkip,  skipped;  System.arraycopy(input,  numToSkip,  available,  numToSkip);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip,  skipped;  System.arraycopy(input,  numToSkip,  available,  numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip,  skipped;  System.arraycopy(input,  numToSkip,  available,  numToSkip);	  return    available    *    numToSkip;    System.arraycopy(input,    numToSkip,    available,    numToSkip);    	non-compiled	[CE]  ';'  expected	168	None	replace
135	[BUG]  [BUGGY]  numToSkip  *=  numToSkip;  System.arraycopy(input,  numToSkip,  available,  numToSkip);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  numToSkip  *=  numToSkip;  System.arraycopy(input,  numToSkip,  available,  numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	numToSkip  *=  numToSkip;  System.arraycopy(input,  numToSkip,  available,  numToSkip);	  return    available    *    numToSkip;    System.arraycopy(input,    numToSkip,    available,    numToSkip);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	168	None	replace
136	[BUG]  [BUGGY]  return  available  *  numToSkip  +  1;  System.arraycopy(input,  numToSkip,  available,  numToSkip);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  1;  System.arraycopy(input,  numToSkip,  available,  numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip  +  1;  System.arraycopy(input,  numToSkip,  available,  numToSkip);	  return    available    *    numToSkip;    System.arraycopy(input,    numToSkip,    available,    numToSkip);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	168	None	replace
137	[BUG]  [BUGGY]  numToSkip  *=  available;  System.arraycopy(input,  numToSkip,  available,  numToSkip);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  numToSkip  *=  available;  System.arraycopy(input,  numToSkip,  available,  numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	numToSkip  *=  available;  System.arraycopy(input,  numToSkip,  available,  numToSkip);	  return    available    *    numToSkip;    System.arraycopy(input,    numToSkip,    available,    numToSkip);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	168	None	replace
138	[BUG]  [BUGGY]  int  numToSkip  =  input.readInt();  System.arraycopy(input,  numToSkip,  available,  numToSkip);  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  int  numToSkip  =  input.readInt();  System.arraycopy(input,  numToSkip,  available,  numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	int  numToSkip  =  input.readInt();  System.arraycopy(input,  numToSkip,  available,  numToSkip);	  return    available    *    numToSkip;    System.arraycopy(input,    numToSkip,    available,    numToSkip);    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	168	None	replace
139	[BUG]  [BUGGY]  return  input  *  numToSkip;  System.arraycopy(input,  numToSkip,  available,  numToSkip,  skipped);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  input  *  numToSkip;  System.arraycopy(input,  numToSkip,  available,  numToSkip,  skipped);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  input  *  numToSkip;  System.arraycopy(input,  numToSkip,  available,  numToSkip,  skipped);	  return    available    *    numToSkip;    System.arraycopy(input,    numToSkip,    available,    numToSkip);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	168	None	replace
140	[BUG]  [BUGGY]  InputStream  available  =  input.readInput();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  InputStream  available  =  input.readInput();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	InputStream  available  =  input.readInput();	  return    available    /    numToSkip;    InputStream    available    =    input.readInput();    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	78	None	replace
141	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  return  available  /  numToSkip;  InputStream  available  =  input.readInput();  }  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  <  numToSkip)  {  return  available  /  numToSkip;  InputStream  available  =  input.readInput();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  <  numToSkip)  {  return  available  /  numToSkip;  InputStream  available  =  input.readInput();  }	  return    available    /    numToSkip;    InputStream    available    =    input.readInput();    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	78	None	replace
142	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  return  available  /  numToSkip;  InputStream  available  =  input.readInput();  }  else  {  skip(input,  numToSkip);  }  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  <  numToSkip)  {  return  available  /  numToSkip;  InputStream  available  =  input.readInput();  }  else  {  skip(input,  numToSkip);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  <  numToSkip)  {  return  available  /  numToSkip;  InputStream  available  =  input.readInput();  }  else  {  skip(input,  numToSkip);  }	  return    available    /    numToSkip;    InputStream    available    =    input.readInput();    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	78	None	replace
143	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  return  available  /  numToSkip;  InputStream  available  =  input.readInput();  }  else  {  skip(input,  numToSkip  +  skipped);  }  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  <  numToSkip)  {  return  available  /  numToSkip;  InputStream  available  =  input.readInput();  }  else  {  skip(input,  numToSkip  +  skipped);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  <  numToSkip)  {  return  available  /  numToSkip;  InputStream  available  =  input.readInput();  }  else  {  skip(input,  numToSkip  +  skipped);  }	  return    available    /    numToSkip;    InputStream    available    =    input.readInput();    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	78	None	replace
144	[BUG]  [BUGGY]  numToSkip  =  available  *  numToSkip;  InputStream  available  =  input.readInput();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  numToSkip  =  available  *  numToSkip;  InputStream  available  =  input.readInput();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	numToSkip  =  available  *  numToSkip;  InputStream  available  =  input.readInput();	  return    available    /    numToSkip;    InputStream    available    =    input.readInput();    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	78	None	replace
145	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  return  available  /  numToSkip;  InputStream  available  =  input.readInput();  }  else  {  skip(input,  numToSkip,  skipped);  }  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  <  numToSkip)  {  return  available  /  numToSkip;  InputStream  available  =  input.readInput();  }  else  {  skip(input,  numToSkip,  skipped);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  <  numToSkip)  {  return  available  /  numToSkip;  InputStream  available  =  input.readInput();  }  else  {  skip(input,  numToSkip,  skipped);  }	  return    available    /    numToSkip;    InputStream    available    =    input.readInput();    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	78	None	replace
146	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  return  available  /  numToSkip;  }  else  {  available  =  input.readInput();  }  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  <  numToSkip)  {  return  available  /  numToSkip;  }  else  {  available  =  input.readInput();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  <  numToSkip)  {  return  available  /  numToSkip;  }  else  {  available  =  input.readInput();  }	  return    available    /    numToSkip;    InputStream    available    =    input.readInput();    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
147	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  +  1;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  available  -  numToSkip  +  1;	  return    numToSkip    -    available    +    1;    	compilable	  [FE]  AssertionError  	59	3	replace
148	[BUG]  [BUGGY]  return  available  -  numToSkip  +  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  +  1;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  numToSkip  +  1;	  return    numToSkip    -    available    +    1;    	compilable	  [FE]  AssertionError  	59	3	replace
149	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  -  available  *  1;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  numToSkip  -  available  *  1;	  return    numToSkip    -    available    +    1;    	compilable	  [FE]  AssertionError  	59	3	replace
150	[BUG]  [BUGGY]  return  numToSkip  -  available  *  1;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  -  available  *  1;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  numToSkip  -  available  *  1;	  return    numToSkip    -    available    +    1;    	compilable	  [FE]  AssertionError  	59	3	replace
151	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  -  available  +  1L;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  numToSkip  -  available  +  1L;	  return    numToSkip    -    available    +    1;    	compilable	  [FE]  AssertionError  	59	3	replace
152	[BUG]  [BUGGY]  return  numToSkip  -  available  +  1L;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  -  available  +  1L;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  numToSkip  -  available  +  1L;	  return    numToSkip    -    available    +    1;    	compilable	  [FE]  AssertionError  	59	3	replace
153	[BUG]  [BUGGY]  return  available  numToSkip  -  available  +  1;  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  numToSkip  -  available  +  1;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  numToSkip  -  available  +  1;	  return    numToSkip    -    available    +    1;    	non-compiled	[CE]  ';'  expected	59	None	replace
154	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  available;  ++i)  {  input.skip(available  +  i);  }  [CE]  missing  return  statement  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  for(int  i  =  0;  i  <  available;  ++i)  {  input.skip(available  +  i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	for(int  i  =  0;  i  <  available;  ++i)  {  input.skip(available  +  i);  }	  if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.skip(available    +    i);    }    	non-compiled	[CE]  missing  return  statement	147	None	replace
155	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.skip(available  +  i);  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.skip(available  +  i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.skip(available  +  i);  }	  if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.skip(available    +    i);    }    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
156	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  available;  ++i)  {  input.skip(available  +  i);  }  [CE]  '.class'  expected  [FE]                                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  For(int  i  =  0;  i  <  available;  ++i)  {  input.skip(available  +  i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	For(int  i  =  0;  i  <  available;  ++i)  {  input.skip(available  +  i);  }	  if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.skip(available    +    i);    }    	non-compiled	[CE]  '.class'  expected	147	None	replace
157	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  skipped;  }  [CE]  illegal  start  of  expression  [FE]                                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  skipped;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  skipped;  }	  if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.skip(available    +    i);    }    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
158	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.skip(available  +  i);  }  [CE]  illegal  start  of  expression  [FE]                                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.skip(available  +  i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.skip(available  +  i);  }	  if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.skip(available    +    i);    }    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
159	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  i;  }  [CE]  illegal  start  of  expression  [FE]                                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  i;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  i;  }	  if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.skip(available    +    i);    }    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
160	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.length();  }  [CE]  illegal  start  of  expression  [FE]                                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.length();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.length();  }	  if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.skip(available    +    i);    }    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
161	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  return  numToSkip  -  available;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  <  numToSkip)  {  return  numToSkip  -  available;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  <  numToSkip)  {  return  numToSkip  -  available;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
162	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
163	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  return  available  -  numToSkip;  }  else  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(numToSkip  >  0)  {  return  available  -  numToSkip;  }  else  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(numToSkip  >  0)  {  return  available  -  numToSkip;  }  else  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
164	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
165	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  return  numToSkip  -  available;  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  <  numToSkip)  {  return  numToSkip  -  available;  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  <  numToSkip)  {  return  numToSkip  -  available;  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
166	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(available  <  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(available  <  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(available  <  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
167	[BUG]  [BUGGY]  if(available  <  0)  {  return  numToSkip  -  available;  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  <  0)  {  return  numToSkip  -  available;  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  <  0)  {  return  numToSkip  -  available;  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
168	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >=  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >=  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(available  >=  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
169	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [CE]  missing  return  statement  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  missing  return  statement	173	None	replace
170	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(long  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(long  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(long  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
171	[BUG]  [BUGGY]  return  numToSkip  /  skipped;  [CE]  cannot  find  symbol  skipped  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  /  skipped;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  numToSkip  /  skipped;	  return    numToSkip    -    skipped;    	non-compiled	[CE]  cannot  find  symbol  skipped	63	None	replace
172	[BUG]  [BUGGY]  return  numToSkip  -  available.longValue();  [CE]  long  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  -  available.longValue();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  numToSkip  -  available.longValue();	  return    numToSkip    -    skipped;    	non-compiled	[CE]  long  cannot  be  dereferenced	63	None	replace
173	[BUG]  [BUGGY]  return  this.numToSkip  -  available;  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  this.numToSkip  -  available;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  this.numToSkip  -  available;	  return    numToSkip    -    skipped;    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	63	None	replace
174	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
175	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
176	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  return  available  -  numToSkip;  }  else  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(numToSkip  >  0)  {  return  available  -  numToSkip;  }  else  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(numToSkip  >  0)  {  return  available  -  numToSkip;  }  else  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
177	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(available  <  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(available  <  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(available  <  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
178	[BUG]  [BUGGY]  int  available  =  numToSkip  -  available;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  int  available  =  numToSkip  -  available;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	int  available  =  numToSkip  -  available;	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	115	None	replace
179	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getRead();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getRead();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getRead();  }	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getRead();    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
180	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  return  available  -  numToSkip;  }  else  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getRead();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(numToSkip  >  0)  {  return  available  -  numToSkip;  }  else  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getRead();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(numToSkip  >  0)  {  return  available  -  numToSkip;  }  else  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getRead();  }	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getRead();    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
181	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getRead();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getRead();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getRead();  }	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getRead();    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
182	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(available  <  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getRead();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(available  <  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getRead();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(available  <  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getRead();  }	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getRead();    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
183	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  return  available  -  numToSkip;  }  else  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getRead();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(numToSkip  >  0)  {  return  available  -  numToSkip;  }  else  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getRead();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(numToSkip  >  0)  {  return  available  -  numToSkip;  }  else  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getRead();  }	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getRead();    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
184	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  return  available  -  numToSkip;  }  [CE]  missing  return  statement  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(numToSkip  >  0)  {  return  available  -  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(numToSkip  >  0)  {  return  available  -  numToSkip;  }	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getRead();    }    	non-compiled	[CE]  missing  return  statement	116	None	replace
185	[BUG]  [BUGGY]  numToSkip  =  available  +  numToSkip;  InputStream  available  =  input.readInput();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  numToSkip  =  available  +  numToSkip;  InputStream  available  =  input.readInput();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	numToSkip  =  available  +  numToSkip;  InputStream  available  =  input.readInput();	  return    available    +    numToSkip;    InputStream    available    =    input.readInput();    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	1	None	replace
186	[BUG]  [BUGGY]  numToSkip  +=  available;  InputStream  available  =  input.readInput();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  numToSkip  +=  available;  InputStream  available  =  input.readInput();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	numToSkip  +=  available;  InputStream  available  =  input.readInput();	  return    available    +    numToSkip;    InputStream    available    =    input.readInput();    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	1	None	replace
187	[BUG]  [BUGGY]  int  numToSkip  =  input.readInput();  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  int  numToSkip  =  input.readInput();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	int  numToSkip  =  input.readInput();	  return    available    +    numToSkip;    InputStream    available    =    input.readInput();    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	1	None	replace
188	[BUG]  [BUGGY]  int  numToSkip  =  available  +  numToSkip;  InputStream  available  =  input.readInput();  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  int  numToSkip  =  available  +  numToSkip;  InputStream  available  =  input.readInput();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	int  numToSkip  =  available  +  numToSkip;  InputStream  available  =  input.readInput();	  return    available    +    numToSkip;    InputStream    available    =    input.readInput();    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	1	None	replace
189	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  *  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  *  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  *  numToSkip;  }	  return    available    *    numToSkip;    if(available    <    numToSkip)    {    if(skipped    >    0)    {    return    available    *    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
190	[BUG]  [BUGGY]  long  available  =  available  *  numToSkip;  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  *  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  *  numToSkip;  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  *  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  *  numToSkip;  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  *  numToSkip;  }	  return    available    *    numToSkip;    if(available    <    numToSkip)    {    if(skipped    >    0)    {    return    available    *    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
191	[BUG]  [BUGGY]  long  available  =  available  *  numToSkip;  if(skipped  <  0)  {  return  available  *  numToSkip;  }  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  *  numToSkip;  if(skipped  <  0)  {  return  available  *  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  *  numToSkip;  if(skipped  <  0)  {  return  available  *  numToSkip;  }	  return    available    *    numToSkip;    if(available    <    numToSkip)    {    if(skipped    >    0)    {    return    available    *    numToSkip;    }    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	70	None	replace
192	[BUG]  [BUGGY]  long  available  =  available  *  numToSkip;  if(skipped  >  0)  {  return  available  *  numToSkip;  }  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  *  numToSkip;  if(skipped  >  0)  {  return  available  *  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  *  numToSkip;  if(skipped  >  0)  {  return  available  *  numToSkip;  }	  return    available    *    numToSkip;    if(available    <    numToSkip)    {    if(skipped    >    0)    {    return    available    *    numToSkip;    }    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	70	None	replace
193	[BUG]  [BUGGY]  long  available  =  available  *  numToSkip;  if(available  <  0)  {  if(skipped  >  0)  {  return  available  *  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  *  numToSkip;  if(available  <  0)  {  if(skipped  >  0)  {  return  available  *  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  *  numToSkip;  if(available  <  0)  {  if(skipped  >  0)  {  return  available  *  numToSkip;  }	  return    available    *    numToSkip;    if(available    <    numToSkip)    {    if(skipped    >    0)    {    return    available    *    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
194	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  <  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  <  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }	  return    available    +    numToSkip;    if(available    <    numToSkip)    {    for(int    i    =    0;    i    <    available.size();    ++i)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
195	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }  [CE]  long  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }	  return    available    +    numToSkip;    if(available    <    numToSkip)    {    for(int    i    =    0;    i    <    available.size();    ++i)    {    input.close();    }    	non-compiled	[CE]  long  cannot  be  dereferenced	162	None	replace
196	[BUG]  [BUGGY]  long  available  =  available  +  numToSkip;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  +  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  +  numToSkip;	  return    available    +    numToSkip;    if(available    <    numToSkip)    {    for(int    i    =    0;    i    <    available.size();    ++i)    {    input.close();    }    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	162	None	replace
197	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  return  available  +  numToSkip;  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  <  numToSkip)  {  return  available  +  numToSkip;  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  <  numToSkip)  {  return  available  +  numToSkip;  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }	  return    available    +    numToSkip;    if(available    <    numToSkip)    {    for(int    i    =    0;    i    <    available.size();    ++i)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
198	[BUG]  [BUGGY]  long  available  =  available  +  numToSkip;  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  +  numToSkip;  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  +  numToSkip;  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }	  return    available    +    numToSkip;    if(available    <    numToSkip)    {    for(int    i    =    0;    i    <    available.size();    ++i)    {    input.close();    }    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	162	None	replace
199	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  return  available  +  numToSkip;  }  else  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  <  numToSkip)  {  return  available  +  numToSkip;  }  else  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  <  numToSkip)  {  return  available  +  numToSkip;  }  else  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }	  return    available    +    numToSkip;    if(available    <    numToSkip)    {    for(int    i    =    0;    i    <    available.size();    ++i)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
200	[BUG]  [BUGGY]  return  numToSkip  -  available  +  1;  numToSkip  -=  available  +  1;  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  -  available  +  1;  numToSkip  -=  available  +  1;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    -    available    +    1;    numToSkip  -=  available  +  1;	  	non-compiled	[CE]  unreachable  statement	58	None	add
201	[BUG]  [BUGGY]  return  numToSkip  -  available  +  1;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  -  available  +  1;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    -    available    +    1;    if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }	  	non-compiled	[CE]  illegal  start  of  expression	58	None	add
202	[BUG]  [BUGGY]  return  numToSkip  -  available  +  1;  InputStream  available  =  input.readInput();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  -  available  +  1;  InputStream  available  =  input.readInput();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    -    available    +    1;    InputStream  available  =  input.readInput();	  	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	58	None	add
203	[BUG]  [BUGGY]  return  numToSkip  -  available  +  1;  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  available  +=  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  -  available  +  1;  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  available  +=  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    -    available    +    1;    if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  available  +=  numToSkip;  }	  	non-compiled	[CE]  illegal  start  of  expression	58	None	add
204	[BUG]  [BUGGY]  return  numToSkip  -  available  +  1;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  -  available  +  1;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    -    available    +    1;    if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }	  	non-compiled	[CE]  illegal  start  of  expression	58	None	add
205	[BUG]  [BUGGY]  return  numToSkip  -  available  +  1;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  i;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  -  available  +  1;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  i;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    -    available    +    1;    if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  i;  }	  	non-compiled	[CE]  illegal  start  of  expression	58	None	add
206	[BUG]  [BUGGY]  return  numToSkip  -  available  +  1;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  -  available  +  1;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    -    available    +    1;    if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }	  	non-compiled	[CE]  illegal  start  of  expression	58	None	add
207	[BUG]  [BUGGY]  return  numToSkip  -  available  +  1;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  -  available  +  1;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    -    available    +    1;    if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }	  	non-compiled	[CE]  illegal  start  of  expression	58	None	add
208	[BUG]  [BUGGY]  return  available  *  numToSkip;  System.arraycopy(input,  numToSkip,  available,  0,  skipped);  [CE]  cannot  find  symbol  skipped  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip;  System.arraycopy(input,  numToSkip,  available,  0,  skipped);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip;  System.arraycopy(input,  numToSkip,  available,  0,  skipped);	  return    available    *    numToSkip;    System.arraycopy(input,    numToSkip,    available,    0);    	non-compiled	[CE]  cannot  find  symbol  skipped	167	None	replace
209	[BUG]  [BUGGY]  System.arraycopy(input,  numToSkip,  available,  0);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  System.arraycopy(input,  numToSkip,  available,  0);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	System.arraycopy(input,  numToSkip,  available,  0);	  return    available    *    numToSkip;    System.arraycopy(input,    numToSkip,    available,    0);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	167	None	replace
210	[BUG]  [BUGGY]  return  available  *  numToSkip,  skipped;  System.arraycopy(input,  numToSkip,  available,  0);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip,  skipped;  System.arraycopy(input,  numToSkip,  available,  0);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip,  skipped;  System.arraycopy(input,  numToSkip,  available,  0);	  return    available    *    numToSkip;    System.arraycopy(input,    numToSkip,    available,    0);    	non-compiled	[CE]  ';'  expected	167	None	replace
211	[BUG]  [BUGGY]  return  available  *  numToSkip  +  1;  System.arraycopy(input,  numToSkip,  available,  0);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  1;  System.arraycopy(input,  numToSkip,  available,  0);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip  +  1;  System.arraycopy(input,  numToSkip,  available,  0);	  return    available    *    numToSkip;    System.arraycopy(input,    numToSkip,    available,    0);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	167	None	replace
212	[BUG]  [BUGGY]  numToSkip  *=  numToSkip;  System.arraycopy(input,  numToSkip,  available,  0);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  numToSkip  *=  numToSkip;  System.arraycopy(input,  numToSkip,  available,  0);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	numToSkip  *=  numToSkip;  System.arraycopy(input,  numToSkip,  available,  0);	  return    available    *    numToSkip;    System.arraycopy(input,    numToSkip,    available,    0);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	167	None	replace
213	[BUG]  [BUGGY]  return  available  *  numToSkip;  System.arraycopy(input,  numToSkip,  available,  0,  numToSkip);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip;  System.arraycopy(input,  numToSkip,  available,  0,  numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip;  System.arraycopy(input,  numToSkip,  available,  0,  numToSkip);	  return    available    *    numToSkip;    System.arraycopy(input,    numToSkip,    available,    0);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	167	None	replace
214	[BUG]  [BUGGY]  return  numToSkip  *  available;  System.arraycopy(input,  numToSkip,  available,  0,  numToSkip);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  *  available;  System.arraycopy(input,  numToSkip,  available,  0,  numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  numToSkip  *  available;  System.arraycopy(input,  numToSkip,  available,  0,  numToSkip);	  return    available    *    numToSkip;    System.arraycopy(input,    numToSkip,    available,    0);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	167	None	replace
215	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [CE]  possible  loss  of  precision  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.length();    }    	non-compiled	[CE]  possible  loss  of  precision	69	None	replace
216	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.length();    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
217	[BUG]  [BUGGY]  For(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [CE]  '.class'  expected  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  For(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	For(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.length();    }    	non-compiled	[CE]  '.class'  expected	69	None	replace
218	[BUG]  [BUGGY]  while(numToSkip  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(numToSkip  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(numToSkip  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.length();    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
219	[BUG]  [BUGGY]  while(available  >  0)  {  available  +=  input.length();  [CE]  illegal  start  of  expression  [FE]                                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  0)  {  available  +=  input.length();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  0)  {  available  +=  input.length();	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.length();    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
220	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [CE]  illegal  start  of  expression  [FE]                                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.length();    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
221	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  available.length;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [CE]  illegal  start  of  expression  [FE]                                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  0)  {  for(int  i  =  available.length;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  0)  {  for(int  i  =  available.length;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.length();    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
222	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  if(skipped  >  0)  {  return  available  +  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  if(skipped  >  0)  {  return  available  +  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  if(skipped  >  0)  {  return  available  +  numToSkip;  }	  return    available    +    numToSkip;    if(available    >    numToSkip)    {    if(skipped    >    0)    {    return    available    +    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
223	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  +  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  +  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  +  numToSkip;  }	  return    available    +    numToSkip;    if(available    >    numToSkip)    {    if(skipped    >    0)    {    return    available    +    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
224	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  return  available  +  numToSkip;  }  [CE]  missing  return  statement  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(numToSkip  >  0)  {  return  available  +  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(numToSkip  >  0)  {  return  available  +  numToSkip;  }	  return    available    +    numToSkip;    if(available    >    numToSkip)    {    if(skipped    >    0)    {    return    available    +    numToSkip;    }    	non-compiled	[CE]  missing  return  statement	123	None	replace
225	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  if(skipped  <  0)  {  return  available  +  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  if(skipped  <  0)  {  return  available  +  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  if(skipped  <  0)  {  return  available  +  numToSkip;  }	  return    available    +    numToSkip;    if(available    >    numToSkip)    {    if(skipped    >    0)    {    return    available    +    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
226	[BUG]  [BUGGY]  if(numToSkip  >  available)  {  return  available  +  numToSkip;  }  [CE]  missing  return  statement  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(numToSkip  >  available)  {  return  available  +  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(numToSkip  >  available)  {  return  available  +  numToSkip;  }	  return    available    +    numToSkip;    if(available    >    numToSkip)    {    if(skipped    >    0)    {    return    available    +    numToSkip;    }    	non-compiled	[CE]  missing  return  statement	123	None	replace
227	[BUG]  [BUGGY]  long  available  =  input.skip(numToSkip);  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  input.skip(numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  input.skip(numToSkip);	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	111	None	replace
228	[BUG]  [BUGGY]  long  available  =  input.getLength();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  input.getLength();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  input.getLength();	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	111	None	replace
229	[BUG]  [BUGGY]  if(numToSkip  <  available)  {  return  available  -  numToSkip;  }  [CE]  missing  return  statement  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(numToSkip  <  available)  {  return  available  -  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(numToSkip  <  available)  {  return  available  -  numToSkip;  }	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  missing  return  statement	111	None	replace
230	[BUG]  [BUGGY]  int  numToSkip  =  input.read();  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  int  numToSkip  =  input.read();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	int  numToSkip  =  input.read();	  return    available    +    numToSkip;    int    numToSkip    =    input.read();    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	2	None	replace
231	[BUG]  [BUGGY]  long  numToSkip  =  input.read();  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  numToSkip  =  input.read();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  numToSkip  =  input.read();	  return    available    +    numToSkip;    int    numToSkip    =    input.read();    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	2	None	replace
232	[BUG]  [BUGGY]  Integer  numToSkip  =  input.read();  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  Integer  numToSkip  =  input.read();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	Integer  numToSkip  =  input.read();	  return    available    +    numToSkip;    int    numToSkip    =    input.read();    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	2	None	replace
233	[BUG]  [BUGGY]  numToSkip  =  input.read();  [CE]  missing  return  statement  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  numToSkip  =  input.read();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	numToSkip  =  input.read();	  return    available    +    numToSkip;    int    numToSkip    =    input.read();    	non-compiled	[CE]  missing  return  statement	2	None	replace
234	[BUG]  [BUGGY]  Int  numToSkip  =  input.read();  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  Int  numToSkip  =  input.read();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	Int  numToSkip  =  input.read();	  return    available    +    numToSkip;    int    numToSkip    =    input.read();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
235	[BUG]  [BUGGY]  short  numToSkip  =  input.read();  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  short  numToSkip  =  input.read();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	short  numToSkip  =  input.read();	  return    available    +    numToSkip;    int    numToSkip    =    input.read();    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	2	None	replace
236	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  <  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  <  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  return    available    +    numToSkip;    if(available    <    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
237	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  missing  return  statement  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  return    available    +    numToSkip;    if(available    <    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  missing  return  statement	160	None	replace
238	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  return  available  +  numToSkip;  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  <  numToSkip)  {  return  available  +  numToSkip;  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  <  numToSkip)  {  return  available  +  numToSkip;  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  return    available    +    numToSkip;    if(available    <    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
239	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  return  available  +  numToSkip;  }  else  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  <  numToSkip)  {  return  available  +  numToSkip;  }  else  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  <  numToSkip)  {  return  available  +  numToSkip;  }  else  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  return    available    +    numToSkip;    if(available    <    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
240	[BUG]  [BUGGY]  long  available  =  available  +  numToSkip;  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  +  numToSkip;  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  +  numToSkip;  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  return    available    +    numToSkip;    if(available    <    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	160	None	replace
241	[BUG]  [BUGGY]  long  available  =  numToSkip  +  available;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  +  available;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  +  available;	  return    available    +    numToSkip;    if(available    <    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	160	None	replace
242	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  available;  ++i)  {  input.skip();  }  [CE]  method  skip  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  for(int  i  =  0;  i  <  available;  ++i)  {  input.skip();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	for(int  i  =  0;  i  <  available;  ++i)  {  input.skip();  }	  if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.skip();    }    	non-compiled	[CE]  method  skip  in  class  InputStream  cannot  be  applied  to  given  types;	148	None	replace
243	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.skip();  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.skip();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.skip();  }	  if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.skip();    }    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
244	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.skip(numToSkip);  }  [CE]  illegal  start  of  expression  [FE]                                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.skip(numToSkip);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.skip(numToSkip);  }	  if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.skip();    }    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
245	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.skip();  }  [CE]  illegal  start  of  expression  [FE]                                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.skip();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  skipped  =  input.skip();  }	  if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.skip();    }    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
246	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  output.skip();  }  [CE]  illegal  start  of  expression  [FE]                                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  output.skip();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  output.skip();  }	  if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.skip();    }    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
247	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  in.skip();  }  [CE]  illegal  start  of  expression  [FE]                                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  in.skip();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  in.skip();  }	  if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.skip();    }    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
248	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  *  SKIP_BUF_SIZE;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  available  -  numToSkip  *  SKIP_BUF_SIZE;	  return    available    -    skipped    *    SKIP_BUF_SIZE;    	compilable	  [FE]  AssertionError  	155	2	replace
249	[BUG]  [BUGGY]  return  available  -  numToSkip  *  SKIP_BUF_SIZE;  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  *  SKIP_BUF_SIZE;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  numToSkip  *  SKIP_BUF_SIZE;	  return    available    -    skipped    *    SKIP_BUF_SIZE;    	compilable	  [FE]  AssertionError  	155	2	replace
250	[BUG]  [BUGGY]  return  available  -  skipd  *  SKIP_BUF_SIZE;  [CE]  cannot  find  symbol  skipd  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  skipd  *  SKIP_BUF_SIZE;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  skipd  *  SKIP_BUF_SIZE;	  return    available    -    skipped    *    SKIP_BUF_SIZE;    	non-compiled	[CE]  cannot  find  symbol  skipd	155	None	replace
251	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  *  SKIP_BUF_SIZE;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  available  *  numToSkip  *  SKIP_BUF_SIZE;	  return    available    -    skipped    *    SKIP_BUF_SIZE;    	compilable	  [FE]  AssertionError  	155	3	replace
252	[BUG]  [BUGGY]  return  available  *  numToSkip  *  SKIP_BUF_SIZE;  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  *  SKIP_BUF_SIZE;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip  *  SKIP_BUF_SIZE;	  return    available    -    skipped    *    SKIP_BUF_SIZE;    	compilable	  [FE]  AssertionError  	155	3	replace
253	[BUG]  [BUGGY]  return  available  -  skipped  *  SKIP_BUF_SIZE  +  numToSkip;  [CE]  cannot  find  symbol  skipped  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  skipped  *  SKIP_BUF_SIZE  +  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  skipped  *  SKIP_BUF_SIZE  +  numToSkip;	  return    available    -    skipped    *    SKIP_BUF_SIZE;    	non-compiled	[CE]  cannot  find  symbol  skipped	155	None	replace
254	[BUG]  [BUGGY]  return  available  -(numToSkip  +  available);  InputStream  available  =  input.readInput();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -(numToSkip  +  available);  InputStream  available  =  input.readInput();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -(numToSkip    +    available);    InputStream  available  =  input.readInput();	  	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	153	None	add
255	[BUG]  [BUGGY]  return  available  -(numToSkip  +  available);  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  available  +=  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -(numToSkip  +  available);  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  available  +=  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -(numToSkip    +    available);    if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  available  +=  numToSkip;  }	  	non-compiled	[CE]  illegal  start  of  expression	153	None	add
256	[BUG]  [BUGGY]  return  available  -(numToSkip  +  available);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -(numToSkip  +  available);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -(numToSkip    +    available);    if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }	  	non-compiled	[CE]  illegal  start  of  expression	153	None	add
257	[BUG]  [BUGGY]  return  available  -(numToSkip  +  available);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -(numToSkip  +  available);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -(numToSkip    +    available);    if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }	  	non-compiled	[CE]  illegal  start  of  expression	153	None	add
258	[BUG]  [BUGGY]  return  available  -(numToSkip  +  available);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -(numToSkip  +  available);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -(numToSkip    +    available);    if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }	  	non-compiled	[CE]  illegal  start  of  expression	153	None	add
259	[BUG]  [BUGGY]  return  available  -(numToSkip  +  available);  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  available  +=  input.getChars(numToSkip);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -(numToSkip  +  available);  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  available  +=  input.getChars(numToSkip);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -(numToSkip    +    available);    if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  available  +=  input.getChars(numToSkip);  }	  	non-compiled	[CE]  illegal  start  of  expression	153	None	add
260	[BUG]  [BUGGY]  return  available  -(numToSkip  +  available);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -(numToSkip  +  available);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -(numToSkip    +    available);    if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }	  	non-compiled	[CE]  illegal  start  of  expression	153	None	add
261	[BUG]  [BUGGY]  return  available  -(numToSkip  +  available);  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip  +=  available.length);  }  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]                  AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -(numToSkip  +  available);  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip  +=  available.length);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -(numToSkip    +    available);    if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip  +=  available.length);  }	  	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	153	None	add
262	[BUG]  [BUGGY]  long  available  =  available  +  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  +  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  +  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }	  return    available    +    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available.size();    ++i)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	161	None	replace
263	[BUG]  [BUGGY]  long  available  =  available  +  numToSkip;  if(available  >  0)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  +  numToSkip;  if(available  >  0)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  +  numToSkip;  if(available  >  0)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }	  return    available    +    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available.size();    ++i)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	161	None	replace
264	[BUG]  [BUGGY]  numToSkip  =  available  +  numToSkip;  [CE]  missing  return  statement  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  numToSkip  =  available  +  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	numToSkip  =  available  +  numToSkip;	  return    available    +    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available.size();    ++i)    {    input.close();    }    	non-compiled	[CE]  missing  return  statement	161	None	replace
265	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.length();    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
266	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(available  <  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(available  <  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(available  <  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.length();    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
267	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >=  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >=  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(available  >=  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.length();    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
268	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(long  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(long  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(long  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.length();    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
269	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(available  ==  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(available  ==  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(available  ==  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.length();    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
270	[BUG]  [BUGGY]  long  available  =  available  +  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  +  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  +  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }	  return    available    +    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
271	[BUG]  [BUGGY]  long  available  =  available  +  numToSkip;  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  +  numToSkip;  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  +  numToSkip;  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }	  return    available    +    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.close();    }    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	124	None	replace
272	[BUG]  [BUGGY]  long  available  =  available  +  numToSkip;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  +  numToSkip;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  +  numToSkip;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  input.close();  }	  return    available    +    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
273	[BUG]  [BUGGY]  long  available  =  available  +  numToSkip;  if(available  <  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  +  numToSkip;  if(available  <  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  +  numToSkip;  if(available  <  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }	  return    available    +    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
274	[BUG]  [BUGGY]  long  available  =  available  +  numToSkip;  for(int  i  =  0;  i  <  numToSkip;  i++)  {  input.close();  }  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  +  numToSkip;  for(int  i  =  0;  i  <  numToSkip;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  +  numToSkip;  for(int  i  =  0;  i  <  numToSkip;  i++)  {  input.close();  }	  return    available    +    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.close();    }    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	124	None	replace
275	[BUG]  [BUGGY]  return  available  *  numToSkip  -  1;  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  *  numToSkip  -  1;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  -  1;  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  *  numToSkip  -  1;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    -    1;    if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  *  numToSkip  -  1;  }	  	non-compiled	[CE]  illegal  start  of  expression	156	None	add
276	[BUG]  [BUGGY]  return  available  *  numToSkip  -  1;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  *  numToSkip  -  1;  }  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  -  1;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  *  numToSkip  -  1;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    -    1;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  *  numToSkip  -  1;  }	  	non-compiled	[CE]  not  a  statement	156	None	add
277	[BUG]  [BUGGY]  return  available  *  numToSkip  -  1;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  i++)  {  available  *  numToSkip  -  1;  }  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  -  1;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  i++)  {  available  *  numToSkip  -  1;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    -    1;    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  i++)  {  available  *  numToSkip  -  1;  }	  	non-compiled	[CE]  not  a  statement	156	None	add
278	[BUG]  [BUGGY]  return  available  *  numToSkip  -  1;  InputStream  available  =  input.readInput();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  -  1;  InputStream  available  =  input.readInput();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    -    1;    InputStream  available  =  input.readInput();	  	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	156	None	add
279	[BUG]  [BUGGY]  return  available  *  numToSkip  -  1;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  i++)  {  available  *  numToSkip  -=  i;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  -  1;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  i++)  {  available  *  numToSkip  -=  i;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    -    1;    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  i++)  {  available  *  numToSkip  -=  i;  }	  	non-compiled	[CE]  illegal  start  of  expression	156	None	add
280	[BUG]  [BUGGY]  return  available  *  numToSkip  -  1;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  *  numToSkip  -=  i;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  -  1;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  *  numToSkip  -=  i;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    -    1;    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  *  numToSkip  -=  i;  }	  	non-compiled	[CE]  illegal  start  of  expression	156	None	add
281	[BUG]  [BUGGY]  return  available  *  numToSkip  -  1;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  *  numToSkip  -=  i;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  -  1;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  *  numToSkip  -=  i;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    -    1;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  *  numToSkip  -=  i;  }	  	non-compiled	[CE]  illegal  start  of  expression	156	None	add
282	[BUG]  [BUGGY]  return  available  *  numToSkip  -  1;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  *  numToSkip  -  1;  }  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  -  1;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  *  numToSkip  -  1;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    -    1;    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  *  numToSkip  -  1;  }	  	non-compiled	[CE]  not  a  statement	156	None	add
283	[BUG]  [BUGGY]  return  available  /(numToSkip  +  skip);  [CE]  cannot  find  symbol  skip  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /(numToSkip  +  skip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /(numToSkip  +  skip);	  return    available    /(numToSkip    +    skipped);    	non-compiled	[CE]  cannot  find  symbol  skip	30	None	replace
284	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /(numToSkip  +  SKIP_BUF_SIZE);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  available  /(numToSkip  +  SKIP_BUF_SIZE);	  return    available    /(numToSkip    +    skipped);    	compilable	  [FE]  AssertionError  	30	3	replace
285	[BUG]  [BUGGY]  return  available  /(numToSkip  +  SKIP_BUF_SIZE);  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /(numToSkip  +  SKIP_BUF_SIZE);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /(numToSkip  +  SKIP_BUF_SIZE);	  return    available    /(numToSkip    +    skipped);    	compilable	  [FE]  AssertionError  	30	3	replace
286	[BUG]  [BUGGY]  return  available  /(numToSkip  +  SKIP_BUFFER_SIZE);  [CE]  cannot  find  symbol  SKIP_BUFFER_SIZE  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /(numToSkip  +  SKIP_BUFFER_SIZE);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /(numToSkip  +  SKIP_BUFFER_SIZE);	  return    available    /(numToSkip    +    skipped);    	non-compiled	[CE]  cannot  find  symbol  SKIP_BUFFER_SIZE	30	None	replace
287	[BUG]  [BUGGY]  return  available  /(numToSkip  +  input.length);  [CE]  cannot  find  symbol  length  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /(numToSkip  +  input.length);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /(numToSkip  +  input.length);	  return    available    /(numToSkip    +    skipped);    	non-compiled	[CE]  cannot  find  symbol  length	30	None	replace
288	[BUG]  [BUGGY]  return  available  /(numToSkip  +  SKIT_BUFFER_SIZE);  [CE]  cannot  find  symbol  SKIT_BUFFER_SIZE  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /(numToSkip  +  SKIT_BUFFER_SIZE);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /(numToSkip  +  SKIT_BUFFER_SIZE);	  return    available    /(numToSkip    +    skipped);    	non-compiled	[CE]  cannot  find  symbol  SKIT_BUFFER_SIZE	30	None	replace
289	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /(numToSkip  +  1);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  available  /(numToSkip  +  1);	  return    available    /(numToSkip    +    skipped);    	compilable	  [FE]  AssertionError  	30	2	replace
290	[BUG]  [BUGGY]  return  available  /(numToSkip  +  1);  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /(numToSkip  +  1);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /(numToSkip  +  1);	  return    available    /(numToSkip    +    skipped);    	compilable	  [FE]  AssertionError  	30	2	replace
291	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
292	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(available  <  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(available  <  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(available  <  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
293	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >=  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >=  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(available  >=  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
294	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(long  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(long  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(long  i  =  0;  i  <  available;  ++i)  {  input.close();  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
295	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
296	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(available  ==  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(available  ==  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(available  ==  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
297	[BUG]  [BUGGY]  long  available  =  numToSkip  /  available;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  /  available;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  /  available;	  long    available    =    numToSkip    -    available;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	11	None	replace
298	[BUG]  [BUGGY]  long  available  =  input.availableToSkip  -  numToSkip;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  input.availableToSkip  -  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  input.availableToSkip  -  numToSkip;	  long    available    =    numToSkip    -    available;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	11	None	replace
299	[BUG]  [BUGGY]  long  available  =  numToSkip  -  skip;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  skip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  skip;	  long    available    =    numToSkip    -    available;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	11	None	replace
300	[BUG]  [BUGGY]  return  available  -  numToSkip.longValue();  [CE]  long  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip.longValue();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  numToSkip.longValue();	  return    available    -    skipped.longValue();    	non-compiled	[CE]  long  cannot  be  dereferenced	44	None	replace
301	[BUG]  [BUGGY]  return  available  -  input.longValue();  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  input.longValue();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  input.longValue();	  return    available    -    skipped.longValue();    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
302	[BUG]  [BUGGY]  return  available  -  skip.longValue();  [CE]  cannot  find  symbol  skip  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  skip.longValue();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  skip.longValue();	  return    available    -    skipped.longValue();    	non-compiled	[CE]  cannot  find  symbol  skip	44	None	replace
303	[BUG]  [BUGGY]  return  available  -  this.available.longValue();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  this.available.longValue();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  this.available.longValue();	  return    available    -    skipped.longValue();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	44	None	replace
304	[BUG]  [BUGGY]  return  available  -  selected.longValue();  [CE]  cannot  find  symbol  selected  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  selected.longValue();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  selected.longValue();	  return    available    -    skipped.longValue();    	non-compiled	[CE]  cannot  find  symbol  selected	44	None	replace
305	[BUG]  [BUGGY]  return  available  -  available.longValue();  [CE]  long  cannot  be  dereferenced  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  available.longValue();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  available.longValue();	  return    available    -    skipped.longValue();    	non-compiled	[CE]  long  cannot  be  dereferenced	44	None	replace
306	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }	  return    available    +    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
307	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }	  return    available    +    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
308	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  return  available  +  numToSkip;  }  else  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  <  numToSkip)  {  return  available  +  numToSkip;  }  else  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  <  numToSkip)  {  return  available  +  numToSkip;  }  else  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }	  return    available    +    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
309	[BUG]  [BUGGY]  long  available  =  input.skip(numToSkip);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  input.skip(numToSkip);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  input.skip(numToSkip);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }	  return    available    +    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
310	[BUG]  [BUGGY]  long  available  =  input.skip(numToSkip);  if(available  <  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  input.skip(numToSkip);  if(available  <  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  input.skip(numToSkip);  if(available  <  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }	  return    available    +    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
311	[BUG]  [BUGGY]  long  available  =  available.longValue();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available.longValue();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available.longValue();	  return    available    *    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    *    numToSkip    +=    skipped;    }    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	73	None	replace
312	[BUG]  [BUGGY]  return  available  -  skipped.getSize();  [CE]  cannot  find  symbol  skipped  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  skipped.getSize();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  skipped.getSize();	  return    available    -    input.getSize();    	non-compiled	[CE]  cannot  find  symbol  skipped	120	None	replace
313	[BUG]  [BUGGY]  return  available  /  input.getSize();  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  input.getSize();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /  input.getSize();	  return    available    -    input.getSize();    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
314	[BUG]  [BUGGY]  return  available  -  input.getMillis();  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  input.getMillis();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  input.getMillis();	  return    available    -    input.getSize();    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
315	[BUG]  [BUGGY]  return  available  -  input.getSize()  +  skipped;  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  input.getSize()  +  skipped;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  input.getSize()  +  skipped;	  return    available    -    input.getSize();    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
316	[BUG]  [BUGGY]  return  available  -  input.getLength();  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  input.getLength();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  input.getLength();	  return    available    -    input.getSize();    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
317	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(available);  }  [CE]  possible  loss  of  precision  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(available);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(available);  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.skip(available);    }    	non-compiled	[CE]  possible  loss  of  precision	104	None	replace
318	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(skipped);  }  [CE]  possible  loss  of  precision  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(skipped);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(skipped);  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.skip(available);    }    	non-compiled	[CE]  possible  loss  of  precision	104	None	replace
319	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(available);  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(available);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(available);  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.skip(available);    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
320	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(skipped);  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(skipped);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(skipped);  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.skip(available);    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
321	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(0);  }  [CE]  possible  loss  of  precision  [FE]                                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(0);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(0);  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.skip(available);    }    	non-compiled	[CE]  possible  loss  of  precision	104	None	replace
322	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(0L);  }  [CE]  possible  loss  of  precision  [FE]                                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(0L);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(0L);  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.skip(available);    }    	non-compiled	[CE]  possible  loss  of  precision	104	None	replace
323	[BUG]  [BUGGY]  int  numToSkip  =  input.readInt();  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  int  numToSkip  =  input.readInt();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	int  numToSkip  =  input.readInt();	  return    available    +    numToSkip;    int    numToSkip    =    input.readInt();    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	3	None	replace
324	[BUG]  [BUGGY]  long  numToSkip  =  input.readInt();  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  numToSkip  =  input.readInt();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  numToSkip  =  input.readInt();	  return    available    +    numToSkip;    int    numToSkip    =    input.readInt();    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	3	None	replace
325	[BUG]  [BUGGY]  Integer  numToSkip  =  input.readInt();  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  Integer  numToSkip  =  input.readInt();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	Integer  numToSkip  =  input.readInt();	  return    available    +    numToSkip;    int    numToSkip    =    input.readInt();    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	3	None	replace
326	[BUG]  [BUGGY]  numToSkip  =  input.readInt();  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  numToSkip  =  input.readInt();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	numToSkip  =  input.readInt();	  return    available    +    numToSkip;    int    numToSkip    =    input.readInt();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
327	[BUG]  [BUGGY]  Int  numToSkip  =  input.readInt();  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  Int  numToSkip  =  input.readInt();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	Int  numToSkip  =  input.readInt();	  return    available    +    numToSkip;    int    numToSkip    =    input.readInt();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
328	[BUG]  [BUGGY]  long  available  =  available  /  numToSkip;  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  /  numToSkip;  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  /  numToSkip;  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available;  }	  return    available    /    numToSkip;    if(available    <    numToSkip)    {    if(skipped    >    0)    {    return    available;    }    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
329	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available;  }	  return    available    /    numToSkip;    if(available    <    numToSkip)    {    if(skipped    >    0)    {    return    available;    }    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
330	[BUG]  [BUGGY]  long  available  =  available  /  numToSkip;  if(available  <  0)  {  if(skipped  >  0)  {  return  available;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  /  numToSkip;  if(available  <  0)  {  if(skipped  >  0)  {  return  available;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  /  numToSkip;  if(available  <  0)  {  if(skipped  >  0)  {  return  available;  }	  return    available    /    numToSkip;    if(available    <    numToSkip)    {    if(skipped    >    0)    {    return    available;    }    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
331	[BUG]  [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  /  numToSkip;  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available;  }	  return    available    /    numToSkip;    if(available    <    numToSkip)    {    if(skipped    >    0)    {    return    available;    }    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
332	[BUG]  [BUGGY]  long  available  =  available  /  numToSkip;  if(skipped  <  0)  {  return  available;  }  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  /  numToSkip;  if(skipped  <  0)  {  return  available;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  /  numToSkip;  if(skipped  <  0)  {  return  available;  }	  return    available    /    numToSkip;    if(available    <    numToSkip)    {    if(skipped    >    0)    {    return    available;    }    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	130	None	replace
333	[BUG]  [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  <  0)  {  if(skipped  >  0)  {  return  available;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  <  0)  {  if(skipped  >  0)  {  return  available;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  /  numToSkip;  if(available  <  0)  {  if(skipped  >  0)  {  return  available;  }	  return    available    /    numToSkip;    if(available    <    numToSkip)    {    if(skipped    >    0)    {    return    available;    }    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
334	[BUG]  [BUGGY]  long  available  =  available  *  numToSkip;  if(available  >  numToSkip)  {  if(skipped  >  0)  {  return  available  *  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  *  numToSkip;  if(available  >  numToSkip)  {  if(skipped  >  0)  {  return  available  *  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  *  numToSkip;  if(available  >  numToSkip)  {  if(skipped  >  0)  {  return  available  *  numToSkip;  }	  return    available    *    numToSkip;    if(available    >    numToSkip)    {    if(skipped    >    0)    {    return    available    *    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
335	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  return  available  *  numToSkip;  }  [CE]  missing  return  statement  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  <  numToSkip)  {  return  available  *  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  <  numToSkip)  {  return  available  *  numToSkip;  }	  return    available    *    numToSkip;    if(available    >    numToSkip)    {    if(skipped    >    0)    {    return    available    *    numToSkip;    }    	non-compiled	[CE]  missing  return  statement	164	None	replace
336	[BUG]  [BUGGY]  long  available  =  available  *  numToSkip;  if(available  >  0)  {  if(skipped  >  0)  {  return  available  *  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  *  numToSkip;  if(available  >  0)  {  if(skipped  >  0)  {  return  available  *  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  *  numToSkip;  if(available  >  0)  {  if(skipped  >  0)  {  return  available  *  numToSkip;  }	  return    available    *    numToSkip;    if(available    >    numToSkip)    {    if(skipped    >    0)    {    return    available    *    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
337	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  return  available  /  numToSkip;  }  [CE]  missing  return  statement  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  <  numToSkip)  {  return  available  /  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  <  numToSkip)  {  return  available  /  numToSkip;  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getChars(i);    }    	non-compiled	[CE]  missing  return  statement	82	None	replace
338	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }	  return    available    *    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
339	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  return  available  *  numToSkip;  }  else  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  <  numToSkip)  {  return  available  *  numToSkip;  }  else  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  <  numToSkip)  {  return  available  *  numToSkip;  }  else  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }	  return    available    *    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
340	[BUG]  [BUGGY]  long  available  =  available  *  numToSkip;  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  *  numToSkip;  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  *  numToSkip;  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }	  return    available    *    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	88	None	replace
341	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  return  available  *  numToSkip;  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  <  numToSkip)  {  return  available  *  numToSkip;  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  <  numToSkip)  {  return  available  *  numToSkip;  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }	  return    available    *    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
342	[BUG]  [BUGGY]  long  available  =  available  *  numToSkip;  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  *  numToSkip;  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  *  numToSkip;  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }	  return    available    *    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.length();    }    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	75	None	replace
343	[BUG]  [BUGGY]  long  available  =  available  *  numToSkip;  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  *  numToSkip;  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  *  numToSkip;  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }	  return    available    *    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.length();    }    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	75	None	replace
344	[BUG]  [BUGGY]  long  available  =  numToSkip  *  available;  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  *  available;  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  *  available;  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }	  return    available    *    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.length();    }    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	75	None	replace
345	[BUG]  [BUGGY]  return  available  -  numToSkip.longValue;  [CE]  long  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip.longValue;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  numToSkip.longValue;	  return    available    -    skipped.longValue;    	non-compiled	[CE]  long  cannot  be  dereferenced	45	None	replace
346	[BUG]  [BUGGY]  return  available  -  input.longValue;  [CE]  cannot  find  symbol  longValue  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  input.longValue;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  input.longValue;	  return    available    -    skipped.longValue;    	non-compiled	[CE]  cannot  find  symbol  longValue	45	None	replace
347	[BUG]  [BUGGY]  return  available  -  skip.longValue;  [CE]  cannot  find  symbol  skip  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  skip.longValue;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  skip.longValue;	  return    available    -    skipped.longValue;    	non-compiled	[CE]  cannot  find  symbol  skip	45	None	replace
348	[BUG]  [BUGGY]  return  available  -  selected.longValue;  [CE]  cannot  find  symbol  selected  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  selected.longValue;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  selected.longValue;	  return    available    -    skipped.longValue;    	non-compiled	[CE]  cannot  find  symbol  selected	45	None	replace
349	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
350	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(available  <  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(available  <  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(available  <  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
351	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >=  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >=  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(available  >=  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
352	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.read();    }    	non-compiled	[CE]  possible  loss  of  precision	39	None	replace
353	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
354	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(available  ==  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(available  ==  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(available  ==  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
355	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(available  <  =  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(available  <  =  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(available  <  =  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  return    numToSkip    -    available;    if(available    <    =    0)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
356	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >=  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >=  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(available  >=  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  return    numToSkip    -    available;    if(available    <    =    0)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
357	[BUG]  [BUGGY]  if(available  <  =  0)  {  return  numToSkip  -  available;  }  else  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  <  =  0)  {  return  numToSkip  -  available;  }  else  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  <  =  0)  {  return  numToSkip  -  available;  }  else  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  return    numToSkip    -    available;    if(available    <    =    0)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
358	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(available  ==  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(available  ==  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(available  ==  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  return    numToSkip    -    available;    if(available    <    =    0)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
359	[BUG]  [BUGGY]  long  numToSkip  =  input.skip(numToSkip);  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  numToSkip  =  input.skip(numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  numToSkip  =  input.skip(numToSkip);	  return    available    *    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available.size();    i++)    {    available    *    numToSkip    +=    i;    }    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	72	None	replace
360	[BUG]  [BUGGY]  long  numToSkip  =  available.longValue();  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  numToSkip  =  available.longValue();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  numToSkip  =  available.longValue();	  return    available    *    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available.size();    i++)    {    available    *    numToSkip    +=    i;    }    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	72	None	replace
361	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  numToSkip  +  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  available  /  numToSkip  +  numToSkip;	  return    available    -    numToSkip    +    numToSkip;    	compilable	  [FE]  AssertionError  	49	3	replace
362	[BUG]  [BUGGY]  return  available  /  numToSkip  +  numToSkip;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  numToSkip  +  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /  numToSkip  +  numToSkip;	  return    available    -    numToSkip    +    numToSkip;    	compilable	  [FE]  AssertionError  	49	3	replace
363	[BUG]  [BUGGY]  return  available  -  numToSkip  +  skip;  [CE]  cannot  find  symbol  skip  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  +  skip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  numToSkip  +  skip;	  return    available    -    numToSkip    +    numToSkip;    	non-compiled	[CE]  cannot  find  symbol  skip	49	None	replace
364	[BUG]  [BUGGY]  return  available  -  skip  +  1;  [CE]  cannot  find  symbol  skip  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  skip  +  1;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  skip  +  1;	  return    available    -    skipped    +    1;    	non-compiled	[CE]  cannot  find  symbol  skip	64	None	replace
365	[BUG]  [BUGGY]  return  available  -  skipd  +  1;  [CE]  cannot  find  symbol  skipd  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  skipd  +  1;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  skipd  +  1;	  return    available    -    skipped    +    1;    	non-compiled	[CE]  cannot  find  symbol  skipd	64	None	replace
366	[BUG]  [BUGGY]  return  available  -  skipped  +  1L;  [CE]  cannot  find  symbol  skipped  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  skipped  +  1L;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  skipped  +  1L;	  return    available    -    skipped    +    1;    	non-compiled	[CE]  cannot  find  symbol  skipped	64	None	replace
367	[BUG]  [BUGGY]  return  available  -  skipped  +  2;  [CE]  cannot  find  symbol  skipped  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  skipped  +  2;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  skipped  +  2;	  return    available    -    skipped    +    1;    	non-compiled	[CE]  cannot  find  symbol  skipped	64	None	replace
368	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  /  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  /  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  /  numToSkip;  }	  return    available    /    numToSkip;    if(available    <    numToSkip)    {    if(skipped    >    0)    {    return    available    /    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
369	[BUG]  [BUGGY]  long  available  =  available  /  numToSkip;  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  /  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  /  numToSkip;  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  /  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  /  numToSkip;  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  /  numToSkip;  }	  return    available    /    numToSkip;    if(available    <    numToSkip)    {    if(skipped    >    0)    {    return    available    /    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
370	[BUG]  [BUGGY]  long  available  =  available.length  /  numToSkip;  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  /  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available.length  /  numToSkip;  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  /  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available.length  /  numToSkip;  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  /  numToSkip;  }	  return    available    /    numToSkip;    if(available    <    numToSkip)    {    if(skipped    >    0)    {    return    available    /    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
371	[BUG]  [BUGGY]  long  available  =  available  /  numToSkip;  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  *  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  /  numToSkip;  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  *  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  /  numToSkip;  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  *  numToSkip;  }	  return    available    /    numToSkip;    if(available    <    numToSkip)    {    if(skipped    >    0)    {    return    available    /    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
372	[BUG]  [BUGGY]  long  available  =  available  /  numToSkip;  if(available  <  0)  {  if(skipped  >  0)  {  return  available  /  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  /  numToSkip;  if(available  <  0)  {  if(skipped  >  0)  {  return  available  /  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  /  numToSkip;  if(available  <  0)  {  if(skipped  >  0)  {  return  available  /  numToSkip;  }	  return    available    /    numToSkip;    if(available    <    numToSkip)    {    if(skipped    >    0)    {    return    available    /    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
373	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  if(skipped  >=  0)  {  return  available  /  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  <  numToSkip)  {  if(skipped  >=  0)  {  return  available  /  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  <  numToSkip)  {  if(skipped  >=  0)  {  return  available  /  numToSkip;  }	  return    available    /    numToSkip;    if(available    <    numToSkip)    {    if(skipped    >    0)    {    return    available    /    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
374	[BUG]  [BUGGY]  return  available  /  numToSkip  -  skip;  [CE]  cannot  find  symbol  skip  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  numToSkip  -  skip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /  numToSkip  -  skip;	  return    available    /    numToSkip    -    skipped;    	non-compiled	[CE]  cannot  find  symbol  skip	139	None	replace
375	[BUG]  [BUGGY]  return  available  /  skipped  -  numToSkip;  [CE]  cannot  find  symbol  skipped  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  skipped  -  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /  skipped  -  numToSkip;	  return    available    /    numToSkip    -    skipped;    	non-compiled	[CE]  cannot  find  symbol  skipped	139	None	replace
376	[BUG]  [BUGGY]  return  available  /  numToSkip  -  skipped.longValue();  [CE]  cannot  find  symbol  skipped  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  numToSkip  -  skipped.longValue();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /  numToSkip  -  skipped.longValue();	  return    available    /    numToSkip    -    skipped;    	non-compiled	[CE]  cannot  find  symbol  skipped	139	None	replace
377	[BUG]  [BUGGY]  return  available  /  numToSkip  -  skipped  +  1;  [CE]  cannot  find  symbol  skipped  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  numToSkip  -  skipped  +  1;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /  numToSkip  -  skipped  +  1;	  return    available    /    numToSkip    -    skipped;    	non-compiled	[CE]  cannot  find  symbol  skipped	139	None	replace
378	[BUG]  [BUGGY]  return  available  /  numToSkip  -  skipped.length;  [CE]  cannot  find  symbol  skipped  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  numToSkip  -  skipped.length;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /  numToSkip  -  skipped.length;	  return    available    /    numToSkip    -    skipped;    	non-compiled	[CE]  cannot  find  symbol  skipped	139	None	replace
379	[BUG]  [BUGGY]  return  available  numToSkip  -  skipped;  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  numToSkip  -  skipped;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  numToSkip  -  skipped;	  return    available    numToSkip    -    numToSkip;    	non-compiled	[CE]  ';'  expected	57	None	replace
380	[BUG]  [BUGGY]  return  available  numToSkip  /  numToSkip;  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  numToSkip  /  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  numToSkip  /  numToSkip;	  return    available    numToSkip    -    numToSkip;    	non-compiled	[CE]  ';'  expected	57	None	replace
381	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  -  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  available  *  numToSkip  -  numToSkip;	  return    available    numToSkip    -    numToSkip;    	compilable	  [FE]  AssertionError  	57	3	replace
382	[BUG]  [BUGGY]  return  available  *  numToSkip  -  numToSkip;  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  -  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip  -  numToSkip;	  return    available    numToSkip    -    numToSkip;    	compilable	  [FE]  AssertionError  	57	3	replace
383	[BUG]  [BUGGY]  return  available  numToSkip  *  numToSkip;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  numToSkip  *  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  numToSkip  *  numToSkip;	  return    available    numToSkip    -    numToSkip;    	non-compiled	[CE]  ';'  expected	57	None	replace
384	[BUG]  [BUGGY]  while(available  -  skipped)  {  numToSkip  -=  available;  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  -  skipped)  {  numToSkip  -=  available;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  -  skipped)  {  numToSkip  -=  available;	  while(available    -    numToSkip)    {    numToSkip    -=    available;    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
385	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  while(available  -  numToSkip)  {  numToSkip  -=  available;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  while(available  -  numToSkip)  {  numToSkip  -=  available;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  while(available  -  numToSkip)  {  numToSkip  -=  available;  }	  while(available    -    numToSkip)    {    numToSkip    -=    available;    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
386	[BUG]  [BUGGY]  while(numToSkip  -  available)  {  numToSkip  -=  available;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(numToSkip  -  available)  {  numToSkip  -=  available;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(numToSkip  -  available)  {  numToSkip  -=  available;	  while(available    -    numToSkip)    {    numToSkip    -=    available;    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
387	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  numToSkip  -=  available;  }  else  {  System.arraycopy(input,  0,  numToSkip,  available,  numToSkip);  numToSkip  -=  numToSkip;  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  numToSkip  -=  available;  }  else  {  System.arraycopy(input,  0,  numToSkip,  available,  numToSkip);  numToSkip  -=  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  numToSkip  -=  available;  }  else  {  System.arraycopy(input,  0,  numToSkip,  available,  numToSkip);  numToSkip  -=  numToSkip;  }	  while(available    -    numToSkip)    {    numToSkip    -=    available;    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	109	None	replace
388	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  numToSkip  -=  available;  }  else  {  System.arraycopy(input,  numToSkip,  available,  numToSkip);  numToSkip  -=  numToSkip;  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  numToSkip  -=  available;  }  else  {  System.arraycopy(input,  numToSkip,  available,  numToSkip);  numToSkip  -=  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  numToSkip  -=  available;  }  else  {  System.arraycopy(input,  numToSkip,  available,  numToSkip);  numToSkip  -=  numToSkip;  }	  while(available    -    numToSkip)    {    numToSkip    -=    available;    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	109	None	replace
389	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  numToSkip  -=  available;  }  [CE]  missing  return  statement  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  numToSkip  -=  available;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  numToSkip  -=  available;  }	  while(available    -    numToSkip)    {    numToSkip    -=    available;    	non-compiled	[CE]  missing  return  statement	109	None	replace
390	[BUG]  [BUGGY]  int  available  =  skipped  -  numToSkip;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  int  available  =  skipped  -  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	int  available  =  skipped  -  numToSkip;	  long    available    =    skipped    -    numToSkip;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	14	None	replace
391	[BUG]  [BUGGY]  long  available  =  skipped  -  numToSkip  +  1;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  skipped  -  numToSkip  +  1;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  skipped  -  numToSkip  +  1;	  long    available    =    skipped    -    numToSkip;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	14	None	replace
392	[BUG]  [BUGGY]  return  available  %  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  %  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    %    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  numToSkip;  }	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
393	[BUG]  [BUGGY]  return  available  %  numToSkip;  InputStream  available  =  input.readInput();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  %  numToSkip;  InputStream  available  =  input.readInput();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    %    numToSkip;    InputStream  available  =  input.readInput();	  	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	26	None	add
394	[BUG]  [BUGGY]  return  available  %  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  >=  0;  i--)  {  available  +=  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  %  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  >=  0;  i--)  {  available  +=  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    %    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  >=  0;  i--)  {  available  +=  numToSkip;  }	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
395	[BUG]  [BUGGY]  return  available  %  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  %  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    %    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  numToSkip;  }	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
396	[BUG]  [BUGGY]  return  available  %  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  %  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    %    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length;  }	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
397	[BUG]  [BUGGY]  return  available  %  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  %  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    %    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
398	[BUG]  [BUGGY]  return  available  %  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  %  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    %    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
399	[BUG]  [BUGGY]  return  available  %  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  %  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    %    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
400	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  available  +=  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  available  +=  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  available  +=  numToSkip;  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    numToSkip    =    available;    numToSkip    <    0;    numToSkip++)    {    available    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
401	[BUG]  [BUGGY]  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  available  +=  numToSkip;  }  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  available  +=  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  available  +=  numToSkip;  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    numToSkip    =    available;    numToSkip    <    0;    numToSkip++)    {    available    +=    numToSkip;    }    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	38	None	replace
402	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(available  <  0)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  available  +=  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(available  <  0)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  available  +=  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(available  <  0)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  available  +=  numToSkip;  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    numToSkip    =    available;    numToSkip    <    0;    numToSkip++)    {    available    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
403	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(long  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  available  +=  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(long  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  available  +=  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(long  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  available  +=  numToSkip;  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    numToSkip    =    available;    numToSkip    <    0;    numToSkip++)    {    available    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
404	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >=  0)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  available  +=  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >=  0)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  available  +=  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(available  >=  0)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  available  +=  numToSkip;  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    numToSkip    =    available;    numToSkip    <    0;    numToSkip++)    {    available    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
405	[BUG]  [BUGGY]  long  available  =  input.skip(numToSkip);  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  available  +=  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  input.skip(numToSkip);  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  available  +=  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  input.skip(numToSkip);  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  available  +=  numToSkip;  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    numToSkip    =    available;    numToSkip    <    0;    numToSkip++)    {    available    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
406	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  return  numToSkip  -  available;  }  else  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  <  numToSkip)  {  return  numToSkip  -  available;  }  else  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  <  numToSkip)  {  return  numToSkip  -  available;  }  else  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
407	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  return  numToSkip  -  available;  }  else  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  <  numToSkip)  {  return  numToSkip  -  available;  }  else  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  <  numToSkip)  {  return  numToSkip  -  available;  }  else  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
408	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
409	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  input.close();  }	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
410	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
411	[BUG]  [BUGGY]  return  available  *  numToSkip  +  numToSkip;  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  *  numToSkip  +  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  numToSkip;  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  *  numToSkip  +  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    +    numToSkip;    if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  *  numToSkip  +  numToSkip;  }	  	non-compiled	[CE]  illegal  start  of  expression	50	None	add
412	[BUG]  [BUGGY]  return  available  *  numToSkip  +  numToSkip;  InputStream  available  =  input.readInput();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  numToSkip;  InputStream  available  =  input.readInput();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    +    numToSkip;    InputStream  available  =  input.readInput();	  	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	50	None	add
413	[BUG]  [BUGGY]  return  available  *  numToSkip  +  numToSkip;  if(available  >  numToSkip)  {  if(skipped  >  0)  {  return  available  *  numToSkip  +  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  numToSkip;  if(available  >  numToSkip)  {  if(skipped  >  0)  {  return  available  *  numToSkip  +  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    +    numToSkip;    if(available  >  numToSkip)  {  if(skipped  >  0)  {  return  available  *  numToSkip  +  numToSkip;  }	  	non-compiled	[CE]  illegal  start  of  expression	50	None	add
414	[BUG]  [BUGGY]  return  available  *  numToSkip  +  numToSkip;  if(available  >  numToSkip)  {  if(skipped  >=  0)  {  return  available  *  numToSkip  +  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  numToSkip;  if(available  >  numToSkip)  {  if(skipped  >=  0)  {  return  available  *  numToSkip  +  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    +    numToSkip;    if(available  >  numToSkip)  {  if(skipped  >=  0)  {  return  available  *  numToSkip  +  numToSkip;  }	  	non-compiled	[CE]  illegal  start  of  expression	50	None	add
415	[BUG]  [BUGGY]  return  available  *  numToSkip  +  numToSkip;  if(available  <  numToSkip)  {  if(skipped  >=  0)  {  return  available  *  numToSkip  +  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  numToSkip;  if(available  <  numToSkip)  {  if(skipped  >=  0)  {  return  available  *  numToSkip  +  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    +    numToSkip;    if(available  <  numToSkip)  {  if(skipped  >=  0)  {  return  available  *  numToSkip  +  numToSkip;  }	  	non-compiled	[CE]  illegal  start  of  expression	50	None	add
416	[BUG]  [BUGGY]  return  available  *  numToSkip  +  numToSkip;  if(available  >  numToSkip)  {  if(skipped  <  0)  {  return  available  *  numToSkip  +  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  numToSkip;  if(available  >  numToSkip)  {  if(skipped  <  0)  {  return  available  *  numToSkip  +  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    +    numToSkip;    if(available  >  numToSkip)  {  if(skipped  <  0)  {  return  available  *  numToSkip  +  numToSkip;  }	  	non-compiled	[CE]  illegal  start  of  expression	50	None	add
417	[BUG]  [BUGGY]  return  available  *  numToSkip  +  numToSkip;  int  numToSkip  =  input.read();  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]                AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  numToSkip;  int  numToSkip  =  input.read();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    +    numToSkip;    int  numToSkip  =  input.read();	  	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	50	None	add
418	[BUG]  [BUGGY]  return  available  *  numToSkip  +  numToSkip;  int  numToSkip  =  input.readInt();  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]                  AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  numToSkip;  int  numToSkip  =  input.readInt();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    +    numToSkip;    int  numToSkip  =  input.readInt();	  	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	50	None	add
419	[BUG]  [BUGGY]  return  available  *  numToSkip  /  skipped;  [CE]  cannot  find  symbol  skipped  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  /  skipped;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip  /  skipped;	  return    available    *    numToSkip    /    numToSkip;    	non-compiled	[CE]  cannot  find  symbol  skipped	20	None	replace
420	[BUG]  [BUGGY]  return  available  *  skipped  /  numToSkip;  [CE]  cannot  find  symbol  skipped  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  skipped  /  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  skipped  /  numToSkip;	  return    available    *    numToSkip    /    numToSkip;    	non-compiled	[CE]  cannot  find  symbol  skipped	20	None	replace
421	[BUG]  [BUGGY]  return  available  *  numToSkip  +  skipped  /  numToSkip;  [CE]  cannot  find  symbol  skipped  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  skipped  /  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip  +  skipped  /  numToSkip;	  return    available    *    numToSkip    /    numToSkip;    	non-compiled	[CE]  cannot  find  symbol  skipped	20	None	replace
422	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  *  available  /  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  numToSkip  *  available  /  numToSkip;	  return    available    *    numToSkip    /    numToSkip;    	compilable	  [FE]  AssertionError  	20	3	replace
423	[BUG]  [BUGGY]  return  numToSkip  *  available  /  numToSkip;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  *  available  /  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  numToSkip  *  available  /  numToSkip;	  return    available    *    numToSkip    /    numToSkip;    	compilable	  [FE]  AssertionError  	20	3	replace
424	[BUG]  [BUGGY]  return  available  +  numSkip;  [CE]  cannot  find  symbol  numSkip  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  +  numSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  +  numSkip;	  return    available    +    skipped;    	non-compiled	[CE]  cannot  find  symbol  numSkip	24	None	replace
425	[BUG]  [BUGGY]  return  available  +  num;  [CE]  cannot  find  symbol  num  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  +  num;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  +  num;	  return    available    +    skipped;    	non-compiled	[CE]  cannot  find  symbol  num	24	None	replace
426	[BUG]  [BUGGY]  return  available  +  skip;  [CE]  cannot  find  symbol  skip  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  +  skip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  +  skip;	  return    available    +    skipped;    	non-compiled	[CE]  cannot  find  symbol  skip	24	None	replace
427	[BUG]  [BUGGY]  return  available  +  numtoSkip;  [CE]  cannot  find  symbol  numtoSkip  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  +  numtoSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  +  numtoSkip;	  return    available    +    skipped;    	non-compiled	[CE]  cannot  find  symbol  numtoSkip	24	None	replace
428	[BUG]  [BUGGY]  return  available  *(numToSkip  -  available);  available  *(numToSkip  -  available);  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *(numToSkip  -  available);  available  *(numToSkip  -  available);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *(numToSkip    -    available);    available  *(numToSkip  -  available);	  	non-compiled	[CE]  not  a  statement	31	None	add
429	[BUG]  [BUGGY]  return  available  *(numToSkip  -  available);  InputStream  available  =  input.readInput();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *(numToSkip  -  available);  InputStream  available  =  input.readInput();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *(numToSkip    -    available);    InputStream  available  =  input.readInput();	  	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	31	None	add
430	[BUG]  [BUGGY]  return  available  *(numToSkip  -  available);  System.arraycopy(input,  numToSkip,  available,  numToSkip);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *(numToSkip  -  available);  System.arraycopy(input,  numToSkip,  available,  numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *(numToSkip    -    available);    System.arraycopy(input,  numToSkip,  available,  numToSkip);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	31	None	add
431	[BUG]  [BUGGY]  return  available  *(numToSkip  -  available);  System.arraycopy(input,  numToSkip,  available,  0);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *(numToSkip  -  available);  System.arraycopy(input,  numToSkip,  available,  0);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *(numToSkip    -    available);    System.arraycopy(input,  numToSkip,  available,  0);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	31	None	add
432	[BUG]  [BUGGY]  return  available  *(numToSkip  -  available);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *(numToSkip  -  available);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *(numToSkip    -    available);    if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
433	[BUG]  [BUGGY]  return  available  *(numToSkip  -  available);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *(numToSkip  -  available);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *(numToSkip    -    available);    if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
434	[BUG]  [BUGGY]  return  available  *(numToSkip  -  available);  System.arraycopy(input,  0,  available,  numToSkip,  numToSkip);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *(numToSkip  -  available);  System.arraycopy(input,  0,  available,  numToSkip,  numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *(numToSkip    -    available);    System.arraycopy(input,  0,  available,  numToSkip,  numToSkip);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	31	None	add
435	[BUG]  [BUGGY]  return  available  *(numToSkip  -  available);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *(numToSkip  -  available);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *(numToSkip    -    available);    if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
436	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }	  if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
437	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [CE]  '.class'  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  For(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	For(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }	  if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.close();    }    	non-compiled	[CE]  '.class'  expected	146	None	replace
438	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.flush();  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.flush();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.flush();  }	  if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
439	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  output.close();  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  output.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  output.close();  }	  if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
440	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  0;  i  <  available.length;  ++i)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  0)  {  for(int  i  =  0;  i  <  available.length;  ++i)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  0)  {  for(int  i  =  0;  i  <  available.length;  ++i)  {  input.close();  }	  if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
441	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  available;  ++i)  {  input.flush();  }  [CE]  cannot  find  symbol  [FE]                                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  for(int  i  =  0;  i  <  available;  ++i)  {  input.flush();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	for(int  i  =  0;  i  <  available;  ++i)  {  input.flush();  }	  if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.close();    }    	non-compiled	[CE]  cannot  find  symbol	146	None	replace
442	[BUG]  [BUGGY]  return  available  *  skipped  +  numToSkip;  [CE]  cannot  find  symbol  skipped  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  skipped  +  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  skipped  +  numToSkip;	  return    available    /    skipped    +    numToSkip;    	non-compiled	[CE]  cannot  find  symbol  skipped	94	None	replace
443	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  +  numToSkip  +  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  available  +  numToSkip  +  numToSkip;	  return    available    /    skipped    +    numToSkip;    	compilable	  [FE]  AssertionError  	94	2	replace
444	[BUG]  [BUGGY]  return  available  +  numToSkip  +  numToSkip;  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  +  numToSkip  +  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  +  numToSkip  +  numToSkip;	  return    available    /    skipped    +    numToSkip;    	compilable	  [FE]  AssertionError  	94	2	replace
445	[BUG]  [BUGGY]  return  available  /  numToSkip  +  numtoSkip;  [CE]  cannot  find  symbol  numtoSkip  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  numToSkip  +  numtoSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /  numToSkip  +  numtoSkip;	  return    available    /    skipped    +    numToSkip;    	non-compiled	[CE]  cannot  find  symbol  numtoSkip	94	None	replace
446	[BUG]  [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  /  numToSkip;  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
447	[BUG]  [BUGGY]  long  available  =  available  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
448	[BUG]  [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  <  =  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  <  =  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  /  numToSkip;  if(available  <  =  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
449	[BUG]  [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  >=  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  >=  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  /  numToSkip;  if(available  >=  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
450	[BUG]  [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
451	[BUG]  [BUGGY]  Long  numToSkip  =  input.read();  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  Long  numToSkip  =  input.read();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	Long  numToSkip  =  input.read();	  return    available    *    numToSkip;    int    numToSkip    =    input.read();    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	89	None	replace
452	[BUG]  [BUGGY]  int  numToSkip  =  input.length();  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  int  numToSkip  =  input.length();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	int  numToSkip  =  input.length();	  return    available    +    numToSkip;    int    numToSkip    =    input.length();    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	5	None	replace
453	[BUG]  [BUGGY]  long  numToSkip  =  input.length();  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  numToSkip  =  input.length();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  numToSkip  =  input.length();	  return    available    +    numToSkip;    int    numToSkip    =    input.length();    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	5	None	replace
454	[BUG]  [BUGGY]  Integer  numToSkip  =  input.length();  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  Integer  numToSkip  =  input.length();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	Integer  numToSkip  =  input.length();	  return    available    +    numToSkip;    int    numToSkip    =    input.length();    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	5	None	replace
455	[BUG]  [BUGGY]  Int  numToSkip  =  input.length();  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  Int  numToSkip  =  input.length();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	Int  numToSkip  =  input.length();	  return    available    +    numToSkip;    int    numToSkip    =    input.length();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
456	[BUG]  [BUGGY]  numToSkip  =  input.length();  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  numToSkip  =  input.length();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	numToSkip  =  input.length();	  return    available    +    numToSkip;    int    numToSkip    =    input.length();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
457	[BUG]  [BUGGY]  return  available  -(numToSkip  +  skipped);  [CE]  cannot  find  symbol  skipped  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -(numToSkip  +  skipped);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -(numToSkip  +  skipped);	  return    available    -(numToSkip    +    available);    	non-compiled	[CE]  cannot  find  symbol  skipped	154	None	replace
458	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -(available  +  numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  available  -(available  +  numToSkip);	  return    available    -(numToSkip    +    available);    	compilable	  [FE]  AssertionError  	154	3	replace
459	[BUG]  [BUGGY]  return  available  -(available  +  numToSkip);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -(available  +  numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -(available  +  numToSkip);	  return    available    -(numToSkip    +    available);    	compilable	  [FE]  AssertionError  	154	3	replace
460	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -(available  *  numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  available  -(available  *  numToSkip);	  return    available    -(numToSkip    +    available);    	compilable	  [FE]  AssertionError  	154	2	replace
461	[BUG]  [BUGGY]  return  available  -(available  *  numToSkip);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -(available  *  numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -(available  *  numToSkip);	  return    available    -(numToSkip    +    available);    	compilable	  [FE]  AssertionError  	154	2	replace
462	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *(numToSkip  +  available);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  available  *(numToSkip  +  available);	  return    available    -(numToSkip    +    available);    	compilable	  [FE]  AssertionError  	154	3	replace
463	[BUG]  [BUGGY]  return  available  *(numToSkip  +  available);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *(numToSkip  +  available);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *(numToSkip  +  available);	  return    available    -(numToSkip    +    available);    	compilable	  [FE]  AssertionError  	154	3	replace
464	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -(numToSkip  *  available);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  available  -(numToSkip  *  available);	  return    available    -(numToSkip    +    available);    	compilable	  [FE]  AssertionError  	154	2	replace
465	[BUG]  [BUGGY]  return  available  -(numToSkip  *  available);  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -(numToSkip  *  available);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -(numToSkip  *  available);	  return    available    -(numToSkip    +    available);    	compilable	  [FE]  AssertionError  	154	2	replace
466	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /(numToSkip  +  available);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  available  /(numToSkip  +  available);	  return    available    -(numToSkip    +    available);    	compilable	  [FE]  AssertionError  	154	3	replace
467	[BUG]  [BUGGY]  return  available  /(numToSkip  +  available);  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /(numToSkip  +  available);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /(numToSkip  +  available);	  return    available    -(numToSkip    +    available);    	compilable	  [FE]  AssertionError  	154	3	replace
468	[BUG]  [BUGGY]  return  available  -  numToSkip  *  numToSkip;  InputStream  available  =  input.readInput();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  *  numToSkip;  InputStream  available  =  input.readInput();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -    numToSkip    *    numToSkip;    InputStream  available  =  input.readInput();	  	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	52	None	add
469	[BUG]  [BUGGY]  return  available  -  numToSkip  *  numToSkip;  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  -  numToSkip  *  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  *  numToSkip;  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  -  numToSkip  *  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -    numToSkip    *    numToSkip;    if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  -  numToSkip  *  numToSkip;  }	  	non-compiled	[CE]  illegal  start  of  expression	52	None	add
470	[BUG]  [BUGGY]  return  available  -  numToSkip  *  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  *  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -    numToSkip    *    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }	  	non-compiled	[CE]  illegal  start  of  expression	52	None	add
471	[BUG]  [BUGGY]  return  available  -  numToSkip  *  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  *  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -    numToSkip    *    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }	  	non-compiled	[CE]  illegal  start  of  expression	52	None	add
472	[BUG]  [BUGGY]  return  available  -  numToSkip  *  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  *  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -    numToSkip    *    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }	  	non-compiled	[CE]  illegal  start  of  expression	52	None	add
473	[BUG]  [BUGGY]  return  available  -  numToSkip  *  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  *  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -    numToSkip    *    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }	  	non-compiled	[CE]  illegal  start  of  expression	52	None	add
474	[BUG]  [BUGGY]  return  available  -  numToSkip  *  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  *  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -    numToSkip    *    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }	  	non-compiled	[CE]  illegal  start  of  expression	52	None	add
475	[BUG]  [BUGGY]  return  available  -  numToSkip  *  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  *  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -    numToSkip    *    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }	  	non-compiled	[CE]  illegal  start  of  expression	52	None	add
476	[BUG]  [BUGGY]  return  available  /  numSkip;  [CE]  cannot  find  symbol  numSkip  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  numSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /  numSkip;	  return    available    /    skipped;    	non-compiled	[CE]  cannot  find  symbol  numSkip	29	None	replace
477	[BUG]  [BUGGY]  return  available  /  SHORT_SIZE;  [CE]  cannot  find  symbol  SHORT_SIZE  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  SHORT_SIZE;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /  SHORT_SIZE;	  return    available    /    skipped;    	non-compiled	[CE]  cannot  find  symbol  SHORT_SIZE	29	None	replace
478	[BUG]  [BUGGY]  return  available  /  skip;  [CE]  cannot  find  symbol  skip  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  skip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /  skip;	  return    available    /    skipped;    	non-compiled	[CE]  cannot  find  symbol  skip	29	None	replace
479	[BUG]  [BUGGY]  return  available  /  SHORT_NUMBER;  [CE]  cannot  find  symbol  SHORT_NUMBER  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  SHORT_NUMBER;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /  SHORT_NUMBER;	  return    available    /    skipped;    	non-compiled	[CE]  cannot  find  symbol  SHORT_NUMBER	29	None	replace
480	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }	  return    available    *    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getBytes(i);    }    	non-compiled	[CE]  possible  loss  of  precision	92	None	replace
481	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  return  available  *  numToSkip;  }  else  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  <  numToSkip)  {  return  available  *  numToSkip;  }  else  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  <  numToSkip)  {  return  available  *  numToSkip;  }  else  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }	  return    available    *    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getBytes(i);    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
482	[BUG]  [BUGGY]  long  available  =  available  *  numToSkip;  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  *  numToSkip;  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  *  numToSkip;  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }	  return    available    *    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getBytes(i);    }    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	92	None	replace
483	[BUG]  [BUGGY]  long  available  =  input.availableToInt()  -  skipped;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  input.availableToInt()  -  skipped;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  input.availableToInt()  -  skipped;	  long    available    =    input.availableToInt()    -    numToSkip;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	12	None	replace
484	[BUG]  [BUGGY]  long  available  =  input.availableToInt()  /  numToSkip;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  input.availableToInt()  /  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  input.availableToInt()  /  numToSkip;	  long    available    =    input.availableToInt()    -    numToSkip;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	12	None	replace
485	[BUG]  [BUGGY]  long  available  =  input.availableToInt()  *  numToSkip;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  input.availableToInt()  *  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  input.availableToInt()  *  numToSkip;	  long    available    =    input.availableToInt()    -    numToSkip;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	12	None	replace
486	[BUG]  [BUGGY]  long  available  =  input.availableToLong()  -  numToSkip;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  input.availableToLong()  -  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  input.availableToLong()  -  numToSkip;	  long    available    =    input.availableToInt()    -    numToSkip;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	12	None	replace
487	[BUG]  [BUGGY]  int  available  =  input.availableToInt()  -  numToSkip;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  int  available  =  input.availableToInt()  -  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	int  available  =  input.availableToInt()  -  numToSkip;	  long    available    =    input.availableToInt()    -    numToSkip;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	12	None	replace
488	[BUG]  [BUGGY]  long  available  =  input.availableToInt()  +  numToSkip;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  input.availableToInt()  +  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  input.availableToInt()  +  numToSkip;	  long    available    =    input.availableToInt()    -    numToSkip;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	12	None	replace
489	[BUG]  [BUGGY]  long  available  =  input.availableToInt()  -  skipped,  numToSkip;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  input.availableToInt()  -  skipped,  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  input.availableToInt()  -  skipped,  numToSkip;	  long    available    =    input.availableToInt()    -    numToSkip;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	12	None	replace
490	[BUG]  [BUGGY]  return  available  -  input.skipped  +  skipped;  [CE]  cannot  find  symbol  skipped  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  input.skipped  +  skipped;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  input.skipped  +  skipped;	  return    available    -    input.skipped;    	non-compiled	[CE]  cannot  find  symbol  skipped	108	None	replace
491	[BUG]  [BUGGY]  return  available  -  skipped.skipped;  [CE]  cannot  find  symbol  skipped  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  skipped.skipped;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  skipped.skipped;	  return    available    -    input.skipped;    	non-compiled	[CE]  cannot  find  symbol  skipped	108	None	replace
492	[BUG]  [BUGGY]  return  available  -  input.skipped  +  skip;  [CE]  cannot  find  symbol  skipped  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  input.skipped  +  skip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  input.skipped  +  skip;	  return    available    -    input.skipped;    	non-compiled	[CE]  cannot  find  symbol  skipped	108	None	replace
493	[BUG]  [BUGGY]  return  available  -  skip  +  this.buffersize;  [CE]  cannot  find  symbol  skip  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  skip  +  this.buffersize;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  skip  +  this.buffersize;	  return    available    -    skipped    +    this.buffersize;    	non-compiled	[CE]  cannot  find  symbol  skip	47	None	replace
494	[BUG]  [BUGGY]  return  available  -  skipped  *  this.buffersize;  [CE]  cannot  find  symbol  skipped  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  skipped  *  this.buffersize;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  skipped  *  this.buffersize;	  return    available    -    skipped    +    this.buffersize;    	non-compiled	[CE]  cannot  find  symbol  skipped	47	None	replace
495	[BUG]  [BUGGY]  return  available  -  this.numToSkip  +  this.buffersize;  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  this.numToSkip  +  this.buffersize;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  this.numToSkip  +  this.buffersize;	  return    available    -    skipped    +    this.buffersize;    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	47	None	replace
496	[BUG]  [BUGGY]  return  available  *  this.buffersize  +  this.buffersize;  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  this.buffersize  +  this.buffersize;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  this.buffersize  +  this.buffersize;	  return    available    -    skipped    +    this.buffersize;    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	47	None	replace
497	[BUG]  [BUGGY]  return  available  -  skipped  +  this.buffersize,  numToSkip;  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  skipped  +  this.buffersize,  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  skipped  +  this.buffersize,  numToSkip;	  return    available    -    skipped    +    this.buffersize;    	non-compiled	[CE]  ';'  expected	47	None	replace
498	[BUG]  [BUGGY]  return  available  -  skipped  +  this.bufferSize;  [CE]  cannot  find  symbol  skipped  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  skipped  +  this.bufferSize;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  skipped  +  this.bufferSize;	  return    available    -    skipped    +    this.buffersize;    	non-compiled	[CE]  cannot  find  symbol  skipped	47	None	replace
499	[BUG]  [BUGGY]  return  available.readLine();  [CE]  long  cannot  be  dereferenced  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available.readLine();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available.readLine();	  return    input.readLine();    	non-compiled	[CE]  long  cannot  be  dereferenced	143	None	replace
500	[BUG]  [BUGGY]  return  input.readLine()  -  numToSkip;  [CE]  cannot  find  symbol  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  input.readLine()  -  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  input.readLine()  -  numToSkip;	  return    input.readLine();    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
501	[BUG]  [BUGGY]  return  available?  input.readLine()  :  numToSkip;  [CE]  incompatible  types  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available?  input.readLine()  :  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available?  input.readLine()  :  numToSkip;	  return    input.readLine();    	non-compiled	[CE]  incompatible  types	143	None	replace
502	[BUG]  [BUGGY]  return  input.readLine()  -  skipped;  [CE]  cannot  find  symbol  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  input.readLine()  -  skipped;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  input.readLine()  -  skipped;	  return    input.readLine();    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
503	[BUG]  [BUGGY]  return  input.readLine()  +  skipped;  [CE]  cannot  find  symbol  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  input.readLine()  +  skipped;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  input.readLine()  +  skipped;	  return    input.readLine();    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
504	[BUG]  [BUGGY]  return  available?  input.readLine()  :  0;  [CE]  incompatible  types  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available?  input.readLine()  :  0;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available?  input.readLine()  :  0;	  return    input.readLine();    	non-compiled	[CE]  incompatible  types	143	None	replace
505	[BUG]  [BUGGY]  InputStream  available  =  input.getInputStream();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  InputStream  available  =  input.getInputStream();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	InputStream  available  =  input.getInputStream();	  return    available    +    numToSkip;    InputStream    available    =    input.getInputStream();    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	126	None	replace
506	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  return  available  +  numToSkip;  InputStream  available  =  input.getInputStream();  }  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  return  available  +  numToSkip;  InputStream  available  =  input.getInputStream();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  return  available  +  numToSkip;  InputStream  available  =  input.getInputStream();  }	  return    available    +    numToSkip;    InputStream    available    =    input.getInputStream();    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	126	None	replace
507	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  return  available  +  numToSkip;  }  else  {  available  =  input.getInputStream();  }  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  return  available  +  numToSkip;  }  else  {  available  =  input.getInputStream();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  return  available  +  numToSkip;  }  else  {  available  =  input.getInputStream();  }	  return    available    +    numToSkip;    InputStream    available    =    input.getInputStream();    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
508	[BUG]  [BUGGY]  numToSkip  =  available  +  numToSkip;  InputStream  available  =  input.getInputStream();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  numToSkip  =  available  +  numToSkip;  InputStream  available  =  input.getInputStream();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	numToSkip  =  available  +  numToSkip;  InputStream  available  =  input.getInputStream();	  return    available    +    numToSkip;    InputStream    available    =    input.getInputStream();    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	126	None	replace
509	[BUG]  [BUGGY]  numToSkip  +=  available;  InputStream  available  =  input.getInputStream();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  numToSkip  +=  available;  InputStream  available  =  input.getInputStream();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	numToSkip  +=  available;  InputStream  available  =  input.getInputStream();	  return    available    +    numToSkip;    InputStream    available    =    input.getInputStream();    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	126	None	replace
510	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  return  available  +  numToSkip;  InputStream  available  =  input.getInputStream();  }  else  {  skip(input,  numToSkip);  }  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  return  available  +  numToSkip;  InputStream  available  =  input.getInputStream();  }  else  {  skip(input,  numToSkip);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  return  available  +  numToSkip;  InputStream  available  =  input.getInputStream();  }  else  {  skip(input,  numToSkip);  }	  return    available    +    numToSkip;    InputStream    available    =    input.getInputStream();    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	126	None	replace
511	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  return  available  +  numToSkip;  InputStream  available  =  input.getInputStream();  }  else  {  skip(input,  skipped);  }  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  return  available  +  numToSkip;  InputStream  available  =  input.getInputStream();  }  else  {  skip(input,  skipped);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  return  available  +  numToSkip;  InputStream  available  =  input.getInputStream();  }  else  {  skip(input,  skipped);  }	  return    available    +    numToSkip;    InputStream    available    =    input.getInputStream();    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	126	None	replace
512	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
513	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  return  available  -  numToSkip;  }  else  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(numToSkip  >  0)  {  return  available  -  numToSkip;  }  else  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(numToSkip  >  0)  {  return  available  -  numToSkip;  }  else  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
514	[BUG]  [BUGGY]  long  available  =  available  /  numToSkip;  if(available  <  numToSkip)  {  if(skipped  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  /  numToSkip;  if(available  <  numToSkip)  {  if(skipped  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  /  numToSkip;  if(available  <  numToSkip)  {  if(skipped  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  return    available    /    numToSkip;    if(available    <    numToSkip)    {    if(skipped    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
515	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  if(skipped  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  <  numToSkip)  {  if(skipped  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  <  numToSkip)  {  if(skipped  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  return    available    /    numToSkip;    if(available    <    numToSkip)    {    if(skipped    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
516	[BUG]  [BUGGY]  long  available  =  available  /  numToSkip;  if(available  <  0)  {  if(skipped  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  /  numToSkip;  if(available  <  0)  {  if(skipped  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  /  numToSkip;  if(available  <  0)  {  if(skipped  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  return    available    /    numToSkip;    if(available    <    numToSkip)    {    if(skipped    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
517	[BUG]  [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  <  numToSkip)  {  if(skipped  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  <  numToSkip)  {  if(skipped  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  /  numToSkip;  if(available  <  numToSkip)  {  if(skipped  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  return    available    /    numToSkip;    if(available    <    numToSkip)    {    if(skipped    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
518	[BUG]  [BUGGY]  long  available  =  available  /  numToSkip;  if(available  <  numToSkip)  {  if(skipped  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  /  numToSkip;  if(available  <  numToSkip)  {  if(skipped  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  /  numToSkip;  if(available  <  numToSkip)  {  if(skipped  >=  0)  {  throw  new  IllegalArgumentException( " ");  }	  return    available    /    numToSkip;    if(available    <    numToSkip)    {    if(skipped    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
519	[BUG]  [BUGGY]  return  available  +  numToSkip  +  skip;  [CE]  cannot  find  symbol  skip  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  +  numToSkip  +  skip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  +  numToSkip  +  skip;	  return    available    +    numToSkip    +    skipped;    	non-compiled	[CE]  cannot  find  symbol  skip	25	None	replace
520	[BUG]  [BUGGY]  return  available  +  numToSkip  +  input.length;  [CE]  cannot  find  symbol  length  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  +  numToSkip  +  input.length;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  +  numToSkip  +  input.length;	  return    available    +    numToSkip    +    skipped;    	non-compiled	[CE]  cannot  find  symbol  length	25	None	replace
521	[BUG]  [BUGGY]  return  available  +  numToSkip  +  this.buffersize;  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  +  numToSkip  +  this.buffersize;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  +  numToSkip  +  this.buffersize;	  return    available    +    numToSkip    +    skipped;    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	25	None	replace
522	[BUG]  [BUGGY]  return  available  +  numToSkip  +  skipd;  [CE]  cannot  find  symbol  skipd  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  +  numToSkip  +  skipd;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  +  numToSkip  +  skipd;	  return    available    +    numToSkip    +    skipped;    	non-compiled	[CE]  cannot  find  symbol  skipd	25	None	replace
523	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  +  numToSkip  +  1;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  available  +  numToSkip  +  1;	  return    available    +    numToSkip    +    skipped;    	compilable	  [FE]  AssertionError  	25	3	replace
524	[BUG]  [BUGGY]  return  available  +  numToSkip  +  1;  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  +  numToSkip  +  1;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  +  numToSkip  +  1;	  return    available    +    numToSkip    +    skipped;    	compilable	  [FE]  AssertionError  	25	3	replace
525	[BUG]  [BUGGY]  return  available  +  numToSkip  +  this.skipped;  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  +  numToSkip  +  this.skipped;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  +  numToSkip  +  this.skipped;	  return    available    +    numToSkip    +    skipped;    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	25	None	replace
526	[BUG]  [BUGGY]  return  available  -  input.getChars(0,  skipped);  [CE]  cannot  find  symbol  skipped  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  input.getChars(0,  skipped);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  input.getChars(0,  skipped);	  return    available    -    input.getChars(0,    numToSkip);    	non-compiled	[CE]  cannot  find  symbol  skipped	135	None	replace
527	[BUG]  [BUGGY]  return  numToSkip  -  input.getChars(0,  numToSkip);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  -  input.getChars(0,  numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  numToSkip  -  input.getChars(0,  numToSkip);	  return    available    -    input.getChars(0,    numToSkip);    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
528	[BUG]  [BUGGY]  return  input.available  -  available.getChars(0,  numToSkip);  [CE]  cannot  find  symbol  available  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  input.available  -  available.getChars(0,  numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  input.available  -  available.getChars(0,  numToSkip);	  return    available    -    input.getChars(0,    numToSkip);    	non-compiled	[CE]  cannot  find  symbol  available	135	None	replace
529	[BUG]  [BUGGY]  return  input.getChars(0,  numToSkip);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  input.getChars(0,  numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  input.getChars(0,  numToSkip);	  return    available    -    input.getChars(0,    numToSkip);    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
530	[BUG]  [BUGGY]  return  available  /  input.getChars(0,  numToSkip);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  input.getChars(0,  numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /  input.getChars(0,  numToSkip);	  return    available    -    input.getChars(0,    numToSkip);    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
531	[BUG]  [BUGGY]  return  available  -  input.getChars(0,  numToSkip  +  1);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  input.getChars(0,  numToSkip  +  1);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  input.getChars(0,  numToSkip  +  1);	  return    available    -    input.getChars(0,    numToSkip);    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
532	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(available  <  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(available  <  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(available  <  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
533	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(long  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(long  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(long  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
534	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >=  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >=  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(available  >=  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
535	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
536	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  SKIP_BUF_SIZE;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  available  *  numToSkip  +  SKIP_BUF_SIZE;	  return    available    *    numToSkip    +    skipped;    	compilable	  [FE]  AssertionError  	16	3	replace
537	[BUG]  [BUGGY]  return  available  *  numToSkip  +  SKIP_BUF_SIZE;  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  SKIP_BUF_SIZE;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip  +  SKIP_BUF_SIZE;	  return    available    *    numToSkip    +    skipped;    	compilable	  [FE]  AssertionError  	16	3	replace
538	[BUG]  [BUGGY]  return  available  *  numToSkip  +  input.length;  [CE]  cannot  find  symbol  length  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  input.length;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip  +  input.length;	  return    available    *    numToSkip    +    skipped;    	non-compiled	[CE]  cannot  find  symbol  length	16	None	replace
539	[BUG]  [BUGGY]  return  available  *  numToSkip  +  this.buffersize;  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  this.buffersize;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip  +  this.buffersize;	  return    available    *    numToSkip    +    skipped;    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	16	None	replace
540	[BUG]  [BUGGY]  return  available  *  numToSkip  +  input.skipped;  [CE]  cannot  find  symbol  skipped  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  input.skipped;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip  +  input.skipped;	  return    available    *    numToSkip    +    skipped;    	non-compiled	[CE]  cannot  find  symbol  skipped	16	None	replace
541	[BUG]  [BUGGY]  return  available  /  skipped  +  1;  [CE]  cannot  find  symbol  skipped  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  skipped  +  1;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /  skipped  +  1;	  return    available    /    numToSkip    +    1;    	non-compiled	[CE]  cannot  find  symbol  skipped	141	None	replace
542	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  numToSkip  +  1L;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  available  /  numToSkip  +  1L;	  return    available    /    numToSkip    +    1;    	compilable	  [FE]  AssertionError  	141	3	replace
543	[BUG]  [BUGGY]  return  available  /  numToSkip  +  1L;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  numToSkip  +  1L;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /  numToSkip  +  1L;	  return    available    /    numToSkip    +    1;    	compilable	  [FE]  AssertionError  	141	3	replace
544	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  /  available  +  1;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  numToSkip  /  available  +  1;	  return    available    /    numToSkip    +    1;    	compilable	  [FE]  AssertionError  	141	3	replace
545	[BUG]  [BUGGY]  return  numToSkip  /  available  +  1;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  /  available  +  1;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  numToSkip  /  available  +  1;	  return    available    /    numToSkip    +    1;    	compilable	  [FE]  AssertionError  	141	3	replace
546	[BUG]  [BUGGY]  return  available  -  input.getIntValue();  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  input.getIntValue();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  input.getIntValue();	  return    available    -    input.getShortValue();    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
547	[BUG]  [BUGGY]  return  available  /  input.getShortValue();  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  input.getShortValue();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /  input.getShortValue();	  return    available    -    input.getShortValue();    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
548	[BUG]  [BUGGY]  return  available  -  input.getNumberValue();  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  input.getNumberValue();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  input.getNumberValue();	  return    available    -    input.getShortValue();    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
549	[BUG]  [BUGGY]  return  available  -  input.getLongValue();  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  input.getLongValue();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  input.getLongValue();	  return    available    -    input.getShortValue();    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
550	[BUG]  [BUGGY]  return  available  *  input.getShortValue();  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  input.getShortValue();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  input.getShortValue();	  return    available    -    input.getShortValue();    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
551	[BUG]  [BUGGY]  return  available  -  input.getValue();  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  input.getValue();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  input.getValue();	  return    available    -    input.getShortValue();    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
552	[BUG]  [BUGGY]  int  available  =  numToSkip  -  numToSkip;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  int  available  =  numToSkip  -  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	int  available  =  numToSkip  -  numToSkip;	  long    available    =    numToSkip    -    numToSkip;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	10	None	replace
553	[BUG]  [BUGGY]  long  available  =  numToSkip  -  input.getLength();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  input.getLength();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  input.getLength();	  long    available    =    numToSkip    -    numToSkip;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	10	None	replace
554	[BUG]  [BUGGY]  long  available  =  numToSkip  *  numToSkip;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  *  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  *  numToSkip;	  long    available    =    numToSkip    -    numToSkip;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	10	None	replace
555	[BUG]  [BUGGY]  long  available  =  numToSkip  -  input.getOffset();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  input.getOffset();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  input.getOffset();	  long    available    =    numToSkip    -    numToSkip;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	10	None	replace
556	[BUG]  [BUGGY]  long  numToSkip  =  input.readLine();  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  numToSkip  =  input.readLine();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  numToSkip  =  input.readLine();	  return    available    +    numToSkip;    long    numToSkip    =    input.readLine();    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	7	None	replace
557	[BUG]  [BUGGY]  return  available  /  numToSkip;  long  numToSkip  =  input.readLine();  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  numToSkip;  long  numToSkip  =  input.readLine();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /  numToSkip;  long  numToSkip  =  input.readLine();	  return    available    +    numToSkip;    long    numToSkip    =    input.readLine();    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	7	None	replace
558	[BUG]  [BUGGY]  int  numToSkip  =  input.readLine();  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  int  numToSkip  =  input.readLine();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	int  numToSkip  =  input.readLine();	  return    available    +    numToSkip;    long    numToSkip    =    input.readLine();    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	7	None	replace
559	[BUG]  [BUGGY]  return  available  *  numToSkip;  long  numToSkip  =  input.readLine();  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip;  long  numToSkip  =  input.readLine();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip;  long  numToSkip  =  input.readLine();	  return    available    +    numToSkip;    long    numToSkip    =    input.readLine();    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	7	None	replace
560	[BUG]  [BUGGY]  return  available  +  skipped;  long  numToSkip  =  input.readLine();  [CE]  cannot  find  symbol  skipped  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  +  skipped;  long  numToSkip  =  input.readLine();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  +  skipped;  long  numToSkip  =  input.readLine();	  return    available    +    numToSkip;    long    numToSkip    =    input.readLine();    	non-compiled	[CE]  cannot  find  symbol  skipped	7	None	replace
561	[BUG]  [BUGGY]  numToSkip  =  input.readLine();  [CE]  cannot  find  symbol  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  numToSkip  =  input.readLine();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	numToSkip  =  input.readLine();	  return    available    +    numToSkip;    long    numToSkip    =    input.readLine();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
562	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  0)  {  for(int  i  =  available;  i  <  available;  i++)  {  input.close();  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
563	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
564	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  0;  i++)  {  input.close();  }  [CE]  possible  loss  of  precision  [FE]                                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  for(int  i  =  available;  i  <  0;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	for(int  i  =  available;  i  <  0;  i++)  {  input.close();  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  possible  loss  of  precision	106	None	replace
565	[BUG]  [BUGGY]  For(int  i  =  available;  i  <  0;  i++)  {  input.close();  }  [CE]  '.class'  expected  [FE]                                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  For(int  i  =  available;  i  <  0;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	For(int  i  =  available;  i  <  0;  i++)  {  input.close();  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  '.class'  expected	106	None	replace
566	[BUG]  [BUGGY]  return  numToSkip  /  available  +  skipped;  [CE]  cannot  find  symbol  skipped  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  /  available  +  skipped;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  numToSkip  /  available  +  skipped;	  return    numToSkip    /    available;    	non-compiled	[CE]  cannot  find  symbol  skipped	34	None	replace
567	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  /  available  *  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  numToSkip  /  available  *  numToSkip;	  return    numToSkip    /    available;    	compilable	  [FE]  AssertionError  	34	3	replace
568	[BUG]  [BUGGY]  return  numToSkip  /  available  *  numToSkip;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  /  available  *  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  numToSkip  /  available  *  numToSkip;	  return    numToSkip    /    available;    	compilable	  [FE]  AssertionError  	34	3	replace
569	[BUG]  [BUGGY]  return  available  -  skipped.readLine();  [CE]  cannot  find  symbol  skipped  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  skipped.readLine();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  skipped.readLine();	  return    available    -    input.readLine();    	non-compiled	[CE]  cannot  find  symbol  skipped	137	None	replace
570	[BUG]  [BUGGY]  return  available  -  skipped,  input.readLine();  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  skipped,  input.readLine();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  skipped,  input.readLine();	  return    available    -    input.readLine();    	non-compiled	[CE]  ';'  expected	137	None	replace
571	[BUG]  [BUGGY]  return  input.available  -  available.readLine();  [CE]  cannot  find  symbol  available  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  input.available  -  available.readLine();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  input.available  -  available.readLine();	  return    available    -    input.readLine();    	non-compiled	[CE]  cannot  find  symbol  available	137	None	replace
572	[BUG]  [BUGGY]  return  available  -  input.getChars(numToSkip).readLine();  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  input.getChars(numToSkip).readLine();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  input.getChars(numToSkip).readLine();	  return    available    -    input.readLine();    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
573	[BUG]  [BUGGY]  return  available  -  input.getChars(0,  numToSkip).readLine();  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  input.getChars(0,  numToSkip).readLine();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  input.getChars(0,  numToSkip).readLine();	  return    available    -    input.readLine();    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
574	[BUG]  [BUGGY]  return  available  /  input.readLine();  [CE]  cannot  find  symbol  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  input.readLine();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /  input.readLine();	  return    available    -    input.readLine();    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
575	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  return  available  -  numToSkip;  }  else  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(numToSkip  >  0)  {  return  available  -  numToSkip;  }  else  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(numToSkip  >  0)  {  return  available  -  numToSkip;  }  else  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
576	[BUG]  [BUGGY]  long  available  =  input.skip(numToSkip);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  input.skip(numToSkip);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  input.skip(numToSkip);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
577	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.next();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.next();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.next();  }	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
578	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  return  available  -  numToSkip;  }  else  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(numToSkip  >  0)  {  return  available  -  numToSkip;  }  else  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(numToSkip  >  0)  {  return  available  -  numToSkip;  }  else  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
579	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  return  available  -  numToSkip;  }  else  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(numToSkip  >  0)  {  return  available  -  numToSkip;  }  else  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(numToSkip  >  0)  {  return  available  -  numToSkip;  }  else  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.next();    }    	non-compiled	[CE]  <identifier>  expected	118	None	replace
580	[BUG]  [BUGGY]  long  available  =  available  *  numToSkip;  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  *  numToSkip;  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  *  numToSkip;  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  return    available    *    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	90	None	replace
581	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.flush();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.flush();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.flush();  }	  return    available    *    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
582	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.skip(numToSkip);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.skip(numToSkip);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.skip(numToSkip);  }	  return    available    *    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
583	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  available;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  available  *  numToSkip  +  available;	  return    available    -    numToSkip    +    available;    	compilable	  [FE]  AssertionError  	56	2	replace
584	[BUG]  [BUGGY]  return  available  *  numToSkip  +  available;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  available;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip  +  available;	  return    available    -    numToSkip    +    available;    	compilable	  [FE]  AssertionError  	56	2	replace
585	[BUG]  [BUGGY]  return  available  -  numToSkip  +  skipd;  [CE]  cannot  find  symbol  skipd  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  +  skipd;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  numToSkip  +  skipd;	  return    available    -    numToSkip    +    available;    	non-compiled	[CE]  cannot  find  symbol  skipd	56	None	replace
586	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  numToSkip  +  available;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  available  /  numToSkip  +  available;	  return    available    -    numToSkip    +    available;    	compilable	  [FE]  AssertionError  	56	3	replace
587	[BUG]  [BUGGY]  return  available  /  numToSkip  +  available;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  numToSkip  +  available;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /  numToSkip  +  available;	  return    available    -    numToSkip    +    available;    	compilable	  [FE]  AssertionError  	56	3	replace
588	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  *  numToSkip  +  available;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  available  -  numToSkip  *  numToSkip  +  available;	  return    available    -    numToSkip    +    available;    	compilable	  [FE]  AssertionError  	56	3	replace
589	[BUG]  [BUGGY]  return  available  -  numToSkip  *  numToSkip  +  available;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  *  numToSkip  +  available;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  numToSkip  *  numToSkip  +  available;	  return    available    -    numToSkip    +    available;    	compilable	  [FE]  AssertionError  	56	3	replace
590	[BUG]  [BUGGY]  long  available  =  input.available  -  numToSkip  +  1;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  input.available  -  numToSkip  +  1;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  input.available  -  numToSkip  +  1;	  long    available    =    input.available    -    numToSkip;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	9	None	replace
591	[BUG]  [BUGGY]  long  available  =  input.available  -  numToSkip  +  skipped;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  input.available  -  numToSkip  +  skipped;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  input.available  -  numToSkip  +  skipped;	  long    available    =    input.available    -    numToSkip;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	9	None	replace
592	[BUG]  [BUGGY]  long  available  =  numToSkip  /  num;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  /  num;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  /  num;	  long    available    =    available    /    numToSkip;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	134	None	replace
593	[BUG]  [BUGGY]  int  available  =  available  /  numToSkip;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  int  available  =  available  /  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	int  available  =  available  /  numToSkip;	  long    available    =    available    /    numToSkip;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	134	None	replace
594	[BUG]  [BUGGY]  long  available  =  numToSkip  /  numMillis;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  /  numMillis;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  /  numMillis;	  long    available    =    available    /    numToSkip;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	134	None	replace
595	[BUG]  [BUGGY]  long  available  =  skipped  /  numToSkip;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  skipped  /  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  skipped  /  numToSkip;	  long    available    =    available    /    numToSkip;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	134	None	replace
596	[BUG]  [BUGGY]  System.arraycopy(input,  numToSkip,  available,  0,  numToSkip);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  System.arraycopy(input,  numToSkip,  available,  0,  numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	System.arraycopy(input,  numToSkip,  available,  0,  numToSkip);	  return    available    /    numToSkip;    System.arraycopy(input,    numToSkip,    available,    0);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	132	None	replace
597	[BUG]  [BUGGY]  return  available  /  numToSkip,  skipped;  System.arraycopy(input,  numToSkip,  available,  0,  numToSkip);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  numToSkip,  skipped;  System.arraycopy(input,  numToSkip,  available,  0,  numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /  numToSkip,  skipped;  System.arraycopy(input,  numToSkip,  available,  0,  numToSkip);	  return    available    /    numToSkip;    System.arraycopy(input,    numToSkip,    available,    0);    	non-compiled	[CE]  ';'  expected	132	None	replace
598	[BUG]  [BUGGY]  return  available  /  numToSkip,  skipped;  System.arraycopy(input,  numToSkip,  available,  0);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  numToSkip,  skipped;  System.arraycopy(input,  numToSkip,  available,  0);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /  numToSkip,  skipped;  System.arraycopy(input,  numToSkip,  available,  0);	  return    available    /    numToSkip;    System.arraycopy(input,    numToSkip,    available,    0);    	non-compiled	[CE]  ';'  expected	132	None	replace
599	[BUG]  [BUGGY]  return  available  /  skipped;  System.arraycopy(input,  numToSkip,  available,  0);  [CE]  cannot  find  symbol  skipped  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  skipped;  System.arraycopy(input,  numToSkip,  available,  0);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /  skipped;  System.arraycopy(input,  numToSkip,  available,  0);	  return    available    /    numToSkip;    System.arraycopy(input,    numToSkip,    available,    0);    	non-compiled	[CE]  cannot  find  symbol  skipped	132	None	replace
600	[BUG]  [BUGGY]  return  numToSkip  /  available;  System.arraycopy(input,  numToSkip,  available,  0,  numToSkip);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  /  available;  System.arraycopy(input,  numToSkip,  available,  0,  numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  numToSkip  /  available;  System.arraycopy(input,  numToSkip,  available,  0,  numToSkip);	  return    available    /    numToSkip;    System.arraycopy(input,    numToSkip,    available,    0);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	132	None	replace
601	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.next();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.next();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.next();  }	  return    available    *    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    available    +=    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
602	[BUG]  [BUGGY]  long  available  =  available  *  numToSkip;  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.next();  }  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  *  numToSkip;  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.next();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  *  numToSkip;  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.next();  }	  return    available    *    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    available    +=    input.next();    }    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	91	None	replace
603	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  return  available  *  numToSkip;  }  else  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.next();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  return  available  *  numToSkip;  }  else  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.next();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  return  available  *  numToSkip;  }  else  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.next();  }	  return    available    *    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    available    +=    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
604	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  return  available  *  numToSkip;  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.next();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  return  available  *  numToSkip;  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.next();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  return  available  *  numToSkip;  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.next();  }	  return    available    *    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    available    +=    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
605	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getValue();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getValue();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getValue();  }	  return    available    *    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    available    +=    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
606	[BUG]  [BUGGY]  return  available  -  numToSkip  +  input.length;  [CE]  cannot  find  symbol  length  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  +  input.length;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  numToSkip  +  input.length;	  return    available    -    numToSkip    +    skipped;    	non-compiled	[CE]  cannot  find  symbol  length	142	None	replace
607	[BUG]  [BUGGY]  return  available  -  numToSkip  +  offset;  [CE]  cannot  find  symbol  offset  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  +  offset;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  numToSkip  +  offset;	  return    available    -    numToSkip    +    skipped;    	non-compiled	[CE]  cannot  find  symbol  offset	142	None	replace
608	[BUG]  [BUGGY]  return  available  -  numToSkip  +  save;  [CE]  cannot  find  symbol  save  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  +  save;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  numToSkip  +  save;	  return    available    -    numToSkip    +    skipped;    	non-compiled	[CE]  cannot  find  symbol  save	142	None	replace
609	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  return  available  *  numToSkip;  InputStream  available  =  input.readInput();  }  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  return  available  *  numToSkip;  InputStream  available  =  input.readInput();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  return  available  *  numToSkip;  InputStream  available  =  input.readInput();  }	  return    available    *    numToSkip;    InputStream    available    =    input.readInput();    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	71	None	replace
610	[BUG]  [BUGGY]  numToSkip  *=  available;  InputStream  available  =  input.readInput();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  numToSkip  *=  available;  InputStream  available  =  input.readInput();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	numToSkip  *=  available;  InputStream  available  =  input.readInput();	  return    available    *    numToSkip;    InputStream    available    =    input.readInput();    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	71	None	replace
611	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  return  available  *  numToSkip;  InputStream  available  =  input.readInput();  }  else  {  skip(input,  numToSkip);  }  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  return  available  *  numToSkip;  InputStream  available  =  input.readInput();  }  else  {  skip(input,  numToSkip);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  return  available  *  numToSkip;  InputStream  available  =  input.readInput();  }  else  {  skip(input,  numToSkip);  }	  return    available    *    numToSkip;    InputStream    available    =    input.readInput();    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	71	None	replace
612	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  return  available  *  numToSkip;  InputStream  available  =  input.readInput();  }  else  {  skip(input,  numToSkip  +  skipped);  }  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  return  available  *  numToSkip;  InputStream  available  =  input.readInput();  }  else  {  skip(input,  numToSkip  +  skipped);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  return  available  *  numToSkip;  InputStream  available  =  input.readInput();  }  else  {  skip(input,  numToSkip  +  skipped);  }	  return    available    *    numToSkip;    InputStream    available    =    input.readInput();    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	71	None	replace
613	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  return  available  *  numToSkip;  InputStream  available  =  input.readInput();  }  else  {  skip(input,  numToSkip,  skipped);  }  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  return  available  *  numToSkip;  InputStream  available  =  input.readInput();  }  else  {  skip(input,  numToSkip,  skipped);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  return  available  *  numToSkip;  InputStream  available  =  input.readInput();  }  else  {  skip(input,  numToSkip,  skipped);  }	  return    available    *    numToSkip;    InputStream    available    =    input.readInput();    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	71	None	replace
614	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getBytes(i);    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
615	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(available  <  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(available  <  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(available  <  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getBytes(i);    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
616	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >=  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >=  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(available  >=  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getBytes(i);    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
617	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(long  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(long  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(long  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getBytes(i);    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
618	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(available  ==  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(available  ==  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(available  ==  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getBytes(i);    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
619	[BUG]  [BUGGY]  long  available  =  available  +  numToSkip;  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  +  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  +  numToSkip;  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  +  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  +  numToSkip;  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  +  numToSkip;  }	  return    available    +    numToSkip;    if(available    <    numToSkip)    {    if(skipped    >    0)    {    return    available    +    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  expression	158	None	replace
620	[BUG]  [BUGGY]  long  available  =  numToSkip;  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  +  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip;  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  +  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip;  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  +  numToSkip;  }	  return    available    +    numToSkip;    if(available    <    numToSkip)    {    if(skipped    >    0)    {    return    available    +    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  expression	158	None	replace
621	[BUG]  [BUGGY]  long  available  =  available  +  numToSkip;  if(skipped  <  0)  {  return  available  +  numToSkip;  }  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  +  numToSkip;  if(skipped  <  0)  {  return  available  +  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  +  numToSkip;  if(skipped  <  0)  {  return  available  +  numToSkip;  }	  return    available    +    numToSkip;    if(available    <    numToSkip)    {    if(skipped    >    0)    {    return    available    +    numToSkip;    }    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	158	None	replace
622	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  if(skipped  >=  0)  {  return  available  +  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  <  numToSkip)  {  if(skipped  >=  0)  {  return  available  +  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  <  numToSkip)  {  if(skipped  >=  0)  {  return  available  +  numToSkip;  }	  return    available    +    numToSkip;    if(available    <    numToSkip)    {    if(skipped    >    0)    {    return    available    +    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  expression	158	None	replace
623	[BUG]  [BUGGY]  return  available  -  numToSkip  +  numToSkip;  InputStream  available  =  input.readInput();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  +  numToSkip;  InputStream  available  =  input.readInput();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -    numToSkip    +    numToSkip;    InputStream  available  =  input.readInput();	  	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	48	None	add
624	[BUG]  [BUGGY]  return  available  -  numToSkip  +  numToSkip;  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  -  numToSkip  +  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  +  numToSkip;  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  -  numToSkip  +  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -    numToSkip    +    numToSkip;    if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  -  numToSkip  +  numToSkip;  }	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
625	[BUG]  [BUGGY]  return  available  -  numToSkip  +  numToSkip;  int  numToSkip  =  input.read();  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  +  numToSkip;  int  numToSkip  =  input.read();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -    numToSkip    +    numToSkip;    int  numToSkip  =  input.read();	  	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	48	None	add
626	[BUG]  [BUGGY]  return  available  -  numToSkip  +  numToSkip;  int  numToSkip  =  input.readInt();  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  +  numToSkip;  int  numToSkip  =  input.readInt();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -    numToSkip    +    numToSkip;    int  numToSkip  =  input.readInt();	  	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	48	None	add
627	[BUG]  [BUGGY]  return  available  -  numToSkip  +  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  +  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -    numToSkip    +    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
628	[BUG]  [BUGGY]  return  available  -  numToSkip  +  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  i;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  +  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  i;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -    numToSkip    +    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  i;  }	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
629	[BUG]  [BUGGY]  return  available  -  numToSkip  +  numToSkip;  if(available  <  numToSkip)  {  if(skipped  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  +  numToSkip;  if(available  <  numToSkip)  {  if(skipped  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -    numToSkip    +    numToSkip;    if(available  <  numToSkip)  {  if(skipped  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
630	[BUG]  [BUGGY]  return  available  -  numToSkip  +  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  +  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -    numToSkip    +    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
631	[BUG]  [BUGGY]  return  available  *  numToSkip  +  skipd;  [CE]  cannot  find  symbol  skipd  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  skipd;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip  +  skipd;	  return    available    *    numToSkip    +    skip;    	non-compiled	[CE]  cannot  find  symbol  skipd	23	None	replace
632	[BUG]  [BUGGY]  return  available  *  numToSkip  +  skipped.longValue();  [CE]  cannot  find  symbol  skipped  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  skipped.longValue();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip  +  skipped.longValue();	  return    available    *    numToSkip    +    skip;    	non-compiled	[CE]  cannot  find  symbol  skipped	23	None	replace
633	[BUG]  [BUGGY]  return  available  *  numToSkip  +  input.getCharacterEncoding();  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  input.getCharacterEncoding();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip  +  input.getCharacterEncoding();	  return    available    *    numToSkip    +    skip;    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
634	[BUG]  [BUGGY]  return  available  *  numToSkip  +  input.getCharacterIndex();  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  input.getCharacterIndex();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip  +  input.getCharacterIndex();	  return    available    *    numToSkip    +    skip;    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
635	[BUG]  [BUGGY]  return  available  *(numToSkip  -  skipped);  [CE]  cannot  find  symbol  skipped  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *(numToSkip  -  skipped);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *(numToSkip  -  skipped);	  return    available    *(numToSkip    -    available);    	non-compiled	[CE]  cannot  find  symbol  skipped	32	None	replace
636	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /(numToSkip  -  available);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  available  /(numToSkip  -  available);	  return    available    *(numToSkip    -    available);    	compilable	  [FE]  ArithmeticException  	32	3	replace
637	[BUG]  [BUGGY]  return  available  /(numToSkip  -  available);  [FE]  ArithmeticException  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /(numToSkip  -  available);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /(numToSkip  -  available);	  return    available    *(numToSkip    -    available);    	compilable	  [FE]  ArithmeticException  	32	3	replace
638	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *(available  -  numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  available  *(available  -  numToSkip);	  return    available    *(numToSkip    -    available);    	compilable	  [FE]  AssertionError  	32	3	replace
639	[BUG]  [BUGGY]  return  available  *(available  -  numToSkip);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *(available  -  numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *(available  -  numToSkip);	  return    available    *(numToSkip    -    available);    	compilable	  [FE]  AssertionError  	32	3	replace
640	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *(numToSkip  /  available);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  available  *(numToSkip  /  available);	  return    available    *(numToSkip    -    available);    	compilable	  [FE]  AssertionError  	32	3	replace
641	[BUG]  [BUGGY]  return  available  *(numToSkip  /  available);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *(numToSkip  /  available);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *(numToSkip  /  available);	  return    available    *(numToSkip    -    available);    	compilable	  [FE]  AssertionError  	32	3	replace
642	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *(available  /  numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  available  *(available  /  numToSkip);	  return    available    *(numToSkip    -    available);    	compilable	  [FE]  AssertionError  	32	3	replace
643	[BUG]  [BUGGY]  return  available  *(available  /  numToSkip);  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *(available  /  numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *(available  /  numToSkip);	  return    available    *(numToSkip    -    available);    	compilable	  [FE]  AssertionError  	32	3	replace
644	[BUG]  [BUGGY]  return  available  *(numToSkip  -  skip);  [CE]  cannot  find  symbol  skip  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *(numToSkip  -  skip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *(numToSkip  -  skip);	  return    available    *(numToSkip    -    available);    	non-compiled	[CE]  cannot  find  symbol  skip	32	None	replace
645	[BUG]  [BUGGY]  return  available  -  input.getChars(numToSkip,  skipped);  [CE]  cannot  find  symbol  skipped  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  input.getChars(numToSkip,  skipped);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  input.getChars(numToSkip,  skipped);	  return    available    -    input.getChars(numToSkip);    	non-compiled	[CE]  cannot  find  symbol  skipped	136	None	replace
646	[BUG]  [BUGGY]  return  available  -  input.getChars(skipped);  [CE]  cannot  find  symbol  skipped  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  input.getChars(skipped);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  input.getChars(skipped);	  return    available    -    input.getChars(numToSkip);    	non-compiled	[CE]  cannot  find  symbol  skipped	136	None	replace
647	[BUG]  [BUGGY]  return  input.available  -  available.getChars(numToSkip);  [CE]  cannot  find  symbol  available  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  input.available  -  available.getChars(numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  input.available  -  available.getChars(numToSkip);	  return    available    -    input.getChars(numToSkip);    	non-compiled	[CE]  cannot  find  symbol  available	136	None	replace
648	[BUG]  [BUGGY]  return  numToSkip  -  input.getChars(numToSkip);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  -  input.getChars(numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  numToSkip  -  input.getChars(numToSkip);	  return    available    -    input.getChars(numToSkip);    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
649	[BUG]  [BUGGY]  return  available  *  input.getChars(numToSkip);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  input.getChars(numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  input.getChars(numToSkip);	  return    available    -    input.getChars(numToSkip);    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
650	[BUG]  [BUGGY]  Integer  numToSkip  =  input.readLine();  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  Integer  numToSkip  =  input.readLine();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	Integer  numToSkip  =  input.readLine();	  return    available    +    numToSkip;    int    numToSkip    =    input.readLine();    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	6	None	replace
651	[BUG]  [BUGGY]  return  available  +  skipped;  System.arraycopy(input,  numToSkip,  available,  0);  [CE]  cannot  find  symbol  skipped  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  +  skipped;  System.arraycopy(input,  numToSkip,  available,  0);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  +  skipped;  System.arraycopy(input,  numToSkip,  available,  0);	  return    available    +    numToSkip;    System.arraycopy(input,    numToSkip,    available,    0);    	non-compiled	[CE]  cannot  find  symbol  skipped	127	None	replace
652	[BUG]  [BUGGY]  numToSkip  +=  available;  System.arraycopy(input,  numToSkip,  available,  0);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  numToSkip  +=  available;  System.arraycopy(input,  numToSkip,  available,  0);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	numToSkip  +=  available;  System.arraycopy(input,  numToSkip,  available,  0);	  return    available    +    numToSkip;    System.arraycopy(input,    numToSkip,    available,    0);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	127	None	replace
653	[BUG]  [BUGGY]  return  available  +  numToSkip;  System.arraycopy(input,  numToSkip,  available,  0,  skipped);  [CE]  cannot  find  symbol  skipped  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  +  numToSkip;  System.arraycopy(input,  numToSkip,  available,  0,  skipped);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  +  numToSkip;  System.arraycopy(input,  numToSkip,  available,  0,  skipped);	  return    available    +    numToSkip;    System.arraycopy(input,    numToSkip,    available,    0);    	non-compiled	[CE]  cannot  find  symbol  skipped	127	None	replace
654	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.write(available);  }  [CE]  possible  loss  of  precision  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.write(available);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.write(available);  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.write(available);    }    	non-compiled	[CE]  possible  loss  of  precision	105	None	replace
655	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.write(skipped);  }  [CE]  possible  loss  of  precision  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.write(skipped);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.write(skipped);  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.write(available);    }    	non-compiled	[CE]  possible  loss  of  precision	105	None	replace
656	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.write(available);  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.write(available);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.write(available);  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.write(available);    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
657	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.write(skipped);  }  [CE]  illegal  start  of  expression  [FE]                                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.write(skipped);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.write(skipped);  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.write(available);    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
658	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.write(skip);  }  [CE]  illegal  start  of  expression  [FE]                                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.write(skip);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.write(skip);  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.write(available);    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
659	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.write(skip);  }  [CE]  possible  loss  of  precision  [FE]                                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.write(skip);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.write(skip);  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.write(available);    }    	non-compiled	[CE]  possible  loss  of  precision	105	None	replace
660	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.write(skipped  +  skipped);  }  [CE]  illegal  start  of  expression  [FE]                                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.write(skipped  +  skipped);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.write(skipped  +  skipped);  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.write(available);    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
661	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  -  available  *  numToSkip  +  1;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  numToSkip  -  available  *  numToSkip  +  1;	  return    numToSkip    -    available    *    numToSkip;    	compilable	  [FE]  AssertionError  	61	3	replace
662	[BUG]  [BUGGY]  return  numToSkip  -  available  *  numToSkip  +  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  -  available  *  numToSkip  +  1;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  numToSkip  -  available  *  numToSkip  +  1;	  return    numToSkip    -    available    *    numToSkip;    	compilable	  [FE]  AssertionError  	61	3	replace
663	[BUG]  [BUGGY]  return  available  numToSkip  -  available  *  numToSkip;  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  numToSkip  -  available  *  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  numToSkip  -  available  *  numToSkip;	  return    numToSkip    -    available    *    numToSkip;    	non-compiled	[CE]  ';'  expected	61	None	replace
664	[BUG]  [BUGGY]  return  numToSkip  -  available  *  numToSkip  +  skipped;  [CE]  cannot  find  symbol  skipped  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  -  available  *  numToSkip  +  skipped;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  numToSkip  -  available  *  numToSkip  +  skipped;	  return    numToSkip    -    available    *    numToSkip;    	non-compiled	[CE]  cannot  find  symbol  skipped	61	None	replace
665	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  numToSkip  *  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  available  /  numToSkip  *  numToSkip;	  return    numToSkip    -    available    *    numToSkip;    	compilable	  [FE]  AssertionError  	61	3	replace
666	[BUG]  [BUGGY]  return  available  /  numToSkip  *  numToSkip;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  numToSkip  *  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /  numToSkip  *  numToSkip;	  return    numToSkip    -    available    *    numToSkip;    	compilable	  [FE]  AssertionError  	61	3	replace
667	[BUG]  [BUGGY]  return  available  /  numToSkip;  numToSkip  =  input.read();  [CE]  unreachable  statement  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  numToSkip;  numToSkip  =  input.read();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /  numToSkip;  numToSkip  =  input.read();	  return    available    +    numToSkip;    numToSkip    =    input.read();    	non-compiled	[CE]  unreachable  statement	8	None	replace
668	[BUG]  [BUGGY]  return  available  *  numToSkip;  numToSkip  =  input.read();  [CE]  unreachable  statement  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip;  numToSkip  =  input.read();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip;  numToSkip  =  input.read();	  return    available    +    numToSkip;    numToSkip    =    input.read();    	non-compiled	[CE]  unreachable  statement	8	None	replace
669	[BUG]  [BUGGY]  return  available  +  skipped;  numToSkip  =  input.read();  [CE]  cannot  find  symbol  skipped  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  +  skipped;  numToSkip  =  input.read();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  +  skipped;  numToSkip  =  input.read();	  return    available    +    numToSkip;    numToSkip    =    input.read();    	non-compiled	[CE]  cannot  find  symbol  skipped	8	None	replace
670	[BUG]  [BUGGY]  return  available  -  numToSkip;  numToSkip  =  input.read();  [CE]  unreachable  statement  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip;  numToSkip  =  input.read();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  numToSkip;  numToSkip  =  input.read();	  return    available    +    numToSkip;    numToSkip    =    input.read();    	non-compiled	[CE]  unreachable  statement	8	None	replace
671	[BUG]  [BUGGY]  return  numToSkip  +  available;  numToSkip  =  input.read();  [CE]  unreachable  statement  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  +  available;  numToSkip  =  input.read();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  numToSkip  +  available;  numToSkip  =  input.read();	  return    available    +    numToSkip;    numToSkip    =    input.read();    	non-compiled	[CE]  unreachable  statement	8	None	replace
672	[BUG]  [BUGGY]  return  available  *  numSkip;  [CE]  cannot  find  symbol  numSkip  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numSkip;	  return    available    *    skipped;    	non-compiled	[CE]  cannot  find  symbol  numSkip	17	None	replace
673	[BUG]  [BUGGY]  return  available  *  numtoSkip;  [CE]  cannot  find  symbol  numtoSkip  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numtoSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numtoSkip;	  return    available    *    skipped;    	non-compiled	[CE]  cannot  find  symbol  numtoSkip	17	None	replace
674	[BUG]  [BUGGY]  return  available  *  num;  [CE]  cannot  find  symbol  num  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  num;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  num;	  return    available    *    skipped;    	non-compiled	[CE]  cannot  find  symbol  num	17	None	replace
675	[BUG]  [BUGGY]  return  available  *  this.skipped;  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  this.skipped;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  this.skipped;	  return    available    *    skipped;    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	17	None	replace
676	[BUG]  [BUGGY]  return  available  /  numToSkip  +  1;  InputStream  available  =  input.readInput();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  numToSkip  +  1;  InputStream  available  =  input.readInput();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    /    numToSkip    +    1;    InputStream  available  =  input.readInput();	  	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	140	None	add
677	[BUG]  [BUGGY]  return  available  /  numToSkip  +  1;  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  /  numToSkip  +  1;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  numToSkip  +  1;  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  /  numToSkip  +  1;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    /    numToSkip    +    1;    if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  /  numToSkip  +  1;  }	  	non-compiled	[CE]  illegal  start  of  expression	140	None	add
678	[BUG]  [BUGGY]  return  available  /  numToSkip  +  1;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  numToSkip  +  1;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    /    numToSkip    +    1;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }	  	non-compiled	[CE]  illegal  start  of  expression	140	None	add
679	[BUG]  [BUGGY]  return  available  /  numToSkip  +  1;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  numToSkip  +  1;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    /    numToSkip    +    1;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }	  	non-compiled	[CE]  illegal  start  of  expression	140	None	add
680	[BUG]  [BUGGY]  return  available  /  numToSkip  +  1;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  numToSkip  +  1;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    /    numToSkip    +    1;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }	  	non-compiled	[CE]  illegal  start  of  expression	140	None	add
681	[BUG]  [BUGGY]  return  available  /  numToSkip  +  1;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  numToSkip  +  1;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    /    numToSkip    +    1;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }	  	non-compiled	[CE]  illegal  start  of  expression	140	None	add
682	[BUG]  [BUGGY]  return  available  /  numToSkip  +  1;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  numToSkip  +  1;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    /    numToSkip    +    1;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }	  	non-compiled	[CE]  illegal  start  of  expression	140	None	add
683	[BUG]  [BUGGY]  return  available  /  numToSkip  +  1;  if(available  <  numToSkip)  {  if(skipped  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  numToSkip  +  1;  if(available  <  numToSkip)  {  if(skipped  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    /    numToSkip    +    1;    if(available  <  numToSkip)  {  if(skipped  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	140	None	add
684	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	169	None	replace
685	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(long  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(long  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(long  i  =  0;  i  <  available;  i++)  {  input.close();  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	169	None	replace
686	[BUG]  [BUGGY]  return  numToSkip  -  available  +  skipd;  [CE]  cannot  find  symbol  skipd  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  -  available  +  skipd;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  numToSkip  -  available  +  skipd;	  return    numToSkip    -    available    +    skip;    	non-compiled	[CE]  cannot  find  symbol  skipd	150	None	replace
687	[BUG]  [BUGGY]  return  numToSkip  -  available  *  skipped;  [CE]  cannot  find  symbol  skipped  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  -  available  *  skipped;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  numToSkip  -  available  *  skipped;	  return    numToSkip    -    available    +    skip;    	non-compiled	[CE]  cannot  find  symbol  skipped	150	None	replace
688	[BUG]  [BUGGY]  return  numToSkip  -  available  *  skip;  [CE]  cannot  find  symbol  skip  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  -  available  *  skip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  numToSkip  -  available  *  skip;	  return    numToSkip    -    available    +    skip;    	non-compiled	[CE]  cannot  find  symbol  skip	150	None	replace
689	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  available;  ++i)  {  input.skip(available);  }  [CE]  missing  return  statement  [FE]                                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  for(int  i  =  0;  i  <  available;  ++i)  {  input.skip(available);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	for(int  i  =  0;  i  <  available;  ++i)  {  input.skip(available);  }	  if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.skip(available);    }    	non-compiled	[CE]  missing  return  statement	149	None	replace
690	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.skip(available);  }  [CE]  illegal  start  of  expression  [FE]                                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.skip(available);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.skip(available);  }	  if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.skip(available);    }    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
691	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  available;  ++i)  {  input.skip(available);  }  [CE]  '.class'  expected  [FE]                                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  For(int  i  =  0;  i  <  available;  ++i)  {  input.skip(available);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	For(int  i  =  0;  i  <  available;  ++i)  {  input.skip(available);  }	  if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.skip(available);    }    	non-compiled	[CE]  '.class'  expected	149	None	replace
692	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  available;  ++i)  {  input.skip(skipped);  }  [CE]  cannot  find  symbol  skipped  [FE]                                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  for(int  i  =  0;  i  <  available;  ++i)  {  input.skip(skipped);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	for(int  i  =  0;  i  <  available;  ++i)  {  input.skip(skipped);  }	  if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.skip(available);    }    	non-compiled	[CE]  cannot  find  symbol  skipped	149	None	replace
693	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  available;  ++i)  {  input.skip(numToSkip);  }  [CE]  missing  return  statement  [FE]                                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  for(int  i  =  0;  i  <  available;  ++i)  {  input.skip(numToSkip);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	for(int  i  =  0;  i  <  available;  ++i)  {  input.skip(numToSkip);  }	  if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.skip(available);    }    	non-compiled	[CE]  missing  return  statement	149	None	replace
694	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.skip(skipped);  }  [CE]  illegal  start  of  expression  [FE]                                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.skip(skipped);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.skip(skipped);  }	  if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.skip(available);    }    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
695	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available.skip(skipped);  }  [CE]  illegal  start  of  expression  [FE]                                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available.skip(skipped);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available.skip(skipped);  }	  if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.skip(available);    }    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
696	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  numToSkip  -  1;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  available  /  numToSkip  -  1;	  return    available    *    numToSkip    -    1;    	compilable	  [FE]  AssertionError  	157	3	replace
697	[BUG]  [BUGGY]  return  available  /  numToSkip  -  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  numToSkip  -  1;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /  numToSkip  -  1;	  return    available    *    numToSkip    -    1;    	compilable	  [FE]  AssertionError  	157	3	replace
698	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  /  1;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  available  *  numToSkip  /  1;	  return    available    *    numToSkip    -    1;    	compilable	  [FE]  AssertionError  	157	3	replace
699	[BUG]  [BUGGY]  return  available  *  numToSkip  /  1;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  /  1;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip  /  1;	  return    available    *    numToSkip    -    1;    	compilable	  [FE]  AssertionError  	157	3	replace
700	[BUG]  [BUGGY]  return  available  *  numToSkip  -  skipped  +  1;  [CE]  cannot  find  symbol  skipped  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  -  skipped  +  1;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip  -  skipped  +  1;	  return    available    *    numToSkip    -    1;    	non-compiled	[CE]  cannot  find  symbol  skipped	157	None	replace
701	[BUG]  [BUGGY]  return  available  *  skipped  -  1;  [CE]  cannot  find  symbol  skipped  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  skipped  -  1;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  skipped  -  1;	  return    available    *    numToSkip    -    1;    	non-compiled	[CE]  cannot  find  symbol  skipped	157	None	replace
702	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.reset();  }  [CE]  possible  loss  of  precision  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.reset();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.reset();  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.reset();    }    	non-compiled	[CE]  possible  loss  of  precision	103	None	replace
703	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.reset();  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.reset();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.reset();  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.reset();    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
704	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  available.size();  i  <  numToSkip;  i++)  {  input.reset();  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  available.size();  i  <  numToSkip;  i++)  {  input.reset();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  numToSkip)  {  for(int  i  =  available.size();  i  <  numToSkip;  i++)  {  input.reset();  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.reset();    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
705	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  output.reset();  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  output.reset();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  output.reset();  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.reset();    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
706	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  return  input.reset();  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  return  input.reset();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  return  input.reset();  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.reset();    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
707	[BUG]  [BUGGY]  InputStream  input  =  new  InputStreamInputStream(available,  numToSkip);  [CE]  variable  input  is  already  defined  in  method  skip(InputStream,long)  [FE]                                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  InputStream  input  =  new  InputStreamInputStream(available,  numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	InputStream  input  =  new  InputStreamInputStream(available,  numToSkip);	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.reset();    }    	non-compiled	[CE]  variable  input  is  already  defined  in  method  skip(InputStream,long)	103	None	replace
708	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  0;  i++)  {  input.reset();  }  [CE]  illegal  start  of  expression  [FE]                                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  0;  i++)  {  input.reset();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  0;  i++)  {  input.reset();  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.reset();    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
709	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  return  numToSkip  -  available;  InputStream  available  =  input.readInput();  }  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  <  numToSkip)  {  return  numToSkip  -  available;  InputStream  available  =  input.readInput();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  <  numToSkip)  {  return  numToSkip  -  available;  InputStream  available  =  input.readInput();  }	  return    numToSkip    -    available;    InputStream    available    =    input.readInput();    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	37	None	replace
710	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  return  numToSkip  -  available;  InputStream  available  =  input.readInput();  }  else  {  skip(input,  numToSkip);  }  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  <  numToSkip)  {  return  numToSkip  -  available;  InputStream  available  =  input.readInput();  }  else  {  skip(input,  numToSkip);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  <  numToSkip)  {  return  numToSkip  -  available;  InputStream  available  =  input.readInput();  }  else  {  skip(input,  numToSkip);  }	  return    numToSkip    -    available;    InputStream    available    =    input.readInput();    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	37	None	replace
711	[BUG]  [BUGGY]  numToSkip  -=  available;  InputStream  available  =  input.readInput();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  numToSkip  -=  available;  InputStream  available  =  input.readInput();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	numToSkip  -=  available;  InputStream  available  =  input.readInput();	  return    numToSkip    -    available;    InputStream    available    =    input.readInput();    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	37	None	replace
712	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  return  numToSkip  -  available;  InputStream  available  =  input.readInput();  }  else  {  skip(input,  numToSkip  +  skipped);  }  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  <  numToSkip)  {  return  numToSkip  -  available;  InputStream  available  =  input.readInput();  }  else  {  skip(input,  numToSkip  +  skipped);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  <  numToSkip)  {  return  numToSkip  -  available;  InputStream  available  =  input.readInput();  }  else  {  skip(input,  numToSkip  +  skipped);  }	  return    numToSkip    -    available;    InputStream    available    =    input.readInput();    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	37	None	replace
713	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  return  numToSkip  -  available;  InputStream  available  =  input.readInput();  }  else  {  skip(input,  numToSkip  +  1);  }  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  <  numToSkip)  {  return  numToSkip  -  available;  InputStream  available  =  input.readInput();  }  else  {  skip(input,  numToSkip  +  1);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  <  numToSkip)  {  return  numToSkip  -  available;  InputStream  available  =  input.readInput();  }  else  {  skip(input,  numToSkip  +  1);  }	  return    numToSkip    -    available;    InputStream    available    =    input.readInput();    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	37	None	replace
714	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  return  numToSkip  -  available;  InputStream  available  =  input.readInput();  }  else  {  throw  new  IOException( " ");  }  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  <  numToSkip)  {  return  numToSkip  -  available;  InputStream  available  =  input.readInput();  }  else  {  throw  new  IOException( " ");  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  <  numToSkip)  {  return  numToSkip  -  available;  InputStream  available  =  input.readInput();  }  else  {  throw  new  IOException( " ");  }	  return    numToSkip    -    available;    InputStream    available    =    input.readInput();    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	37	None	replace
715	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  1L;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  available  *  numToSkip  +  1L;	  return    available    *    numToSkip    +    1;    	compilable	  [FE]  AssertionError  	22	3	replace
716	[BUG]  [BUGGY]  return  available  *  numToSkip  +  1L;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  1L;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip  +  1L;	  return    available    *    numToSkip    +    1;    	compilable	  [FE]  AssertionError  	22	3	replace
717	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  2;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  available  *  numToSkip  +  2;	  return    available    *    numToSkip    +    1;    	compilable	  [FE]  AssertionError  	22	3	replace
718	[BUG]  [BUGGY]  return  available  *  numToSkip  +  2;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  2;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip  +  2;	  return    available    *    numToSkip    +    1;    	compilable	  [FE]  AssertionError  	22	3	replace
719	[BUG]  [BUGGY]  return  available  -  skipd  +  numToSkip;  [CE]  cannot  find  symbol  skipd  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  skipd  +  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  skipd  +  numToSkip;	  return    available    -    skip    +    numToSkip;    	non-compiled	[CE]  cannot  find  symbol  skipd	54	None	replace
720	[BUG]  [BUGGY]  int  numToSkip  =  input.read(available);  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  int  numToSkip  =  input.read(available);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	int  numToSkip  =  input.read(available);	  return    available    +    numToSkip;    int    numToSkip    =    input.read(available);    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	4	None	replace
721	[BUG]  [BUGGY]  long  numToSkip  =  input.read(available);  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  numToSkip  =  input.read(available);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  numToSkip  =  input.read(available);	  return    available    +    numToSkip;    int    numToSkip    =    input.read(available);    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	4	None	replace
722	[BUG]  [BUGGY]  Integer  numToSkip  =  input.read(available);  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  Integer  numToSkip  =  input.read(available);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	Integer  numToSkip  =  input.read(available);	  return    available    +    numToSkip;    int    numToSkip    =    input.read(available);    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	4	None	replace
723	[BUG]  [BUGGY]  numToSkip  =  input.read(available);  [CE]  no  suitable  method  found  for  read(long)  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  numToSkip  =  input.read(available);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	numToSkip  =  input.read(available);	  return    available    +    numToSkip;    int    numToSkip    =    input.read(available);    	non-compiled	[CE]  no  suitable  method  found  for  read(long)	4	None	replace
724	[BUG]  [BUGGY]  Int  numToSkip  =  input.read(available);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  Int  numToSkip  =  input.read(available);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	Int  numToSkip  =  input.read(available);	  return    available    +    numToSkip;    int    numToSkip    =    input.read(available);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
725	[BUG]  [BUGGY]  short  numToSkip  =  input.read(available);  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  short  numToSkip  =  input.read(available);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	short  numToSkip  =  input.read(available);	  return    available    +    numToSkip;    int    numToSkip    =    input.read(available);    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	4	None	replace
726	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(available  +  i);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(available  +  i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(available  +  i);  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.skip(available    +    i);    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
727	[BUG]  [BUGGY]  while(numToSkip  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(available  +  i);  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(numToSkip  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(available  +  i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(numToSkip  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(available  +  i);  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.skip(available    +    i);    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
728	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(available  +  i);  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(available  +  i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  skipped  =  input.skip(available  +  i);  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.skip(available    +    i);    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
729	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(skipped  +  i);  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(skipped  +  i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(skipped  +  i);  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.skip(available    +    i);    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
730	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(available  +  i,  skipped);  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(available  +  i,  skipped);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(available  +  i,  skipped);  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.skip(available    +    i);    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
731	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  *  available  +  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  numToSkip  *  available  +  numToSkip;	  return    available    *    numToSkip    +    numToSkip;    	compilable	  [FE]  AssertionError  	51	3	replace
732	[BUG]  [BUGGY]  return  numToSkip  *  available  +  numToSkip;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  *  available  +  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  numToSkip  *  available  +  numToSkip;	  return    available    *    numToSkip    +    numToSkip;    	compilable	  [FE]  AssertionError  	51	3	replace
733	[BUG]  [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  /  numToSkip;  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
734	[BUG]  [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  <  =  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  <  =  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  /  numToSkip;  if(available  <  =  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
735	[BUG]  [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  >=  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  >=  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  /  numToSkip;  if(available  >=  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
736	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  return  available  /  numToSkip;  }  else  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  <  numToSkip)  {  return  available  /  numToSkip;  }  else  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  <  numToSkip)  {  return  available  /  numToSkip;  }  else  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
737	[BUG]  [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  ==  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  ==  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  /  numToSkip;  if(available  ==  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
738	[BUG]  [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  <  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  <  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  /  numToSkip;  if(available  <  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
739	[BUG]  [BUGGY]  return  available  *  numToSkip;  System.arraycopy(input,  0,  available,  numToSkip,  0,  skipped);  [CE]  cannot  find  symbol  skipped  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip;  System.arraycopy(input,  0,  available,  numToSkip,  0,  skipped);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip;  System.arraycopy(input,  0,  available,  numToSkip,  0,  skipped);	  return    available    /    numToSkip;    System.arraycopy(input,    0,    available,    numToSkip,    0);    	non-compiled	[CE]  cannot  find  symbol  skipped	95	None	replace
740	[BUG]  [BUGGY]  return  available  *  numToSkip;  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  [CE]  cannot  find  symbol  skipped  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip;  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip;  System.arraycopy(input,  0,  available,  numToSkip,  skipped);	  return    available    /    numToSkip;    System.arraycopy(input,    0,    available,    numToSkip,    0);    	non-compiled	[CE]  cannot  find  symbol  skipped	95	None	replace
741	[BUG]  [BUGGY]  return  available  *  numToSkip;  System.arraycopy(input,  0,  available,  numToSkip,  skipped,  0);  [CE]  cannot  find  symbol  skipped  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip;  System.arraycopy(input,  0,  available,  numToSkip,  skipped,  0);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip;  System.arraycopy(input,  0,  available,  numToSkip,  skipped,  0);	  return    available    /    numToSkip;    System.arraycopy(input,    0,    available,    numToSkip,    0);    	non-compiled	[CE]  cannot  find  symbol  skipped	95	None	replace
742	[BUG]  [BUGGY]  return  available  /  numToSkip,  skipped;  System.arraycopy(input,  0,  available,  numToSkip,  0,  numToSkip);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  numToSkip,  skipped;  System.arraycopy(input,  0,  available,  numToSkip,  0,  numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /  numToSkip,  skipped;  System.arraycopy(input,  0,  available,  numToSkip,  0,  numToSkip);	  return    available    /    numToSkip;    System.arraycopy(input,    0,    available,    numToSkip,    0);    	non-compiled	[CE]  ';'  expected	95	None	replace
743	[BUG]  [BUGGY]  numToSkip  /  numToSkip;  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  numToSkip  /  numToSkip;  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	numToSkip  /  numToSkip;  System.arraycopy(input,  0,  available,  numToSkip,  skipped);	  return    available    /    numToSkip;    System.arraycopy(input,    0,    available,    numToSkip,    0);    	non-compiled	[CE]  not  a  statement	95	None	replace
744	[BUG]  [BUGGY]  return  available  *  numToSkip;  System.arraycopy(input,  0,  available,  numToSkip,  0,  numToSkip);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip;  System.arraycopy(input,  0,  available,  numToSkip,  0,  numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip;  System.arraycopy(input,  0,  available,  numToSkip,  0,  numToSkip);	  return    available    /    numToSkip;    System.arraycopy(input,    0,    available,    numToSkip,    0);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	95	None	replace
745	[BUG]  [BUGGY]  return  available  /  skipped;  System.arraycopy(input,  0,  available,  numToSkip,  0);  [CE]  cannot  find  symbol  skipped  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  skipped;  System.arraycopy(input,  0,  available,  numToSkip,  0);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /  skipped;  System.arraycopy(input,  0,  available,  numToSkip,  0);	  return    available    /    numToSkip;    System.arraycopy(input,    0,    available,    numToSkip,    0);    	non-compiled	[CE]  cannot  find  symbol  skipped	95	None	replace
746	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  *  numToSkip;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  *  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  *  numToSkip;  }	  return    available    *    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    *    numToSkip;    }    	non-compiled	[CE]  not  a  statement	76	None	replace
747	[BUG]  [BUGGY]  int  numToSkip  =  available  *  numToSkip;  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  int  numToSkip  =  available  *  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	int  numToSkip  =  available  *  numToSkip;	  return    available    *    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    *    numToSkip;    }    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	76	None	replace
748	[BUG]  [BUGGY]  return  available  *  numToSkip  -  skip;  [CE]  cannot  find  symbol  skip  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  -  skip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip  -  skip;	  return    available    *    numToSkip    -    skipped;    	non-compiled	[CE]  cannot  find  symbol  skip	18	None	replace
749	[BUG]  [BUGGY]  return  available  *  numToSkip  -  skipped.longValue();  [CE]  cannot  find  symbol  skipped  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  -  skipped.longValue();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip  -  skipped.longValue();	  return    available    *    numToSkip    -    skipped;    	non-compiled	[CE]  cannot  find  symbol  skipped	18	None	replace
750	[BUG]  [BUGGY]  return  available  *  numToSkip  -  skipped.length;  [CE]  cannot  find  symbol  skipped  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  -  skipped.length;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip  -  skipped.length;	  return    available    *    numToSkip    -    skipped;    	non-compiled	[CE]  cannot  find  symbol  skipped	18	None	replace
751	[BUG]  [BUGGY]  return  available  *  numToSkip  -  skipped.intValue();  [CE]  cannot  find  symbol  skipped  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  -  skipped.intValue();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip  -  skipped.intValue();	  return    available    *    numToSkip    -    skipped;    	non-compiled	[CE]  cannot  find  symbol  skipped	18	None	replace
752	[BUG]  [BUGGY]  return  available  *  numToSkip  -  skipped.doubleValue();  [CE]  cannot  find  symbol  skipped  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  -  skipped.doubleValue();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip  -  skipped.doubleValue();	  return    available    *    numToSkip    -    skipped;    	non-compiled	[CE]  cannot  find  symbol  skipped	18	None	replace
753	[BUG]  [BUGGY]  int  available  =  available  *  numToSkip;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  int  available  =  available  *  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	int  available  =  available  *  numToSkip;	  int    available    =    available    -    numToSkip;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	13	None	replace
754	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getBytes(i);    }    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
755	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  return  available  -  numToSkip;  }  else  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(numToSkip  >  0)  {  return  available  -  numToSkip;  }  else  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(numToSkip  >  0)  {  return  available  -  numToSkip;  }  else  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getBytes(i);    }    	non-compiled	[CE]  ';'  expected	117	None	replace
756	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  return  available  -  numToSkip;  }  else  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBy  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(numToSkip  >  0)  {  return  available  -  numToSkip;  }  else  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBy  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(numToSkip  >  0)  {  return  available  -  numToSkip;  }  else  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBy	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getBytes(i);    }    	non-compiled	[CE]  ';'  expected	117	None	replace
757	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  return  available  -  numToSkip;  }  else  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getB  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(numToSkip  >  0)  {  return  available  -  numToSkip;  }  else  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getB  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(numToSkip  >  0)  {  return  available  -  numToSkip;  }  else  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getB	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getBytes(i);    }    	non-compiled	[CE]  ';'  expected	117	None	replace
758	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  return  available  -  numToSkip;  }  else  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(numToSkip  >  0)  {  return  available  -  numToSkip;  }  else  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(numToSkip  >  0)  {  return  available  -  numToSkip;  }  else  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getBytes(i);    }    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
759	[BUG]  [BUGGY]  return  available  +  numToSkip  -  skip;  [CE]  cannot  find  symbol  skip  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  +  numToSkip  -  skip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  +  numToSkip  -  skip;	  return    available    +    numToSkip    -    skipped;    	non-compiled	[CE]  cannot  find  symbol  skip	28	None	replace
760	[BUG]  [BUGGY]  return  available  +  numToSkip  -  skipped.longValue();  [CE]  cannot  find  symbol  skipped  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  +  numToSkip  -  skipped.longValue();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  +  numToSkip  -  skipped.longValue();	  return    available    +    numToSkip    -    skipped;    	non-compiled	[CE]  cannot  find  symbol  skipped	28	None	replace
761	[BUG]  [BUGGY]  return  available  +  numToSkip  -  skipped.length;  [CE]  cannot  find  symbol  skipped  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  +  numToSkip  -  skipped.length;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  +  numToSkip  -  skipped.length;	  return    available    +    numToSkip    -    skipped;    	non-compiled	[CE]  cannot  find  symbol  skipped	28	None	replace
762	[BUG]  [BUGGY]  return  available  +  numToSkip  -  skipped.intValue();  [CE]  cannot  find  symbol  skipped  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  +  numToSkip  -  skipped.intValue();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  +  numToSkip  -  skipped.intValue();	  return    available    +    numToSkip    -    skipped;    	non-compiled	[CE]  cannot  find  symbol  skipped	28	None	replace
763	[BUG]  [BUGGY]  return  available  +  numToSkip  -  skipped);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  +  numToSkip  -  skipped);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  +  numToSkip  -  skipped);	  return    available    +    numToSkip    -    skipped;    	non-compiled	[CE]  ';'  expected	28	None	replace
764	[BUG]  [BUGGY]  long  available  =  available.size();  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available.size();  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available.size();  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available.size();    ++i)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
765	[BUG]  [BUGGY]  long  available  =  available.size();  if(available  <  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available.size();  if(available  <  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available.size();  if(available  <  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available.size();    ++i)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
766	[BUG]  [BUGGY]  long  available  =  available.size()  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available.size()  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available.size()  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available.size();    ++i)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
767	[BUG]  [BUGGY]  long  available  =  available  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available.size();    ++i)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
768	[BUG]  [BUGGY]  long  available  =  available.size()  /  numToSkip;  if(available  <  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available.size()  /  numToSkip;  if(available  <  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available.size()  /  numToSkip;  if(available  <  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available.size();    ++i)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
769	[BUG]  [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  >  0)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  >  0)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  /  numToSkip;  if(available  >  0)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available.size();    ++i)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
770	[BUG]  [BUGGY]  return  available  /  numToSkip;  if(available  >  numToSkip)  {  available  +  numToSkip;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  numToSkip;  if(available  >  numToSkip)  {  available  +  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /  numToSkip;  if(available  >  numToSkip)  {  available  +  numToSkip;  }	  return    available    +    numToSkip;    if(available    >    numToSkip)    {    available    +    numToSkip;    }    	non-compiled	[CE]  not  a  statement	163	None	replace
771	[BUG]  [BUGGY]  return  available  +  skipped;  if(available  >  numToSkip)  {  available  +  numToSkip;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  +  skipped;  if(available  >  numToSkip)  {  available  +  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  +  skipped;  if(available  >  numToSkip)  {  available  +  numToSkip;  }	  return    available    +    numToSkip;    if(available    >    numToSkip)    {    available    +    numToSkip;    }    	non-compiled	[CE]  not  a  statement	163	None	replace
772	[BUG]  [BUGGY]  return  available  *  numToSkip;  if(available  >  numToSkip)  {  available  +  numToSkip;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip;  if(available  >  numToSkip)  {  available  +  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip;  if(available  >  numToSkip)  {  available  +  numToSkip;  }	  return    available    +    numToSkip;    if(available    >    numToSkip)    {    available    +    numToSkip;    }    	non-compiled	[CE]  not  a  statement	163	None	replace
773	[BUG]  [BUGGY]  return  available  -  numToSkip;  if(available  >  numToSkip)  {  available  +  numToSkip;  }  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip;  if(available  >  numToSkip)  {  available  +  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  numToSkip;  if(available  >  numToSkip)  {  available  +  numToSkip;  }	  return    available    +    numToSkip;    if(available    >    numToSkip)    {    available    +    numToSkip;    }    	non-compiled	[CE]  not  a  statement	163	None	replace
774	[BUG]  [BUGGY]  return  available  +  skipped;  if(available  <  numToSkip)  {  available  +  numToSkip;  }  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  +  skipped;  if(available  <  numToSkip)  {  available  +  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  +  skipped;  if(available  <  numToSkip)  {  available  +  numToSkip;  }	  return    available    +    numToSkip;    if(available    >    numToSkip)    {    available    +    numToSkip;    }    	non-compiled	[CE]  not  a  statement	163	None	replace
775	[BUG]  [BUGGY]  return  available  +  skipped;  if(available  >  0)  {  available  +  numToSkip;  }  [CE]  not  a  statement  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  +  skipped;  if(available  >  0)  {  available  +  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  +  skipped;  if(available  >  0)  {  available  +  numToSkip;  }	  return    available    +    numToSkip;    if(available    >    numToSkip)    {    available    +    numToSkip;    }    	non-compiled	[CE]  not  a  statement	163	None	replace
776	[BUG]  [BUGGY]  return  numToSkip  -  available  *  numToSkip;  numToSkip  -=  available  *  numToSkip;  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  -  available  *  numToSkip;  numToSkip  -=  available  *  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    -    available    *    numToSkip;    numToSkip  -=  available  *  numToSkip;	  	non-compiled	[CE]  unreachable  statement	60	None	add
777	[BUG]  [BUGGY]  return  numToSkip  -  available  *  numToSkip;  int  numToSkip  =  available  *  numToSkip;  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  -  available  *  numToSkip;  int  numToSkip  =  available  *  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    -    available    *    numToSkip;    int  numToSkip  =  available  *  numToSkip;	  	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	60	None	add
778	[BUG]  [BUGGY]  return  numToSkip  -  available  *  numToSkip;  numToSkip  =  available  *  numToSkip;  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  -  available  *  numToSkip;  numToSkip  =  available  *  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    -    available    *    numToSkip;    numToSkip  =  available  *  numToSkip;	  	non-compiled	[CE]  unreachable  statement	60	None	add
779	[BUG]  [BUGGY]  return  numToSkip  -  available  *  numToSkip;  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  *  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  -  available  *  numToSkip;  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  *  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    -    available    *    numToSkip;    if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  *  numToSkip;  }	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
780	[BUG]  [BUGGY]  return  numToSkip  -  available  *  numToSkip;  InputStream  available  =  input.readInput();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  -  available  *  numToSkip;  InputStream  available  =  input.readInput();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    -    available    *    numToSkip;    InputStream  available  =  input.readInput();	  	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	60	None	add
781	[BUG]  [BUGGY]  return  numToSkip  -  available  *  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  -  available  *  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    -    available    *    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  numToSkip;  }	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
782	[BUG]  [BUGGY]  return  numToSkip  -  available  *  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  -  available  *  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    -    available    *    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
783	[BUG]  [BUGGY]  return  numToSkip  -  available  *  numToSkip;  if(available  <  numToSkip)  {  if(skipped  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  -  available  *  numToSkip;  if(available  <  numToSkip)  {  if(skipped  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    -    available    *    numToSkip;    if(available  <  numToSkip)  {  if(skipped  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
784	[BUG]  [BUGGY]  return  numToSkip  -  available  +  offset;  [CE]  cannot  find  symbol  offset  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  -  available  +  offset;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  numToSkip  -  available  +  offset;	  return    numToSkip    -    available    +    skipped;    	non-compiled	[CE]  cannot  find  symbol  offset	62	None	replace
785	[BUG]  [BUGGY]  return  input  *  numToSkip;  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  input  *  numToSkip;  System.arraycopy(input,  0,  available,  numToSkip,  skipped);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  input  *  numToSkip;  System.arraycopy(input,  0,  available,  numToSkip,  skipped);	  return    available    *    numToSkip;    System.arraycopy(input,    0,    available,    numToSkip,    0);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	86	None	replace
786	[BUG]  [BUGGY]  return  available  *  numToSkip,  skipped;  System.arraycopy(input,  0,  available,  numToSkip,  0,  numToSkip);  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip,  skipped;  System.arraycopy(input,  0,  available,  numToSkip,  0,  numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip,  skipped;  System.arraycopy(input,  0,  available,  numToSkip,  0,  numToSkip);	  return    available    *    numToSkip;    System.arraycopy(input,    0,    available,    numToSkip,    0);    	non-compiled	[CE]  ';'  expected	86	None	replace
787	[BUG]  [BUGGY]  System.arraycopy(input,  0,  available,  numToSkip,  0);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  System.arraycopy(input,  0,  available,  numToSkip,  0);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	System.arraycopy(input,  0,  available,  numToSkip,  0);	  return    available    *    numToSkip;    System.arraycopy(input,    0,    available,    numToSkip,    0);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	86	None	replace
788	[BUG]  [BUGGY]  return  available  *  numToSkip,  skipped;  System.arraycopy(input,  0,  available,  numToSkip,  0);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip,  skipped;  System.arraycopy(input,  0,  available,  numToSkip,  0);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip,  skipped;  System.arraycopy(input,  0,  available,  numToSkip,  0);	  return    available    *    numToSkip;    System.arraycopy(input,    0,    available,    numToSkip,    0);    	non-compiled	[CE]  ';'  expected	86	None	replace
789	[BUG]  [BUGGY]  return  available  *  numToSkip  +  1;  System.arraycopy(input,  0,  available,  numToSkip,  0);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  1;  System.arraycopy(input,  0,  available,  numToSkip,  0);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip  +  1;  System.arraycopy(input,  0,  available,  numToSkip,  0);	  return    available    *    numToSkip;    System.arraycopy(input,    0,    available,    numToSkip,    0);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	86	None	replace
790	[BUG]  [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  /  numToSkip;  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
791	[BUG]  [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  <  =  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  <  =  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  /  numToSkip;  if(available  <  =  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
792	[BUG]  [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  >=  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  >=  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  /  numToSkip;  if(available  >=  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
793	[BUG]  [BUGGY]  long  available  =  available  /  numToSkip;  if(available  <  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  /  numToSkip;  if(available  <  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  /  numToSkip;  if(available  <  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
794	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  return  available  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  <  numToSkip)  {  return  available  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  <  numToSkip)  {  return  available  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
795	[BUG]  [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  ==  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  ==  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  /  numToSkip;  if(available  ==  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
796	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  return  available  /  numToSkip;  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  <  numToSkip)  {  return  available  /  numToSkip;  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  <  numToSkip)  {  return  available  /  numToSkip;  }  else  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
797	[BUG]  [BUGGY]  return  available  -(numToSkip  *  skipped);  [CE]  cannot  find  symbol  skipped  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -(numToSkip  *  skipped);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -(numToSkip  *  skipped);	  return    available    -(numToSkip    *    numToSkip);    	non-compiled	[CE]  cannot  find  symbol  skipped	152	None	replace
798	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -(numToSkip  /  numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  available  -(numToSkip  /  numToSkip);	  return    available    -(numToSkip    *    numToSkip);    	compilable	  [FE]  AssertionError  	152	3	replace
799	[BUG]  [BUGGY]  return  available  -(numToSkip  /  numToSkip);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -(numToSkip  /  numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -(numToSkip  /  numToSkip);	  return    available    -(numToSkip    *    numToSkip);    	compilable	  [FE]  AssertionError  	152	3	replace
800	[BUG]  [BUGGY]  return  available  -(available  *  numToSkip  +  skipped);  [CE]  cannot  find  symbol  skipped  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -(available  *  numToSkip  +  skipped);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -(available  *  numToSkip  +  skipped);	  return    available    -(numToSkip    *    numToSkip);    	non-compiled	[CE]  cannot  find  symbol  skipped	152	None	replace
801	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *(numToSkip  *  numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  available  *(numToSkip  *  numToSkip);	  return    available    -(numToSkip    *    numToSkip);    	compilable	  [FE]  AssertionError  	152	3	replace
802	[BUG]  [BUGGY]  return  available  *(numToSkip  *  numToSkip);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *(numToSkip  *  numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *(numToSkip  *  numToSkip);	  return    available    -(numToSkip    *    numToSkip);    	compilable	  [FE]  AssertionError  	152	3	replace
803	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -(numToSkip  +  numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  available  -(numToSkip  +  numToSkip);	  return    available    -(numToSkip    *    numToSkip);    	compilable	  [FE]  AssertionError  	152	2	replace
804	[BUG]  [BUGGY]  return  available  -(numToSkip  +  numToSkip);  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -(numToSkip  +  numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -(numToSkip  +  numToSkip);	  return    available    -(numToSkip    *    numToSkip);    	compilable	  [FE]  AssertionError  	152	2	replace
805	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /(numToSkip  *  numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  available  /(numToSkip  *  numToSkip);	  return    available    -(numToSkip    *    numToSkip);    	compilable	  [FE]  AssertionError  	152	3	replace
806	[BUG]  [BUGGY]  return  available  /(numToSkip  *  numToSkip);  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /(numToSkip  *  numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /(numToSkip  *  numToSkip);	  return    available    -(numToSkip    *    numToSkip);    	compilable	  [FE]  AssertionError  	152	3	replace
807	[BUG]  [BUGGY]  long  available  =  numToSkip  *  available;  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  *  available;  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  *  available;  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }	  return    available    *    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	87	None	replace
808	[BUG]  [BUGGY]  return  available  %  skipped;  [CE]  cannot  find  symbol  skipped  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  %  skipped;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  %  skipped;	  return    available    %    numToSkip;    	non-compiled	[CE]  cannot  find  symbol  skipped	27	None	replace
809	[BUG]  [BUGGY]  return  available  %  skipped  +  numToSkip;  [CE]  cannot  find  symbol  skipped  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  %  skipped  +  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  %  skipped  +  numToSkip;	  return    available    %    numToSkip;    	non-compiled	[CE]  cannot  find  symbol  skipped	27	None	replace
810	[BUG]  [BUGGY]  return  available  /  this.skipped;  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  this.skipped;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /  this.skipped;	  return    available    -    this.skipped;    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	65	None	replace
811	[BUG]  [BUGGY]  return  available  -  this.skipped  +  skipped;  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  this.skipped  +  skipped;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  this.skipped  +  skipped;	  return    available    -    this.skipped;    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	65	None	replace
812	[BUG]  [BUGGY]  return  available  -  numToSkip;  numToSkip  -=  available;  [CE]  unreachable  statement  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip;  numToSkip  -=  available;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  numToSkip;  numToSkip  -=  available;	  return    numToSkip    -    available;    numToSkip    -    available;    	non-compiled	[CE]  unreachable  statement	36	None	replace
813	[BUG]  [BUGGY]  return  numToSkip  -  available;  numToSkip  -=  numToSkip;  [CE]  unreachable  statement  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  -  available;  numToSkip  -=  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  numToSkip  -  available;  numToSkip  -=  numToSkip;	  return    numToSkip    -    available;    numToSkip    -    available;    	non-compiled	[CE]  unreachable  statement	36	None	replace
814	[BUG]  [BUGGY]  return  available  *  numToSkip  +  1;  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  *  numToSkip  +  1;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  1;  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  *  numToSkip  +  1;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    +    1;    if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  *  numToSkip  +  1;  }	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
815	[BUG]  [BUGGY]  return  available  *  numToSkip  +  1;  InputStream  available  =  input.readInput();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  1;  InputStream  available  =  input.readInput();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    +    1;    InputStream  available  =  input.readInput();	  	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	21	None	add
816	[BUG]  [BUGGY]  return  available  *  numToSkip  +  1;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  i++)  {  available  *  numToSkip  +=  i;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  1;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  i++)  {  available  *  numToSkip  +=  i;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    +    1;    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  i++)  {  available  *  numToSkip  +=  i;  }	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
817	[BUG]  [BUGGY]  return  available  *  numToSkip  +  1;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  1;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    +    1;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
818	[BUG]  [BUGGY]  return  available  *  numToSkip  +  1;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  1;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    +    1;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
819	[BUG]  [BUGGY]  return  available  *  numToSkip  +  1;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  1;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    +    1;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length;  }	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
820	[BUG]  [BUGGY]  return  available  *  numToSkip  +  1;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  *  numToSkip  +=  i;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  1;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  *  numToSkip  +=  i;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    +    1;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  *  numToSkip  +=  i;  }	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
821	[BUG]  [BUGGY]  return  available  *  numToSkip  +  1;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  1;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    +    1;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
822	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getChars(i);    }    	non-compiled	[CE]  possible  loss  of  precision	42	None	replace
823	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
824	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(available  <  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(available  <  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(available  <  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
825	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >=  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >=  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(available  >=  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
826	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(long  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(long  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(long  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
827	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(available  ==  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(available  ==  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(available  ==  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
828	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
829	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  '.class'  expected  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  For(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	For(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  '.class'  expected	145	None	replace
830	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.flush();  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.flush();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.flush();  }	  if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
831	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  output.close();  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  output.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  output.close();  }	  if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
832	[BUG]  [BUGGY]  int  available  =  numToSkip;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  int  available  =  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	int  available  =  numToSkip;	  if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	145	None	replace
833	[BUG]  [BUGGY]  return  available  *  skipped.longValue();  [CE]  cannot  find  symbol  skipped  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  skipped.longValue();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  skipped.longValue();	  return    available    *    numToSkip.longValue();    	non-compiled	[CE]  cannot  find  symbol  skipped	93	None	replace
834	[BUG]  [BUGGY]  return  available  /  numToSkip.longValue();  [CE]  long  cannot  be  dereferenced  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  numToSkip.longValue();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /  numToSkip.longValue();	  return    available    *    numToSkip.longValue();    	non-compiled	[CE]  long  cannot  be  dereferenced	93	None	replace
835	[BUG]  [BUGGY]  return  available  *  skipped  /  numToSkip.longValue();  [CE]  cannot  find  symbol  skipped  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  skipped  /  numToSkip.longValue();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  skipped  /  numToSkip.longValue();	  return    available    *    numToSkip.longValue();    	non-compiled	[CE]  cannot  find  symbol  skipped	93	None	replace
836	[BUG]  [BUGGY]  return  available  *  skipped,  numToSkip.longValue();  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  skipped,  numToSkip.longValue();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  skipped,  numToSkip.longValue();	  return    available    *    numToSkip.longValue();    	non-compiled	[CE]  ';'  expected	93	None	replace
837	[BUG]  [BUGGY]  return  available  *  numToSkip,  skipped.longValue();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip,  skipped.longValue();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip,  skipped.longValue();	  return    available    *    numToSkip.longValue();    	non-compiled	[CE]  ';'  expected	93	None	replace
838	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  *  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  available  *  numToSkip  *  numToSkip;	  return    available    -    numToSkip    *    numToSkip;    	compilable	  [FE]  AssertionError  	53	3	replace
839	[BUG]  [BUGGY]  return  available  *  numToSkip  *  numToSkip;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  *  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip  *  numToSkip;	  return    available    -    numToSkip    *    numToSkip;    	compilable	  [FE]  AssertionError  	53	3	replace
840	[BUG]  [BUGGY]  return  available  -  numToSkip  *  skipped;  [CE]  cannot  find  symbol  skipped  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  *  skipped;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  numToSkip  *  skipped;	  return    available    -    numToSkip    *    numToSkip;    	non-compiled	[CE]  cannot  find  symbol  skipped	53	None	replace
841	[BUG]  [BUGGY]  return  available  -  skipped.intValue();  [CE]  cannot  find  symbol  skipped  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  skipped.intValue();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  skipped.intValue();	  return    available    -    skipd;    	non-compiled	[CE]  cannot  find  symbol  skipped	43	None	replace
842	[BUG]  [BUGGY]  numToSkip  -=  skipped;  [CE]  cannot  find  symbol  skipped  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  numToSkip  -=  skipped;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	numToSkip  -=  skipped;	  numToSkip    -=    available;    	non-compiled	[CE]  cannot  find  symbol  skipped	110	None	replace
843	[BUG]  [BUGGY]  numToSkip  -=  available.length;  [CE]  long  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  numToSkip  -=  available.length;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	numToSkip  -=  available.length;	  numToSkip    -=    available;    	non-compiled	[CE]  long  cannot  be  dereferenced	110	None	replace
844	[BUG]  [BUGGY]  numToSkip  -=  available  +  1;  [CE]  missing  return  statement  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  numToSkip  -=  available  +  1;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	numToSkip  -=  available  +  1;	  numToSkip    -=    available;    	non-compiled	[CE]  missing  return  statement	110	None	replace
845	[BUG]  [BUGGY]  numToSkip  -=  available  +  skipped;  [CE]  cannot  find  symbol  skipped  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  numToSkip  -=  available  +  skipped;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	numToSkip  -=  available  +  skipped;	  numToSkip    -=    available;    	non-compiled	[CE]  cannot  find  symbol  skipped	110	None	replace
846	[BUG]  [BUGGY]  numToSkip  -=  available  *  numToSkip;  [CE]  missing  return  statement  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  numToSkip  -=  available  *  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	numToSkip  -=  available  *  numToSkip;	  numToSkip    -=    available;    	non-compiled	[CE]  missing  return  statement	110	None	replace
847	[BUG]  [BUGGY]  numToSkip  -=  available  *  skipped;  [CE]  cannot  find  symbol  skipped  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  numToSkip  -=  available  *  skipped;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	numToSkip  -=  available  *  skipped;	  numToSkip    -=    available;    	non-compiled	[CE]  cannot  find  symbol  skipped	110	None	replace
848	[BUG]  [BUGGY]  Integer  numToSkip  =  available  *  numToSkip;  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  Integer  numToSkip  =  available  *  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	Integer  numToSkip  =  available  *  numToSkip;	  return    available    *    numToSkip;    int    numToSkip    =    available    *    numToSkip;    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	77	None	replace
849	[BUG]  [BUGGY]  int  numToSkip  =  available  *  numToSkip  +  1;  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  int  numToSkip  =  available  *  numToSkip  +  1;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	int  numToSkip  =  available  *  numToSkip  +  1;	  return    available    *    numToSkip;    int    numToSkip    =    available    *    numToSkip;    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	77	None	replace
850	[BUG]  [BUGGY]  return  input  -  available.getSize();  [CE]  long  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  input  -  available.getSize();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  input  -  available.getSize();	  return    available    -    input.getSize();    	non-compiled	[CE]  long  cannot  be  dereferenced	120	None	replace
851	[BUG]  [BUGGY]  return  input.available  -  available.getSize();  [CE]  cannot  find  symbol  available  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  input.available  -  available.getSize();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  input.available  -  available.getSize();	  return    available    -    input.getSize();    	non-compiled	[CE]  cannot  find  symbol  available	120	None	replace
852	[BUG]  [BUGGY]  return  available  -  input.getMeanSize();  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  input.getMeanSize();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  input.getMeanSize();	  return    available    -    input.getSize();    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
853	[BUG]  [BUGGY]  long  available  =  available  /  skipped;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  /  skipped;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  /  skipped;	  long    available    =    available    /    numToSkip;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	134	None	replace
854	[BUG]  [BUGGY]  long  available  =  available  -  skipped  -  numToSkip;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  -  skipped  -  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  -  skipped  -  numToSkip;	  long    available    =    available    -    skipped;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	133	None	replace
855	[BUG]  [BUGGY]  long  available  =  available  -  skipped  +  input.getChars(numToSkip);  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  -  skipped  +  input.getChars(numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  -  skipped  +  input.getChars(numToSkip);	  long    available    =    available    -    skipped;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	133	None	replace
856	[BUG]  [BUGGY]  long  available  =  available  -  skipped  +  input.getChars(0,  numToSkip);  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  -  skipped  +  input.getChars(0,  numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  -  skipped  +  input.getChars(0,  numToSkip);	  long    available    =    available    -    skipped;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	133	None	replace
857	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  if(skipped  >  0)  {  return  available  *  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  if(skipped  >  0)  {  return  available  *  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  if(skipped  >  0)  {  return  available  *  numToSkip;  }	  return    available    *    numToSkip;    if(available    >    numToSkip)    {    if(skipped    >    0)    {    return    available    *    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
858	[BUG]  [BUGGY]  long  skipped  =  available  *  numToSkip;  if(skipped  >  0)  {  return  available  *  numToSkip;  }  [CE]  missing  return  statement  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  skipped  =  available  *  numToSkip;  if(skipped  >  0)  {  return  available  *  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  skipped  =  available  *  numToSkip;  if(skipped  >  0)  {  return  available  *  numToSkip;  }	  return    available    *    numToSkip;    if(available    >    numToSkip)    {    if(skipped    >    0)    {    return    available    *    numToSkip;    }    	non-compiled	[CE]  missing  return  statement	164	None	replace
859	[BUG]  [BUGGY]  long  numToSkip  =  available  *  numToSkip;  if(skipped  >  0)  {  return  available  *  numToSkip;  }  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  numToSkip  =  available  *  numToSkip;  if(skipped  >  0)  {  return  available  *  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  numToSkip  =  available  *  numToSkip;  if(skipped  >  0)  {  return  available  *  numToSkip;  }	  return    available    *    numToSkip;    if(available    >    numToSkip)    {    if(skipped    >    0)    {    return    available    *    numToSkip;    }    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	164	None	replace
860	[BUG]  [BUGGY]  long  available  =  numToSkip  *  numToSkip;  if(available  >  0)  {  if(skipped  >  0)  {  return  available  *  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  *  numToSkip;  if(available  >  0)  {  if(skipped  >  0)  {  return  available  *  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  *  numToSkip;  if(available  >  0)  {  if(skipped  >  0)  {  return  available  *  numToSkip;  }	  return    available    *    numToSkip;    if(available    >    numToSkip)    {    if(skipped    >    0)    {    return    available    *    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
861	[BUG]  [BUGGY]  return  numToSkip  -  available  *  numToSkip;  if(available  >  numToSkip)  {  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip--)  {  available  +=  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  -  available  *  numToSkip;  if(available  >  numToSkip)  {  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip--)  {  available  +=  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    -    available    *    numToSkip;    if(available  >  numToSkip)  {  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip--)  {  available  +=  numToSkip;  }	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
862	[BUG]  [BUGGY]  return  numToSkip  -  available  *  numToSkip;  if(available  >  numToSkip)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  available  +=  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  -  available  *  numToSkip;  if(available  >  numToSkip)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  available  +=  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    -    available    *    numToSkip;    if(available  >  numToSkip)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  available  +=  numToSkip;  }	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
863	[BUG]  [BUGGY]  return  numToSkip  -  available  *  numToSkip;  int  numToSkip  =  input.read();  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  -  available  *  numToSkip;  int  numToSkip  =  input.read();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    -    available    *    numToSkip;    int  numToSkip  =  input.read();	  	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	60	None	add
864	[BUG]  [BUGGY]  return  numToSkip  -  available  *  numToSkip;  if(available  >  numToSkip)  {  for(int  numToSkip  =  available;  numToSkip  >=  0;  numToSkip++)  {  available  +=  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  -  available  *  numToSkip;  if(available  >  numToSkip)  {  for(int  numToSkip  =  available;  numToSkip  >=  0;  numToSkip++)  {  available  +=  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    -    available    *    numToSkip;    if(available  >  numToSkip)  {  for(int  numToSkip  =  available;  numToSkip  >=  0;  numToSkip++)  {  available  +=  numToSkip;  }	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
865	[BUG]  [BUGGY]  return  numToSkip  -  available  *  numToSkip;  if(available  >  numToSkip)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  available  *  numToSkip  +=  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  -  available  *  numToSkip;  if(available  >  numToSkip)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  available  *  numToSkip  +=  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    -    available    *    numToSkip;    if(available  >  numToSkip)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  available  *  numToSkip  +=  numToSkip;  }	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
866	[BUG]  [BUGGY]  return  numToSkip  -  available  *  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  -  available  *  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    -    available    *    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
867	[BUG]  [BUGGY]  return  numToSkip  -  available  *  numToSkip;  if(available  >  numToSkip)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  available  *  numToSkip;  }  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  -  available  *  numToSkip;  if(available  >  numToSkip)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  available  *  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    -    available    *    numToSkip;    if(available  >  numToSkip)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  available  *  numToSkip;  }	  	non-compiled	[CE]  not  a  statement	60	None	add
868	[BUG]  [BUGGY]  return  numToSkip  -  available  *  numToSkip;  int  numToSkip  =  input.read(available);  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]                  AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  -  available  *  numToSkip;  int  numToSkip  =  input.read(available);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    -    available    *    numToSkip;    int  numToSkip  =  input.read(available);	  	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	60	None	add
869	[BUG]  [BUGGY]  if(available  >  skipped)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(available);  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  skipped)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(available);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  skipped)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(available);  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.skip(available);    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
870	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(skip);  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(skip);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(skip);  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.skip(available);    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
871	[BUG]  [BUGGY]  if(available  >  skipped)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  skipped)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  skipped)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.skip(available);    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
872	[BUG]  [BUGGY]  return  available  -  numToSkip;  long  numToSkip  =  input.readLine();  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip;  long  numToSkip  =  input.readLine();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  numToSkip;  long  numToSkip  =  input.readLine();	  return    available    +    numToSkip;    long    numToSkip    =    input.readLine();    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	7	None	replace
873	[BUG]  [BUGGY]  return  available  /  numToSkip;  int  numToSkip  =  input.readLine();  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  numToSkip;  int  numToSkip  =  input.readLine();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /  numToSkip;  int  numToSkip  =  input.readLine();	  return    available    +    numToSkip;    long    numToSkip    =    input.readLine();    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	7	None	replace
874	[BUG]  [BUGGY]  return  numToSkip  /  available.longValue();  [CE]  long  cannot  be  dereferenced  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  /  available.longValue();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  numToSkip  /  available.longValue();	  return    numToSkip    /    available;    	non-compiled	[CE]  long  cannot  be  dereferenced	34	None	replace
875	[BUG]  [BUGGY]  return  input  -  available.getChars(numToSkip);  [CE]  long  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  input  -  available.getChars(numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  input  -  available.getChars(numToSkip);	  return    available    -    input.getChars(numToSkip);    	non-compiled	[CE]  long  cannot  be  dereferenced	136	None	replace
876	[BUG]  [BUGGY]  return  numToSkip  -  input.getChars(available);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  -  input.getChars(available);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  numToSkip  -  input.getChars(available);	  return    available    -    input.getChars(numToSkip);    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
877	[BUG]  [BUGGY]  return  available  -  input.getChars(skipped,  numToSkip);  [CE]  cannot  find  symbol  skipped  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  input.getChars(skipped,  numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  input.getChars(skipped,  numToSkip);	  return    available    -    input.getChars(numToSkip);    	non-compiled	[CE]  cannot  find  symbol  skipped	136	None	replace
878	[BUG]  [BUGGY]  return  available  *  numToSkip  /  skip;  [CE]  cannot  find  symbol  skip  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  /  skip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip  /  skip;	  return    available    *    numToSkip    /    numToSkip;    	non-compiled	[CE]  cannot  find  symbol  skip	20	None	replace
879	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.skip(available  *  i);  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.skip(available  *  i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.skip(available  *  i);  }	  if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.skip(available    +    i);    }    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
880	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available  +  i;  ++i)  {  input.skip(available  +  i);  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available  +  i;  ++i)  {  input.skip(available  +  i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available  +  i;  ++i)  {  input.skip(available  +  i);  }	  if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.skip(available    +    i);    }    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
881	[BUG]  [BUGGY]  int  available  =  numToSkip;  for(int  i  =  0;  i  <  available;  ++i)  {  input.skip(available  +  i);  }  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  int  available  =  numToSkip;  for(int  i  =  0;  i  <  available;  ++i)  {  input.skip(available  +  i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	int  available  =  numToSkip;  for(int  i  =  0;  i  <  available;  ++i)  {  input.skip(available  +  i);  }	  if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.skip(available    +    i);    }    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	147	None	replace
882	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.skip(skipped  +  i);  }  [CE]  illegal  start  of  expression  [FE]                                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.skip(skipped  +  i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.skip(skipped  +  i);  }	  if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.skip(available    +    i);    }    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
883	[BUG]  [BUGGY]  long  numToSkip  =  available.get(numToSkip);  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  numToSkip  =  available.get(numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  numToSkip  =  available.get(numToSkip);	  return    available    *    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available.size();    i++)    {    available    *    numToSkip    +=    i;    }    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	72	None	replace
884	[BUG]  [BUGGY]  long  numToSkip  =  available.size();  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  numToSkip  =  available.size();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  numToSkip  =  available.size();	  return    available    *    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available.size();    i++)    {    available    *    numToSkip    +=    i;    }    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	72	None	replace
885	[BUG]  [BUGGY]  long  numToSkip  =  input.skip(available);  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  numToSkip  =  input.skip(available);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  numToSkip  =  input.skip(available);	  return    available    *    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available.size();    i++)    {    available    *    numToSkip    +=    i;    }    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	72	None	replace
886	[BUG]  [BUGGY]  return  available  /  numToSkip;  int  numToSkip  =  input.read(available);  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  numToSkip;  int  numToSkip  =  input.read(available);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /  numToSkip;  int  numToSkip  =  input.read(available);	  return    available    +    numToSkip;    int    numToSkip    =    input.read(available);    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	4	None	replace
887	[BUG]  [BUGGY]  return  available  +  skipped;  int  numToSkip  =  input.read(available);  [CE]  cannot  find  symbol  skipped  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  +  skipped;  int  numToSkip  =  input.read(available);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  +  skipped;  int  numToSkip  =  input.read(available);	  return    available    +    numToSkip;    int    numToSkip    =    input.read(available);    	non-compiled	[CE]  cannot  find  symbol  skipped	4	None	replace
888	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  int  numToSkip  =  available;  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.getRead();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  int  numToSkip  =  available;  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.getRead();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  int  numToSkip  =  available;  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.getRead();  }	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getRead();    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
889	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(available  <  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getRead();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(available  <  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getRead();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(available  <  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getRead();  }	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getRead();    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
890	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getRead();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getRead();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getRead();  }	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getRead();    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
891	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >=  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getRead();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >=  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getRead();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(available  >=  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getRead();  }	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getRead();    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
892	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [CE]  >  expected  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  numToSkip)  {  int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  numToSkip)  {  int  i  =  0;  i  <  available;  ++i)  {  input.close();  }	  if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.close();    }    	non-compiled	[CE]  >  expected	144	None	replace
893	[BUG]  [BUGGY]  int  numToSkip  =  input.getLength();  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  int  numToSkip  =  input.getLength();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	int  numToSkip  =  input.getLength();	  return    available    *    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	88	None	replace
894	[BUG]  [BUGGY]  return  available  /  SMALL_BUFFER_SIZE  +  numToSkip;  [CE]  cannot  find  symbol  SMALL_BUFFER_SIZE  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  SMALL_BUFFER_SIZE  +  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /  SMALL_BUFFER_SIZE  +  numToSkip;	  return    available    /    skipped    +    numToSkip;    	non-compiled	[CE]  cannot  find  symbol  SMALL_BUFFER_SIZE	94	None	replace
895	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  SKIP_BUF_SIZE  +  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  available  /  SKIP_BUF_SIZE  +  numToSkip;	  return    available    /    skipped    +    numToSkip;    	compilable	  [FE]  AssertionError  	94	3	replace
896	[BUG]  [BUGGY]  return  available  /  SKIP_BUF_SIZE  +  numToSkip;  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  SKIP_BUF_SIZE  +  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /  SKIP_BUF_SIZE  +  numToSkip;	  return    available    /    skipped    +    numToSkip;    	compilable	  [FE]  AssertionError  	94	3	replace
897	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.skip(0);  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.skip(0);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.skip(0);  }	  if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.skip();    }    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
898	[BUG]  [BUGGY]  InputStream  input  =  input.getInputStream();  [CE]  variable  input  is  already  defined  in  method  skip(InputStream,long)  [FE]                                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  InputStream  input  =  input.getInputStream();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	InputStream  input  =  input.getInputStream();	  if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.skip();    }    	non-compiled	[CE]  variable  input  is  already  defined  in  method  skip(InputStream,long)	148	None	replace
899	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.skip(1);  }  [CE]  illegal  start  of  expression  [FE]                                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.skip(1);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.skip(1);  }	  if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.skip();    }    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
900	[BUG]  [BUGGY]  return  numToSkip  /  available;  System.arraycopy(input,  numToSkip,  available,  0);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  /  available;  System.arraycopy(input,  numToSkip,  available,  0);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  numToSkip  /  available;  System.arraycopy(input,  numToSkip,  available,  0);	  return    available    /    numToSkip;    System.arraycopy(input,    numToSkip,    available,    0);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	132	None	replace
901	[BUG]  [BUGGY]  numToSkip  /  numToSkip;  System.arraycopy(input,  numToSkip,  available,  0);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  numToSkip  /  numToSkip;  System.arraycopy(input,  numToSkip,  available,  0);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	numToSkip  /  numToSkip;  System.arraycopy(input,  numToSkip,  available,  0);	  return    available    /    numToSkip;    System.arraycopy(input,    numToSkip,    available,    0);    	non-compiled	[CE]  not  a  statement	132	None	replace
902	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
903	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  available;  i++)  {  input.close();  }  [CE]  possible  loss  of  precision  [FE]                                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  for(int  i  =  available;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	for(int  i  =  available;  i  <  available;  i++)  {  input.close();  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  possible  loss  of  precision	106	None	replace
904	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  input.close();  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
905	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  input.close();  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
906	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *(available  +  numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  available  *(available  +  numToSkip);	  return    available    -(numToSkip    +    available);    	compilable	  [FE]  AssertionError  	154	3	replace
907	[BUG]  [BUGGY]  return  available  *(available  +  numToSkip);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *(available  +  numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *(available  +  numToSkip);	  return    available    -(numToSkip    +    available);    	compilable	  [FE]  AssertionError  	154	3	replace
908	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -(numToSkip  /  available);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  available  -(numToSkip  /  available);	  return    available    -(numToSkip    +    available);    	compilable	  [FE]  AssertionError  	154	2	replace
909	[BUG]  [BUGGY]  return  available  -(numToSkip  /  available);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -(numToSkip  /  available);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -(numToSkip  /  available);	  return    available    -(numToSkip    +    available);    	compilable	  [FE]  AssertionError  	154	2	replace
910	[BUG]  [BUGGY]  return  available  *  numToSkip  +  input.longValue();  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  input.longValue();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip  +  input.longValue();	  return    available    *    numToSkip.longValue();    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
911	[BUG]  [BUGGY]  return  available  *  numToSkip,  input.longValue();  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip,  input.longValue();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip,  input.longValue();	  return    available    *    numToSkip.longValue();    	non-compiled	[CE]  ';'  expected	93	None	replace
912	[BUG]  [BUGGY]  return  available  *  numToSkip.longValue()  +  skipped;  [CE]  long  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip.longValue()  +  skipped;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip.longValue()  +  skipped;	  return    available    *    numToSkip.longValue();    	non-compiled	[CE]  long  cannot  be  dereferenced	93	None	replace
913	[BUG]  [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  <  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  <  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  /  numToSkip;  if(available  <  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
914	[BUG]  [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  >=  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  >=  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  /  numToSkip;  if(available  >=  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
915	[BUG]  [BUGGY]  long  available  =  available  /  numToSkip;  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  /  numToSkip;  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  /  numToSkip;  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
916	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  +  numToSkip  +  available;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  available  +  numToSkip  +  available;	  return    available    -    numToSkip    +    numToSkip;    	compilable	  [FE]  AssertionError  	49	3	replace
917	[BUG]  [BUGGY]  return  available  +  numToSkip  +  available;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  +  numToSkip  +  available;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  +  numToSkip  +  available;	  return    available    -    numToSkip    +    numToSkip;    	compilable	  [FE]  AssertionError  	49	3	replace
918	[BUG]  [BUGGY]  return  numToSkip  -  available  +  input.length;  [CE]  cannot  find  symbol  length  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  -  available  +  input.length;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  numToSkip  -  available  +  input.length;	  return    numToSkip    -    available    +    skip;    	non-compiled	[CE]  cannot  find  symbol  length	150	None	replace
919	[BUG]  [BUGGY]  return  available  -  missing  +  numToSkip;  [CE]  cannot  find  symbol  missing  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  missing  +  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  missing  +  numToSkip;	  return    available    -    skip    +    numToSkip;    	non-compiled	[CE]  cannot  find  symbol  missing	54	None	replace
920	[BUG]  [BUGGY]  return  available  -  saved  +  numToSkip;  [CE]  cannot  find  symbol  saved  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  saved  +  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  saved  +  numToSkip;	  return    available    -    skip    +    numToSkip;    	non-compiled	[CE]  cannot  find  symbol  saved	54	None	replace
921	[BUG]  [BUGGY]  InputStream  available  =  input.readInt();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  InputStream  available  =  input.readInt();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	InputStream  available  =  input.readInt();	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.write(available);    }    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	105	None	replace
922	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +  i  +=  skipped;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  <  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +  i  +=  skipped;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  <  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +  i  +=  skipped;  }	  return    available    +    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +    i    +=    skipped;    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
923	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +  i  +=  skipped;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +  i  +=  skipped;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +  i  +=  skipped;  }	  return    available    +    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +    i    +=    skipped;    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
924	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +  i  +=  skipped;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +  i  +=  skipped;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +  i  +=  skipped;  }	  return    available    +    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +    i    +=    skipped;    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
925	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  skipped;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  skipped;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  skipped;  }	  return    available    +    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +    i    +=    skipped;    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
926	[BUG]  [BUGGY]  long  skipped  =  input.skip(available);  [CE]  missing  return  statement  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  skipped  =  input.skip(available);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  skipped  =  input.skip(available);	  return    available    +    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +    i    +=    skipped;    }    	non-compiled	[CE]  missing  return  statement	122	None	replace
927	[BUG]  [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  <  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  <  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  /  numToSkip;  if(available  <  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
928	[BUG]  [BUGGY]  long  available  =  available  /  numToSkip;  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  /  numToSkip;  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  /  numToSkip;  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
929	[BUG]  [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available!=  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available!=  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  /  numToSkip;  if(available!=  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
930	[BUG]  [BUGGY]  return  available  *  numToSkip  +  skipped;  System.arraycopy(input,  numToSkip,  available,  numToSkip);  [CE]  cannot  find  symbol  skipped  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  skipped;  System.arraycopy(input,  numToSkip,  available,  numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip  +  skipped;  System.arraycopy(input,  numToSkip,  available,  numToSkip);	  return    available    *    numToSkip;    System.arraycopy(input,    numToSkip,    available,    numToSkip);    	non-compiled	[CE]  cannot  find  symbol  skipped	168	None	replace
931	[BUG]  [BUGGY]  return  numToSkip  *  available;  System.arraycopy(input,  numToSkip,  available,  numToSkip);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  *  available;  System.arraycopy(input,  numToSkip,  available,  numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  numToSkip  *  available;  System.arraycopy(input,  numToSkip,  available,  numToSkip);	  return    available    *    numToSkip;    System.arraycopy(input,    numToSkip,    available,    numToSkip);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	168	None	replace
932	[BUG]  [BUGGY]  return  input  *  numToSkip;  System.arraycopy(input,  numToSkip,  available,  numToSkip);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  input  *  numToSkip;  System.arraycopy(input,  numToSkip,  available,  numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  input  *  numToSkip;  System.arraycopy(input,  numToSkip,  available,  numToSkip);	  return    available    *    numToSkip;    System.arraycopy(input,    numToSkip,    available,    numToSkip);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	168	None	replace
933	[BUG]  [BUGGY]  return  available  *  numToSkip;  System.arraycopy(input,  numToSkip,  available,  skipped);  [CE]  cannot  find  symbol  skipped  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip;  System.arraycopy(input,  numToSkip,  available,  skipped);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip;  System.arraycopy(input,  numToSkip,  available,  skipped);	  return    available    *    numToSkip;    System.arraycopy(input,    numToSkip,    available,    numToSkip);    	non-compiled	[CE]  cannot  find  symbol  skipped	168	None	replace
934	[BUG]  [BUGGY]  long  available  =  input.availableToInt()  -  skip;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  input.availableToInt()  -  skip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  input.availableToInt()  -  skip;	  long    available    =    input.availableToInt()    -    numToSkip;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	12	None	replace
935	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >  -1)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >  -1)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(available  >  -1)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
936	[BUG]  [BUGGY]  return  input.numToSkip  -  available;  [CE]  cannot  find  symbol  numToSkip  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  input.numToSkip  -  available;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  input.numToSkip  -  available;	  return    numToSkip    -    skipped;    	non-compiled	[CE]  cannot  find  symbol  numToSkip	63	None	replace
937	[BUG]  [BUGGY]  return  input  -  numToSkip;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  input  -  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  input  -  numToSkip;	  return    numToSkip    -    skipped;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	63	None	replace
938	[BUG]  [BUGGY]  return  input  -  available.getShortValue();  [CE]  long  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  input  -  available.getShortValue();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  input  -  available.getShortValue();	  return    available    -    input.getShortValue();    	non-compiled	[CE]  long  cannot  be  dereferenced	121	None	replace
939	[BUG]  [BUGGY]  return  input.available  -  available.getShortValue();  [CE]  cannot  find  symbol  available  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  input.available  -  available.getShortValue();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  input.available  -  available.getShortValue();	  return    available    -    input.getShortValue();    	non-compiled	[CE]  cannot  find  symbol  available	121	None	replace
940	[BUG]  [BUGGY]  return  available  -  skipped.getShortValue();  [CE]  cannot  find  symbol  skipped  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  skipped.getShortValue();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  skipped.getShortValue();	  return    available    -    input.getShortValue();    	non-compiled	[CE]  cannot  find  symbol  skipped	121	None	replace
941	[BUG]  [BUGGY]  return  available  -  numToSkip  +  numToSkip;  if(available  >  numToSkip)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  available  +=  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  +  numToSkip;  if(available  >  numToSkip)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  available  +=  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -    numToSkip    +    numToSkip;    if(available  >  numToSkip)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  available  +=  numToSkip;  }	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
942	[BUG]  [BUGGY]  return  available  -  numToSkip  +  numToSkip;  if(available  >  numToSkip)  {  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip--)  {  available  +=  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  +  numToSkip;  if(available  >  numToSkip)  {  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip--)  {  available  +=  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -    numToSkip    +    numToSkip;    if(available  >  numToSkip)  {  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip--)  {  available  +=  numToSkip;  }	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
943	[BUG]  [BUGGY]  return  available  -  numToSkip  +  numToSkip;  if(available  >  numToSkip)  {  for(int  numToSkip  =  available;  numToSkip  >=  0;  numToSkip++)  {  available  +=  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  +  numToSkip;  if(available  >  numToSkip)  {  for(int  numToSkip  =  available;  numToSkip  >=  0;  numToSkip++)  {  available  +=  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -    numToSkip    +    numToSkip;    if(available  >  numToSkip)  {  for(int  numToSkip  =  available;  numToSkip  >=  0;  numToSkip++)  {  available  +=  numToSkip;  }	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
944	[BUG]  [BUGGY]  return  available  -  numToSkip  +  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  +  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -    numToSkip    +    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
945	[BUG]  [BUGGY]  return  available  -  numToSkip  +  numToSkip;  if(available  >  numToSkip)  {  for(int  numToSkip  =  available;  numToSkip  >=  0;  numToSkip  +  numToSkip;  }  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  +  numToSkip;  if(available  >  numToSkip)  {  for(int  numToSkip  =  available;  numToSkip  >=  0;  numToSkip  +  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -    numToSkip    +    numToSkip;    if(available  >  numToSkip)  {  for(int  numToSkip  =  available;  numToSkip  >=  0;  numToSkip  +  numToSkip;  }	  	non-compiled	[CE]  not  a  statement	48	None	add
946	[BUG]  [BUGGY]  return  available  -  numToSkip  +  numToSkip;  InputStream  available  =  input.getInputStream();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  +  numToSkip;  InputStream  available  =  input.getInputStream();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -    numToSkip    +    numToSkip;    InputStream  available  =  input.getInputStream();	  	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	48	None	add
947	[BUG]  [BUGGY]  return  available  -  numToSkip  +  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  +  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -    numToSkip    +    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
948	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.skip(available  +  skipped);  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.skip(available  +  skipped);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.skip(available  +  skipped);  }	  if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.skip(available);    }    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
949	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.skip(null);  }  [CE]  illegal  start  of  expression  [FE]                                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.skip(null);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.skip(null);  }	  if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.skip(available);    }    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
950	[BUG]  [BUGGY]  return  available  *(available  -  skipped);  [CE]  cannot  find  symbol  skipped  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *(available  -  skipped);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *(available  -  skipped);	  return    available    *(numToSkip    -    available);    	non-compiled	[CE]  cannot  find  symbol  skipped	32	None	replace
951	[BUG]  [BUGGY]  return  available  *(skipped  -  available);  [CE]  cannot  find  symbol  skipped  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *(skipped  -  available);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *(skipped  -  available);	  return    available    *(numToSkip    -    available);    	non-compiled	[CE]  cannot  find  symbol  skipped	32	None	replace
952	[BUG]  [BUGGY]  return  available  +  input.skipped;  [CE]  cannot  find  symbol  skipped  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  +  input.skipped;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  +  input.skipped;	  return    available    +    skipped;    	non-compiled	[CE]  cannot  find  symbol  skipped	24	None	replace
953	[BUG]  [BUGGY]  return  available  +  input.length;  [CE]  cannot  find  symbol  length  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  +  input.length;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  +  input.length;	  return    available    +    skipped;    	non-compiled	[CE]  cannot  find  symbol  length	24	None	replace
954	[BUG]  [BUGGY]  return  available  *  numToSkip  +  input.getChars(numToSkip);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  input.getChars(numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip  +  input.getChars(numToSkip);	  return    available    *    numToSkip    +    skip;    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
955	[BUG]  [BUGGY]  return  available  *  numToSkip  +  input.buffersize;  [CE]  cannot  find  symbol  buffersize  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  input.buffersize;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip  +  input.buffersize;	  return    available    *    numToSkip    +    skip;    	non-compiled	[CE]  cannot  find  symbol  buffersize	23	None	replace
956	[BUG]  [BUGGY]  return  input  *  numToSkip;  System.arraycopy(input,  0,  available,  numToSkip,  0);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  input  *  numToSkip;  System.arraycopy(input,  0,  available,  numToSkip,  0);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  input  *  numToSkip;  System.arraycopy(input,  0,  available,  numToSkip,  0);	  return    available    *    numToSkip;    System.arraycopy(input,    0,    available,    numToSkip,    0);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	86	None	replace
957	[BUG]  [BUGGY]  return  available  *  numToSkip  +  skipped;  System.arraycopy(input,  0,  available,  numToSkip,  0);  [CE]  cannot  find  symbol  skipped  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  skipped;  System.arraycopy(input,  0,  available,  numToSkip,  0);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip  +  skipped;  System.arraycopy(input,  0,  available,  numToSkip,  0);	  return    available    *    numToSkip;    System.arraycopy(input,    0,    available,    numToSkip,    0);    	non-compiled	[CE]  cannot  find  symbol  skipped	86	None	replace
958	[BUG]  [BUGGY]  long  available  =  available  *  numToSkip;  InputStream  available  =  input.readInput();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  *  numToSkip;  InputStream  available  =  input.readInput();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  *  numToSkip;  InputStream  available  =  input.readInput();	  return    available    *    numToSkip;    InputStream    available    =    input.readInput();    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	71	None	replace
959	[BUG]  [BUGGY]  return  available  *  numToSkip  +  skipped;  InputStream  available  =  input.readInput();  [CE]  cannot  find  symbol  skipped  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  skipped;  InputStream  available  =  input.readInput();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip  +  skipped;  InputStream  available  =  input.readInput();	  return    available    *    numToSkip;    InputStream    available    =    input.readInput();    	non-compiled	[CE]  cannot  find  symbol  skipped	71	None	replace
960	[BUG]  [BUGGY]  return  numToSkip  -  input.getChars(0,  available);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  -  input.getChars(0,  available);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  numToSkip  -  input.getChars(0,  available);	  return    available    -    input.getChars(0,    numToSkip);    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
961	[BUG]  [BUGGY]  return  input.getChars(0).getChars(0,  numToSkip);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  input.getChars(0).getChars(0,  numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  input.getChars(0).getChars(0,  numToSkip);	  return    available    -    input.getChars(0,    numToSkip);    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
962	[BUG]  [BUGGY]  return  input  -  available.getChars(0,  numToSkip);  [CE]  long  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  input  -  available.getChars(0,  numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  input  -  available.getChars(0,  numToSkip);	  return    available    -    input.getChars(0,    numToSkip);    	non-compiled	[CE]  long  cannot  be  dereferenced	135	None	replace
963	[BUG]  [BUGGY]  return  numToSkip  -  available  +  1;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  -  available  +  1;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    -    available    +    1;    if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }	  	non-compiled	[CE]  illegal  start  of  expression	58	None	add
964	[BUG]  [BUGGY]  return  numToSkip  -  available  +  1;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  -  available  +  1;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    -    available    +    1;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }	  	non-compiled	[CE]  illegal  start  of  expression	58	None	add
965	[BUG]  [BUGGY]  return  numToSkip  -  available  +  1;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  -  available  +  1;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    -    available    +    1;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }	  	non-compiled	[CE]  illegal  start  of  expression	58	None	add
966	[BUG]  [BUGGY]  return  numToSkip  -  available  +  1;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getRead();  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  -  available  +  1;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getRead();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    -    available    +    1;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getRead();  }	  	non-compiled	[CE]  illegal  start  of  expression	58	None	add
967	[BUG]  [BUGGY]  return  numToSkip  -  available  +  1;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  -  available  +  1;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    -    available    +    1;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }	  	non-compiled	[CE]  illegal  start  of  expression	58	None	add
968	[BUG]  [BUGGY]  return  numToSkip  -  available  +  1;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  -  available  +  1;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    -    available    +    1;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }	  	non-compiled	[CE]  illegal  start  of  expression	58	None	add
969	[BUG]  [BUGGY]  return  numToSkip  -  available  +  1;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getRead();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  -  available  +  1;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getRead();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    -    available    +    1;    if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getRead();  }	  	non-compiled	[CE]  illegal  start  of  expression	58	None	add
970	[BUG]  [BUGGY]  return  numToSkip  -  available  +  1;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  -  available  +  1;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    -    available    +    1;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length;  }	  	non-compiled	[CE]  illegal  start  of  expression	58	None	add
971	[BUG]  [BUGGY]  return  available  /  numToSkip;  int  numToSkip  =  input.readInt();  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  numToSkip;  int  numToSkip  =  input.readInt();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /  numToSkip;  int  numToSkip  =  input.readInt();	  return    available    +    numToSkip;    int    numToSkip    =    input.readInt();    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	3	None	replace
972	[BUG]  [BUGGY]  return  available  +  skipped;  int  numToSkip  =  input.readInt();  [CE]  cannot  find  symbol  skipped  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  +  skipped;  int  numToSkip  =  input.readInt();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  +  skipped;  int  numToSkip  =  input.readInt();	  return    available    +    numToSkip;    int    numToSkip    =    input.readInt();    	non-compiled	[CE]  cannot  find  symbol  skipped	3	None	replace
973	[BUG]  [BUGGY]  return  available  *  numToSkip;  int  numToSkip  =  input.readInt();  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip;  int  numToSkip  =  input.readInt();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip;  int  numToSkip  =  input.readInt();	  return    available    +    numToSkip;    int    numToSkip    =    input.readInt();    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	3	None	replace
974	[BUG]  [BUGGY]  return  available  /  numToSkip  -  skipped.intValue();  [CE]  cannot  find  symbol  skipped  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  numToSkip  -  skipped.intValue();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /  numToSkip  -  skipped.intValue();	  return    available    /    numToSkip    -    skipped;    	non-compiled	[CE]  cannot  find  symbol  skipped	139	None	replace
975	[BUG]  [BUGGY]  return  available  /  numToSkip  -  input.length;  [CE]  cannot  find  symbol  length  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  numToSkip  -  input.length;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /  numToSkip  -  input.length;	  return    available    /    numToSkip    -    skipped;    	non-compiled	[CE]  cannot  find  symbol  length	139	None	replace
976	[BUG]  [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getBytes(i);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getBytes(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  /  numToSkip;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getBytes(i);  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getBytes(i);    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
977	[BUG]  [BUGGY]  long  available  =  available  /  numToSkip;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getBytes(i);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  /  numToSkip;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getBytes(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  /  numToSkip;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getBytes(i);  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getBytes(i);    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
978	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  return  available  /  numToSkip;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getBytes(i);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  <  numToSkip)  {  return  available  /  numToSkip;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getBytes(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  <  numToSkip)  {  return  available  /  numToSkip;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getBytes(i);  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getBytes(i);    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
979	[BUG]  [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  >=  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getBytes(i);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  >=  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getBytes(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  /  numToSkip;  if(available  >=  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getBytes(i);  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getBytes(i);    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
980	[BUG]  [BUGGY]  long  available  =  available  /  numToSkip;  if(available  <  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getBytes(i);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  /  numToSkip;  if(available  <  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getBytes(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  /  numToSkip;  if(available  <  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getBytes(i);  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getBytes(i);    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
981	[BUG]  [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  <  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getBytes(i);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  <  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getBytes(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  /  numToSkip;  if(available  <  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getBytes(i);  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getBytes(i);    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
982	[BUG]  [BUGGY]  return  available  *  numToSkip  +  numToSkip;  System.arraycopy(input,  0,  available,  numToSkip,  0);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  numToSkip;  System.arraycopy(input,  0,  available,  numToSkip,  0);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    +    numToSkip;    System.arraycopy(input,  0,  available,  numToSkip,  0);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	50	None	add
983	[BUG]  [BUGGY]  return  available  *  numToSkip  +  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    +    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }	  	non-compiled	[CE]  illegal  start  of  expression	50	None	add
984	[BUG]  [BUGGY]  return  available  *  numToSkip  +  numToSkip;  int  numToSkip  =  input.read(available);  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  numToSkip;  int  numToSkip  =  input.read(available);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    +    numToSkip;    int  numToSkip  =  input.read(available);	  	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	50	None	add
985	[BUG]  [BUGGY]  return  available  *  numToSkip  +  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    +    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }	  	non-compiled	[CE]  illegal  start  of  expression	50	None	add
986	[BUG]  [BUGGY]  return  available  *  numToSkip  +  numToSkip;  System.arraycopy(input,  0,  available,  numToSkip,  numToSkip);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  numToSkip;  System.arraycopy(input,  0,  available,  numToSkip,  numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    +    numToSkip;    System.arraycopy(input,  0,  available,  numToSkip,  numToSkip);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	50	None	add
987	[BUG]  [BUGGY]  return  available  *  numToSkip  +  numToSkip;  InputStream  available  =  input.getInputStream();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  numToSkip;  InputStream  available  =  input.getInputStream();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    +    numToSkip;    InputStream  available  =  input.getInputStream();	  	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	50	None	add
988	[BUG]  [BUGGY]  return  available  *  numToSkip  +  numToSkip;  InputStream  available  =  input.readLine();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  numToSkip;  InputStream  available  =  input.readLine();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    +    numToSkip;    InputStream  available  =  input.readLine();	  	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	50	None	add
989	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  return  available  /  numToSkip;  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  <  numToSkip)  {  return  available  /  numToSkip;  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  <  numToSkip)  {  return  available  /  numToSkip;  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
990	[BUG]  [BUGGY]  return  available  -  skipSkip;  [CE]  cannot  find  symbol  skipSkip  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  skipSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  skipSkip;	  return    available    -    skipd;    	non-compiled	[CE]  cannot  find  symbol  skipSkip	43	None	replace
991	[BUG]  [BUGGY]  return  available  %  skip;  [CE]  cannot  find  symbol  skip  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  %  skip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  %  skip;	  return    available    %    numToSkip;    	non-compiled	[CE]  cannot  find  symbol  skip	27	None	replace
992	[BUG]  [BUGGY]  return  available  -  numToSkip  *  numToSkip;  System.arraycopy(input,  0,  available,  numToSkip,  0);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  *  numToSkip;  System.arraycopy(input,  0,  available,  numToSkip,  0);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -    numToSkip    *    numToSkip;    System.arraycopy(input,  0,  available,  numToSkip,  0);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	52	None	add
993	[BUG]  [BUGGY]  return  available  -  numToSkip  *  numToSkip;  if(available  >  numToSkip)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  available  +=  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  *  numToSkip;  if(available  >  numToSkip)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  available  +=  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -    numToSkip    *    numToSkip;    if(available  >  numToSkip)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  available  +=  numToSkip;  }	  	non-compiled	[CE]  illegal  start  of  expression	52	None	add
994	[BUG]  [BUGGY]  return  available  -  numToSkip  *  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  *  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -    numToSkip    *    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }	  	non-compiled	[CE]  illegal  start  of  expression	52	None	add
995	[BUG]  [BUGGY]  return  available  -  numToSkip  *  numToSkip;  if(available  >  numToSkip)  {  for(int  numToSkip  =  available;  numToSkip  >=  0;  numToSkip++)  {  available  +=  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  *  numToSkip;  if(available  >  numToSkip)  {  for(int  numToSkip  =  available;  numToSkip  >=  0;  numToSkip++)  {  available  +=  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -    numToSkip    *    numToSkip;    if(available  >  numToSkip)  {  for(int  numToSkip  =  available;  numToSkip  >=  0;  numToSkip++)  {  available  +=  numToSkip;  }	  	non-compiled	[CE]  illegal  start  of  expression	52	None	add
996	[BUG]  [BUGGY]  return  available  -  numToSkip  *  numToSkip;  InputStream  available  =  input.getInputStream();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  *  numToSkip;  InputStream  available  =  input.getInputStream();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -    numToSkip    *    numToSkip;    InputStream  available  =  input.getInputStream();	  	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	52	None	add
997	[BUG]  [BUGGY]  return  available  -  numToSkip  *  numToSkip;  InputStream  available  =  input.readLine();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  *  numToSkip;  InputStream  available  =  input.readLine();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -    numToSkip    *    numToSkip;    InputStream  available  =  input.readLine();	  	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	52	None	add
998	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getBytes(i);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getBytes(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getBytes(i);  }	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getBytes(i);    }    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
999	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(0);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(0);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(0);  }	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getBytes(i);    }    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
1000	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(1);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(1);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(1);  }	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getBytes(i);    }    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
1001	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes();  }	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getBytes(i);    }    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
1002	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  +  numToSkip  +  SKIP_BUF_SIZE;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  available  +  numToSkip  +  SKIP_BUF_SIZE;	  return    available    +    numToSkip    +    skipped;    	compilable	  [FE]  AssertionError  	25	3	replace
1003	[BUG]  [BUGGY]  return  available  +  numToSkip  +  SKIP_BUF_SIZE;  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  +  numToSkip  +  SKIP_BUF_SIZE;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  +  numToSkip  +  SKIP_BUF_SIZE;	  return    available    +    numToSkip    +    skipped;    	compilable	  [FE]  AssertionError  	25	3	replace
1004	[BUG]  [BUGGY]  return  available  +  numToSkip  +  input.skipped;  [CE]  cannot  find  symbol  skipped  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  +  numToSkip  +  input.skipped;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  +  numToSkip  +  input.skipped;	  return    available    +    numToSkip    +    skipped;    	non-compiled	[CE]  cannot  find  symbol  skipped	25	None	replace
1005	[BUG]  [BUGGY]  return  available  +  numToSkip  +  SHORT_BUFFER_SIZE;  [CE]  cannot  find  symbol  SHORT_BUFFER_SIZE  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  +  numToSkip  +  SHORT_BUFFER_SIZE;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  +  numToSkip  +  SHORT_BUFFER_SIZE;	  return    available    +    numToSkip    +    skipped;    	non-compiled	[CE]  cannot  find  symbol  SHORT_BUFFER_SIZE	25	None	replace
1006	[BUG]  [BUGGY]  return  available  +  numToSkip  +  input.getCharacterEncoding();  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  +  numToSkip  +  input.getCharacterEncoding();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  +  numToSkip  +  input.getCharacterEncoding();	  return    available    +    numToSkip    +    skipped;    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
1007	[BUG]  [BUGGY]  return  available  /(numToSkip  +  SHORT_BUFFER_SIZE);  [CE]  cannot  find  symbol  SHORT_BUFFER_SIZE  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /(numToSkip  +  SHORT_BUFFER_SIZE);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /(numToSkip  +  SHORT_BUFFER_SIZE);	  return    available    /(numToSkip    +    skipped);    	non-compiled	[CE]  cannot  find  symbol  SHORT_BUFFER_SIZE	30	None	replace
1008	[BUG]  [BUGGY]  return  available  /(numToSkip  +  SHORT_NUMBER_OF_RANGE);  [CE]  cannot  find  symbol  SHORT_NUMBER_OF_RANGE  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /(numToSkip  +  SHORT_NUMBER_OF_RANGE);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /(numToSkip  +  SHORT_NUMBER_OF_RANGE);	  return    available    /(numToSkip    +    skipped);    	non-compiled	[CE]  cannot  find  symbol  SHORT_NUMBER_OF_RANGE	30	None	replace
1009	[BUG]  [BUGGY]  return  available  -(skipped  *  numToSkip);  [CE]  cannot  find  symbol  skipped  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -(skipped  *  numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -(skipped  *  numToSkip);	  return    available    -(numToSkip    *    numToSkip);    	non-compiled	[CE]  cannot  find  symbol  skipped	152	None	replace
1010	[BUG]  [BUGGY]  return  available  %  numToSkip;  System.arraycopy(input,  0,  available,  numToSkip,  0);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  %  numToSkip;  System.arraycopy(input,  0,  available,  numToSkip,  0);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    %    numToSkip;    System.arraycopy(input,  0,  available,  numToSkip,  0);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	26	None	add
1011	[BUG]  [BUGGY]  return  available  %  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  %  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    %    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
1012	[BUG]  [BUGGY]  return  available  %  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  %  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    %    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
1013	[BUG]  [BUGGY]  return  available  %  numToSkip;  InputStream  available  =  input.readLine();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  %  numToSkip;  InputStream  available  =  input.readLine();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    %    numToSkip;    InputStream  available  =  input.readLine();	  	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	26	None	add
1014	[BUG]  [BUGGY]  return  available  %  numToSkip;  int  numToSkip  =  input.read();  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  %  numToSkip;  int  numToSkip  =  input.read();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    %    numToSkip;    int  numToSkip  =  input.read();	  	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	26	None	add
1015	[BUG]  [BUGGY]  return  available  %  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  %  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    %    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
1016	[BUG]  [BUGGY]  long  available  =  available  /  numToSkip;  if(available  >=  0)  {  if(skipped  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  /  numToSkip;  if(available  >=  0)  {  if(skipped  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  /  numToSkip;  if(available  >=  0)  {  if(skipped  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  return    available    /    numToSkip;    if(available    <    numToSkip)    {    if(skipped    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
1017	[BUG]  [BUGGY]  long  available  =  available  /  numToSkip;  if(available  <  numToSkip)  {  if(skip  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  /  numToSkip;  if(available  <  numToSkip)  {  if(skip  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  /  numToSkip;  if(available  <  numToSkip)  {  if(skip  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  return    available    /    numToSkip;    if(available    <    numToSkip)    {    if(skipped    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
1018	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  /  available;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  available  -  numToSkip  /  available;	  return    available    -    numToSkip    +    available;    	compilable	  [FE]  AssertionError  	56	2	replace
1019	[BUG]  [BUGGY]  return  available  -  numToSkip  /  available;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  /  available;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  numToSkip  /  available;	  return    available    -    numToSkip    +    available;    	compilable	  [FE]  AssertionError  	56	2	replace
1020	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  *  available;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  available  -  numToSkip  *  available;	  return    available    -    numToSkip    +    available;    	compilable	  [FE]  AssertionError  	56	2	replace
1021	[BUG]  [BUGGY]  return  available  -  numToSkip  *  available;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  *  available;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  numToSkip  *  available;	  return    available    -    numToSkip    +    available;    	compilable	  [FE]  AssertionError  	56	2	replace
1022	[BUG]  [BUGGY]  n  *=  numToSkip;  [CE]  cannot  find  symbol  n  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  n  *=  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	n  *=  numToSkip;	  return    available    *    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  cannot  find  symbol  n	87	None	replace
1023	[BUG]  [BUGGY]  long  available  =  available  /  numToSkip;  InputStream  available  =  input.readInput();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  /  numToSkip;  InputStream  available  =  input.readInput();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  /  numToSkip;  InputStream  available  =  input.readInput();	  return    available    /    numToSkip;    InputStream    available    =    input.readInput();    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	78	None	replace
1024	[BUG]  [BUGGY]  return  available  /  skipped;  InputStream  available  =  input.readInput();  [CE]  cannot  find  symbol  skipped  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  skipped;  InputStream  available  =  input.readInput();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /  skipped;  InputStream  available  =  input.readInput();	  return    available    /    numToSkip;    InputStream    available    =    input.readInput();    	non-compiled	[CE]  cannot  find  symbol  skipped	78	None	replace
1025	[BUG]  [BUGGY]  long  numToSkip  -  available  *  numToSkip;  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  numToSkip  -  available  *  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  numToSkip  -  available  *  numToSkip;	  return    numToSkip    -    available    *    numToSkip;    	non-compiled	[CE]  ';'  expected	61	None	replace
1026	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  0;  i++)  {  if(available  >  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  for(int  i  =  available;  i  <  0;  i++)  {  if(available  >  0)  {  break;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	for(int  i  =  available;  i  <  0;  i++)  {  if(available  >  0)  {  break;  }	  for(int    i    =    available;    i    <    numToSkip;    i++)    {    if(available    >    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
1027	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numToSkip;  i++)  {  if(available  >  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  for(int  i  =  0;  i  <  numToSkip;  i++)  {  if(available  >  0)  {  break;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	for(int  i  =  0;  i  <  numToSkip;  i++)  {  if(available  >  0)  {  break;  }	  for(int    i    =    available;    i    <    numToSkip;    i++)    {    if(available    >    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
1028	[BUG]  [BUGGY]  long  numToSkip  =  available  +  numToSkip;  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  numToSkip  =  available  +  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  numToSkip  =  available  +  numToSkip;	  return    available    +    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available.size();    ++i)    {    input.close();    }    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	161	None	replace
1029	[BUG]  [BUGGY]  int  numToSkip  =  available.size();  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  int  numToSkip  =  available.size();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	int  numToSkip  =  available.size();	  return    available    +    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available.size();    ++i)    {    input.close();    }    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	161	None	replace
1030	[BUG]  [BUGGY]  numToSkip  +=  available;  [CE]  missing  return  statement  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  numToSkip  +=  available;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	numToSkip  +=  available;	  return    available    +    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available.size();    ++i)    {    input.close();    }    	non-compiled	[CE]  missing  return  statement	161	None	replace
1031	[BUG]  [BUGGY]  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip  -=  available)  {  numToSkip  -=  available;  }  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip  -=  available)  {  numToSkip  -=  available;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip  -=  available)  {  numToSkip  -=  available;  }	  while(available    -    numToSkip)    {    numToSkip    -=    available;    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	109	None	replace
1032	[BUG]  [BUGGY]  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip--)  {  numToSkip  -=  available;  }  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip--)  {  numToSkip  -=  available;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip--)  {  numToSkip  -=  available;  }	  while(available    -    numToSkip)    {    numToSkip    -=    available;    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	109	None	replace
1033	[BUG]  [BUGGY]  while(available  *  numToSkip)  {  numToSkip  -=  available;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  *  numToSkip)  {  numToSkip  -=  available;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  *  numToSkip)  {  numToSkip  -=  available;	  while(available    -    numToSkip)    {    numToSkip    -=    available;    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
1034	[BUG]  [BUGGY]  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip  -=  0)  {  numToSkip  -=  available;  }  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip  -=  0)  {  numToSkip  -=  available;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip  -=  0)  {  numToSkip  -=  available;  }	  while(available    -    numToSkip)    {    numToSkip    -=    available;    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	109	None	replace
1035	[BUG]  [BUGGY]  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip)  {  numToSkip  -=  available;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip)  {  numToSkip  -=  available;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip)  {  numToSkip  -=  available;  }	  while(available    -    numToSkip)    {    numToSkip    -=    available;    	non-compiled	[CE]  not  a  statement	109	None	replace
1036	[BUG]  [BUGGY]  return  available  +  skipped;  InputStream  available  =  input.readInput();  [CE]  cannot  find  symbol  skipped  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  +  skipped;  InputStream  available  =  input.readInput();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  +  skipped;  InputStream  available  =  input.readInput();	  return    available    +    numToSkip;    InputStream    available    =    input.readInput();    	non-compiled	[CE]  cannot  find  symbol  skipped	1	None	replace
1037	[BUG]  [BUGGY]  return  numToSkip  -  input.readLine();  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  -  input.readLine();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  numToSkip  -  input.readLine();	  return    available    -    input.readLine();    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
1038	[BUG]  [BUGGY]  return  input  -  available.readLine();  [CE]  long  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  input  -  available.readLine();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  input  -  available.readLine();	  return    available    -    input.readLine();    	non-compiled	[CE]  long  cannot  be  dereferenced	137	None	replace
1039	[BUG]  [BUGGY]  return  available  -  input.readLine(skipped);  [CE]  cannot  find  symbol  skipped  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  input.readLine(skipped);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  input.readLine(skipped);	  return    available    -    input.readLine();    	non-compiled	[CE]  cannot  find  symbol  skipped	137	None	replace
1040	[BUG]  [BUGGY]  return  available  -  input.readLine()  +  skipped;  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  input.readLine()  +  skipped;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  input.readLine()  +  skipped;	  return    available    -    input.readLine();    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
1041	[BUG]  [BUGGY]  return  available  /  numToSkip;  int  numToSkip  =  input.length();  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  numToSkip;  int  numToSkip  =  input.length();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /  numToSkip;  int  numToSkip  =  input.length();	  return    available    +    numToSkip;    int    numToSkip    =    input.length();    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	5	None	replace
1042	[BUG]  [BUGGY]  return  available  +  skipped;  int  numToSkip  =  input.length();  [CE]  cannot  find  symbol  skipped  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  +  skipped;  int  numToSkip  =  input.length();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  +  skipped;  int  numToSkip  =  input.length();	  return    available    +    numToSkip;    int    numToSkip    =    input.length();    	non-compiled	[CE]  cannot  find  symbol  skipped	5	None	replace
1043	[BUG]  [BUGGY]  return  available  *  numToSkip;  int  numToSkip  =  input.length();  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip;  int  numToSkip  =  input.length();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip;  int  numToSkip  =  input.length();	  return    available    +    numToSkip;    int    numToSkip    =    input.length();    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	5	None	replace
1044	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(available  ==  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(available  ==  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(available  ==  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
1045	[BUG]  [BUGGY]  long  available  =  input.read();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  input.read();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  input.read();	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	174	None	replace
1046	[BUG]  [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  <  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  <  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  /  numToSkip;  if(available  <  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
1047	[BUG]  [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  >=  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  >=  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  /  numToSkip;  if(available  >=  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
1048	[BUG]  [BUGGY]  long  available  =  available  /  numToSkip;  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  /  numToSkip;  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  /  numToSkip;  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
1049	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  int  numToSkip  =  available;  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  int  numToSkip  =  available;  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  int  numToSkip  =  available;  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
1050	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getUpperBound();  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getUpperBound();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getUpperBound();  }	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
1051	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getLength();  }	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
1052	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getEnd();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getEnd();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getEnd();  }	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
1053	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  -  available  +  SKIP_BUF_SIZE;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  numToSkip  -  available  +  SKIP_BUF_SIZE;	  return    numToSkip    -    available    +    skipped;    	compilable	  [FE]  AssertionError  	62	3	replace
1054	[BUG]  [BUGGY]  return  numToSkip  -  available  +  SKIP_BUF_SIZE;  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  -  available  +  SKIP_BUF_SIZE;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  numToSkip  -  available  +  SKIP_BUF_SIZE;	  return    numToSkip    -    available    +    skipped;    	compilable	  [FE]  AssertionError  	62	3	replace
1055	[BUG]  [BUGGY]  return  available  /  input.length;  [CE]  cannot  find  symbol  length  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  input.length;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /  input.length;	  return    available    /    skipped;    	non-compiled	[CE]  cannot  find  symbol  length	29	None	replace
1056	[BUG]  [BUGGY]  return  available  /  input.skipped;  [CE]  cannot  find  symbol  skipped  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  input.skipped;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /  input.skipped;	  return    available    /    skipped;    	non-compiled	[CE]  cannot  find  symbol  skipped	29	None	replace
1057	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  i++)  {  input.close();  }	  if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
1058	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0L;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0L;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  numToSkip)  {  for(int  i  =  0L;  i  <  available;  i++)  {  input.close();  }	  if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
1059	[BUG]  [BUGGY]  return  available  *  skipped;  int  numToSkip  =  input.read();  [CE]  cannot  find  symbol  skipped  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  skipped;  int  numToSkip  =  input.read();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  skipped;  int  numToSkip  =  input.read();	  return    available    *    numToSkip;    int    numToSkip    =    input.read();    	non-compiled	[CE]  cannot  find  symbol  skipped	89	None	replace
1060	[BUG]  [BUGGY]  return  available  *  numToSkip  +  skipped;  int  numToSkip  =  input.read();  [CE]  cannot  find  symbol  skipped  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  skipped;  int  numToSkip  =  input.read();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip  +  skipped;  int  numToSkip  =  input.read();	  return    available    *    numToSkip;    int    numToSkip    =    input.read();    	non-compiled	[CE]  cannot  find  symbol  skipped	89	None	replace
1061	[BUG]  [BUGGY]  long  available  =  available  /  numToSkip;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  /  numToSkip;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  /  numToSkip;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getLength();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
1062	[BUG]  [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  /  numToSkip;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getLength();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
1063	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  return  available  /  numToSkip;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  <  numToSkip)  {  return  available  /  numToSkip;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  <  numToSkip)  {  return  available  /  numToSkip;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getLength();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
1064	[BUG]  [BUGGY]  long  available  =  available  /  numToSkip;  if(available  <  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  /  numToSkip;  if(available  <  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  /  numToSkip;  if(available  <  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getLength();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
1065	[BUG]  [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  >=  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  >=  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  /  numToSkip;  if(available  >=  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getLength();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
1066	[BUG]  [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  <  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  <  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  /  numToSkip;  if(available  <  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getLength();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
1067	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
1068	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(skipped  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
1069	[BUG]  [BUGGY]  int  numToSkip  =  available;  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  int  numToSkip  =  available;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	int  numToSkip  =  available;	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.reset();    }    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	103	None	replace
1070	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  available  +  numToSkip;  i  <  numToSkip;  i++)  {  input.reset();  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  available  +  numToSkip;  i  <  numToSkip;  i++)  {  input.reset();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  numToSkip)  {  for(int  i  =  available  +  numToSkip;  i  <  numToSkip;  i++)  {  input.reset();  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.reset();    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
1071	[BUG]  [BUGGY]  return  available  *  numToSkip;  System.arraycopy(input,  0,  input,  numToSkip,  0,  skipped);  [CE]  cannot  find  symbol  skipped  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip;  System.arraycopy(input,  0,  input,  numToSkip,  0,  skipped);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip;  System.arraycopy(input,  0,  input,  numToSkip,  0,  skipped);	  return    available    /    numToSkip;    System.arraycopy(input,    0,    available,    numToSkip,    0);    	non-compiled	[CE]  cannot  find  symbol  skipped	95	None	replace
1072	[BUG]  [BUGGY]  return  available  *  numToSkip;  System.arraycopy(input,  0,  available,  numToSkip,  0,  input.length);  [CE]  cannot  find  symbol  length  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip;  System.arraycopy(input,  0,  available,  numToSkip,  0,  input.length);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip;  System.arraycopy(input,  0,  available,  numToSkip,  0,  input.length);	  return    available    /    numToSkip;    System.arraycopy(input,    0,    available,    numToSkip,    0);    	non-compiled	[CE]  cannot  find  symbol  length	95	None	replace
1073	[BUG]  [BUGGY]  System.arraycopy(input,  0,  available,  numToSkip,  0,  numToSkip);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  System.arraycopy(input,  0,  available,  numToSkip,  0,  numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	System.arraycopy(input,  0,  available,  numToSkip,  0,  numToSkip);	  return    available    /    numToSkip;    System.arraycopy(input,    0,    available,    numToSkip,    0);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	95	None	replace
1074	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
1075	[BUG]  [BUGGY]  long  available  =  input.getChars(numToSkip);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  input.getChars(numToSkip);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  input.getChars(numToSkip);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
1076	[BUG]  [BUGGY]  if(available  >  0)  {  for(long  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  0)  {  for(long  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  0)  {  for(long  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
1077	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(0);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(0);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(0);  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
1078	[BUG]  [BUGGY]  long  available  =  input.getChars(numToSkip);  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  input.getChars(numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  input.getChars(numToSkip);	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getChars(i);    }    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	42	None	replace
1079	[BUG]  [BUGGY]  return  available  *  skipped  +  1;  [CE]  cannot  find  symbol  skipped  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  skipped  +  1;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  skipped  +  1;	  return    available    *    numToSkip    +    1;    	non-compiled	[CE]  cannot  find  symbol  skipped	22	None	replace
1080	[BUG]  [BUGGY]  return  available  -  input.skipped  +  1;  [CE]  cannot  find  symbol  skipped  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  input.skipped  +  1;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  input.skipped  +  1;	  return    available    -    skipped    +    1;    	non-compiled	[CE]  cannot  find  symbol  skipped	64	None	replace
1081	[BUG]  [BUGGY]  return  available  -  saved  +  1;  [CE]  cannot  find  symbol  saved  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  saved  +  1;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  saved  +  1;	  return    available    -    skipped    +    1;    	non-compiled	[CE]  cannot  find  symbol  saved	64	None	replace
1082	[BUG]  [BUGGY]  long  available  =  available  /  numToSkip;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.length();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  /  numToSkip;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.length();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  /  numToSkip;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.length();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.length();    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
1083	[BUG]  [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.length();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.length();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  /  numToSkip;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.length();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.length();    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
1084	[BUG]  [BUGGY]  long  available  =  available  /  numToSkip;  if(available  <  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.length();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  /  numToSkip;  if(available  <  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.length();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  /  numToSkip;  if(available  <  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.length();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.length();    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
1085	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  return  available  /  numToSkip;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.length();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  <  numToSkip)  {  return  available  /  numToSkip;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.length();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  <  numToSkip)  {  return  available  /  numToSkip;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.length();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.length();    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
1086	[BUG]  [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  >=  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.length();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  >=  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.length();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  /  numToSkip;  if(available  >=  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.length();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.length();    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
1087	[BUG]  [BUGGY]  return  available  -  skip  *  SKIP_BUF_SIZE;  [CE]  cannot  find  symbol  skip  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  skip  *  SKIP_BUF_SIZE;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  skip  *  SKIP_BUF_SIZE;	  return    available    -    skipped    *    SKIP_BUF_SIZE;    	non-compiled	[CE]  cannot  find  symbol  skip	155	None	replace
1088	[BUG]  [BUGGY]  return  available  -  saved  *  SKIP_BUF_SIZE;  [CE]  cannot  find  symbol  saved  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  saved  *  SKIP_BUF_SIZE;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  saved  *  SKIP_BUF_SIZE;	  return    available    -    skipped    *    SKIP_BUF_SIZE;    	non-compiled	[CE]  cannot  find  symbol  saved	155	None	replace
1089	[BUG]  [BUGGY]  return  available  -(numToSkip  +  available);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -(numToSkip  +  available);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -(numToSkip    +    available);    if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }	  	non-compiled	[CE]  illegal  start  of  expression	153	None	add
1090	[BUG]  [BUGGY]  return  available  -(numToSkip  +  available);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -(numToSkip  +  available);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -(numToSkip    +    available);    if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }	  	non-compiled	[CE]  illegal  start  of  expression	153	None	add
1091	[BUG]  [BUGGY]  return  available  -(numToSkip  +  available);  InputStream  available  =  input.readLine();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -(numToSkip  +  available);  InputStream  available  =  input.readLine();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -(numToSkip    +    available);    InputStream  available  =  input.readLine();	  	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	153	None	add
1092	[BUG]  [BUGGY]  return  available  -(numToSkip  +  available);  InputStream  available  =  input.getInputStream();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -(numToSkip  +  available);  InputStream  available  =  input.getInputStream();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -(numToSkip    +    available);    InputStream  available  =  input.getInputStream();	  	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	153	None	add
1093	[BUG]  [BUGGY]  return  available  -(numToSkip  +  available);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getRead();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -(numToSkip  +  available);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getRead();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -(numToSkip    +    available);    if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getRead();  }	  	non-compiled	[CE]  illegal  start  of  expression	153	None	add
1094	[BUG]  [BUGGY]  return  available  -(numToSkip  +  available);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getReader().readLine();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -(numToSkip  +  available);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getReader().readLine();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -(numToSkip    +    available);    if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getReader().readLine();  }	  	non-compiled	[CE]  illegal  start  of  expression	153	None	add
1095	[BUG]  [BUGGY]  return  available  /  numToSkip  +  1;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  numToSkip  +  1;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    /    numToSkip    +    1;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }	  	non-compiled	[CE]  illegal  start  of  expression	140	None	add
1096	[BUG]  [BUGGY]  return  available  /  numToSkip  +  1;  System.arraycopy(input,  0,  available,  numToSkip,  0);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  numToSkip  +  1;  System.arraycopy(input,  0,  available,  numToSkip,  0);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    /    numToSkip    +    1;    System.arraycopy(input,  0,  available,  numToSkip,  0);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	140	None	add
1097	[BUG]  [BUGGY]  return  available  /  numToSkip  +  1;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  numToSkip  +  1;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    /    numToSkip    +    1;    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }	  	non-compiled	[CE]  illegal  start  of  expression	140	None	add
1098	[BUG]  [BUGGY]  return  available  /  numToSkip  +  1;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  numToSkip  +  1;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    /    numToSkip    +    1;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }	  	non-compiled	[CE]  illegal  start  of  expression	140	None	add
1099	[BUG]  [BUGGY]  return  available  /  numToSkip  +  1;  int  numToSkip  =  input.read();  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  numToSkip  +  1;  int  numToSkip  =  input.read();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    /    numToSkip    +    1;    int  numToSkip  =  input.read();	  	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	140	None	add
1100	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getBytes(i);    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
1101	[BUG]  [BUGGY]  long  available  =  input.skip(numToSkip);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  input.skip(numToSkip);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  input.skip(numToSkip);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getBytes(i);    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
1102	[BUG]  [BUGGY]  if(available  >  0)  {  return  available;  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  0)  {  return  available;  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  0)  {  return  available;  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getBytes(i);    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
1103	[BUG]  [BUGGY]  if(available  >  0)  {  for(long  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  0)  {  for(long  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  0)  {  for(long  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getBytes(i);    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
1104	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(0);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(0);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(0);  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getBytes(i);    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
1105	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  +  SKIP_BUF_SIZE;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  available  -  numToSkip  +  SKIP_BUF_SIZE;	  return    available    -    numToSkip    +    skipped;    	compilable	  [FE]  AssertionError  	142	3	replace
1106	[BUG]  [BUGGY]  return  available  -  numToSkip  +  SKIP_BUF_SIZE;  [FE]  AssertionError  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  +  SKIP_BUF_SIZE;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  numToSkip  +  SKIP_BUF_SIZE;	  return    available    -    numToSkip    +    skipped;    	compilable	  [FE]  AssertionError  	142	3	replace
1107	[BUG]  [BUGGY]  return  available  -  numToSkip  +  SHORT_BUFFER_SIZE;  [CE]  cannot  find  symbol  SHORT_BUFFER_SIZE  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  +  SHORT_BUFFER_SIZE;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  numToSkip  +  SHORT_BUFFER_SIZE;	  return    available    -    numToSkip    +    skipped;    	non-compiled	[CE]  cannot  find  symbol  SHORT_BUFFER_SIZE	142	None	replace
1108	[BUG]  [BUGGY]  return  available  -  numToSkip  +  input.skipped;  [CE]  cannot  find  symbol  skipped  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  +  input.skipped;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  numToSkip  +  input.skipped;	  return    available    -    numToSkip    +    skipped;    	non-compiled	[CE]  cannot  find  symbol  skipped	142	None	replace
1109	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >  -1)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >  -1)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(available  >  -1)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
1110	[BUG]  [BUGGY]  long  available  =  input.available;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  input.available;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  input.available;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
1111	[BUG]  [BUGGY]  return  numToSkip  +  available;  System.arraycopy(input,  numToSkip,  available,  0);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  +  available;  System.arraycopy(input,  numToSkip,  available,  0);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  numToSkip  +  available;  System.arraycopy(input,  numToSkip,  available,  0);	  return    available    +    numToSkip;    System.arraycopy(input,    numToSkip,    available,    0);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	127	None	replace
1112	[BUG]  [BUGGY]  return  input  +  numToSkip;  System.arraycopy(input,  numToSkip,  available,  0);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  input  +  numToSkip;  System.arraycopy(input,  numToSkip,  available,  0);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  input  +  numToSkip;  System.arraycopy(input,  numToSkip,  available,  0);	  return    available    +    numToSkip;    System.arraycopy(input,    numToSkip,    available,    0);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	127	None	replace
1113	[BUG]  [BUGGY]  if(available  >  skipped)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(available  +  i);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  skipped)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(available  +  i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  skipped)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(available  +  i);  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.skip(available    +    i);    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
1114	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  0;  i++)  {  input.skip(available  +  i);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  0;  i++)  {  input.skip(available  +  i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  0;  i++)  {  input.skip(available  +  i);  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.skip(available    +    i);    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
1115	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(available  +  i);  }  [CE]  >  expected  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  numToSkip)  {  int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(available  +  i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  numToSkip)  {  int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(available  +  i);  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.skip(available    +    i);    }    	non-compiled	[CE]  >  expected	102	None	replace
1116	[BUG]  [BUGGY]  long  skipped  =  available  +  numToSkip;  if(skipped  <  0)  {  return  available  +  numToSkip;  }  [CE]  missing  return  statement  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  skipped  =  available  +  numToSkip;  if(skipped  <  0)  {  return  available  +  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  skipped  =  available  +  numToSkip;  if(skipped  <  0)  {  return  available  +  numToSkip;  }	  return    available    +    numToSkip;    if(available    <    numToSkip)    {    if(skipped    >    0)    {    return    available    +    numToSkip;    }    	non-compiled	[CE]  missing  return  statement	158	None	replace
1117	[BUG]  [BUGGY]  long  skipped  =  available  +  numToSkip;  if(skipped  >  0)  {  return  available  +  numToSkip;  }  [CE]  missing  return  statement  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  skipped  =  available  +  numToSkip;  if(skipped  >  0)  {  return  available  +  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  skipped  =  available  +  numToSkip;  if(skipped  >  0)  {  return  available  +  numToSkip;  }	  return    available    +    numToSkip;    if(available    <    numToSkip)    {    if(skipped    >    0)    {    return    available    +    numToSkip;    }    	non-compiled	[CE]  missing  return  statement	158	None	replace
1118	[BUG]  [BUGGY]  long  skipped  =  input.skip(numToSkip);  if(skipped  <  0)  {  return  available  +  numToSkip;  }  [CE]  missing  return  statement  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  skipped  =  input.skip(numToSkip);  if(skipped  <  0)  {  return  available  +  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  skipped  =  input.skip(numToSkip);  if(skipped  <  0)  {  return  available  +  numToSkip;  }	  return    available    +    numToSkip;    if(available    <    numToSkip)    {    if(skipped    >    0)    {    return    available    +    numToSkip;    }    	non-compiled	[CE]  missing  return  statement	158	None	replace
1119	[BUG]  [BUGGY]  long  skipped  =  input.skip(numToSkip);  if(skipped  >  0)  {  return  available  +  numToSkip;  }  [CE]  missing  return  statement  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  skipped  =  input.skip(numToSkip);  if(skipped  >  0)  {  return  available  +  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  skipped  =  input.skip(numToSkip);  if(skipped  >  0)  {  return  available  +  numToSkip;  }	  return    available    +    numToSkip;    if(available    <    numToSkip)    {    if(skipped    >    0)    {    return    available    +    numToSkip;    }    	non-compiled	[CE]  missing  return  statement	158	None	replace
1120	[BUG]  [BUGGY]  return  available  -(numToSkip  *  numToSkip);  System.arraycopy(input,  0,  available,  numToSkip,  0);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -(numToSkip  *  numToSkip);  System.arraycopy(input,  0,  available,  numToSkip,  0);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -(numToSkip    *    numToSkip);    System.arraycopy(input,  0,  available,  numToSkip,  0);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	151	None	add
1121	[BUG]  [BUGGY]  return  available  -(numToSkip  *  numToSkip);  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -(numToSkip  *  numToSkip);  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -(numToSkip    *    numToSkip);    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }	  	non-compiled	[CE]  illegal  start  of  expression	151	None	add
1122	[BUG]  [BUGGY]  return  available  -(numToSkip  *  numToSkip);  int  numToSkip  =  input.read();  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -(numToSkip  *  numToSkip);  int  numToSkip  =  input.read();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -(numToSkip    *    numToSkip);    int  numToSkip  =  input.read();	  	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	151	None	add
1123	[BUG]  [BUGGY]  return  available  -(numToSkip  *  numToSkip);  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -(numToSkip  *  numToSkip);  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -(numToSkip    *    numToSkip);    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }	  	non-compiled	[CE]  illegal  start  of  expression	151	None	add
1124	[BUG]  [BUGGY]  return  available  -(numToSkip  *  numToSkip);  if(available  >  numToSkip)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  available  +=  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -(numToSkip  *  numToSkip);  if(available  >  numToSkip)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  available  +=  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -(numToSkip    *    numToSkip);    if(available  >  numToSkip)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  available  +=  numToSkip;  }	  	non-compiled	[CE]  illegal  start  of  expression	151	None	add
1125	[BUG]  [BUGGY]  return  available  -(numToSkip  *  numToSkip);  InputStream  available  =  input.readLine();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -(numToSkip  *  numToSkip);  InputStream  available  =  input.readLine();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -(numToSkip    *    numToSkip);    InputStream  available  =  input.readLine();	  	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	151	None	add
1126	[BUG]  [BUGGY]  return  available  -(numToSkip  *  numToSkip);  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -(numToSkip  *  numToSkip);  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -(numToSkip    *    numToSkip);    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }	  	non-compiled	[CE]  illegal  start  of  expression	151	None	add
1127	[BUG]  [BUGGY]  return  available  -(numToSkip  *  numToSkip);  int  numToSkip  =  input.read(available);  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]                  AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -(numToSkip  *  numToSkip);  int  numToSkip  =  input.read(available);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -(numToSkip    *    numToSkip);    int  numToSkip  =  input.read(available);	  	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	151	None	add
1128	[BUG]  [BUGGY]  return  available  +  skipped;  int  numToSkip  =  input.readLine();  [CE]  cannot  find  symbol  skipped  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  +  skipped;  int  numToSkip  =  input.readLine();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  +  skipped;  int  numToSkip  =  input.readLine();	  return    available    +    numToSkip;    int    numToSkip    =    input.readLine();    	non-compiled	[CE]  cannot  find  symbol  skipped	6	None	replace
1129	[BUG]  [BUGGY]  return  available  *  numToSkip;  int  numToSkip  =  input.readLine();  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip;  int  numToSkip  =  input.readLine();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip;  int  numToSkip  =  input.readLine();	  return    available    +    numToSkip;    int    numToSkip    =    input.readLine();    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	6	None	replace
1130	[BUG]  [BUGGY]  return  available  *  numToSkip;  int  numToSkip  =  available  *  numToSkip  +  skipped;  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip;  int  numToSkip  =  available  *  numToSkip  +  skipped;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip;  int  numToSkip  =  available  *  numToSkip  +  skipped;	  return    available    *    numToSkip;    int    numToSkip    =    available    *    numToSkip;    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	77	None	replace
1131	[BUG]  [BUGGY]  return  available  *  numToSkip  +  1;  int  numToSkip  =  available  *  numToSkip;  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  1;  int  numToSkip  =  available  *  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip  +  1;  int  numToSkip  =  available  *  numToSkip;	  return    available    *    numToSkip;    int    numToSkip    =    available    *    numToSkip;    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	77	None	replace
1132	[BUG]  [BUGGY]  return  available  *  numToSkip;  int  numToSkip  =  available  *  numToSkip  +  1;  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip;  int  numToSkip  =  available  *  numToSkip  +  1;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip;  int  numToSkip  =  available  *  numToSkip  +  1;	  return    available    *    numToSkip;    int    numToSkip    =    available    *    numToSkip;    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	77	None	replace
1133	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  +  numToSkip  *  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  available  +  numToSkip  *  numToSkip;	  return    available    -    numToSkip    *    numToSkip;    	compilable	  [FE]  AssertionError  	53	2	replace
1134	[BUG]  [BUGGY]  return  available  +  numToSkip  *  numToSkip;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  +  numToSkip  *  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  +  numToSkip  *  numToSkip;	  return    available    -    numToSkip    *    numToSkip;    	compilable	  [FE]  AssertionError  	53	2	replace
1135	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
1136	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(long  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(long  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(available  >  0)  {  for(long  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
1137	[BUG]  [BUGGY]  return  available  /  numToSkip;  InputStream  available  =  input.getInputStream();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  numToSkip;  InputStream  available  =  input.getInputStream();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /  numToSkip;  InputStream  available  =  input.getInputStream();	  return    available    +    numToSkip;    InputStream    available    =    input.getInputStream();    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	126	None	replace
1138	[BUG]  [BUGGY]  return  available  *  numToSkip;  InputStream  available  =  input.getInputStream();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip;  InputStream  available  =  input.getInputStream();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip;  InputStream  available  =  input.getInputStream();	  return    available    +    numToSkip;    InputStream    available    =    input.getInputStream();    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	126	None	replace
1139	[BUG]  [BUGGY]  return  available  +  skipped;  InputStream  available  =  input.getInputStream();  [CE]  cannot  find  symbol  skipped  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  +  skipped;  InputStream  available  =  input.getInputStream();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  +  skipped;  InputStream  available  =  input.getInputStream();	  return    available    +    numToSkip;    InputStream    available    =    input.getInputStream();    	non-compiled	[CE]  cannot  find  symbol  skipped	126	None	replace
1140	[BUG]  [BUGGY]  numToSkip  -=  available.longValue();  [CE]  long  cannot  be  dereferenced  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  numToSkip  -=  available.longValue();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	numToSkip  -=  available.longValue();	  numToSkip    -=    available;    	non-compiled	[CE]  long  cannot  be  dereferenced	110	None	replace
1141	[BUG]  [BUGGY]  numToSkip  -=  available  *  SKIP_BUF_SIZE;  [CE]  missing  return  statement  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  numToSkip  -=  available  *  SKIP_BUF_SIZE;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	numToSkip  -=  available  *  SKIP_BUF_SIZE;	  numToSkip    -=    available;    	non-compiled	[CE]  missing  return  statement	110	None	replace
1142	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  SKIP_BUF_SIZE;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  available  *  SKIP_BUF_SIZE;	  return    available    *    skipped;    	compilable	  [FE]  AssertionError  	17	3	replace
1143	[BUG]  [BUGGY]  return  available  *  SKIP_BUF_SIZE;  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  SKIP_BUF_SIZE;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  SKIP_BUF_SIZE;	  return    available    *    skipped;    	compilable	  [FE]  AssertionError  	17	3	replace
1144	[BUG]  [BUGGY]  return  available  *  numToSkip.length;  [CE]  long  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip.length;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip.length;	  return    available    *    skipped;    	non-compiled	[CE]  long  cannot  be  dereferenced	17	None	replace
1145	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  0;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  0;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  numToSkip)  {  for(int  i  =  available;  i  <  0;  i++)  {  input.close();  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
1146	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  available  +  numToSkip;  i  <  numToSkip;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  available  +  numToSkip;  i  <  numToSkip;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  numToSkip)  {  for(int  i  =  available  +  numToSkip;  i  <  numToSkip;  i++)  {  input.close();  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
1147	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  available.size();  i  <  numToSkip;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  available.size();  i  <  numToSkip;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  numToSkip)  {  for(int  i  =  available.size();  i  <  numToSkip;  i++)  {  input.close();  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
1148	[BUG]  [BUGGY]  return  available  +  skipped;  int  numToSkip  =  input.read();  [CE]  cannot  find  symbol  skipped  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  +  skipped;  int  numToSkip  =  input.read();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  +  skipped;  int  numToSkip  =  input.read();	  return    available    +    numToSkip;    int    numToSkip    =    input.read();    	non-compiled	[CE]  cannot  find  symbol  skipped	2	None	replace
1149	[BUG]  [BUGGY]  return  numToSkip  -  available  +  1;  numToSkip  -=  available;  [CE]  unreachable  statement  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  -  available  +  1;  numToSkip  -=  available;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  numToSkip  -  available  +  1;  numToSkip  -=  available;	  return    numToSkip    -    available;    numToSkip    -=    available;    	non-compiled	[CE]  unreachable  statement	35	None	replace
1150	[BUG]  [BUGGY]  return  available  -  numToSkip;  numToSkip  -=  skipped;  [CE]  cannot  find  symbol  skipped  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip;  numToSkip  -=  skipped;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  numToSkip;  numToSkip  -=  skipped;	  return    numToSkip    -    available;    numToSkip    -=    available;    	non-compiled	[CE]  cannot  find  symbol  skipped	35	None	replace
1151	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.flush();  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.flush();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.flush();  }	  if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
1152	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.start();  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.start();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.start();  }	  if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
1153	[BUG]  [BUGGY]  return  available  -  skipped  *  numToSkip  +  1;  [CE]  cannot  find  symbol  skipped  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  skipped  *  numToSkip  +  1;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  skipped  *  numToSkip  +  1;	  return    available    -    skipped    *    numToSkip;    	non-compiled	[CE]  cannot  find  symbol  skipped	119	None	replace
1154	[BUG]  [BUGGY]  return  available  -  skipped  *  numToSkip.longValue();  [CE]  cannot  find  symbol  skipped  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  skipped  *  numToSkip.longValue();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  skipped  *  numToSkip.longValue();	  return    available    -    skipped    *    numToSkip;    	non-compiled	[CE]  cannot  find  symbol  skipped	119	None	replace
1155	[BUG]  [BUGGY]  return  available  -  saved  *  numToSkip;  [CE]  cannot  find  symbol  saved  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  saved  *  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  saved  *  numToSkip;	  return    available    -    skipped    *    numToSkip;    	non-compiled	[CE]  cannot  find  symbol  saved	119	None	replace
1156	[BUG]  [BUGGY]  return  available  +  skipped;  if(available  >  numToSkip)  {  available  =  numToSkip;  }  [CE]  cannot  find  symbol  skipped  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  +  skipped;  if(available  >  numToSkip)  {  available  =  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  +  skipped;  if(available  >  numToSkip)  {  available  =  numToSkip;  }	  return    available    +    numToSkip;    if(available    >    numToSkip)    {    available    +    numToSkip;    }    	non-compiled	[CE]  cannot  find  symbol  skipped	163	None	replace
1157	[BUG]  [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getChars(i);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getChars(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  /  numToSkip;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getChars(i);  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
1158	[BUG]  [BUGGY]  long  available  =  available  /  numToSkip;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getChars(i);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  /  numToSkip;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getChars(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  /  numToSkip;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getChars(i);  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
1159	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  return  available  /  numToSkip;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getChars(i);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  <  numToSkip)  {  return  available  /  numToSkip;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getChars(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  <  numToSkip)  {  return  available  /  numToSkip;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getChars(i);  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
1160	[BUG]  [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  >=  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getChars(i);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  >=  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getChars(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  /  numToSkip;  if(available  >=  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getChars(i);  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
1161	[BUG]  [BUGGY]  long  available  =  available  /  numToSkip;  if(available  <  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getChars(i);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  /  numToSkip;  if(available  <  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getChars(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  /  numToSkip;  if(available  <  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getChars(i);  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
1162	[BUG]  [BUGGY]  long  available  =  available.longValue();  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  /  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available.longValue();  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  /  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available.longValue();  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  /  numToSkip;  }	  return    available    /    numToSkip;    if(available    <    numToSkip)    {    if(skipped    >    0)    {    return    available    /    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
1163	[BUG]  [BUGGY]  long  available  =  available.longValue();  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  *  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available.longValue();  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  *  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available.longValue();  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  *  numToSkip;  }	  return    available    /    numToSkip;    if(available    <    numToSkip)    {    if(skipped    >    0)    {    return    available    /    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
1164	[BUG]  [BUGGY]  long  available  =  available.longValue();  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  +  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available.longValue();  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  +  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available.longValue();  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  +  numToSkip;  }	  return    available    /    numToSkip;    if(available    <    numToSkip)    {    if(skipped    >    0)    {    return    available    /    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
1165	[BUG]  [BUGGY]  long  available  =  numToSkip  -  output;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  output;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  output;	  long    available    =    output.available    -    numToSkip;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	15	None	replace
1166	[BUG]  [BUGGY]  Long  available  =  input.available  -  numToSkip;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  Long  available  =  input.available  -  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	Long  available  =  input.available  -  numToSkip;	  long    available    =    output.available    -    numToSkip;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	15	None	replace
1167	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  return  numToSkip  -  available;  InputStream  available  =  input.readInput();  }  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  return  numToSkip  -  available;  InputStream  available  =  input.readInput();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  return  numToSkip  -  available;  InputStream  available  =  input.readInput();  }	  return    numToSkip    -    available;    InputStream    available    =    input.readInput();    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	37	None	replace
1168	[BUG]  [BUGGY]  return  available  -  numToSkip;  InputStream  available  =  input.readInput();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip;  InputStream  available  =  input.readInput();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  numToSkip;  InputStream  available  =  input.readInput();	  return    numToSkip    -    available;    InputStream    available    =    input.readInput();    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	37	None	replace
1169	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  return  numToSkip  -  available;  InputStream  available  =  input.readInput();  }  else  {  skip(input,  numToSkip);  }  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  return  numToSkip  -  available;  InputStream  available  =  input.readInput();  }  else  {  skip(input,  numToSkip);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  return  numToSkip  -  available;  InputStream  available  =  input.readInput();  }  else  {  skip(input,  numToSkip);  }	  return    numToSkip    -    available;    InputStream    available    =    input.readInput();    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	37	None	replace
1170	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  return  numToSkip  -  available;  InputStream  available  =  input.readInput();  }  else  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  return  numToSkip  -  available;  InputStream  available  =  input.readInput();  }  else  {  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  return  numToSkip  -  available;  InputStream  available  =  input.readInput();  }  else  {	  return    numToSkip    -    available;    InputStream    available    =    input.readInput();    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
1171	[BUG]  [BUGGY]  return  available  *  numToSkip  +  1;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  1;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    +    1;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
1172	[BUG]  [BUGGY]  return  available  *  numToSkip  +  1;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  1;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    +    1;    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
1173	[BUG]  [BUGGY]  return  available  *  numToSkip  +  1;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  1;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    +    1;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getLength();  }	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
1174	[BUG]  [BUGGY]  return  available  *  numToSkip  +  1;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  1;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    +    1;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
1175	[BUG]  [BUGGY]  return  available  *  numToSkip  +  1;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  1;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    +    1;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
1176	[BUG]  [BUGGY]  return  available  *  numToSkip  +  1;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  1;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    +    1;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
1177	[BUG]  [BUGGY]  return  available  *  numToSkip  +  1;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  1;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    +    1;    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
1178	[BUG]  [BUGGY]  return  available  *(numToSkip  -  available);  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip--)  {  available  *(numToSkip  -  available);  }  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *(numToSkip  -  available);  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip--)  {  available  *(numToSkip  -  available);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *(numToSkip    -    available);    if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip--)  {  available  *(numToSkip  -  available);  }	  	non-compiled	[CE]  not  a  statement	31	None	add
1179	[BUG]  [BUGGY]  return  available  *(numToSkip  -  available);  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip++)  {  available  *(numToSkip  -  available);  }  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *(numToSkip  -  available);  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip++)  {  available  *(numToSkip  -  available);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *(numToSkip    -    available);    if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip++)  {  available  *(numToSkip  -  available);  }	  	non-compiled	[CE]  not  a  statement	31	None	add
1180	[BUG]  [BUGGY]  return  available  *(numToSkip  -  available);  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip--)  {  available  +=  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *(numToSkip  -  available);  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip--)  {  available  +=  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *(numToSkip    -    available);    if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip--)  {  available  +=  numToSkip;  }	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
1181	[BUG]  [BUGGY]  return  available  *(numToSkip  -  available);  InputStream  available  =  input.readLine();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *(numToSkip  -  available);  InputStream  available  =  input.readLine();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *(numToSkip    -    available);    InputStream  available  =  input.readLine();	  	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	31	None	add
1182	[BUG]  [BUGGY]  return  available  *(numToSkip  -  available);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *(numToSkip  -  available);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *(numToSkip    -    available);    if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
1183	[BUG]  [BUGGY]  return  available  *(numToSkip  -  available);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *(numToSkip  -  available);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *(numToSkip    -    available);    if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
1184	[BUG]  [BUGGY]  return  available  +  numToSkip  -  input.length;  [CE]  cannot  find  symbol  length  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  +  numToSkip  -  input.length;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  +  numToSkip  -  input.length;	  return    available    +    numToSkip    -    skipped;    	non-compiled	[CE]  cannot  find  symbol  length	28	None	replace
1185	[BUG]  [BUGGY]  return  available  +  numToSkip  -  skipped.longValue;  [CE]  cannot  find  symbol  skipped  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  +  numToSkip  -  skipped.longValue;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  +  numToSkip  -  skipped.longValue;	  return    available    +    numToSkip    -    skipped;    	non-compiled	[CE]  cannot  find  symbol  skipped	28	None	replace
1186	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  input.close();  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
1187	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.flush();  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.flush();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.flush();  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
1188	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  input.flush();  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  input.flush();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  input.flush();  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
1189	[BUG]  [BUGGY]  return  numToSkip  /  available;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  /  available;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    /    available;    if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
1190	[BUG]  [BUGGY]  return  numToSkip  /  available;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  /  available;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    /    available;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
1191	[BUG]  [BUGGY]  return  numToSkip  /  available;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  /  available;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    /    available;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
1192	[BUG]  [BUGGY]  return  numToSkip  /  available;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  /  available;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    /    available;    if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
1193	[BUG]  [BUGGY]  return  numToSkip  /  available;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  /  available;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    /    available;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getLength();  }	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
1194	[BUG]  [BUGGY]  return  numToSkip  /  available;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  /  available;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    /    available;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
1195	[BUG]  [BUGGY]  return  numToSkip  /  available;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getRead();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  /  available;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getRead();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    /    available;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getRead();  }	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
1196	[BUG]  [BUGGY]  return  numToSkip  /  available;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  /  available;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    /    available;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
1197	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
1198	[BUG]  [BUGGY]  long  available  =  input.skip(numToSkip);  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.next();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  input.skip(numToSkip);  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.next();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  input.skip(numToSkip);  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.next();  }	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
1199	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(available  <  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.next();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(available  <  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.next();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(available  <  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.next();  }	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
1200	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.next();  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.next();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.next();  }	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.next();    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
1201	[BUG]  [BUGGY]  return  available  *  numToSkip  -  input.length;  [CE]  cannot  find  symbol  length  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  -  input.length;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip  -  input.length;	  return    available    *    numToSkip    -    skipped;    	non-compiled	[CE]  cannot  find  symbol  length	18	None	replace
1202	[BUG]  [BUGGY]  return  available  *  numToSkip  -  skipped  +  input.length;  [CE]  cannot  find  symbol  skipped  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  -  skipped  +  input.length;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip  -  skipped  +  input.length;	  return    available    *    numToSkip    -    skipped;    	non-compiled	[CE]  cannot  find  symbol  skipped	18	None	replace
1203	[BUG]  [BUGGY]  return  available  *  numToSkip  -  skipped.longValue;  [CE]  cannot  find  symbol  skipped  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  -  skipped.longValue;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip  -  skipped.longValue;	  return    available    *    numToSkip    -    skipped;    	non-compiled	[CE]  cannot  find  symbol  skipped	18	None	replace
1204	[BUG]  [BUGGY]  long  available  =  input.length();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  input.length();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  input.length();	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.length();    }    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	40	None	replace
1205	[BUG]  [BUGGY]  if(available  >  0)  {  return  available;  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  0)  {  return  available;  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  0)  {  return  available;  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.length();    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
1206	[BUG]  [BUGGY]  if(available  >  0)  {  for(long  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  0)  {  for(long  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  0)  {  for(long  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.length();    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
1207	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  input;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  0)  {  for(int  i  =  input;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  0)  {  for(int  i  =  input;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.length();    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
1208	[BUG]  [BUGGY]  long  available  =  numToSkip  +  available;  if(available  <  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  +  available;  if(available  <  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  +  available;  if(available  <  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }	  return    available    +    numToSkip;    if(available    <    numToSkip)    {    for(int    i    =    0;    i    <    available.size();    ++i)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
1209	[BUG]  [BUGGY]  long  available  =  available  +  numToSkip;  if(available  <  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  +  numToSkip;  if(available  <  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  +  numToSkip;  if(available  <  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }	  return    available    +    numToSkip;    if(available    <    numToSkip)    {    for(int    i    =    0;    i    <    available.size();    ++i)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
1210	[BUG]  [BUGGY]  long  available  =  numToSkip  +  available;  if(available  <  0)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  +  available;  if(available  <  0)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  +  available;  if(available  <  0)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }	  return    available    +    numToSkip;    if(available    <    numToSkip)    {    for(int    i    =    0;    i    <    available.size();    ++i)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
1211	[BUG]  [BUGGY]  long  available  =  available  +  numToSkip;  if(available  <  0)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  +  numToSkip;  if(available  <  0)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  +  numToSkip;  if(available  <  0)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }	  return    available    +    numToSkip;    if(available    <    numToSkip)    {    for(int    i    =    0;    i    <    available.size();    ++i)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
1212	[BUG]  [BUGGY]  long  available  =  numToSkip  +  available;  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  +  available;  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  +  available;  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  return    available    +    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	159	None	replace
1213	[BUG]  [BUGGY]  long  available  =  available  +  numToSkip;  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  +  numToSkip;  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  +  numToSkip;  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  return    available    +    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	159	None	replace
1214	[BUG]  [BUGGY]  long  available  =  numToSkip  +  available;  if(available  <  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  +  available;  if(available  <  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  +  available;  if(available  <  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  return    available    +    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	159	None	replace
1215	[BUG]  [BUGGY]  long  available  =  numToSkip  +  available;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  +  available;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  +  available;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  return    available    +    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	159	None	replace
1216	[BUG]  [BUGGY]  long  skipped  =  available  *  numToSkip;  if(skipped  <  0)  {  return  available  *  numToSkip;  }  [CE]  missing  return  statement  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  skipped  =  available  *  numToSkip;  if(skipped  <  0)  {  return  available  *  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  skipped  =  available  *  numToSkip;  if(skipped  <  0)  {  return  available  *  numToSkip;  }	  return    available    *    numToSkip;    if(available    <    numToSkip)    {    if(skipped    >    0)    {    return    available    *    numToSkip;    }    	non-compiled	[CE]  missing  return  statement	70	None	replace
1217	[BUG]  [BUGGY]  long  numToSkip  =  available  *  numToSkip;  if(skipped  <  0)  {  return  available  *  numToSkip;  }  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  numToSkip  =  available  *  numToSkip;  if(skipped  <  0)  {  return  available  *  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  numToSkip  =  available  *  numToSkip;  if(skipped  <  0)  {  return  available  *  numToSkip;  }	  return    available    *    numToSkip;    if(available    <    numToSkip)    {    if(skipped    >    0)    {    return    available    *    numToSkip;    }    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	70	None	replace
1218	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  int  numToSkip  =  available;  for(int  i  =  0;  i  <  numToSkip;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  int  numToSkip  =  available;  for(int  i  =  0;  i  <  numToSkip;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  int  numToSkip  =  available;  for(int  i  =  0;  i  <  numToSkip;  i++)  {  input.close();  }	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
1219	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(available  <  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(available  <  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(available  <  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  input.close();  }	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
1220	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.flush();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.flush();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.flush();  }	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
1221	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >=  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  if(available  >=  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  if(available  >=  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  input.close();  }	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
1222	[BUG]  [BUGGY]  long  available  =  available  /  numToSkip;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  0;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  /  numToSkip;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  0;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  /  numToSkip;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  0;  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    i;    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
1223	[BUG]  [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  0;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  0;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  /  numToSkip;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  0;  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    i;    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
1224	[BUG]  [BUGGY]  long  available  =  available  /  numToSkip;  if(available  <  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  i;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  /  numToSkip;  if(available  <  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  i;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  /  numToSkip;  if(available  <  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  i;  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    i;    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
1225	[BUG]  [BUGGY]  long  available  =  available  /  numToSkip;  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  i;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  /  numToSkip;  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  i;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  /  numToSkip;  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  i;  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    i;    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
1226	[BUG]  [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  >=  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  i;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  >=  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  i;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  /  numToSkip;  if(available  >=  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  i;  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    i;    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
1227	[BUG]  [BUGGY]  return  available  -  input.skipped  -  skipped;  [CE]  cannot  find  symbol  skipped  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  input.skipped  -  skipped;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  input.skipped  -  skipped;	  return    available    -    input.skipped;    	non-compiled	[CE]  cannot  find  symbol  skipped	108	None	replace
1228	[BUG]  [BUGGY]  return  available  -  input.skip;  [CE]  cannot  find  symbol  skip  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  input.skip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  input.skip;	  return    available    -    input.skipped;    	non-compiled	[CE]  cannot  find  symbol  skip	108	None	replace
1229	[BUG]  [BUGGY]  long  available  =  available  /  numToSkip;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  /  numToSkip;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.read();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  /  numToSkip;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.read();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
1230	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
1231	[BUG]  [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.read();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  /  numToSkip;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.read();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
1232	[BUG]  [BUGGY]  long  available  =  available  /  numToSkip;  if(available  <  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  /  numToSkip;  if(available  <  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.read();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  /  numToSkip;  if(available  <  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.read();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
1233	[BUG]  [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  >=  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  >=  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.read();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  /  numToSkip;  if(available  >=  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.read();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
1234	[BUG]  [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  <  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  <  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.read();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  /  numToSkip;  if(available  <  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.read();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
1235	[BUG]  [BUGGY]  if(available  <  =  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  <  =  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  <  =  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  return    numToSkip    -    available;    if(available    <    =    0)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
1236	[BUG]  [BUGGY]  if(available  <  =  0)  {  return  numToSkip  -  available;  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  <  =  0)  {  return  numToSkip  -  available;  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  <  =  0)  {  return  numToSkip  -  available;  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  return    numToSkip    -    available;    if(available    <    =    0)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
1237	[BUG]  [BUGGY]  long  available  =  available  /  numToSkip;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  /  numToSkip;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  /  numToSkip;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  input.close();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
1238	[BUG]  [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  /  numToSkip;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  input.close();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
1239	[BUG]  [BUGGY]  long  available  =  available  /  numToSkip;  if(available  <  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  /  numToSkip;  if(available  <  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  /  numToSkip;  if(available  <  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  input.close();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
1240	[BUG]  [BUGGY]  long  available  =  available  /  numToSkip;  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  /  numToSkip;  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  /  numToSkip;  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
1241	[BUG]  [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  <  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  /  numToSkip;  if(available  <  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  /  numToSkip;  if(available  <  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  input.close();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
1242	[BUG]  [BUGGY]  long  skipped  =  available  *  numToSkip;  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  *  numToSkip  +=  skipped;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  skipped  =  available  *  numToSkip;  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  *  numToSkip  +=  skipped;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  skipped  =  available  *  numToSkip;  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  *  numToSkip  +=  skipped;  }	  return    available    *    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    *    numToSkip    +=    skipped;    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
1243	[BUG]  [BUGGY]  long  skipped  =  available  *  numToSkip;  if(skip  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  *  numToSkip  +=  skipped;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  skipped  =  available  *  numToSkip;  if(skip  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  *  numToSkip  +=  skipped;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  skipped  =  available  *  numToSkip;  if(skip  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  *  numToSkip  +=  skipped;  }	  return    available    *    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    *    numToSkip    +=    skipped;    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
1244	[BUG]  [BUGGY]  long  skipped  =  available  *  numToSkip;  [CE]  missing  return  statement  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  skipped  =  available  *  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  skipped  =  available  *  numToSkip;	  return    available    *    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    *    numToSkip    +=    skipped;    }    	non-compiled	[CE]  missing  return  statement	73	None	replace
1245	[BUG]  [BUGGY]  long  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  *  numToSkip  +=  skipped;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  *  numToSkip  +=  skipped;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  skipped  =  input.skip(available);  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  *  numToSkip  +=  skipped;  }	  return    available    *    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    *    numToSkip    +=    skipped;    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
1246	[BUG]  [BUGGY]  long  skipped  =  available  *  numToSkip;  if(skipped  >  0)  {  for(long  i  =  available;  i  <  numToSkip;  i++)  {  available  *  numToSkip  +=  skipped;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  skipped  =  available  *  numToSkip;  if(skipped  >  0)  {  for(long  i  =  available;  i  <  numToSkip;  i++)  {  available  *  numToSkip  +=  skipped;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  skipped  =  available  *  numToSkip;  if(skipped  >  0)  {  for(long  i  =  available;  i  <  numToSkip;  i++)  {  available  *  numToSkip  +=  skipped;  }	  return    available    *    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    *    numToSkip    +=    skipped;    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
1247	[BUG]  [BUGGY]  long  skipped  =  available  *  numToSkip;  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  *  numToSkip  +=  skipped;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  skipped  =  available  *  numToSkip;  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  *  numToSkip  +=  skipped;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  skipped  =  available  *  numToSkip;  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  *  numToSkip  +=  skipped;  }	  return    available    *    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    *    numToSkip    +=    skipped;    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
1248	[BUG]  [BUGGY]  long  skipped  =  available  *  numToSkip;  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  *  numTo  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  skipped  =  available  *  numToSkip;  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  *  numTo  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  skipped  =  available  *  numToSkip;  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  *  numTo	  return    available    *    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    *    numToSkip    +=    skipped;    }    	non-compiled	[CE]  not  a  statement	73	None	replace
1249	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  available  +=  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  available  +=  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  available  +=  numToSkip;  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    numToSkip    =    available;    numToSkip    <    0;    numToSkip++)    {    available    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
1250	[BUG]  [BUGGY]  long  available  =  input.skip(available);  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  available  +=  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  input.skip(available);  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  available  +=  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  input.skip(available);  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  available  +=  numToSkip;  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    numToSkip    =    available;    numToSkip    <    0;    numToSkip++)    {    available    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
1251	[BUG]  [BUGGY]  long  available  =  input.skip(numToSkip);  if(available  <  0)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  available  +=  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  input.skip(numToSkip);  if(available  <  0)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  available  +=  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  input.skip(numToSkip);  if(available  <  0)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  available  +=  numToSkip;  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    numToSkip    =    available;    numToSkip    <    0;    numToSkip++)    {    available    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
1252	[BUG]  [BUGGY]  return  available  *  numToSkip  /  numToSkip;  System.arraycopy(input,  0,  available,  numToSkip,  0);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  /  numToSkip;  System.arraycopy(input,  0,  available,  numToSkip,  0);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    /    numToSkip;    System.arraycopy(input,  0,  available,  numToSkip,  0);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	19	None	add
1253	[BUG]  [BUGGY]  return  available  *  numToSkip  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    /    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
1254	[BUG]  [BUGGY]  return  available  *  numToSkip  /  numToSkip;  int  numToSkip  =  input.read();  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  /  numToSkip;  int  numToSkip  =  input.read();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    /    numToSkip;    int  numToSkip  =  input.read();	  	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	19	None	add
1255	[BUG]  [BUGGY]  return  available  *  numToSkip  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    /    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
1256	[BUG]  [BUGGY]  return  available  *  numToSkip  /  numToSkip;  System.arraycopy(input,  numToSkip,  available,  numToSkip);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  /  numToSkip;  System.arraycopy(input,  numToSkip,  available,  numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    /    numToSkip;    System.arraycopy(input,  numToSkip,  available,  numToSkip);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	19	None	add
1257	[BUG]  [BUGGY]  return  available  *  numToSkip  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    /    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getLength();  }	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
1258	[BUG]  [BUGGY]  return  available  *  numToSkip  /  numToSkip;  System.arraycopy(input,  0,  available,  numToSkip,  numToSkip);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  /  numToSkip;  System.arraycopy(input,  0,  available,  numToSkip,  numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    /    numToSkip;    System.arraycopy(input,  0,  available,  numToSkip,  numToSkip);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	19	None	add
1259	[BUG]  [BUGGY]  return  available  *  numToSkip  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    /    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
1260	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.length();    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
1261	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  input.length;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  0)  {  for(int  i  =  input.length;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  0)  {  for(int  i  =  input.length;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.length();    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
1262	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  input.length;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  0)  {  for(int  i  =  input.length;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  0)  {  for(int  i  =  input.length;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.length();    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
1263	[BUG]  [BUGGY]  long  available  =  numToSkip  +  available;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  +  available;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  +  available;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  input.close();  }	  return    available    +    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
1264	[BUG]  [BUGGY]  long  available  =  available  +  numToSkip;  if(available  <  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  +  numToSkip;  if(available  <  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  +  numToSkip;  if(available  <  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  input.close();  }	  return    available    +    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
1265	[BUG]  [BUGGY]  long  available  =  available  +  numToSkip;  if(available  >  skipped)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  +  numToSkip;  if(available  >  skipped)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  +  numToSkip;  if(available  >  skipped)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }	  return    available    +    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
1266	[BUG]  [BUGGY]  return  available  *  numToSkip  -  1;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  -  1;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    -    1;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }	  	non-compiled	[CE]  illegal  start  of  expression	156	None	add
1267	[BUG]  [BUGGY]  return  available  *  numToSkip  -  1;  System.arraycopy(input,  0,  available,  numToSkip,  0);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  -  1;  System.arraycopy(input,  0,  available,  numToSkip,  0);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    -    1;    System.arraycopy(input,  0,  available,  numToSkip,  0);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	156	None	add
1268	[BUG]  [BUGGY]  return  available  *  numToSkip  -  1;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  -  1;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    -    1;    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }	  	non-compiled	[CE]  illegal  start  of  expression	156	None	add
1269	[BUG]  [BUGGY]  return  available  *  numToSkip  -  1;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  -  1;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    -    1;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  ++i)  {  available  +=  input.getLength();  }	  	non-compiled	[CE]  illegal  start  of  expression	156	None	add
1270	[BUG]  [BUGGY]  return  available  *  numToSkip  -  1;  InputStream  available  =  input.readLine();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  -  1;  InputStream  available  =  input.readLine();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    -    1;    InputStream  available  =  input.readLine();	  	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	156	None	add
1271	[BUG]  [BUGGY]  return  available  *  numToSkip  -  1;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  -  1;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    -    1;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }	  	non-compiled	[CE]  illegal  start  of  expression	156	None	add
1272	[BUG]  [BUGGY]  return  available  *  numToSkip  -  1;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  -  1;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    -    1;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }	  	non-compiled	[CE]  illegal  start  of  expression	156	None	add
1273	[BUG]  [BUGGY]  return  available  *  numToSkip  -  1;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  -  1;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    -    1;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }	  	non-compiled	[CE]  illegal  start  of  expression	156	None	add
1274	[BUG]  [BUGGY]  long  available  =  available  /  numToSkip;  if(available  >  0)  {  if(skipped  >  0)  {  return  available;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  /  numToSkip;  if(available  >  0)  {  if(skipped  >  0)  {  return  available;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  /  numToSkip;  if(available  >  0)  {  if(skipped  >  0)  {  return  available;  }	  return    available    /    numToSkip;    if(available    <    numToSkip)    {    if(skipped    >    0)    {    return    available;    }    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
1275	[BUG]  [BUGGY]  long  available  =  numToSkip  /  available;  if(available  <  0)  {  if(skipped  >  0)  {  return  available;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  /  available;  if(available  <  0)  {  if(skipped  >  0)  {  return  available;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  /  available;  if(available  <  0)  {  if(skipped  >  0)  {  return  available;  }	  return    available    /    numToSkip;    if(available    <    numToSkip)    {    if(skipped    >    0)    {    return    available;    }    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
1276	[BUG]  [BUGGY]  return  available  -  skipped  +  this.skipped;  [CE]  cannot  find  symbol  skipped  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  skipped  +  this.skipped;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  skipped  +  this.skipped;	  return    available    -    this.skipped;    	non-compiled	[CE]  cannot  find  symbol  skipped	65	None	replace
1277	[BUG]  [BUGGY]  long  available  =  available  *  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  *  numToSkip;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  *  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  *  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  *  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  *  numToSkip;  }	  return    available    *    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    *    numToSkip;    }    	non-compiled	[CE]  not  a  statement	76	None	replace
1278	[BUG]  [BUGGY]  long  available  =  available  *  numToSkip;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  *  0;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  *  numToSkip;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  *  0;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  *  numToSkip;  if(available  >  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  *  0;  }	  return    available    *    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    *    numToSkip;    }    	non-compiled	[CE]  not  a  statement	76	None	replace
1279	[BUG]  [BUGGY]  long  available  =  available  *  numToSkip;  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  *  numToSkip;  }  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  *  numToSkip;  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  *  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  *  numToSkip;  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  *  numToSkip;  }	  return    available    *    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    *    numToSkip;    }    	non-compiled	[CE]  not  a  statement	76	None	replace
1280	[BUG]  [BUGGY]  long  numToSkip  =  available  *  numToSkip;  if(numToSkip  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  *  numToSkip;  }  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  numToSkip  =  available  *  numToSkip;  if(numToSkip  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  *  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  numToSkip  =  available  *  numToSkip;  if(numToSkip  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  *  numToSkip;  }	  return    available    *    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    *    numToSkip;    }    	non-compiled	[CE]  not  a  statement	76	None	replace
1281	[BUG]  [BUGGY]  long  available  =  available  *  numToSkip;  if(available  <  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  *  numToSkip;  }  [CE]  not  a  statement  [FE]                            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  *  numToSkip;  if(available  <  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  *  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  *  numToSkip;  if(available  <  0)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  *  numToSkip;  }	  return    available    *    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    *    numToSkip;    }    	non-compiled	[CE]  not  a  statement	76	None	replace
1282	[BUG]  [BUGGY]  long  available  =  available  *  numToSkip;  if(available  >=  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  *  numToSkip;  }  [CE]  not  a  statement  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  *  numToSkip;  if(available  >=  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  *  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  *  numToSkip;  if(available  >=  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  *  numToSkip;  }	  return    available    *    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    *    numToSkip;    }    	non-compiled	[CE]  not  a  statement	76	None	replace
1283	[BUG]  [BUGGY]  return  numToSkip  -  available;  numToSkip  -  skipped;  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  -  available;  numToSkip  -  skipped;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  numToSkip  -  available;  numToSkip  -  skipped;	  return    numToSkip    -    available;    numToSkip    -    available;    	non-compiled	[CE]  not  a  statement	36	None	replace
1284	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  numToSkip  -  available;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  numToSkip  -  available;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  numToSkip  -  available;	  return    numToSkip    -    available;    numToSkip    -    available;    	non-compiled	[CE]  not  a  statement	36	None	replace
1285	[BUG]  [BUGGY]  long  available  =  numToSkip  +  available;  if(available  <  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  +  available;  if(available  <  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  +  available;  if(available  <  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  return    available    +    numToSkip;    if(available    <    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
1286	[BUG]  [BUGGY]  long  available  =  available  +  numToSkip;  if(available  <  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  +  numToSkip;  if(available  <  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  +  numToSkip;  if(available  <  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  return    available    +    numToSkip;    if(available    <    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
1287	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.flush();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  <  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.flush();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  <  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.flush();  }	  return    available    +    numToSkip;    if(available    <    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
1288	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
1289	[BUG]  [BUGGY]  long  available  =  input.skip(numToSkip);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  input.skip(numToSkip);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  input.skip(numToSkip);  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
1290	[BUG]  [BUGGY]  if(available  >  0)  {  return  available;  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  0)  {  return  available;  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  0)  {  return  available;  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
1291	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getUpperBound();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getUpperBound();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getUpperBound();  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
1292	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getUpperBound();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getUpperBound();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getUpperBound();  }	  return    available    +    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
1293	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  for(long  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  for(long  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  for(long  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }	  return    available    +    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
1294	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getEnd();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getEnd();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getEnd();  }	  return    available    +    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
1295	[BUG]  [BUGGY]  return  available  -  output.longValue();  [CE]  cannot  find  symbol  output  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  output.longValue();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  output.longValue();	  return    available    -    skipped.longValue();    	non-compiled	[CE]  cannot  find  symbol  output	44	None	replace
1296	[BUG]  [BUGGY]  return  available  -  read.longValue();  [CE]  cannot  find  symbol  read  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  read.longValue();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  read.longValue();	  return    available    -    skipped.longValue();    	non-compiled	[CE]  cannot  find  symbol  read	44	None	replace
1297	[BUG]  [BUGGY]  return  available  /  skipped;  int  numToSkip  =  input.read();  [CE]  cannot  find  symbol  skipped  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  skipped;  int  numToSkip  =  input.read();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /  skipped;  int  numToSkip  =  input.read();	  return    available    /    numToSkip;    int    numToSkip    =    input.read();    	non-compiled	[CE]  cannot  find  symbol  skipped	98	None	replace
1298	[BUG]  [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(available  *  i);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(available  *  i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(available  *  i);  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.skip(available    +    i);    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
1299	[BUG]  [BUGGY]  return  available  -  numToSkip  +  available;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  +  available;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -    numToSkip    +    available;    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }	  	non-compiled	[CE]  illegal  start  of  expression	55	None	add
1300	[BUG]  [BUGGY]  return  available  -  numToSkip  +  available;  InputStream  available  =  input.getInputStream();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  +  available;  InputStream  available  =  input.getInputStream();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -    numToSkip    +    available;    InputStream  available  =  input.getInputStream();	  	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	55	None	add
1301	[BUG]  [BUGGY]  return  available  -  numToSkip  +  available;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  +  available;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -    numToSkip    +    available;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }	  	non-compiled	[CE]  illegal  start  of  expression	55	None	add
1302	[BUG]  [BUGGY]  return  available  -  numToSkip  +  available;  InputStream  available  =  input.readLine();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  +  available;  InputStream  available  =  input.readLine();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -    numToSkip    +    available;    InputStream  available  =  input.readLine();	  	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	55	None	add
1303	[BUG]  [BUGGY]  return  available  -  numToSkip  +  available;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.next();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  +  available;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.next();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -    numToSkip    +    available;    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.next();  }	  	non-compiled	[CE]  illegal  start  of  expression	55	None	add
1304	[BUG]  [BUGGY]  return  available  -  numToSkip  +  available;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getRead();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  +  available;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getRead();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -    numToSkip    +    available;    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getRead();  }	  	non-compiled	[CE]  illegal  start  of  expression	55	None	add
1305	[BUG]  [BUGGY]  return  numToSkip  *  available;  System.arraycopy(input,  numToSkip,  available,  0);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  *  available;  System.arraycopy(input,  numToSkip,  available,  0);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  numToSkip  *  available;  System.arraycopy(input,  numToSkip,  available,  0);	  return    available    *    numToSkip;    System.arraycopy(input,    numToSkip,    available,    0);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	167	None	replace
1306	[BUG]  [BUGGY]  return  available  *  numToSkip  +  skipped;  System.arraycopy(input,  numToSkip,  available,  0);  [CE]  cannot  find  symbol  skipped  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  skipped;  System.arraycopy(input,  numToSkip,  available,  0);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip  +  skipped;  System.arraycopy(input,  numToSkip,  available,  0);	  return    available    *    numToSkip;    System.arraycopy(input,    numToSkip,    available,    0);    	non-compiled	[CE]  cannot  find  symbol  skipped	167	None	replace
1307	[BUG]  [BUGGY]  return  input  *  numToSkip;  System.arraycopy(input,  numToSkip,  available,  0);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  input  *  numToSkip;  System.arraycopy(input,  numToSkip,  available,  0);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  input  *  numToSkip;  System.arraycopy(input,  numToSkip,  available,  0);	  return    available    *    numToSkip;    System.arraycopy(input,    numToSkip,    available,    0);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	167	None	replace
1308	[BUG]  [BUGGY]  return  input.readLine()  -  1;  [CE]  cannot  find  symbol  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  input.readLine()  -  1;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  input.readLine()  -  1;	  return    input.readLine();    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
1309	[BUG]  [BUGGY]  long  available  =  numToSkip  -  input.getCharacterEncoding();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  input.getCharacterEncoding();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  input.getCharacterEncoding();	  long    available    =    numToSkip    -    numToSkip;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	10	None	replace
1310	[BUG]  [BUGGY]  long  available  =  numToSkip  -  input.getStartLength();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  input.getStartLength();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  input.getStartLength();	  long    available    =    numToSkip    -    numToSkip;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	10	None	replace
1311	[BUG]  [BUGGY]  long  available  =  numToSkip  -  input.readLine();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  input.readLine();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  input.readLine();	  long    available    =    numToSkip    -    numToSkip;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	10	None	replace
1312	[BUG]  [BUGGY]  return  available  -  this.skipped  +  this.buffersize;  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  this.skipped  +  this.buffersize;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  this.skipped  +  this.buffersize;	  return    available    -    skipped    +    this.buffersize;    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	47	None	replace
1313	[BUG]  [BUGGY]  return  available  -  this.buffersize  +  this.buffersize;  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  this.buffersize  +  this.buffersize;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  this.buffersize  +  this.buffersize;	  return    available    -    skipped    +    this.buffersize;    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	47	None	replace
1314	[BUG]  [BUGGY]  long  available  =  input.available  *  numToSkip;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  input.available  *  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  input.available  *  numToSkip;	  long    available    =    input.available    -    numToSkip;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	9	None	replace
1315	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  0;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  available  *  numToSkip  +  0;	  return    available    *    numToSkip    +    skipped;    	compilable	  [FE]  AssertionError  	16	3	replace
1316	[BUG]  [BUGGY]  return  available  *  numToSkip  +  0;  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  0;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip  +  0;	  return    available    *    numToSkip    +    skipped;    	compilable	  [FE]  AssertionError  	16	3	replace
1317	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  numToSkip  +  SKIP_BUF_SIZE;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  available  /  numToSkip  +  SKIP_BUF_SIZE;	  return    available    /    numToSkip    +    skipped;    	compilable	  [FE]  AssertionError  	138	3	replace
1318	[BUG]  [BUGGY]  return  available  /  numToSkip  +  SKIP_BUF_SIZE;  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  numToSkip  +  SKIP_BUF_SIZE;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /  numToSkip  +  SKIP_BUF_SIZE;	  return    available    /    numToSkip    +    skipped;    	compilable	  [FE]  AssertionError  	138	3	replace
1319	[BUG]  [BUGGY]  return  available  /  numToSkip  +  SHORT_BUFFER_SIZE;  [CE]  cannot  find  symbol  SHORT_BUFFER_SIZE  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  numToSkip  +  SHORT_BUFFER_SIZE;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /  numToSkip  +  SHORT_BUFFER_SIZE;	  return    available    /    numToSkip    +    skipped;    	non-compiled	[CE]  cannot  find  symbol  SHORT_BUFFER_SIZE	138	None	replace
1320	[BUG]  [BUGGY]  return  available  /  numToSkip  +  input.skipped;  [CE]  cannot  find  symbol  skipped  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  numToSkip  +  input.skipped;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /  numToSkip  +  input.skipped;	  return    available    /    numToSkip    +    skipped;    	non-compiled	[CE]  cannot  find  symbol  skipped	138	None	replace
1321	[BUG]  [BUGGY]  long  available  =  this.available  *  numToSkip;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  this.available  *  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  this.available  *  numToSkip;	  long    available    =    this.available    -    numToSkip;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	107	None	replace
1322	[BUG]  [BUGGY]  long  available  =  this.available  -  input.getSize();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  this.available  -  input.getSize();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  this.available  -  input.getSize();	  long    available    =    this.available    -    numToSkip;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	107	None	replace
1323	[BUG]  [BUGGY]  return  input  *  numToSkip;  System.arraycopy(input,  0,  this.available,  numToSkip,  0);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  input  *  numToSkip;  System.arraycopy(input,  0,  this.available,  numToSkip,  0);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  input  *  numToSkip;  System.arraycopy(input,  0,  this.available,  numToSkip,  0);	  return    available    *    numToSkip;    System.arraycopy(input,    0,    available,    numToSkip,    0);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	86	None	replace
1324	[BUG]  [BUGGY]  return  available  *  numToSkip;  System.arraycopy(input,  0,  this.available,  numToSkip,  0);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip;  System.arraycopy(input,  0,  this.available,  numToSkip,  0);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip;  System.arraycopy(input,  0,  this.available,  numToSkip,  0);	  return    available    *    numToSkip;    System.arraycopy(input,    0,    available,    numToSkip,    0);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	86	None	replace
1325	[BUG]  [BUGGY]  return  available  *  numToSkip;  System.arraycopy(input,  0,  input,  numToSkip,  skipped);  [CE]  cannot  find  symbol  skipped  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip;  System.arraycopy(input,  0,  input,  numToSkip,  skipped);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip;  System.arraycopy(input,  0,  input,  numToSkip,  skipped);	  return    available    *    numToSkip;    System.arraycopy(input,    0,    available,    numToSkip,    0);    	non-compiled	[CE]  cannot  find  symbol  skipped	86	None	replace
1326	[BUG]  [BUGGY]  return  input  *  numToSkip;  System.arraycopy(input,  numToSkip,  available,  skipped);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  input  *  numToSkip;  System.arraycopy(input,  numToSkip,  available,  skipped);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  input  *  numToSkip;  System.arraycopy(input,  numToSkip,  available,  skipped);	  return    available    *    numToSkip;    System.arraycopy(input,    numToSkip,    available,    numToSkip);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	168	None	replace
1327	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.skip();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.skip();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.skip();  }	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
1328	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.start();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.start();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.start();  }	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
1329	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  >  expected  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  >  expected	115	None	replace
1330	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  available;  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  return    numToSkip    -    available;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	115	None	replace
1331	[BUG]  [BUGGY]  int  i  =  0;  ++i)  {  input.close();  }  [CE]  ';'  expected  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  int  i  =  0;  ++i)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	int  i  =  0;  ++i)  {  input.close();  }	  if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    input.close();    }    	non-compiled	[CE]  ';'  expected	146	None	replace
1332	[BUG]  [BUGGY]  return  input.readLine()  -(skipped  -  available);  [CE]  cannot  find  symbol  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  input.readLine()  -(skipped  -  available);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  input.readLine()  -(skipped  -  available);	  return    input.readLine();    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
1333	[BUG]  [BUGGY]  return  available  -  skipd  +  this.buffersize;  [CE]  cannot  find  symbol  skipd  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  skipd  +  this.buffersize;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  skipd  +  this.buffersize;	  return    available    -    skipped    +    this.buffersize;    	non-compiled	[CE]  cannot  find  symbol  skipd	47	None	replace
1334	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
1335	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  numToSkip;  i  <  0;  i++)  {  available  +=  input.getChars(i);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  0)  {  for(int  i  =  numToSkip;  i  <  0;  i++)  {  available  +=  input.getChars(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  0)  {  for(int  i  =  numToSkip;  i  <  0;  i++)  {  available  +=  input.getChars(i);  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
1336	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  return  numToSkip  -  available;  numToSkip  -=  available;  }  [CE]  unreachable  statement  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  return  numToSkip  -  available;  numToSkip  -=  available;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  return  numToSkip  -  available;  numToSkip  -=  available;  }	  return    numToSkip    -    available;    numToSkip    -=    available;    	non-compiled	[CE]  unreachable  statement	35	None	replace
1337	[BUG]  [BUGGY]  return  available  -  numToSkip;  numToSkip  -=  0;  [CE]  unreachable  statement  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip;  numToSkip  -=  0;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  numToSkip;  numToSkip  -=  0;	  return    numToSkip    -    available;    numToSkip    -=    available;    	non-compiled	[CE]  unreachable  statement	35	None	replace
1338	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.flush();  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.flush();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.flush();  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	169	None	replace
1339	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.skip();  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.skip();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.skip();  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	169	None	replace
1340	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.start();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.start();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.start();  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	169	None	replace
1341	[BUG]  [BUGGY]  While(input!=  null)  {  available  >  0)  {  for(int  i  =  available;  i  <  available;  i++)  {  input.close();  }  [CE]  ';'  expected  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  While(input!=  null)  {  available  >  0)  {  for(int  i  =  available;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	While(input!=  null)  {  available  >  0)  {  for(int  i  =  available;  i  <  available;  i++)  {  input.close();  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  ';'  expected	106	None	replace
1342	[BUG]  [BUGGY]  For(int  i  =  available;  i  <  available;  i++)  {  input.close();  }  [CE]  '.class'  expected  [FE]                                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  For(int  i  =  available;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	For(int  i  =  available;  i  <  available;  i++)  {  input.close();  }	  if(available    >    0)    {    for(int    i    =    available;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  '.class'  expected	106	None	replace
1343	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip();  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
1344	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.start();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.start();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.start();  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
1345	[BUG]  [BUGGY]  long  numToSkip  =  available  -  numToSkip;  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  numToSkip  =  available  -  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  numToSkip  =  available  -  numToSkip;	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.close();    }    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	113	None	replace
1346	[BUG]  [BUGGY]  int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  >  expected  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    input.close();    }    	non-compiled	[CE]  >  expected	145	None	replace
1347	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available.size();    ++i)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
1348	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.flush();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.flush();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.flush();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available.size();    ++i)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
1349	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.skip();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.skip();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.skip();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available.size();    ++i)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
1350	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(available);  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(available);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(available);  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.skip(available);    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
1351	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip();  }  [CE]  possible  loss  of  precision  [FE]                                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip();  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.skip(available);    }    	non-compiled	[CE]  possible  loss  of  precision	104	None	replace
1352	[BUG]  [BUGGY]  For(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(available);  }  [CE]  '.class'  expected  [FE]                                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  For(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(available);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	For(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(available);  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.skip(available);    }    	non-compiled	[CE]  '.class'  expected	104	None	replace
1353	[BUG]  [BUGGY]  long  skipped  =  input.skip(numToSkip);  [CE]  missing  return  statement  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  skipped  =  input.skip(numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  skipped  =  input.skip(numToSkip);	  return    available    +    numToSkip;    if(available    >    numToSkip)    {    if(skipped    >    0)    {    return    available    +    numToSkip;    }    	non-compiled	[CE]  missing  return  statement	123	None	replace
1354	[BUG]  [BUGGY]  return  available  *  numToSkip  +  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    +    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  	non-compiled	[CE]  illegal  start  of  expression	50	None	add
1355	[BUG]  [BUGGY]  return  available  *  numToSkip  +  numToSkip;  System.arraycopy(input,  numToSkip,  available,  numToSkip);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  numToSkip;  System.arraycopy(input,  numToSkip,  available,  numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    +    numToSkip;    System.arraycopy(input,  numToSkip,  available,  numToSkip);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	50	None	add
1356	[BUG]  [BUGGY]  return  available  *  numToSkip  +  numToSkip;  if(available  <  =  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  numToSkip;  if(available  <  =  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    +    numToSkip;    if(available  <  =  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  	non-compiled	[CE]  illegal  start  of  expression	50	None	add
1357	[BUG]  [BUGGY]  return  available  *  numToSkip  +  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    +    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }	  	non-compiled	[CE]  illegal  start  of  expression	50	None	add
1358	[BUG]  [BUGGY]  return  available  *  numToSkip  +  numToSkip;  System.arraycopy(input,  0,  available,  numToSkip  +  numToSkip);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  numToSkip;  System.arraycopy(input,  0,  available,  numToSkip  +  numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    +    numToSkip;    System.arraycopy(input,  0,  available,  numToSkip  +  numToSkip);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	50	None	add
1359	[BUG]  [BUGGY]  return  input.numToSkip  -  skipped;  [CE]  cannot  find  symbol  numToSkip  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  input.numToSkip  -  skipped;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  input.numToSkip  -  skipped;	  return    numToSkip    -    skipped;    	non-compiled	[CE]  cannot  find  symbol  numToSkip	63	None	replace
1360	[BUG]  [BUGGY]  return  skipped  -  numToSkip;  [CE]  cannot  find  symbol  skipped  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  skipped  -  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  skipped  -  numToSkip;	  return    numToSkip    -    skipped;    	non-compiled	[CE]  cannot  find  symbol  skipped	63	None	replace
1361	[BUG]  [BUGGY]  return  available  -(numToSkip  +  available);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -(numToSkip  +  available);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -(numToSkip    +    available);    if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  	non-compiled	[CE]  illegal  start  of  expression	153	None	add
1362	[BUG]  [BUGGY]  return  available  -(numToSkip  +  available);  if(available  <  =  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -(numToSkip  +  available);  if(available  <  =  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -(numToSkip    +    available);    if(available  <  =  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  	non-compiled	[CE]  illegal  start  of  expression	153	None	add
1363	[BUG]  [BUGGY]  return  available  -(numToSkip  +  available);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -(numToSkip  +  available);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -(numToSkip    +    available);    if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }	  	non-compiled	[CE]  illegal  start  of  expression	153	None	add
1364	[BUG]  [BUGGY]  return  available  -(numToSkip  +  available);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -(numToSkip  +  available);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -(numToSkip    +    available);    if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }	  	non-compiled	[CE]  illegal  start  of  expression	153	None	add
1365	[BUG]  [BUGGY]  return  available  -(numToSkip  +  available);  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -(numToSkip  +  available);  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -(numToSkip    +    available);    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  	non-compiled	[CE]  illegal  start  of  expression	153	None	add
1366	[BUG]  [BUGGY]  return  available  -(numToSkip  +  available);  if(available  <  =  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -(numToSkip  +  available);  if(available  <  =  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -(numToSkip    +    available);    if(available  <  =  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }	  	non-compiled	[CE]  illegal  start  of  expression	153	None	add
1367	[BUG]  [BUGGY]  return  available  -(numToSkip  +  available);  System.arraycopy(input,  numToSkip,  0,  available);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -(numToSkip  +  available);  System.arraycopy(input,  numToSkip,  0,  available);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -(numToSkip    +    available);    System.arraycopy(input,  numToSkip,  0,  available);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	153	None	add
1368	[BUG]  [BUGGY]  return  available  -(numToSkip  +  available);  System.arraycopy(input,  numToSkip,  available,  0);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                  AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -(numToSkip  +  available);  System.arraycopy(input,  numToSkip,  available,  0);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -(numToSkip    +    available);    System.arraycopy(input,  numToSkip,  available,  0);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	153	None	add
1369	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.reset();  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.reset();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.reset();  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.reset();    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
1370	[BUG]  [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  input.reset();  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  input.reset();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  >  numToSkip)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  input.reset();  }	  if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.reset();    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
1371	[BUG]  [BUGGY]  long  numToSkip  =  available  /  numToSkip;  if(skipped  <  0)  {  return  available;  }  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  numToSkip  =  available  /  numToSkip;  if(skipped  <  0)  {  return  available;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  numToSkip  =  available  /  numToSkip;  if(skipped  <  0)  {  return  available;  }	  return    available    /    numToSkip;    if(available    <    numToSkip)    {    if(skipped    >    0)    {    return    available;    }    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	130	None	replace
1372	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  return  available  +  numToSkip;  }  [CE]  missing  return  statement  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  return  available  +  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  return  available  +  numToSkip;  }	  return    available    +    numToSkip;    InputStream    available    =    input.getInputStream();    	non-compiled	[CE]  missing  return  statement	126	None	replace
1373	[BUG]  [BUGGY]  return  numToSkip  -  available  *  numToSkip;  if(available  <  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  -  available  *  numToSkip;  if(available  <  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    -    available    *    numToSkip;    if(available  <  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
1374	[BUG]  [BUGGY]  return  numToSkip  -  available  *  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  -  available  *  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    -    available    *    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
1375	[BUG]  [BUGGY]  return  numToSkip  -  available  *  numToSkip;  if(available  <  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  -  available  *  numToSkip;  if(available  <  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    -    available    *    numToSkip;    if(available  <  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
1376	[BUG]  [BUGGY]  return  numToSkip  -  available  *  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  -  available  *  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    -    available    *    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
1377	[BUG]  [BUGGY]  return  numToSkip  -  available  *  numToSkip;  System.arraycopy(input,  0,  numToSkip,  0,  available);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  -  available  *  numToSkip;  System.arraycopy(input,  0,  numToSkip,  0,  available);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    -    available    *    numToSkip;    System.arraycopy(input,  0,  numToSkip,  0,  available);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	60	None	add
1378	[BUG]  [BUGGY]  return  numToSkip  -  available  *  numToSkip;  if(available  <  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  -  available  *  numToSkip;  if(available  <  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    -    available    *    numToSkip;    if(available  <  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
1379	[BUG]  [BUGGY]  return  numToSkip  -  available  *  numToSkip;  System.arraycopy(input,  numToSkip,  available,  numToSkip);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  numToSkip  -  available  *  numToSkip;  System.arraycopy(input,  numToSkip,  available,  numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    -    available    *    numToSkip;    System.arraycopy(input,  numToSkip,  available,  numToSkip);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	60	None	add
1380	[BUG]  [BUGGY]  long  available  =  numToSkip  -  input.getMillis();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  numToSkip  -  input.getMillis();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  input.getMillis();	  long    available    =    numToSkip    -    numToSkip;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	10	None	replace
1381	[BUG]  [BUGGY]  return  available  /  SHORT_WIDTH;  [CE]  cannot  find  symbol  SHORT_WIDTH  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  SHORT_WIDTH;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /  SHORT_WIDTH;	  return    available    /    skipped;    	non-compiled	[CE]  cannot  find  symbol  SHORT_WIDTH	29	None	replace
1382	[BUG]  [BUGGY]  return  available  %  SHORT_SIZE;  [CE]  cannot  find  symbol  SHORT_SIZE  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  %  SHORT_SIZE;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  %  SHORT_SIZE;	  return    available    %    numToSkip;    	non-compiled	[CE]  cannot  find  symbol  SHORT_SIZE	27	None	replace
1383	[BUG]  [BUGGY]  return  available  %  SHORT_WIDTH;  [CE]  cannot  find  symbol  SHORT_WIDTH  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  %  SHORT_WIDTH;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  %  SHORT_WIDTH;	  return    available    %    numToSkip;    	non-compiled	[CE]  cannot  find  symbol  SHORT_WIDTH	27	None	replace
1384	[BUG]  [BUGGY]  return  available  *  SKIP_BUFFER_SIZE;  [CE]  cannot  find  symbol  SKIP_BUFFER_SIZE  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  SKIP_BUFFER_SIZE;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  SKIP_BUFFER_SIZE;	  return    available    *    skipped;    	non-compiled	[CE]  cannot  find  symbol  SKIP_BUFFER_SIZE	17	None	replace
1385	[BUG]  [BUGGY]  return  available  -  skipp  +  1;  [CE]  cannot  find  symbol  skipp  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  skipp  +  1;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  skipp  +  1;	  return    available    -    skipped    +    1;    	non-compiled	[CE]  cannot  find  symbol  skipp	64	None	replace
1386	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
1387	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  <  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  <  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
1388	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getChars(i);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getChars(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  0;  i++)  {  available  +=  input.getChars(i);  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getChars(i);    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
1389	[BUG]  [BUGGY]  return  available  -  numToSkip  *  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  *  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -    numToSkip    *    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  	non-compiled	[CE]  illegal  start  of  expression	52	None	add
1390	[BUG]  [BUGGY]  return  available  -  numToSkip  *  numToSkip;  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  *  numToSkip;  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -    numToSkip    *    numToSkip;    if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  	non-compiled	[CE]  illegal  start  of  expression	52	None	add
1391	[BUG]  [BUGGY]  return  available  -  numToSkip  *  numToSkip;  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip--)  {  available  +=  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  *  numToSkip;  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip--)  {  available  +=  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -    numToSkip    *    numToSkip;    if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip--)  {  available  +=  numToSkip;  }	  	non-compiled	[CE]  illegal  start  of  expression	52	None	add
1392	[BUG]  [BUGGY]  return  available  -  numToSkip  *  numToSkip;  int  numToSkip  =  input.read();  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  *  numToSkip;  int  numToSkip  =  input.read();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -    numToSkip    *    numToSkip;    int  numToSkip  =  input.read();	  	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	52	None	add
1393	[BUG]  [BUGGY]  return  available  -  numToSkip  *  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  *  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -    numToSkip    *    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }	  	non-compiled	[CE]  illegal  start  of  expression	52	None	add
1394	[BUG]  [BUGGY]  return  available  -  numToSkip  *  numToSkip;  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  *  numToSkip;  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -    numToSkip    *    numToSkip;    if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip++)  {  input.close();  }	  	non-compiled	[CE]  illegal  start  of  expression	52	None	add
1395	[BUG]  [BUGGY]  return  available  -  numToSkip  *  numToSkip;  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip  --numToSkip;  }  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  numToSkip  *  numToSkip;  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip  --numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -    numToSkip    *    numToSkip;    if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip  --numToSkip;  }	  	non-compiled	[CE]  ')'  expected	52	None	add
1396	[BUG]  [BUGGY]  long  skipped  =  available  +  numToSkip;  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  skipped  =  available  +  numToSkip;  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  skipped  =  available  +  numToSkip;  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  input.close();  }	  return    available    +    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
1397	[BUG]  [BUGGY]  long  numToSkip  =  available  +  numToSkip;  for(int  i  =  0;  i  <  numToSkip;  i++)  {  input.close();  }  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  numToSkip  =  available  +  numToSkip;  for(int  i  =  0;  i  <  numToSkip;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  numToSkip  =  available  +  numToSkip;  for(int  i  =  0;  i  <  numToSkip;  i++)  {  input.close();  }	  return    available    +    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.close();    }    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	124	None	replace
1398	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip();  }	  return    available    +    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
1399	[BUG]  [BUGGY]  long  skipped  =  available  +  numToSkip;  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  skipped  =  available  +  numToSkip;  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  skipped  =  available  +  numToSkip;  if(skipped  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }	  return    available    +    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
1400	[BUG]  [BUGGY]  return  available  +  numToSkip;  if(available  >  0)  {  available  +  numToSkip;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  +  numToSkip;  if(available  >  0)  {  available  +  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  +  numToSkip;  if(available  >  0)  {  available  +  numToSkip;  }	  return    available    +    numToSkip;    if(available    >    numToSkip)    {    available    +    numToSkip;    }    	non-compiled	[CE]  not  a  statement	163	None	replace
1401	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  available  +  numToSkip;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  available  +  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  available  +  numToSkip;  }	  return    available    +    numToSkip;    if(available    >    numToSkip)    {    available    +    numToSkip;    }    	non-compiled	[CE]  not  a  statement	163	None	replace
1402	[BUG]  [BUGGY]  return  available  +  numToSkip  -  skipped  *  numToSkip;  [CE]  cannot  find  symbol  skipped  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  +  numToSkip  -  skipped  *  numToSkip;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  +  numToSkip  -  skipped  *  numToSkip;	  return    available    +    numToSkip    -    skipped;    	non-compiled	[CE]  cannot  find  symbol  skipped	28	None	replace
1403	[BUG]  [BUGGY]  return  available  -(numToSkip  *  numToSkip);  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -(numToSkip  *  numToSkip);  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -(numToSkip    *    numToSkip);    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  	non-compiled	[CE]  illegal  start  of  expression	151	None	add
1404	[BUG]  [BUGGY]  return  available  -(numToSkip  *  numToSkip);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -(numToSkip  *  numToSkip);  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -(numToSkip    *    numToSkip);    if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  	non-compiled	[CE]  illegal  start  of  expression	151	None	add
1405	[BUG]  [BUGGY]  return  available  -(numToSkip  *  numToSkip);  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip  --numToSkip);  }  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -(numToSkip  *  numToSkip);  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip  --numToSkip);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -(numToSkip    *    numToSkip);    if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  >  0;  numToSkip  --numToSkip);  }	  	non-compiled	[CE]  ')'  expected	151	None	add
1406	[BUG]  [BUGGY]  return  available  -(numToSkip  *  numToSkip);  System.arraycopy(input,  0,  available,  numToSkip,  numToSkip);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -(numToSkip  *  numToSkip);  System.arraycopy(input,  0,  available,  numToSkip,  numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -(numToSkip    *    numToSkip);    System.arraycopy(input,  0,  available,  numToSkip,  numToSkip);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	151	None	add
1407	[BUG]  [BUGGY]  return  available  -(numToSkip  *  numToSkip);  System.arraycopy(input,  numToSkip,  0,  available);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -(numToSkip  *  numToSkip);  System.arraycopy(input,  numToSkip,  0,  available);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -(numToSkip    *    numToSkip);    System.arraycopy(input,  numToSkip,  0,  available);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	151	None	add
1408	[BUG]  [BUGGY]  return  available  -(numToSkip  *  numToSkip);  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -(numToSkip  *  numToSkip);  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    -(numToSkip    *    numToSkip);    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.getLength();  }	  	non-compiled	[CE]  illegal  start  of  expression	151	None	add
1409	[BUG]  [BUGGY]  if(available  <  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  <  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  <  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
1410	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  available  <  numToSkip;  ++i)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  available  <  numToSkip;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  0)  {  for(int  i  =  0;  available  <  numToSkip;  ++i)  {  available  +=  input.read();  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
1411	[BUG]  [BUGGY]  return  available  -  input.getShortValue(numToSkip);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  input.getShortValue(numToSkip);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  input.getShortValue(numToSkip);	  return    available    -    input.getShortValue();    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
1412	[BUG]  [BUGGY]  return  available  -  input.shortValue();  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  input.shortValue();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  input.shortValue();	  return    available    -    input.getShortValue();    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
1413	[BUG]  [BUGGY]  return  available  -  input.nextValue();  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  -  input.nextValue();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  input.nextValue();	  return    available    -    input.getShortValue();    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
1414	[BUG]  [BUGGY]  return  available  +  numToSkip  +  input.toString();  [CE]  incompatible  types  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  +  numToSkip  +  input.toString();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  +  numToSkip  +  input.toString();	  return    available    +    numToSkip    +    skipped;    	non-compiled	[CE]  incompatible  types	25	None	replace
1415	[BUG]  [BUGGY]  return  available  +  _skipped;  [CE]  cannot  find  symbol  _skipped  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  +  _skipped;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  +  _skipped;	  return    available    +    skipped;    	non-compiled	[CE]  cannot  find  symbol  _skipped	24	None	replace
1416	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  *  numToSkip;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  *  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  *  numToSkip;  }	  return    available    *    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    *    numToSkip;    }    	non-compiled	[CE]  not  a  statement	76	None	replace
1417	[BUG]  [BUGGY]  return  available  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  *  numToSkip;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  *  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  *  numToSkip;  }	  return    available    *    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    *    numToSkip;    }    	non-compiled	[CE]  not  a  statement	76	None	replace
1418	[BUG]  [BUGGY]  long  numToSkip  =  available  *  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  *  numToSkip;  }  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  numToSkip  =  available  *  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  *  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  numToSkip  =  available  *  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  *  numToSkip;  }	  return    available    *    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    *    numToSkip;    }    	non-compiled	[CE]  not  a  statement	76	None	replace
1419	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  *  numToSkip;  }  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  *  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  *  numToSkip;  }	  return    available    *    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    *    numToSkip;    }    	non-compiled	[CE]  not  a  statement	76	None	replace
1420	[BUG]  [BUGGY]  return  available  *  numToSkip  +  input.toByteArray();  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  +  input.toByteArray();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip  +  input.toByteArray();	  return    available    *    numToSkip    +    skip;    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
1421	[BUG]  [BUGGY]  long  numToSkip  =  available  +  numToSkip;  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  numToSkip  =  available  +  numToSkip;  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  numToSkip  =  available  +  numToSkip;  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }	  return    available    +    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available.size();    ++i)    {    input.close();    }    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	161	None	replace
1422	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  for(long  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  for(long  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  for(long  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }	  return    available    +    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available.size();    ++i)    {    input.close();    }    	non-compiled	[CE]  illegal  start  of  expression	161	None	replace
1423	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  0)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
1424	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  numToSkip;  i  <  0;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  0)  {  for(int  i  =  numToSkip;  i  <  0;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  0)  {  for(int  i  =  numToSkip;  i  <  0;  i++)  {  available  +=  input.getLength();  }	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
1425	[BUG]  [BUGGY]  long  numToSkip  =  input.getLength();  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  numToSkip  =  input.getLength();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  numToSkip  =  input.getLength();	  return    numToSkip    -    available;    if(available    >    0)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	112	None	replace
1426	[BUG]  [BUGGY]  return  available  *  input.longValue();  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  input.longValue();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  input.longValue();	  return    available    *    numToSkip.longValue();    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
1427	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  <  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  <  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    ++i)    {    available    +=    input.read();    }    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
1428	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  if(skip  >=  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  if(skip  >=  0)  {  break;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	for(int  i  =  available;  i  <  numToSkip;  i++)  {  if(skip  >=  0)  {  break;  }	  for(int    i    =    available;    i    <    numToSkip;    i++)    {    if(available    >    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
1429	[BUG]  [BUGGY]  return  available  /  numToSkip  +  skipd;  [CE]  cannot  find  symbol  skipd  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  /  numToSkip  +  skipd;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /  numToSkip  +  skipd;	  return    available    /    numToSkip    +    skipped;    	non-compiled	[CE]  cannot  find  symbol  skipd	138	None	replace
1430	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  return  available  /  numToSkip;  }  else  {  available  =  input.readInput();  }  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  return  available  /  numToSkip;  }  else  {  available  =  input.readInput();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  return  available  /  numToSkip;  }  else  {  available  =  input.readInput();  }	  return    available    /    numToSkip;    InputStream    available    =    input.readInput();    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
1431	[BUG]  [BUGGY]  int  numToSkip  =  available  /  numToSkip;  InputStream  available  =  input.readInput();  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  int  numToSkip  =  available  /  numToSkip;  InputStream  available  =  input.readInput();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	int  numToSkip  =  available  /  numToSkip;  InputStream  available  =  input.readInput();	  return    available    /    numToSkip;    InputStream    available    =    input.readInput();    	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	78	None	replace
1432	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  return  available  /  numToSkip;  InputStream  available  =  input.readInput();  }  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  return  available  /  numToSkip;  InputStream  available  =  input.readInput();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  return  available  /  numToSkip;  InputStream  available  =  input.readInput();  }	  return    available    /    numToSkip;    InputStream    available    =    input.readInput();    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	78	None	replace
1433	[BUG]  [BUGGY]  long  available  =  available  /  numToSkip  +  skipped;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  /  numToSkip  +  skipped;  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  /  numToSkip  +  skipped;	  long    available    =    available    /    numToSkip;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	134	None	replace
1434	[BUG]  [BUGGY]  long  available  =  available  /  input.getLength();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  available  =  available  /  input.getLength();  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  /  input.getLength();	  long    available    =    available    /    numToSkip;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	134	None	replace
1435	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  <  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  <  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getBytes(i);    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
1436	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    available;    i    <    numToSkip;    i++)    {    available    +=    input.getBytes(i);    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
1437	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  return  available  +  numToSkip;  InputStream  available  =  input.readInput();  }  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  return  available  +  numToSkip;  InputStream  available  =  input.readInput();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  return  available  +  numToSkip;  InputStream  available  =  input.readInput();  }	  return    available    +    numToSkip;    InputStream    available    =    input.readInput();    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	1	None	replace
1438	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  return  available  +  numToSkip;  }  else  {  available  =  input.readInput();  }  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  >  numToSkip)  {  return  available  +  numToSkip;  }  else  {  available  =  input.readInput();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  return  available  +  numToSkip;  }  else  {  available  =  input.readInput();  }	  return    available    +    numToSkip;    InputStream    available    =    input.readInput();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
1439	[BUG]  [BUGGY]  long  skipped  =  available  /  numToSkip;  if(skipped  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  missing  return  statement  [FE]                      AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  long  skipped  =  available  /  numToSkip;  if(skipped  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  skipped  =  available  /  numToSkip;  if(skipped  <  0)  {  throw  new  IllegalArgumentException( " ");  }	  return    available    /    numToSkip;    if(available    <    numToSkip)    {    if(skipped    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  missing  return  statement	85	None	replace
1440	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(available  <  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  <  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }	  return    available    /    numToSkip;    if(available    >    numToSkip)    {    for(int    i    =    0;    i    <    available;    i++)    {    available    +=    input.getLength();    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
1441	[BUG]  [BUGGY]  if(skipped  <  =  0)  {  return  available  +  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  if(skipped  <  =  0)  {  return  available  +  numToSkip;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(skipped  <  =  0)  {  return  available  +  numToSkip;  }	  return    available    +    numToSkip;    if(available    <    numToSkip)    {    if(skipped    >    0)    {    return    available    +    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  expression	158	None	replace
1442	[BUG]  [BUGGY]  return  available  *  numToSkip  -  1;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  -  1;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    -    1;    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  	non-compiled	[CE]  illegal  start  of  expression	156	None	add
1443	[BUG]  [BUGGY]  return  available  *  numToSkip  -  1;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  -  1;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    -    1;    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }	  	non-compiled	[CE]  illegal  start  of  expression	156	None	add
1444	[BUG]  [BUGGY]  return  available  *  numToSkip  -  1;  System.arraycopy(input,  numToSkip,  available,  0);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  -  1;  System.arraycopy(input,  numToSkip,  available,  0);  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    -    1;    System.arraycopy(input,  numToSkip,  available,  0);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	156	None	add
1445	[BUG]  [BUGGY]  return  available  *  numToSkip  -  1;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  -  1;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    -    1;    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }	  	non-compiled	[CE]  illegal  start  of  expression	156	None	add
1446	[BUG]  [BUGGY]  return  available  *  numToSkip  -  1;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  *  numToSkip  -  1;  }  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  -  1;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  *  numToSkip  -  1;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    -    1;    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  *  numToSkip  -  1;  }	  	non-compiled	[CE]  not  a  statement	156	None	add
1447	[BUG]  [BUGGY]  return  available  *  numToSkip  -  1;  if(available  >  numToSkip)  {  available  *  numToSkip  -  1;  }  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]      public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }      [BUGGY]  return  available  *  numToSkip  -  1;  if(available  >  numToSkip)  {  available  *  numToSkip  -  1;  }  [BUGGY]      }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip    -    1;    if(available  >  numToSkip)  {  available  *  numToSkip  -  1;  }	  	non-compiled	[CE]  not  a  statement	156	None	add
