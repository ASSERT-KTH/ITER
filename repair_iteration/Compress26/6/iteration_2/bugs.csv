bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  available  +  numToSkip;  InputStream  available  =  input.readInput();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]    AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  +  numToSkip;  InputStream  available  =  input.readInput();  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    +    numToSkip;    InputStream  available  =  input.readInput();	  	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	6	None	add
2	[BUG]  [BUGGY]  return  available  +  numToSkip;  int  numToSkip  =  input.read();  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]      AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  +  numToSkip;  int  numToSkip  =  input.read();  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    +    numToSkip;    int  numToSkip  =  input.read();	  	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	6	None	add
3	[BUG]  [BUGGY]  return  available  +  numToSkip;  int  numToSkip  =  input.readInt();  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]        AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  +  numToSkip;  int  numToSkip  =  input.readInt();  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    +    numToSkip;    int  numToSkip  =  input.readInt();	  	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	6	None	add
4	[BUG]  [BUGGY]  return  available  +  numToSkip;  int  numToSkip  =  input.read(available);  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]          AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  +  numToSkip;  int  numToSkip  =  input.read(available);  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    +    numToSkip;    int  numToSkip  =  input.read(available);	  	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	6	None	add
5	[BUG]  [BUGGY]  return  available  +  numToSkip;  int  numToSkip  =  input.length();  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]            AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  +  numToSkip;  int  numToSkip  =  input.length();  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    +    numToSkip;    int  numToSkip  =  input.length();	  	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	6	None	add
6	[BUG]  [BUGGY]  return  available  +  numToSkip;  int  numToSkip  =  input.readLine();  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]              AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  +  numToSkip;  int  numToSkip  =  input.readLine();  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    +    numToSkip;    int  numToSkip  =  input.readLine();	  	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	6	None	add
7	[BUG]  [BUGGY]  return  available  +  numToSkip;  long  numToSkip  =  input.readLine();  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]                AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  +  numToSkip;  long  numToSkip  =  input.readLine();  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    +    numToSkip;    long  numToSkip  =  input.readLine();	  	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	6	None	add
8	[BUG]  [BUGGY]  return  available  +  numToSkip;  numToSkip  =  input.read();  [CE]  unreachable  statement  [FE]                  AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  +  numToSkip;  numToSkip  =  input.read();  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    +    numToSkip;    numToSkip  =  input.read();	  	non-compiled	[CE]  unreachable  statement	6	None	add
9	[BUG]  [BUGGY]  long  available  =  input.available  -  numToSkip;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  long  available  =  input.available  -  numToSkip;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  input.available  -  numToSkip;	  long    available    =    available    -    numToSkip;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	8	None	replace
10	[BUG]  [BUGGY]  long  available  =  numToSkip  -  numToSkip;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                  AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  long  available  =  numToSkip  -  numToSkip;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  numToSkip;	  long    available    =    available    -    numToSkip;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	8	None	replace
11	[BUG]  [BUGGY]  long  available  =  numToSkip  -  available;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                    AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  long  available  =  numToSkip  -  available;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  numToSkip  -  available;	  long    available    =    available    -    numToSkip;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	8	None	replace
12	[BUG]  [BUGGY]  long  available  =  input.availableToInt()  -  numToSkip;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                      AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  long  available  =  input.availableToInt()  -  numToSkip;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  input.availableToInt()  -  numToSkip;	  long    available    =    available    -    numToSkip;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	8	None	replace
13	[BUG]  [BUGGY]  int  available  =  available  -  numToSkip;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                        AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  int  available  =  available  -  numToSkip;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	int  available  =  available  -  numToSkip;	  long    available    =    available    -    numToSkip;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	8	None	replace
14	[BUG]  [BUGGY]  long  available  =  skipped  -  numToSkip;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                          AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  long  available  =  skipped  -  numToSkip;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  skipped  -  numToSkip;	  long    available    =    available    -    numToSkip;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	8	None	replace
15	[BUG]  [BUGGY]  long  available  =  output.available  -  numToSkip;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                            AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  long  available  =  output.available  -  numToSkip;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  output.available  -  numToSkip;	  long    available    =    available    -    numToSkip;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	8	None	replace
16	[BUG]  [BUGGY]  return  available  *  numToSkip  +  skipped;  [CE]  cannot  find  symbol  skipped  [FE]    AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  *  numToSkip  +  skipped;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip  +  skipped;	  return    available    *    numToSkip;    	non-compiled	[CE]  cannot  find  symbol  skipped	5	None	replace
17	[BUG]  [BUGGY]  return  available  *  skipped;  [CE]  cannot  find  symbol  skipped  [FE]      AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  *  skipped;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  skipped;	  return    available    *    numToSkip;    	non-compiled	[CE]  cannot  find  symbol  skipped	5	None	replace
18	[BUG]  [BUGGY]  return  available  *  numToSkip  -  skipped;  [CE]  cannot  find  symbol  skipped  [FE]        AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  *  numToSkip  -  skipped;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip  -  skipped;	  return    available    *    numToSkip;    	non-compiled	[CE]  cannot  find  symbol  skipped	5	None	replace
19	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  *  numToSkip  /  numToSkip;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  available  *  numToSkip  /  numToSkip;	  return    available    *    numToSkip;    	compilable	  [FE]  AssertionError  	5	3	replace
20	[BUG]  [BUGGY]  return  available  *  numToSkip  /  numToSkip;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  *  numToSkip  /  numToSkip;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip  /  numToSkip;	  return    available    *    numToSkip;    	compilable	  [FE]  AssertionError  	5	3	replace
21	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  *  numToSkip  +  1;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  available  *  numToSkip  +  1;	  return    available    *    numToSkip;    	compilable	  [FE]  AssertionError  	5	3	replace
22	[BUG]  [BUGGY]  return  available  *  numToSkip  +  1;  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  *  numToSkip  +  1;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip  +  1;	  return    available    *    numToSkip;    	compilable	  [FE]  AssertionError  	5	3	replace
23	[BUG]  [BUGGY]  return  available  *  numToSkip  +  skip;  [CE]  cannot  find  symbol  skip  [FE]              AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  *  numToSkip  +  skip;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip  +  skip;	  return    available    *    numToSkip;    	non-compiled	[CE]  cannot  find  symbol  skip	5	None	replace
24	[BUG]  [BUGGY]  return  available  +  skipped;  [CE]  cannot  find  symbol  skipped  [FE]    AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  +  skipped;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  +  skipped;	  return    available    +    numToSkip;    	non-compiled	[CE]  cannot  find  symbol  skipped	7	None	replace
25	[BUG]  [BUGGY]  return  available  +  numToSkip  +  skipped;  [CE]  cannot  find  symbol  skipped  [FE]      AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  +  numToSkip  +  skipped;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  +  numToSkip  +  skipped;	  return    available    +    numToSkip;    	non-compiled	[CE]  cannot  find  symbol  skipped	7	None	replace
26	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  %  numToSkip;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  available  %  numToSkip;	  return    available    +    numToSkip;    	compilable	  [FE]  AssertionError  	7	3	replace
27	[BUG]  [BUGGY]  return  available  %  numToSkip;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  %  numToSkip;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  %  numToSkip;	  return    available    +    numToSkip;    	compilable	  [FE]  AssertionError  	7	3	replace
28	[BUG]  [BUGGY]  return  available  +  numToSkip  -  skipped;  [CE]  cannot  find  symbol  skipped  [FE]          AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  +  numToSkip  -  skipped;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  +  numToSkip  -  skipped;	  return    available    +    numToSkip;    	non-compiled	[CE]  cannot  find  symbol  skipped	7	None	replace
29	[BUG]  [BUGGY]  return  available  /  skipped;  [CE]  cannot  find  symbol  skipped  [FE]    AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  /  skipped;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /  skipped;	  return    available    /    numToSkip;    	non-compiled	[CE]  cannot  find  symbol  skipped	3	None	replace
30	[BUG]  [BUGGY]  return  available  /(numToSkip  +  skipped);  [CE]  cannot  find  symbol  skipped  [FE]      AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  /(numToSkip  +  skipped);  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /(numToSkip  +  skipped);	  return    available    /    numToSkip;    	non-compiled	[CE]  cannot  find  symbol  skipped	3	None	replace
31	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  *(numToSkip  -  available);  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  available  *(numToSkip  -  available);	  return    available    /    numToSkip;    	compilable	  [FE]  AssertionError  	3	3	replace
32	[BUG]  [BUGGY]  return  available  *(numToSkip  -  available);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  *(numToSkip  -  available);  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *(numToSkip  -  available);	  return    available    /    numToSkip;    	compilable	  [FE]  AssertionError  	3	3	replace
33	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  numToSkip  /  available;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  numToSkip  /  available;	  return    available    /    numToSkip;    	compilable	  [FE]  AssertionError  	3	3	replace
34	[BUG]  [BUGGY]  return  numToSkip  /  available;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  numToSkip  /  available;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  numToSkip  /  available;	  return    available    /    numToSkip;    	compilable	  [FE]  AssertionError  	3	3	replace
35	[BUG]  [BUGGY]  return  numToSkip  -  available;  numToSkip  -=  available;  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  numToSkip  -  available;  numToSkip  -=  available;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    -    available;    numToSkip  -=  available;	  	non-compiled	[CE]  unreachable  statement	10	None	add
36	[BUG]  [BUGGY]  return  numToSkip  -  available;  numToSkip  -  available;  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  numToSkip  -  available;  numToSkip  -  available;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    -    available;    numToSkip  -  available;	  	non-compiled	[CE]  not  a  statement	10	None	add
37	[BUG]  [BUGGY]  return  numToSkip  -  available;  InputStream  available  =  input.readInput();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]        AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  numToSkip  -  available;  InputStream  available  =  input.readInput();  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    -    available;    InputStream  available  =  input.readInput();	  	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	10	None	add
38	[BUG]  [BUGGY]  return  numToSkip  -  available;  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  available  +=  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  numToSkip  -  available;  if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  available  +=  numToSkip;  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    -    available;    if(available  >  0)  {  for(int  numToSkip  =  available;  numToSkip  <  0;  numToSkip++)  {  available  +=  numToSkip;  }	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
39	[BUG]  [BUGGY]  return  numToSkip  -  available;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  numToSkip  -  available;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    -    available;    if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
40	[BUG]  [BUGGY]  return  numToSkip  -  available;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  numToSkip  -  available;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    -    available;    if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
41	[BUG]  [BUGGY]  return  numToSkip  -  available;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  numToSkip  -  available;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    -    available;    if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
42	[BUG]  [BUGGY]  return  numToSkip  -  available;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  numToSkip  -  available;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    -    available;    if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
43	[BUG]  [BUGGY]  return  available  -  skipd;  [CE]  cannot  find  symbol  skipd  [FE]        AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  -  skipd;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  skipd;	  return    available    -    skip;    	non-compiled	[CE]  cannot  find  symbol  skipd	13	None	replace
44	[BUG]  [BUGGY]  return  available  -  skipped.longValue();  [CE]  cannot  find  symbol  skipped  [FE]          AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  -  skipped.longValue();  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  skipped.longValue();	  return    available    -    skip;    	non-compiled	[CE]  cannot  find  symbol  skipped	13	None	replace
45	[BUG]  [BUGGY]  return  available  -  skipped.longValue;  [CE]  cannot  find  symbol  skipped  [FE]            AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  -  skipped.longValue;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  skipped.longValue;	  return    available    -    skip;    	non-compiled	[CE]  cannot  find  symbol  skipped	13	None	replace
46	[BUG]  [BUGGY]  return  available  -  skipped.length;  [CE]  cannot  find  symbol  skipped  [FE]              AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  -  skipped.length;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  skipped.length;	  return    available    -    skip;    	non-compiled	[CE]  cannot  find  symbol  skipped	13	None	replace
47	[BUG]  [BUGGY]  return  available  -  skipped  +  this.buffersize;  [CE]  cannot  find  symbol  skipped  [FE]                AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  -  skipped  +  this.buffersize;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  skipped  +  this.buffersize;	  return    available    -    skip;    	non-compiled	[CE]  cannot  find  symbol  skipped	13	None	replace
48	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  -  numToSkip  +  numToSkip;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  available  -  numToSkip  +  numToSkip;	  return    available    -    skipped    +    numToSkip;    	compilable	  [FE]  AssertionError  	9	2	replace
49	[BUG]  [BUGGY]  return  available  -  numToSkip  +  numToSkip;  [FE]  AssertionError  [FE]                  AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  -  numToSkip  +  numToSkip;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  numToSkip  +  numToSkip;	  return    available    -    skipped    +    numToSkip;    	compilable	  [FE]  AssertionError  	9	2	replace
50	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  *  numToSkip  +  numToSkip;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  available  *  numToSkip  +  numToSkip;	  return    available    -    skipped    +    numToSkip;    	compilable	  [FE]  AssertionError  	9	3	replace
51	[BUG]  [BUGGY]  return  available  *  numToSkip  +  numToSkip;  [FE]  AssertionError  [FE]                    AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  *  numToSkip  +  numToSkip;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip  +  numToSkip;	  return    available    -    skipped    +    numToSkip;    	compilable	  [FE]  AssertionError  	9	3	replace
52	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                      AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  -  numToSkip  *  numToSkip;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  available  -  numToSkip  *  numToSkip;	  return    available    -    skipped    +    numToSkip;    	compilable	  [FE]  AssertionError  	9	2	replace
53	[BUG]  [BUGGY]  return  available  -  numToSkip  *  numToSkip;  [FE]  AssertionError  [FE]                      AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  -  numToSkip  *  numToSkip;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  numToSkip  *  numToSkip;	  return    available    -    skipped    +    numToSkip;    	compilable	  [FE]  AssertionError  	9	2	replace
54	[BUG]  [BUGGY]  return  available  -  skip  +  numToSkip;  [CE]  cannot  find  symbol  skip  [FE]                        AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  -  skip  +  numToSkip;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  skip  +  numToSkip;	  return    available    -    skipped    +    numToSkip;    	non-compiled	[CE]  cannot  find  symbol  skip	9	None	replace
55	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                          AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  -  numToSkip  +  available;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  available  -  numToSkip  +  available;	  return    available    -    skipped    +    numToSkip;    	compilable	  [FE]  AssertionError  	9	3	replace
56	[BUG]  [BUGGY]  return  available  -  numToSkip  +  available;  [FE]  AssertionError  [FE]                          AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  -  numToSkip  +  available;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  numToSkip  +  available;	  return    available    -    skipped    +    numToSkip;    	compilable	  [FE]  AssertionError  	9	3	replace
57	[BUG]  [BUGGY]  return  available  numToSkip  -  numToSkip;  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  numToSkip  -  numToSkip;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  numToSkip  -  numToSkip;	  return    numToSkip    -    available;    	non-compiled	[CE]  ';'  expected	11	None	replace
58	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  numToSkip  -  available  +  1;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  numToSkip  -  available  +  1;	  return    numToSkip    -    available;    	compilable	  [FE]  AssertionError  	11	3	replace
59	[BUG]  [BUGGY]  return  numToSkip  -  available  +  1;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  numToSkip  -  available  +  1;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  numToSkip  -  available  +  1;	  return    numToSkip    -    available;    	compilable	  [FE]  AssertionError  	11	3	replace
60	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  numToSkip  -  available  *  numToSkip;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  numToSkip  -  available  *  numToSkip;	  return    numToSkip    -    available;    	compilable	  [FE]  AssertionError  	11	3	replace
61	[BUG]  [BUGGY]  return  numToSkip  -  available  *  numToSkip;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  numToSkip  -  available  *  numToSkip;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  numToSkip  -  available  *  numToSkip;	  return    numToSkip    -    available;    	compilable	  [FE]  AssertionError  	11	3	replace
62	[BUG]  [BUGGY]  return  numToSkip  -  available  +  skipped;  [CE]  cannot  find  symbol  skipped  [FE]          AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  numToSkip  -  available  +  skipped;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  numToSkip  -  available  +  skipped;	  return    numToSkip    -    available;    	non-compiled	[CE]  cannot  find  symbol  skipped	11	None	replace
63	[BUG]  [BUGGY]  return  numToSkip  -  skipped;  [CE]  cannot  find  symbol  skipped  [FE]            AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  numToSkip  -  skipped;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  numToSkip  -  skipped;	  return    numToSkip    -    available;    	non-compiled	[CE]  cannot  find  symbol  skipped	11	None	replace
64	[BUG]  [BUGGY]  return  available  -  skipped  +  1;  [CE]  cannot  find  symbol  skipped  [FE]        AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  -  skipped  +  1;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  skipped  +  1;	  return    available    -    skipped;    	non-compiled	[CE]  cannot  find  symbol  skipped	1	None	replace
65	[BUG]  [BUGGY]  return  available  -  this.skipped;  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]          AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  -  this.skipped;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  this.skipped;	  return    available    -    skipped;    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	1	None	replace
66	[BUG]  [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  if(available  >  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  for(int  i  =  available;  i  <  numToSkip;  i++)  {  if(available  >  0)  {  break;  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	for(int  i  =  available;  i  <  numToSkip;  i++)  {  if(available  >  0)  {  break;  }	      	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
67	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }	      	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
68	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(available  +  i);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(available  +  i);  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(available  +  i);  }	      	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
69	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }	      	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
70	[BUG]  [BUGGY]  return  available  *  numToSkip;  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  *  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  *  numToSkip;  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  *  numToSkip;  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip;    if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  *  numToSkip;  }	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
71	[BUG]  [BUGGY]  return  available  *  numToSkip;  InputStream  available  =  input.readInput();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]      AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  *  numToSkip;  InputStream  available  =  input.readInput();  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip;    InputStream  available  =  input.readInput();	  	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	4	None	add
72	[BUG]  [BUGGY]  return  available  *  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  i++)  {  available  *  numToSkip  +=  i;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  *  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  i++)  {  available  *  numToSkip  +=  i;  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  i++)  {  available  *  numToSkip  +=  i;  }	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
73	[BUG]  [BUGGY]  return  available  *  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  *  numToSkip  +=  skipped;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  *  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  *  numToSkip  +=  skipped;  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  *  numToSkip  +=  skipped;  }	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
74	[BUG]  [BUGGY]  return  available  *  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  *  numToSkip  +=  i;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  *  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  *  numToSkip  +=  i;  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  *  numToSkip  +=  i;  }	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
75	[BUG]  [BUGGY]  return  available  *  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  *  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
76	[BUG]  [BUGGY]  return  available  *  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  *  numToSkip;  }  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  *  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  *  numToSkip;  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  *  numToSkip;  }	  	non-compiled	[CE]  not  a  statement	4	None	add
77	[BUG]  [BUGGY]  return  available  *  numToSkip;  int  numToSkip  =  available  *  numToSkip;  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]                  AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  *  numToSkip;  int  numToSkip  =  available  *  numToSkip;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip;    int  numToSkip  =  available  *  numToSkip;	  	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	4	None	add
78	[BUG]  [BUGGY]  return  available  /  numToSkip;  InputStream  available  =  input.readInput();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]    AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  /  numToSkip;  InputStream  available  =  input.readInput();  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    /    numToSkip;    InputStream  available  =  input.readInput();	  	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	2	None	add
79	[BUG]  [BUGGY]  return  available  /  numToSkip;  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  /  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  /  numToSkip;  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  /  numToSkip;  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    /    numToSkip;    if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  /  numToSkip;  }	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
80	[BUG]  [BUGGY]  return  available  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    /    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.length();  }	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
81	[BUG]  [BUGGY]  return  available  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    /    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.read();  }	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
82	[BUG]  [BUGGY]  return  available  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    /    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getChars(i);  }	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
83	[BUG]  [BUGGY]  return  available  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    /    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
84	[BUG]  [BUGGY]  return  available  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  i;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  i;  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    /    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  i;  }	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
85	[BUG]  [BUGGY]  return  available  /  numToSkip;  if(available  <  numToSkip)  {  if(skipped  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  /  numToSkip;  if(available  <  numToSkip)  {  if(skipped  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    /    numToSkip;    if(available  <  numToSkip)  {  if(skipped  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
86	[BUG]  [BUGGY]  return  available  *  numToSkip;  System.arraycopy(input,  0,  available,  numToSkip,  0);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  *  numToSkip;  System.arraycopy(input,  0,  available,  numToSkip,  0);  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip;    System.arraycopy(input,  0,  available,  numToSkip,  0);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	4	None	add
87	[BUG]  [BUGGY]  return  available  *  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  *  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
88	[BUG]  [BUGGY]  return  available  *  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  *  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
89	[BUG]  [BUGGY]  return  available  *  numToSkip;  int  numToSkip  =  input.read();  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]          AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  *  numToSkip;  int  numToSkip  =  input.read();  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip;    int  numToSkip  =  input.read();	  	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	4	None	add
90	[BUG]  [BUGGY]  return  available  *  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  *  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
91	[BUG]  [BUGGY]  return  available  *  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.next();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  *  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.next();  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.next();  }	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
92	[BUG]  [BUGGY]  return  available  *  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  *  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
93	[BUG]  [BUGGY]  return  available  *  numToSkip.longValue();  [CE]  long  cannot  be  dereferenced  [FE]    AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  *  numToSkip.longValue();  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip.longValue();	  return    available    /    numToSkip;    	non-compiled	[CE]  long  cannot  be  dereferenced	3	None	replace
94	[BUG]  [BUGGY]  return  available  /  skipped  +  numToSkip;  [CE]  cannot  find  symbol  skipped  [FE]      AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  /  skipped  +  numToSkip;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /  skipped  +  numToSkip;	  return    available    /    numToSkip;    	non-compiled	[CE]  cannot  find  symbol  skipped	3	None	replace
95	[BUG]  [BUGGY]  return  available  /  numToSkip;  System.arraycopy(input,  0,  available,  numToSkip,  0);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  /  numToSkip;  System.arraycopy(input,  0,  available,  numToSkip,  0);  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    /    numToSkip;    System.arraycopy(input,  0,  available,  numToSkip,  0);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	2	None	add
96	[BUG]  [BUGGY]  return  available  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    /    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
97	[BUG]  [BUGGY]  return  available  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    /    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
98	[BUG]  [BUGGY]  return  available  /  numToSkip;  int  numToSkip  =  input.read();  [CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)  [FE]          AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  /  numToSkip;  int  numToSkip  =  input.read();  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    /    numToSkip;    int  numToSkip  =  input.read();	  	non-compiled	[CE]  variable  numToSkip  is  already  defined  in  method  skip(InputStream,long)	2	None	add
99	[BUG]  [BUGGY]  return  available  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    /    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
100	[BUG]  [BUGGY]  return  available  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    /    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
101	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }	      	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
102	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(available  +  i);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(available  +  i);  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(available  +  i);  }	      	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
103	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.reset();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.reset();  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.reset();  }	      	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
104	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(available);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(available);  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.skip(available);  }	      	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
105	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.write(available);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.write(available);  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.write(available);  }	      	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
106	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  if(available  >  0)  {  for(int  i  =  available;  i  <  available;  i++)  {  input.close();  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  0)  {  for(int  i  =  available;  i  <  available;  i++)  {  input.close();  }	      	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
107	[BUG]  [BUGGY]  long  available  =  this.available  -  numToSkip;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  long  available  =  this.available  -  numToSkip;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  this.available  -  numToSkip;	  long    available    =    available    -    numToSkip;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	8	None	replace
108	[BUG]  [BUGGY]  return  available  -  input.skipped;  [CE]  cannot  find  symbol  skipped  [FE]        AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  -  input.skipped;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  input.skipped;	  return    available    -    skipped;    	non-compiled	[CE]  cannot  find  symbol  skipped	1	None	replace
109	[BUG]  [BUGGY]  while(available  -  numToSkip)  {  numToSkip  -=  available;  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  while(available  -  numToSkip)  {  numToSkip  -=  available;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	while(available  -  numToSkip)  {  numToSkip  -=  available;	  return    numToSkip    -    available;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
110	[BUG]  [BUGGY]  numToSkip  -=  available;  [CE]  missing  return  statement  [FE]      AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  numToSkip  -=  available;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	numToSkip  -=  available;	  return    numToSkip    -    available;    	non-compiled	[CE]  missing  return  statement	11	None	replace
111	[BUG]  [BUGGY]  return  numToSkip  -  available;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  numToSkip  -  available;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    -    available;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
112	[BUG]  [BUGGY]  return  numToSkip  -  available;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  numToSkip  -  available;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    -    available;    if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getLength();  }	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
113	[BUG]  [BUGGY]  return  numToSkip  -  available;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  numToSkip  -  available;  if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    -    available;    if(available  >  0)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
114	[BUG]  [BUGGY]  return  numToSkip  -  available;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  numToSkip  -  available;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    -    available;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
115	[BUG]  [BUGGY]  return  numToSkip  -  available;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  numToSkip  -  available;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    -    available;    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
116	[BUG]  [BUGGY]  return  numToSkip  -  available;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getRead();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  numToSkip  -  available;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getRead();  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    -    available;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getRead();  }	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
117	[BUG]  [BUGGY]  return  numToSkip  -  available;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  numToSkip  -  available;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    -    available;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.getBytes(i);  }	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
118	[BUG]  [BUGGY]  return  numToSkip  -  available;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  numToSkip  -  available;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    -    available;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +=  input.next();  }	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
119	[BUG]  [BUGGY]  return  available  -  skipped  *  numToSkip;  [CE]  cannot  find  symbol  skipped  [FE]                  AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  -  skipped  *  numToSkip;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  skipped  *  numToSkip;	  return    available    -    skipped    +    numToSkip;    	non-compiled	[CE]  cannot  find  symbol  skipped	9	None	replace
120	[BUG]  [BUGGY]  return  available  -  input.getSize();  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  -  input.getSize();  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  input.getSize();	  return    available    -    skip;    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
121	[BUG]  [BUGGY]  return  available  -  input.getShortValue();  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  -  input.getShortValue();  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  input.getShortValue();	  return    available    -    skip;    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
122	[BUG]  [BUGGY]  return  available  +  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +  i  +=  skipped;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  +  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +  i  +=  skipped;  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    +    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  available  +  i  +=  skipped;  }	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
123	[BUG]  [BUGGY]  return  available  +  numToSkip;  if(available  >  numToSkip)  {  if(skipped  >  0)  {  return  available  +  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  +  numToSkip;  if(available  >  numToSkip)  {  if(skipped  >  0)  {  return  available  +  numToSkip;  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    +    numToSkip;    if(available  >  numToSkip)  {  if(skipped  >  0)  {  return  available  +  numToSkip;  }	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
124	[BUG]  [BUGGY]  return  available  +  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  +  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    +    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  available;  i  <  numToSkip;  i++)  {  input.close();  }	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
125	[BUG]  [BUGGY]  return  available  +  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  +  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    +    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  available  +=  input.getLength();  }	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
126	[BUG]  [BUGGY]  return  available  +  numToSkip;  InputStream  available  =  input.getInputStream();  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]            AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  +  numToSkip;  InputStream  available  =  input.getInputStream();  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    +    numToSkip;    InputStream  available  =  input.getInputStream();	  	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	6	None	add
127	[BUG]  [BUGGY]  return  available  +  numToSkip;  System.arraycopy(input,  numToSkip,  available,  0);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]              AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  +  numToSkip;  System.arraycopy(input,  numToSkip,  available,  0);  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    +    numToSkip;    System.arraycopy(input,  numToSkip,  available,  0);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	6	None	add
128	[BUG]  [BUGGY]  return  available  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    /    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
129	[BUG]  [BUGGY]  return  available  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    /    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
130	[BUG]  [BUGGY]  return  available  /  numToSkip;  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  /  numToSkip;  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available;  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    /    numToSkip;    if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available;  }	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
131	[BUG]  [BUGGY]  return  available  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  /  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    /    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
132	[BUG]  [BUGGY]  return  available  /  numToSkip;  System.arraycopy(input,  numToSkip,  available,  0);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]            AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  /  numToSkip;  System.arraycopy(input,  numToSkip,  available,  0);  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    /    numToSkip;    System.arraycopy(input,  numToSkip,  available,  0);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	2	None	add
133	[BUG]  [BUGGY]  long  available  =  available  -  skipped;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  long  available  =  available  -  skipped;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  -  skipped;	  long    available    =    available    -    numToSkip;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	8	None	replace
134	[BUG]  [BUGGY]  long  available  =  available  /  numToSkip;  [CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)  [FE]                  AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  long  available  =  available  /  numToSkip;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	long  available  =  available  /  numToSkip;	  long    available    =    available    -    numToSkip;    	non-compiled	[CE]  variable  available  is  already  defined  in  method  skip(InputStream,long)	8	None	replace
135	[BUG]  [BUGGY]  return  available  -  input.getChars(0,  numToSkip);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  -  input.getChars(0,  numToSkip);  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  input.getChars(0,  numToSkip);	  return    available    -    skip;    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
136	[BUG]  [BUGGY]  return  available  -  input.getChars(numToSkip);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  -  input.getChars(numToSkip);  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  input.getChars(numToSkip);	  return    available    -    skip;    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
137	[BUG]  [BUGGY]  return  available  -  input.readLine();  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  -  input.readLine();  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  input.readLine();	  return    available    -    skip;    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
138	[BUG]  [BUGGY]  return  available  /  numToSkip  +  skipped;  [CE]  cannot  find  symbol  skipped  [FE]    AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  /  numToSkip  +  skipped;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /  numToSkip  +  skipped;	  return    available    /    numToSkip;    	non-compiled	[CE]  cannot  find  symbol  skipped	3	None	replace
139	[BUG]  [BUGGY]  return  available  /  numToSkip  -  skipped;  [CE]  cannot  find  symbol  skipped  [FE]      AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  /  numToSkip  -  skipped;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /  numToSkip  -  skipped;	  return    available    /    numToSkip;    	non-compiled	[CE]  cannot  find  symbol  skipped	3	None	replace
140	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  /  numToSkip  +  1;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  available  /  numToSkip  +  1;	  return    available    /    numToSkip;    	compilable	  [FE]  AssertionError  	3	3	replace
141	[BUG]  [BUGGY]  return  available  /  numToSkip  +  1;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  /  numToSkip  +  1;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  /  numToSkip  +  1;	  return    available    /    numToSkip;    	compilable	  [FE]  AssertionError  	3	3	replace
142	[BUG]  [BUGGY]  return  available  -  numToSkip  +  skipped;  [CE]  cannot  find  symbol  skipped  [FE]                  AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  -  numToSkip  +  skipped;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  numToSkip  +  skipped;	  return    available    -    skipped    +    numToSkip;    	non-compiled	[CE]  cannot  find  symbol  skipped	9	None	replace
143	[BUG]  [BUGGY]  return  input.readLine();  [CE]  cannot  find  symbol  [FE]                      AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  input.readLine();  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  input.readLine();	      	non-compiled	[CE]  cannot  find  symbol	12	None	replace
144	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }	      	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
145	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	      	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
146	[BUG]  [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }	      	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
147	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.skip(available  +  i);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.skip(available  +  i);  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.skip(available  +  i);  }	      	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
148	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.skip();  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.skip();  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.skip();  }	      	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
149	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.skip(available);  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.skip(available);  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.skip(available);  }	      	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
150	[BUG]  [BUGGY]  return  numToSkip  -  available  +  skip;  [CE]  cannot  find  symbol  skip  [FE]    AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  numToSkip  -  available  +  skip;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  numToSkip  -  available  +  skip;	  return    numToSkip    -    available;    	non-compiled	[CE]  cannot  find  symbol  skip	11	None	replace
151	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  -(numToSkip  *  numToSkip);  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  available  -(numToSkip  *  numToSkip);	  return    available    +    numToSkip;    	compilable	  [FE]  AssertionError  	7	2	replace
152	[BUG]  [BUGGY]  return  available  -(numToSkip  *  numToSkip);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  -(numToSkip  *  numToSkip);  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -(numToSkip  *  numToSkip);	  return    available    +    numToSkip;    	compilable	  [FE]  AssertionError  	7	2	replace
153	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  -(numToSkip  +  available);  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  available  -(numToSkip  +  available);	  return    available    +    numToSkip;    	compilable	  [FE]  AssertionError  	7	3	replace
154	[BUG]  [BUGGY]  return  available  -(numToSkip  +  available);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  -(numToSkip  +  available);  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -(numToSkip  +  available);	  return    available    +    numToSkip;    	compilable	  [FE]  AssertionError  	7	3	replace
155	[BUG]  [BUGGY]  return  available  -  skipped  *  SKIP_BUF_SIZE;  [CE]  cannot  find  symbol  skipped  [FE]        AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  -  skipped  *  SKIP_BUF_SIZE;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  -  skipped  *  SKIP_BUF_SIZE;	  return    available    -    skipped;    	non-compiled	[CE]  cannot  find  symbol  skipped	1	None	replace
156	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  *  numToSkip  -  1;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	add	return  available  *  numToSkip  -  1;	  return    available    *    numToSkip;    	compilable	  [FE]  AssertionError  	5	3	replace
157	[BUG]  [BUGGY]  return  available  *  numToSkip  -  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  *  numToSkip  -  1;  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return  available  *  numToSkip  -  1;	  return    available    *    numToSkip;    	compilable	  [FE]  AssertionError  	5	3	replace
158	[BUG]  [BUGGY]  return  available  +  numToSkip;  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  +  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  +  numToSkip;  if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  +  numToSkip;  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    +    numToSkip;    if(available  <  numToSkip)  {  if(skipped  >  0)  {  return  available  +  numToSkip;  }	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
159	[BUG]  [BUGGY]  return  available  +  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  +  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    +    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
160	[BUG]  [BUGGY]  return  available  +  numToSkip;  if(available  <  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  +  numToSkip;  if(available  <  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    +    numToSkip;    if(available  <  numToSkip)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
161	[BUG]  [BUGGY]  return  available  +  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  +  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    +    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
162	[BUG]  [BUGGY]  return  available  +  numToSkip;  if(available  <  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  +  numToSkip;  if(available  <  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    +    numToSkip;    if(available  <  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
163	[BUG]  [BUGGY]  return  available  +  numToSkip;  if(available  >  numToSkip)  {  available  +  numToSkip;  }  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  +  numToSkip;  if(available  >  numToSkip)  {  available  +  numToSkip;  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    +    numToSkip;    if(available  >  numToSkip)  {  available  +  numToSkip;  }	  	non-compiled	[CE]  not  a  statement	6	None	add
164	[BUG]  [BUGGY]  return  available  *  numToSkip;  if(available  >  numToSkip)  {  if(skipped  >  0)  {  return  available  *  numToSkip;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  *  numToSkip;  if(available  >  numToSkip)  {  if(skipped  >  0)  {  return  available  *  numToSkip;  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip;    if(available  >  numToSkip)  {  if(skipped  >  0)  {  return  available  *  numToSkip;  }	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
165	[BUG]  [BUGGY]  return  available  *  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  *  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
166	[BUG]  [BUGGY]  return  available  *  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  *  numToSkip;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip;    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available.size();  ++i)  {  input.close();  }	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
167	[BUG]  [BUGGY]  return  available  *  numToSkip;  System.arraycopy(input,  numToSkip,  available,  0);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  *  numToSkip;  System.arraycopy(input,  numToSkip,  available,  0);  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip;    System.arraycopy(input,  numToSkip,  available,  0);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	4	None	add
168	[BUG]  [BUGGY]  return  available  *  numToSkip;  System.arraycopy(input,  numToSkip,  available,  numToSkip);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]            AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  available  *  numToSkip;  System.arraycopy(input,  numToSkip,  available,  numToSkip);  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    available    *    numToSkip;    System.arraycopy(input,  numToSkip,  available,  numToSkip);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	4	None	add
169	[BUG]  [BUGGY]  return  numToSkip  -  available;  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  numToSkip  -  available;  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    -    available;    if(available  >  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
170	[BUG]  [BUGGY]  return  numToSkip  -  available;  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  numToSkip  -  available;  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    -    available;    if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
171	[BUG]  [BUGGY]  return  numToSkip  -  available;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  numToSkip  -  available;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    -    available;    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  input.close();  }	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
172	[BUG]  [BUGGY]  return  numToSkip  -  available;  if(available  <  =  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  numToSkip  -  available;  if(available  <  =  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    -    available;    if(available  <  =  0)  {  for(int  i  =  0;  i  <  available;  i++)  {  input.close();  }	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
173	[BUG]  [BUGGY]  return  numToSkip  -  available;  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  numToSkip  -  available;  if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    -    available;    if(available  >  0)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
174	[BUG]  [BUGGY]  return  numToSkip  -  available;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    public  static  long  skip(InputStream  input,  long  numToSkip)  throws  IOException  {  long  available  =  numToSkip;  while  (numToSkip  >  0)  {  long  skipped  =  input.skip(numToSkip);  if  (skipped  ==  0)  {  break;  }  numToSkip  -=  skipped;  }    [BUGGY]  return  numToSkip  -  available;  if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }  [BUGGY]    }  [CLASS]  IOUtils  [METHOD]  skip  [RETURN_TYPE]  long  InputStream  input  long  numToSkip  [VARIABLES]  boolean  int  COPY_BUF_SIZE  SKIP_BUF_SIZE  buffersize  n  InputStream  input  long  available  numToSkip  skipped  	projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java	0.8164965809277261	104	104	2	replace	return    numToSkip    -    available;    if(available  >  numToSkip)  {  for(int  i  =  0;  i  <  available;  ++i)  {  available  +=  input.read();  }	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
