projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available-numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-skipped+numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-skip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip;InputStreamavailable=input.readInput();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip;intnumToSkip=input.read();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip;intnumToSkip=input.readInt();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip;intnumToSkip=input.read(available);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip;intnumToSkip=input.length();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip;intnumToSkip=input.readLine();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip;longnumToSkip=input.readLine();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip;numToSkip=input.read();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=input.available-numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=input.availableToInt()-numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104intavailable=available-numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=skipped-numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=output.available-numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip-skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip/numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+1;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+skip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip+skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable%numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip-skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/(numToSkip+skipped);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*(numToSkip-available);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip/available;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available;numToSkip-=available;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available;numToSkip-available;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available;InputStreamavailable=input.readInput();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available;if(available>0){for(intnumToSkip=available;numToSkip<0;numToSkip++){available+=numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available;if(available>0){for(inti=available;i<numToSkip;i++){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available;if(available>0){for(inti=available;i<numToSkip;i++){available+=input.length();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available;if(available>0){for(inti=available;i<numToSkip;i++){available+=input.getBytes(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available;if(available>0){for(inti=available;i<numToSkip;i++){available+=input.getChars(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-skipd;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-skipped.longValue();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-skipped.longValue;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-skipped.length;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-skipped+this.buffersize;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip+numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip*numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-skip+numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip+available;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailablenumToSkip-numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available+1;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available*numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available+skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-skipped+1;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-this.skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104for(inti=available;i<numToSkip;i++){if(available>0){break;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>0){for(inti=available;i<numToSkip;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>0){for(inti=available;i<numToSkip;i++){input.skip(available+i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>0){for(inti=available;i<numToSkip;i++){available+=input.length();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip;if(available<numToSkip){if(skipped>0){returnavailable*numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip;InputStreamavailable=input.readInput();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip;if(available>numToSkip){for(inti=0;i<available.size();i++){available*numToSkip+=i;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available*numToSkip+=skipped;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available*numToSkip+=i;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.length();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available*numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip;intnumToSkip=available*numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip;InputStreamavailable=input.readInput();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip;if(available<numToSkip){if(skipped>0){returnavailable/numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.length();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.getChars(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.getBytes(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=i;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip;if(available<numToSkip){if(skipped>0){thrownewIllegalArgumentException("");}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip;System.arraycopy(input,0,available,numToSkip,0);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip;if(available>numToSkip){for(inti=0;i<available;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip;intnumToSkip=input.read();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip;if(available>numToSkip){for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip;if(available>numToSkip){for(inti=0;i<available;i++){available+=input.next();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.getBytes(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip.longValue();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/skipped+numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip;System.arraycopy(input,0,available,numToSkip,0);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip;if(available>numToSkip){for(inti=0;i<available;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip;intnumToSkip=input.read();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip;if(available>numToSkip){for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip;if(available>numToSkip){for(inti=available;i<numToSkip;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){for(inti=available;i<numToSkip;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){for(inti=available;i<numToSkip;i++){input.skip(available+i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){for(inti=available;i<numToSkip;i++){input.reset();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){for(inti=available;i<numToSkip;i++){input.skip(available);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){for(inti=available;i<numToSkip;i++){input.write(available);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>0){for(inti=available;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=this.available-numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-input.skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available-numToSkip){numToSkip-=available;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104numToSkip-=available;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available;if(available>0){for(inti=available;i<numToSkip;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available;if(available>0){for(inti=available;i<numToSkip;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available;if(available>numToSkip){for(inti=available;i<numToSkip;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available;if(available>numToSkip){for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.getRead();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.getBytes(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.next();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-skipped*numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-input.getSize();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-input.getShortValue();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+i+=skipped;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip;if(available>numToSkip){if(skipped>0){returnavailable+numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip;if(available>numToSkip){for(inti=available;i<numToSkip;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip;if(available>numToSkip){for(inti=0;i<available;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip;InputStreamavailable=input.getInputStream();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip;System.arraycopy(input,numToSkip,available,0);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip;if(available>numToSkip){for(inti=0;i<available;++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip;if(available>numToSkip){for(inti=0;i<available.size();++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip;if(available<numToSkip){if(skipped>0){returnavailable;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip;if(available>numToSkip){for(inti=0;i<available;++i){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip;System.arraycopy(input,numToSkip,available,0);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available-skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available/numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-input.getChars(0,numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-input.getChars(numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-input.readLine();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip+skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip-skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip+1;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip+skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returninput.readLine();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){for(inti=0;i<available;++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>0){for(inti=0;i<available;++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){for(inti=0;i<available;++i){input.skip(available+i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){for(inti=0;i<available;++i){input.skip();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){for(inti=0;i<available;++i){input.skip(available);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available+skip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-(numToSkip*numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-(numToSkip+available);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-skipped*SKIP_BUF_SIZE;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip-1;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip;if(available<numToSkip){if(skipped>0){returnavailable+numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip;if(available>numToSkip){for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip;if(available<numToSkip){for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip;if(available>numToSkip){for(inti=0;i<available.size();++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip;if(available<numToSkip){for(inti=0;i<available.size();++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip;if(available>numToSkip){available+numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip;if(available>numToSkip){if(skipped>0){returnavailable*numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip;if(available>numToSkip){for(inti=0;i<available;++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip;if(available>numToSkip){for(inti=0;i<available.size();++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip;System.arraycopy(input,numToSkip,available,0);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip;System.arraycopy(input,numToSkip,available,numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available;if(available>0){for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available;if(available>0){for(inti=0;i<available;++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available;if(available>numToSkip){for(inti=0;i<available;++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available;if(available<=0){for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available;if(available>0){for(inti=0;i<available;++i){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available;if(available>numToSkip){for(inti=0;i<available;++i){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104for(inti=available;i<numToSkip;i++){input.skip(available+i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104For(inti=available;i<numToSkip;i++){input.skip(available+i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>numToSkip){for(inti=available;i<numToSkip;i++){input.skip(available+i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104for(inti=available;i<numToSkip;i++){input.seek(available+i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>numToSkip){for(inti=available;i<numToSkip;i++){skipped=input.skip(available+i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>numToSkip){for(inti=available;i<numToSkip;i++){input.skip(skipped+i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=skipped;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip/numToSkip;if(available>0){for(inti=0;i<available;++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available/numToSkip;if(available>numToSkip){for(inti=0;i<available;++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip/numToSkip;if(available<=0){for(inti=0;i<available;++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available/numToSkip;if(available<numToSkip){for(inti=0;i<available;++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip/numToSkip;if(available>=numToSkip){for(inti=0;i<available;++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+i+=skipped;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available<numToSkip){returnavailable+numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available<numToSkip){returnavailable+numToSkip;}else{for(inti=available;i<numToSkip;i++){available+i+=skipped;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=skipped;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=input.skip(numToSkip);if(available<0){for(inti=available;i<numToSkip;i++){available+i+=skipped;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+i+=skipd;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=input.skip(numToSkip);if(available>0){for(inti=available;i<0;i++){available+i+=skipped;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-output.available;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=input.available/numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104intavailable=input.available-numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104intavailable=output.available-numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-input.available;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104for(inti=0;i<available;++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>numToSkip){for(inti=0;i<available;++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>numToSkip){for(inti=0;i<available;++i){input.flush();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>numToSkip){for(inti=0;i<available;++i){output.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>numToSkip){for(inti=0;i<available.length;++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>numToSkip){for(inti=0;i<available;++i){in.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104for(inti=available;i<numToSkip;i++){if(skipped>0){break;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104for(inti=available;i<numToSkip;i++){if(skip>0){break;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104for(inti=available;i>=numToSkip;i++){if(available>0){break;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104for(inti=available;i<numToSkip;i++){if(skipped>=0){break;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104for(inti=0;i<available;i++){if(available>0){break;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104for(inti=available;i<numToSkip;i++){if(skip==0){break;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>0){for(inti=available;i<numToSkip;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104for(inti=available;i<numToSkip;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104For(inti=available;i<numToSkip;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(numToSkip>0){for(inti=available;i<numToSkip;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>0){for(inti=available;i<numToSkip;i++){skipped=input.skip(numToSkip);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>0){for(inti=available.size();i<numToSkip;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>0){for(inti=available;i<numToSkip;i++){input.flush();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip/available;numToSkip/available;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip/available;if(available>0){for(inti=available;i<numToSkip;i++){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip/available;if(available>0){for(inti=available;i<numToSkip;i++){available+=input.length();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip/available;InputStreamavailable=input.readInput();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip/available;if(available<numToSkip){for(inti=available;i<numToSkip;i++){available+=input.length();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip/available;if(available>0){for(inti=available;i<numToSkip;i++){available+=input.getBytes(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip/available;if(available>0){for(inti=available;i<numToSkip;i++){available+=input.getChars(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip/available;if(available<numToSkip){for(inti=available;i<numToSkip;i++){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip;numToSkip-=numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available;numToSkip-=skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available<numToSkip){returnnumToSkip-available;numToSkip-=available;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104intnumToSkip=available;numToSkip-=numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available<numToSkip){returnnumToSkip-available;numToSkip-=available;}else{thrownewIllegalArgumentException("");}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;numToSkip-=available;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-skipd*numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numtoSkip*numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip/numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-skip*numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip.length;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-input.length;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-skip.length;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-skipd.length;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-skipped.length+1;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available*numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longnumToSkip=available*numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip*available;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104numToSkip*=available;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available*numToSkip;for(inti=0;i<available;++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){for(inti=0;i<available;++i){input.flush();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){for(inti=0;i<available;++i){input.skip(numToSkip);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip+available;InputStreamavailable=input.readInput();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip+available;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.getBytes(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip+available;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.getChars(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip+available;if(available>numToSkip){for(inti=0;i<available.size();i++){available+=input.getValue(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip+available;if(available<numToSkip){for(inti=0;i<available.size();i++){available+=input.getBytes(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip+available;if(available<numToSkip){for(inti=0;i<available.size();i++){available+=input.getChars(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip+available;if(available>numToSkip){for(inti=0;i<available.size();i++){available+=input.getBytes(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip+available;if(available>numToSkip){for(inti=0;i<available.size();i++){available+=input.getChars(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>numToSkip){for(inti=available;i<numToSkip;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>numToSkip){for(inti=available;i<numToSkip;i++){skipped=input.skip(numToSkip);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>numToSkip){for(inti=available;i<numToSkip;i++){input.flush();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>numToSkip){for(inti=available;i<numToSkip;i++){output.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104for(inti=available;i<numToSkip;i++){input.flush();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=input.available-skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available-skipped+1;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104intavailable=available-skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=this.available-skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=skipped-available;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(available>0){for(inti=available;i<numToSkip;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104for(inti=available;i<numToSkip;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(available<0){for(inti=available;i<numToSkip;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(available>=0){for(inti=available;i<numToSkip;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(available>0){for(longi=available;i<numToSkip;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(available==0){for(inti=available;i<numToSkip;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104numToSkip=available/numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longnumToSkip=available/numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104numToSkip=available*numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip/numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available/numToSkip;if(available<0){for(inti=available;i<numToSkip;i++){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available<numToSkip){returnavailable/numToSkip;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available/numToSkip;if(available>=0){for(inti=available;i<numToSkip;i++){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available*numToSkip;if(available<numToSkip){for(inti=available;i<numToSkip;i++){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available<numToSkip){returnavailable/numToSkip;}else{for(inti=available;i<numToSkip;i++){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available/numToSkip;if(available>0){for(inti=available;i<numToSkip;i++){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-this.available;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104intavailable=this.available-numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=this.available/numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip+skip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip+input.length;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip+offset;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip/numToSkip;if(available<numToSkip){if(skipped>0){returnavailable*numToSkip/numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip/numToSkip;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available*numToSkip/numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip/numToSkip;if(available>numToSkip){if(skipped>0){returnavailable*numToSkip/numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip/numToSkip;if(available>numToSkip){if(skipped>=0){returnavailable*numToSkip/numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip/numToSkip;if(available>numToSkip){for(inti=0;i<available;i++){available*numToSkip/numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip/numToSkip;InputStreamavailable=input.readInput();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip/numToSkip;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available*numToSkip-=numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip/numToSkip;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available*numToSkip+=numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-(numToSkip*numToSkip);InputStreamavailable=input.readInput();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-(numToSkip*numToSkip);if(available>0){for(intnumToSkip=available;numToSkip<0;numToSkip+=numToSkip;numToSkip+=numToSkip);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-(numToSkip*numToSkip);if(available>0){for(intnumToSkip=available;numToSkip<0;numToSkip++){available+=numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-(numToSkip*numToSkip);if(available>0){for(inti=available;i<numToSkip;i++){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-(numToSkip*numToSkip);if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-(numToSkip*numToSkip);if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.getBytes(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-(numToSkip*numToSkip);if(available>0){for(inti=available;i<numToSkip;i++){available+=input.length();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-(numToSkip*numToSkip);if(available>0){for(inti=available;i<numToSkip;i++){available+=input.getBytes(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104System.arraycopy(input,numToSkip,available,numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip,skipped;System.arraycopy(input,numToSkip,available,numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104numToSkip*=numToSkip;System.arraycopy(input,numToSkip,available,numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+1;System.arraycopy(input,numToSkip,available,numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104numToSkip*=available;System.arraycopy(input,numToSkip,available,numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104intnumToSkip=input.readInt();System.arraycopy(input,numToSkip,available,numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returninput*numToSkip;System.arraycopy(input,numToSkip,available,numToSkip,skipped);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104InputStreamavailable=input.readInput();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available<numToSkip){returnavailable/numToSkip;InputStreamavailable=input.readInput();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available<numToSkip){returnavailable/numToSkip;InputStreamavailable=input.readInput();}else{skip(input,numToSkip);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available<numToSkip){returnavailable/numToSkip;InputStreamavailable=input.readInput();}else{skip(input,numToSkip+skipped);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104numToSkip=available*numToSkip;InputStreamavailable=input.readInput();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available<numToSkip){returnavailable/numToSkip;InputStreamavailable=input.readInput();}else{skip(input,numToSkip,skipped);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available<numToSkip){returnavailable/numToSkip;}else{available=input.readInput();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip+1;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available*1;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available+1L;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailablenumToSkip-available+1;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104for(inti=0;i<available;++i){input.skip(available+i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>numToSkip){for(inti=0;i<available;++i){input.skip(available+i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104For(inti=0;i<available;++i){input.skip(available+i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>numToSkip){for(inti=0;i<available;++i){available+=skipped;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>numToSkip){for(inti=0;i<available;++i){skipped=input.skip(available+i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>numToSkip){for(inti=0;i<available;++i){available+=i;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>numToSkip){for(inti=0;i<available;++i){available+=input.length();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available<numToSkip){returnnumToSkip-available;if(available>numToSkip){for(inti=0;i<available;++i){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){for(inti=0;i<available;++i){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(numToSkip>0){returnavailable-numToSkip;}elseif(available>numToSkip){for(inti=0;i<available;++i){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(available>0){for(inti=0;i<available;++i){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available<numToSkip){returnnumToSkip-available;}else{for(inti=0;i<available;++i){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(available<0){for(inti=0;i<available;++i){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available<0){returnnumToSkip-available;if(available>0){for(inti=0;i<available;++i){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(available>=0){for(inti=0;i<available;++i){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104for(inti=0;i<available;++i){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(available>0){for(longi=0;i<available;++i){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip/skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available.longValue();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnthis.numToSkip-available;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(available>numToSkip){for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(available>0){for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(numToSkip>0){returnavailable-numToSkip;}elseif(available>numToSkip){for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(available<0){for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104intavailable=numToSkip-available;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.getRead();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(numToSkip>0){returnavailable-numToSkip;}elseif(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.getRead();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(available>0){for(inti=available;i<0;i++){available+=input.getRead();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(available<0){for(inti=available;i<numToSkip;i++){available+=input.getRead();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(numToSkip>0){returnavailable-numToSkip;}elseif(skipped>0){for(inti=available;i<numToSkip;i++){available+=input.getRead();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(numToSkip>0){returnavailable-numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104numToSkip=available+numToSkip;InputStreamavailable=input.readInput();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104numToSkip+=available;InputStreamavailable=input.readInput();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104intnumToSkip=input.readInput();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104intnumToSkip=available+numToSkip;InputStreamavailable=input.readInput();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available<numToSkip){if(skipped>0){returnavailable*numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available*numToSkip;if(available<numToSkip){if(skipped>0){returnavailable*numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available*numToSkip;if(skipped<0){returnavailable*numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available*numToSkip;if(skipped>0){returnavailable*numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available*numToSkip;if(available<0){if(skipped>0){returnavailable*numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available<numToSkip){for(inti=0;i<available.size();++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104for(inti=0;i<available.size();++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available+numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available<numToSkip){returnavailable+numToSkip;for(inti=0;i<available.size();++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available+numToSkip;for(inti=0;i<available.size();++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available<numToSkip){returnavailable+numToSkip;}else{for(inti=0;i<available.size();++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available+1;numToSkip-=available+1;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available+1;if(available>0){for(inti=available;i<numToSkip;i++){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available+1;InputStreamavailable=input.readInput();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available+1;if(available>0){for(intnumToSkip=available;numToSkip<0;numToSkip++){available+=numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available+1;if(available>0){for(inti=available;i<numToSkip;i++){available+=input.length();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available+1;if(available>0){for(inti=available;i<numToSkip;i++){available+=i;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available+1;if(available>0){for(inti=available;i<numToSkip;i++){available+=input.getChars(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available+1;if(available>0){for(inti=available;i<numToSkip;i++){available+=input.getBytes(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip;System.arraycopy(input,numToSkip,available,0,skipped);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104System.arraycopy(input,numToSkip,available,0);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip,skipped;System.arraycopy(input,numToSkip,available,0);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+1;System.arraycopy(input,numToSkip,available,0);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104numToSkip*=numToSkip;System.arraycopy(input,numToSkip,available,0);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip;System.arraycopy(input,numToSkip,available,0,numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip*available;System.arraycopy(input,numToSkip,available,0,numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104for(inti=available;i<numToSkip;i++){available+=input.length();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>0){for(inti=available;i<numToSkip;i++){available+=input.length();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104For(inti=available;i<numToSkip;i++){available+=input.length();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(numToSkip>0){for(inti=available;i<numToSkip;i++){available+=input.length();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>0){available+=input.length();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>0){for(inti=0;i<numToSkip;i++){available+=input.length();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>0){for(inti=available.length;i<numToSkip;i++){available+=input.length();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){if(skipped>0){returnavailable+numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available<numToSkip){if(skipped>0){returnavailable+numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(numToSkip>0){returnavailable+numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){if(skipped<0){returnavailable+numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(numToSkip>available){returnavailable+numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=input.skip(numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=input.getLength();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(numToSkip<available){returnavailable-numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104intnumToSkip=input.read();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longnumToSkip=input.read();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104IntegernumToSkip=input.read();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104numToSkip=input.read();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104IntnumToSkip=input.read();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104shortnumToSkip=input.read();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available<numToSkip){for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available<numToSkip){returnavailable+numToSkip;for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available<numToSkip){returnavailable+numToSkip;}else{for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available+numToSkip;for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip+available;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104for(inti=0;i<available;++i){input.skip();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>numToSkip){for(inti=0;i<available;++i){input.skip();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>numToSkip){for(inti=0;i<available;++i){skipped=input.skip(numToSkip);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>numToSkip){for(inti=0;i<available;++i){skipped=input.skip();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>numToSkip){for(inti=0;i<available;++i){output.skip();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>numToSkip){for(inti=0;i<available;++i){in.skip();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip*SKIP_BUF_SIZE;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-skipd*SKIP_BUF_SIZE;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip*SKIP_BUF_SIZE;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-skipped*SKIP_BUF_SIZE+numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-(numToSkip+available);InputStreamavailable=input.readInput();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-(numToSkip+available);if(available>0){for(intnumToSkip=available;numToSkip<0;numToSkip++){available+=numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-(numToSkip+available);if(available>0){for(inti=available;i<numToSkip;i++){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-(numToSkip+available);if(available>0){for(inti=available;i<numToSkip;i++){available+=input.getChars(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-(numToSkip+available);if(available>0){for(inti=available;i<numToSkip;i++){available+=input.getBytes(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-(numToSkip+available);if(available>0){for(intnumToSkip=available;numToSkip<0;numToSkip++){available+=input.getChars(numToSkip);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-(numToSkip+available);if(available>0){for(inti=available;i<numToSkip;i++){available+=input.next();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-(numToSkip+available);if(available>0){for(intnumToSkip=available;numToSkip<0;numToSkip+=available.length);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available+numToSkip;if(available>numToSkip){for(inti=0;i<available.size();++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available+numToSkip;if(available>0){for(inti=0;i<available.size();++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104numToSkip=available+numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(available>0){for(inti=available;i<numToSkip;i++){available+=input.length();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(available<0){for(inti=available;i<numToSkip;i++){available+=input.length();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(available>=0){for(inti=available;i<numToSkip;i++){available+=input.length();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(available>0){for(longi=available;i<numToSkip;i++){available+=input.length();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(available==0){for(inti=available;i<numToSkip;i++){available+=input.length();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available+numToSkip;if(available>numToSkip){for(inti=available;i<numToSkip;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available+numToSkip;for(inti=available;i<numToSkip;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available+numToSkip;if(available>0){for(inti=available;i<0;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available+numToSkip;if(available<0){for(inti=available;i<numToSkip;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available+numToSkip;for(inti=0;i<numToSkip;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip-1;if(available<numToSkip){if(skipped>0){returnavailable*numToSkip-1;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip-1;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available*numToSkip-1;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip-1;if(available>numToSkip){for(inti=0;i<available.size();i++){available*numToSkip-1;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip-1;InputStreamavailable=input.readInput();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip-1;if(available>numToSkip){for(inti=0;i<available.size();i++){available*numToSkip-=i;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip-1;if(available>numToSkip){for(inti=0;i<available;i++){available*numToSkip-=i;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip-1;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available*numToSkip-=i;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip-1;if(available>numToSkip){for(inti=0;i<available;i++){available*numToSkip-1;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/(numToSkip+skip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/(numToSkip+SKIP_BUF_SIZE);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/(numToSkip+SKIP_BUFFER_SIZE);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/(numToSkip+input.length);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/(numToSkip+SKIT_BUFFER_SIZE);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/(numToSkip+1);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(available>0){for(inti=0;i<available;++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(available<0){for(inti=0;i<available;++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(available>=0){for(inti=0;i<available;++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(available>0){for(longi=0;i<available;++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(skipped>0){for(inti=0;i<available;++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(available==0){for(inti=0;i<available;++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip/available;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=input.availableToSkip-numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-skip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip.longValue();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-input.longValue();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-skip.longValue();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-this.available.longValue();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-selected.longValue();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-available.longValue();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){for(inti=0;i<available;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104for(inti=0;i<available;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available<numToSkip){returnavailable+numToSkip;}else{for(inti=0;i<available;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=input.skip(numToSkip);if(available>0){for(inti=0;i<available;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=input.skip(numToSkip);if(available<0){for(inti=0;i<available;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available.longValue();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-skipped.getSize();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/input.getSize();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-input.getMillis();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-input.getSize()+skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-input.getLength();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104for(inti=available;i<numToSkip;i++){input.skip(available);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104for(inti=available;i<numToSkip;i++){input.skip(skipped);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>numToSkip){for(inti=available;i<numToSkip;i++){input.skip(available);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>numToSkip){for(inti=available;i<numToSkip;i++){input.skip(skipped);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104for(inti=available;i<numToSkip;i++){input.skip(0);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104for(inti=available;i<numToSkip;i++){input.skip(0L);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104intnumToSkip=input.readInt();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longnumToSkip=input.readInt();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104IntegernumToSkip=input.readInt();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104numToSkip=input.readInt();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104IntnumToSkip=input.readInt();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available/numToSkip;if(available<numToSkip){if(skipped>0){returnavailable;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available<numToSkip){if(skipped>0){returnavailable;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available/numToSkip;if(available<0){if(skipped>0){returnavailable;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip/numToSkip;if(available<numToSkip){if(skipped>0){returnavailable;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available/numToSkip;if(skipped<0){returnavailable;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip/numToSkip;if(available<0){if(skipped>0){returnavailable;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available*numToSkip;if(available>numToSkip){if(skipped>0){returnavailable*numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available<numToSkip){returnavailable*numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available*numToSkip;if(available>0){if(skipped>0){returnavailable*numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available<numToSkip){returnavailable/numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available<numToSkip){returnavailable*numToSkip;}else{for(inti=available;i<numToSkip;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available*numToSkip;for(inti=0;i<numToSkip;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available<numToSkip){returnavailable*numToSkip;for(inti=available;i<numToSkip;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available*numToSkip;for(inti=0;i<numToSkip;i++){available+=input.length();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available*numToSkip;for(inti=available;i<numToSkip;i++){available+=input.length();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip*available;for(inti=available;i<numToSkip;i++){available+=input.length();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip.longValue;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-input.longValue;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-skip.longValue;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-selected.longValue;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(available>0){for(inti=available;i<numToSkip;i++){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(available<0){for(inti=available;i<numToSkip;i++){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(available>=0){for(inti=available;i<numToSkip;i++){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104for(inti=available;i<numToSkip;i++){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(skipped>0){for(inti=available;i<numToSkip;i++){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(available==0){for(inti=available;i<numToSkip;i++){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(available<=0){for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(available>=0){for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available<=0){returnnumToSkip-available;}else{for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(available==0){for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longnumToSkip=input.skip(numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longnumToSkip=available.longValue();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip+numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip+skip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-skip+1;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-skipd+1;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-skipped+1L;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-skipped+2;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available<numToSkip){if(skipped>0){returnavailable/numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available/numToSkip;if(available<numToSkip){if(skipped>0){returnavailable/numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available.length/numToSkip;if(available<numToSkip){if(skipped>0){returnavailable/numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available/numToSkip;if(available<numToSkip){if(skipped>0){returnavailable*numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available/numToSkip;if(available<0){if(skipped>0){returnavailable/numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available<numToSkip){if(skipped>=0){returnavailable/numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip-skip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/skipped-numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip-skipped.longValue();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip-skipped+1;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip-skipped.length;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailablenumToSkip-skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailablenumToSkip/numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip-numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailablenumToSkip*numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available-skipped){numToSkip-=available;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){while(available-numToSkip){numToSkip-=available;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(numToSkip-available){numToSkip-=available;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){numToSkip-=available;}else{System.arraycopy(input,0,numToSkip,available,numToSkip);numToSkip-=numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){numToSkip-=available;}else{System.arraycopy(input,numToSkip,available,numToSkip);numToSkip-=numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){numToSkip-=available;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104intavailable=skipped-numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=skipped-numToSkip+1;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable%numToSkip;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable%numToSkip;InputStreamavailable=input.readInput();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable%numToSkip;if(available>numToSkip){for(inti=available;i>=0;i--){available+=numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable%numToSkip;if(available>numToSkip){for(inti=0;i<available;i++){available+=numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable%numToSkip;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.length;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable%numToSkip;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.length();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable%numToSkip;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.getBytes(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable%numToSkip;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.getChars(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(available>0){for(intnumToSkip=available;numToSkip<0;numToSkip++){available+=numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104for(intnumToSkip=available;numToSkip<0;numToSkip++){available+=numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(available<0){for(intnumToSkip=available;numToSkip<0;numToSkip++){available+=numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(available>0){for(longnumToSkip=available;numToSkip<0;numToSkip++){available+=numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(available>=0){for(intnumToSkip=available;numToSkip<0;numToSkip++){available+=numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=input.skip(numToSkip);if(available>0){for(intnumToSkip=available;numToSkip<0;numToSkip++){available+=numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available<numToSkip){returnnumToSkip-available;}elseif(available>numToSkip){for(inti=available;i<numToSkip;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available<numToSkip){returnnumToSkip-available;}else{for(inti=available;i<numToSkip;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(available>numToSkip){for(inti=available;i<numToSkip;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(available>0){for(inti=available;i<0;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(available>0){for(inti=available;i<numToSkip;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+numToSkip;if(available<numToSkip){if(skipped>0){returnavailable*numToSkip+numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+numToSkip;InputStreamavailable=input.readInput();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+numToSkip;if(available>numToSkip){if(skipped>0){returnavailable*numToSkip+numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+numToSkip;if(available>numToSkip){if(skipped>=0){returnavailable*numToSkip+numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+numToSkip;if(available<numToSkip){if(skipped>=0){returnavailable*numToSkip+numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+numToSkip;if(available>numToSkip){if(skipped<0){returnavailable*numToSkip+numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+numToSkip;intnumToSkip=input.read();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+numToSkip;intnumToSkip=input.readInt();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip/skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*skipped/numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+skipped/numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip*available/numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+num;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+skip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numtoSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*(numToSkip-available);available*(numToSkip-available);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*(numToSkip-available);InputStreamavailable=input.readInput();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*(numToSkip-available);System.arraycopy(input,numToSkip,available,numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*(numToSkip-available);System.arraycopy(input,numToSkip,available,0);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*(numToSkip-available);if(available>0){for(inti=available;i<numToSkip;i++){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*(numToSkip-available);if(available>0){for(inti=available;i<numToSkip;i++){available+=input.getChars(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*(numToSkip-available);System.arraycopy(input,0,available,numToSkip,numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*(numToSkip-available);if(available>0){for(inti=available;i<numToSkip;i++){available+=input.getBytes(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>0){for(inti=0;i<available;++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104For(inti=0;i<available;++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>0){for(inti=0;i<available;++i){input.flush();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>0){for(inti=0;i<available;++i){output.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>0){for(inti=0;i<available.length;++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104for(inti=0;i<available;++i){input.flush();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*skipped+numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip+numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip+numtoSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip/numToSkip;if(available>0){for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available/numToSkip;if(available>numToSkip){for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip/numToSkip;if(available<=0){for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip/numToSkip;if(available>=numToSkip){for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip/numToSkip;if(available>numToSkip){for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104LongnumToSkip=input.read();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104intnumToSkip=input.length();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longnumToSkip=input.length();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104IntegernumToSkip=input.length();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104IntnumToSkip=input.length();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104numToSkip=input.length();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-(numToSkip+skipped);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-(available+numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-(available*numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*(numToSkip+available);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-(numToSkip*available);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/(numToSkip+available);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip*numToSkip;InputStreamavailable=input.readInput();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip*numToSkip;if(available<numToSkip){if(skipped>0){returnavailable-numToSkip*numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip*numToSkip;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip*numToSkip;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.length();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip*numToSkip;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip*numToSkip;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.getBytes(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip*numToSkip;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.getChars(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip*numToSkip;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.next();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/SHORT_SIZE;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/skip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/SHORT_NUMBER;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104for(inti=available;i<numToSkip;i++){available+=input.getBytes(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available<numToSkip){returnavailable*numToSkip;}else{for(inti=available;i<numToSkip;i++){available+=input.getBytes(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available*numToSkip;for(inti=0;i<numToSkip;i++){available+=input.getBytes(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=input.availableToInt()-skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=input.availableToInt()/numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=input.availableToInt()*numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=input.availableToLong()-numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104intavailable=input.availableToInt()-numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=input.availableToInt()+numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=input.availableToInt()-skipped,numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-input.skipped+skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-skipped.skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-input.skipped+skip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-skip+this.buffersize;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-skipped*this.buffersize;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-this.numToSkip+this.buffersize;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*this.buffersize+this.buffersize;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-skipped+this.buffersize,numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-skipped+this.bufferSize;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable.readLine();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returninput.readLine()-numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable?input.readLine():numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returninput.readLine()-skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returninput.readLine()+skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable?input.readLine():0;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104InputStreamavailable=input.getInputStream();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){returnavailable+numToSkip;InputStreamavailable=input.getInputStream();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){returnavailable+numToSkip;}else{available=input.getInputStream();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104numToSkip=available+numToSkip;InputStreamavailable=input.getInputStream();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104numToSkip+=available;InputStreamavailable=input.getInputStream();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){returnavailable+numToSkip;InputStreamavailable=input.getInputStream();}else{skip(input,numToSkip);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){returnavailable+numToSkip;InputStreamavailable=input.getInputStream();}else{skip(input,skipped);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(available>numToSkip){for(inti=0;i<available;++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(numToSkip>0){returnavailable-numToSkip;}elseif(available>numToSkip){for(inti=0;i<available;++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available/numToSkip;if(available<numToSkip){if(skipped>0){thrownewIllegalArgumentException("");}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available<numToSkip){if(skipped>0){thrownewIllegalArgumentException("");}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available/numToSkip;if(available<0){if(skipped>0){thrownewIllegalArgumentException("");}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip/numToSkip;if(available<numToSkip){if(skipped>0){thrownewIllegalArgumentException("");}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available/numToSkip;if(available<numToSkip){if(skipped>=0){thrownewIllegalArgumentException("");}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip+skip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip+input.length;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip+this.buffersize;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip+skipd;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip+1;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip+this.skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-input.getChars(0,skipped);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-input.getChars(0,numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returninput.available-available.getChars(0,numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returninput.getChars(0,numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/input.getChars(0,numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-input.getChars(0,numToSkip+1);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(available<0){for(inti=available;i<numToSkip;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(available>0){for(longi=available;i<numToSkip;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(available>=0){for(inti=available;i<numToSkip;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(skipped>0){for(inti=available;i<numToSkip;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+SKIP_BUF_SIZE;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+input.length;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+this.buffersize;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+input.skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/skipped+1;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip+1L;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip/available+1;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-input.getIntValue();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/input.getShortValue();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-input.getNumberValue();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-input.getLongValue();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*input.getShortValue();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-input.getValue();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104intavailable=numToSkip-numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-input.getLength();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip*numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-input.getOffset();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longnumToSkip=input.readLine();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip;longnumToSkip=input.readLine();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104intnumToSkip=input.readLine();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip;longnumToSkip=input.readLine();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+skipped;longnumToSkip=input.readLine();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104numToSkip=input.readLine();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>0){for(inti=available;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>0){for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104for(inti=available;i<0;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104For(inti=available;i<0;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip/available+skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip/available*numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-skipped.readLine();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-skipped,input.readLine();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returninput.available-available.readLine();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-input.getChars(numToSkip).readLine();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-input.getChars(0,numToSkip).readLine();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/input.readLine();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(numToSkip>0){returnavailable-numToSkip;}elseif(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.next();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=input.skip(numToSkip);if(available>0){for(inti=available;i<numToSkip;i++){available+=input.next();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(available>0){for(inti=available;i<0;i++){available+=input.next();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(numToSkip>0){returnavailable-numToSkip;}else{for(inti=available;i<numToSkip;i++){available+=input.next();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(numToSkip>0){returnavailable-numToSkip;}elseif(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available*numToSkip;for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){for(inti=0;i<available;i++){input.flush();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){for(inti=0;i<available;i++){input.skip(numToSkip);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+available;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip+skipd;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip+available;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip*numToSkip+available;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=input.available-numToSkip+1;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=input.available-numToSkip+skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip/num;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104intavailable=available/numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip/numMillis;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=skipped/numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104System.arraycopy(input,numToSkip,available,0,numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip,skipped;System.arraycopy(input,numToSkip,available,0,numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip,skipped;System.arraycopy(input,numToSkip,available,0);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/skipped;System.arraycopy(input,numToSkip,available,0);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip/available;System.arraycopy(input,numToSkip,available,0,numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){for(inti=0;i<available;i++){available+=input.next();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available*numToSkip;for(inti=0;i<available;i++){available+=input.next();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){returnavailable*numToSkip;}else{for(inti=0;i<available;i++){available+=input.next();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){returnavailable*numToSkip;for(inti=0;i<available;i++){available+=input.next();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){for(inti=0;i<available;i++){available+=input.getValue();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip+input.length;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip+offset;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip+save;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){returnavailable*numToSkip;InputStreamavailable=input.readInput();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104numToSkip*=available;InputStreamavailable=input.readInput();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){returnavailable*numToSkip;InputStreamavailable=input.readInput();}else{skip(input,numToSkip);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){returnavailable*numToSkip;InputStreamavailable=input.readInput();}else{skip(input,numToSkip+skipped);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){returnavailable*numToSkip;InputStreamavailable=input.readInput();}else{skip(input,numToSkip,skipped);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(available>0){for(inti=available;i<numToSkip;i++){available+=input.getBytes(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(available<0){for(inti=available;i<numToSkip;i++){available+=input.getBytes(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(available>=0){for(inti=available;i<numToSkip;i++){available+=input.getBytes(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(available>0){for(longi=available;i<numToSkip;i++){available+=input.getBytes(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(available==0){for(inti=available;i<numToSkip;i++){available+=input.getBytes(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available+numToSkip;if(available<numToSkip){if(skipped>0){returnavailable+numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip;if(available<numToSkip){if(skipped>0){returnavailable+numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available+numToSkip;if(skipped<0){returnavailable+numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available<numToSkip){if(skipped>=0){returnavailable+numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip+numToSkip;InputStreamavailable=input.readInput();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip+numToSkip;if(available<numToSkip){if(skipped>0){returnavailable-numToSkip+numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip+numToSkip;intnumToSkip=input.read();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip+numToSkip;intnumToSkip=input.readInt();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip+numToSkip;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip+numToSkip;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=i;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip+numToSkip;if(available<numToSkip){if(skipped>0){thrownewIllegalArgumentException("");}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip+numToSkip;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.length();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+skipd;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+skipped.longValue();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+input.getCharacterEncoding();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+input.getCharacterIndex();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*(numToSkip-skipped);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/(numToSkip-available);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*(available-numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*(numToSkip/available);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*(available/numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*(numToSkip-skip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-input.getChars(numToSkip,skipped);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-input.getChars(skipped);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returninput.available-available.getChars(numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-input.getChars(numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*input.getChars(numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104IntegernumToSkip=input.readLine();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+skipped;System.arraycopy(input,numToSkip,available,0);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104numToSkip+=available;System.arraycopy(input,numToSkip,available,0);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip;System.arraycopy(input,numToSkip,available,0,skipped);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104for(inti=available;i<numToSkip;i++){input.write(available);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104for(inti=available;i<numToSkip;i++){input.write(skipped);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>numToSkip){for(inti=available;i<numToSkip;i++){input.write(available);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>numToSkip){for(inti=available;i<numToSkip;i++){input.write(skipped);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>numToSkip){for(inti=available;i<numToSkip;i++){input.write(skip);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104for(inti=available;i<numToSkip;i++){input.write(skip);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>numToSkip){for(inti=available;i<numToSkip;i++){input.write(skipped+skipped);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available*numToSkip+1;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailablenumToSkip-available*numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available*numToSkip+skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip*numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip;numToSkip=input.read();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip;numToSkip=input.read();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+skipped;numToSkip=input.read();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip;numToSkip=input.read();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip+available;numToSkip=input.read();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numtoSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*num;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*this.skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip+1;InputStreamavailable=input.readInput();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip+1;if(available<numToSkip){if(skipped>0){returnavailable/numToSkip+1;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip+1;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.length();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip+1;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip+1;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.getChars(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip+1;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.getBytes(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip+1;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.next();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip+1;if(available<numToSkip){if(skipped>0){thrownewIllegalArgumentException("");}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(skipped>0){for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(available>0){for(longi=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available+skipd;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available*skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available*skip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104for(inti=0;i<available;++i){input.skip(available);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>numToSkip){for(inti=0;i<available;++i){input.skip(available);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104For(inti=0;i<available;++i){input.skip(available);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104for(inti=0;i<available;++i){input.skip(skipped);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104for(inti=0;i<available;++i){input.skip(numToSkip);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>numToSkip){for(inti=0;i<available;++i){input.skip(skipped);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>numToSkip){for(inti=0;i<available;++i){available.skip(skipped);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip-1;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip/1;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip-skipped+1;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*skipped-1;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104for(inti=available;i<numToSkip;i++){input.reset();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>numToSkip){for(inti=available;i<numToSkip;i++){input.reset();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>numToSkip){for(inti=available.size();i<numToSkip;i++){input.reset();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>numToSkip){for(inti=available;i<numToSkip;i++){output.reset();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>numToSkip){for(inti=available;i<numToSkip;i++){returninput.reset();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104InputStreaminput=newInputStreamInputStream(available,numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>numToSkip){for(inti=available;i<0;i++){input.reset();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available<numToSkip){returnnumToSkip-available;InputStreamavailable=input.readInput();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available<numToSkip){returnnumToSkip-available;InputStreamavailable=input.readInput();}else{skip(input,numToSkip);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104numToSkip-=available;InputStreamavailable=input.readInput();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available<numToSkip){returnnumToSkip-available;InputStreamavailable=input.readInput();}else{skip(input,numToSkip+skipped);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available<numToSkip){returnnumToSkip-available;InputStreamavailable=input.readInput();}else{skip(input,numToSkip+1);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available<numToSkip){returnnumToSkip-available;InputStreamavailable=input.readInput();}else{thrownewIOException("");}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+1L;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+2;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-skipd+numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104intnumToSkip=input.read(available);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longnumToSkip=input.read(available);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104IntegernumToSkip=input.read(available);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104numToSkip=input.read(available);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104IntnumToSkip=input.read(available);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104shortnumToSkip=input.read(available);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>0){for(inti=available;i<numToSkip;i++){input.skip(available+i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(numToSkip>0){for(inti=available;i<numToSkip;i++){input.skip(available+i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>0){for(inti=available;i<numToSkip;i++){skipped=input.skip(available+i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>0){for(inti=available;i<numToSkip;i++){input.skip(skipped+i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>0){for(inti=available;i<numToSkip;i++){input.skip(available+i,skipped);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip*available+numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip/numToSkip;if(available>0){for(inti=0;i<available;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip/numToSkip;if(available<=0){for(inti=0;i<available;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip/numToSkip;if(available>=0){for(inti=0;i<available;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available<numToSkip){returnavailable/numToSkip;}else{for(inti=0;i<available;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip/numToSkip;if(available==0){for(inti=0;i<available;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip/numToSkip;if(available<0){for(inti=0;i<available;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip;System.arraycopy(input,0,available,numToSkip,0,skipped);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip;System.arraycopy(input,0,available,numToSkip,skipped);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip;System.arraycopy(input,0,available,numToSkip,skipped,0);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip,skipped;System.arraycopy(input,0,available,numToSkip,0,numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104numToSkip/numToSkip;System.arraycopy(input,0,available,numToSkip,skipped);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip;System.arraycopy(input,0,available,numToSkip,0,numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/skipped;System.arraycopy(input,0,available,numToSkip,0);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104for(inti=available;i<numToSkip;i++){available*numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104intnumToSkip=available*numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip-skip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip-skipped.longValue();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip-skipped.length;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip-skipped.intValue();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip-skipped.doubleValue();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104intavailable=available*numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.getBytes(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(numToSkip>0){returnavailable-numToSkip;}elseif(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.getBytes
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(numToSkip>0){returnavailable-numToSkip;}elseif(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.getBy
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(numToSkip>0){returnavailable-numToSkip;}elseif(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.getB
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(numToSkip>0){returnavailable-numToSkip;}else{for(inti=available;i<numToSkip;i++){available+=input.getBytes(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip-skip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip-skipped.longValue();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip-skipped.length;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip-skipped.intValue();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip-skipped);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available.size();if(available>numToSkip){for(inti=0;i<available.size();++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available.size();if(available<numToSkip){for(inti=0;i<available.size();++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available.size()/numToSkip;if(available>numToSkip){for(inti=0;i<available.size();++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available/numToSkip;if(available>numToSkip){for(inti=0;i<available.size();++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available.size()/numToSkip;if(available<numToSkip){for(inti=0;i<available.size();++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip/numToSkip;if(available>0){for(inti=0;i<available.size();++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip;if(available>numToSkip){available+numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+skipped;if(available>numToSkip){available+numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip;if(available>numToSkip){available+numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip;if(available>numToSkip){available+numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+skipped;if(available<numToSkip){available+numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+skipped;if(available>0){available+numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available*numToSkip;numToSkip-=available*numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available*numToSkip;intnumToSkip=available*numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available*numToSkip;numToSkip=available*numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available*numToSkip;if(available<numToSkip){if(skipped>0){returnavailable*numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available*numToSkip;InputStreamavailable=input.readInput();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available*numToSkip;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available*numToSkip;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available*numToSkip;if(available<numToSkip){if(skipped>0){thrownewIllegalArgumentException("");}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available+offset;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returninput*numToSkip;System.arraycopy(input,0,available,numToSkip,skipped);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip,skipped;System.arraycopy(input,0,available,numToSkip,0,numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104System.arraycopy(input,0,available,numToSkip,0);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip,skipped;System.arraycopy(input,0,available,numToSkip,0);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+1;System.arraycopy(input,0,available,numToSkip,0);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip/numToSkip;if(available>0){for(inti=0;i<available;++i){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip/numToSkip;if(available<=0){for(inti=0;i<available;++i){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip/numToSkip;if(available>=0){for(inti=0;i<available;++i){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available/numToSkip;if(available<0){for(inti=0;i<available;++i){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available<numToSkip){returnavailable/numToSkip;if(available>numToSkip){for(inti=0;i<available;++i){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip/numToSkip;if(available==0){for(inti=0;i<available;++i){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available<numToSkip){returnavailable/numToSkip;}else{for(inti=0;i<available;++i){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-(numToSkip*skipped);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-(numToSkip/numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-(available*numToSkip+skipped);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*(numToSkip*numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-(numToSkip+numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/(numToSkip*numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip*available;for(inti=0;i<available;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable%skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable%skipped+numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/this.skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-this.skipped+skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip;numToSkip-=available;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available;numToSkip-=numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+1;if(available<numToSkip){if(skipped>0){returnavailable*numToSkip+1;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+1;InputStreamavailable=input.readInput();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+1;if(available>numToSkip){for(inti=0;i<available.size();i++){available*numToSkip+=i;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+1;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.length();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+1;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+1;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.length;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+1;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available*numToSkip+=i;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+1;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.getChars(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104for(inti=available;i<numToSkip;i++){available+=input.getChars(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(available>0){for(inti=available;i<numToSkip;i++){available+=input.getChars(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(available<0){for(inti=available;i<numToSkip;i++){available+=input.getChars(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(available>=0){for(inti=available;i<numToSkip;i++){available+=input.getChars(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(available>0){for(longi=available;i<numToSkip;i++){available+=input.getChars(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(available==0){for(inti=available;i<numToSkip;i++){available+=input.getChars(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>numToSkip){for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104For(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>numToSkip){for(inti=0;i<available;i++){input.flush();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>numToSkip){for(inti=0;i<available;i++){output.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104intavailable=numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*skipped.longValue();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip.longValue();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*skipped/numToSkip.longValue();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*skipped,numToSkip.longValue();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip,skipped.longValue();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip*numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip*skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-skipped.intValue();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104numToSkip-=skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104numToSkip-=available.length;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104numToSkip-=available+1;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104numToSkip-=available+skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104numToSkip-=available*numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104numToSkip-=available*skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104IntegernumToSkip=available*numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104intnumToSkip=available*numToSkip+1;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returninput-available.getSize();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returninput.available-available.getSize();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-input.getMeanSize();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available/skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available-skipped-numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available-skipped+input.getChars(numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available-skipped+input.getChars(0,numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){if(skipped>0){returnavailable*numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longskipped=available*numToSkip;if(skipped>0){returnavailable*numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longnumToSkip=available*numToSkip;if(skipped>0){returnavailable*numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip*numToSkip;if(available>0){if(skipped>0){returnavailable*numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available*numToSkip;if(available>numToSkip){for(intnumToSkip=available;numToSkip>0;numToSkip--){available+=numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available*numToSkip;if(available>numToSkip){for(intnumToSkip=available;numToSkip<0;numToSkip++){available+=numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available*numToSkip;intnumToSkip=input.read();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available*numToSkip;if(available>numToSkip){for(intnumToSkip=available;numToSkip>=0;numToSkip++){available+=numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available*numToSkip;if(available>numToSkip){for(intnumToSkip=available;numToSkip<0;numToSkip++){available*numToSkip+=numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available*numToSkip;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available*numToSkip;if(available>numToSkip){for(intnumToSkip=available;numToSkip<0;numToSkip++){available*numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available*numToSkip;intnumToSkip=input.read(available);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>skipped){for(inti=available;i<numToSkip;i++){input.skip(available);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>numToSkip){for(inti=available;i<numToSkip;i++){input.skip(skip);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>skipped){for(inti=available;i<numToSkip;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip;longnumToSkip=input.readLine();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip;intnumToSkip=input.readLine();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip/available.longValue();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returninput-available.getChars(numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-input.getChars(available);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-input.getChars(skipped,numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip/skip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>numToSkip){for(inti=0;i<available;++i){input.skip(available*i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>numToSkip){for(inti=0;i<available+i;++i){input.skip(available+i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104intavailable=numToSkip;for(inti=0;i<available;++i){input.skip(available+i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>numToSkip){for(inti=0;i<available;++i){input.skip(skipped+i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longnumToSkip=available.get(numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longnumToSkip=available.size();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longnumToSkip=input.skip(available);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip;intnumToSkip=input.read(available);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+skipped;intnumToSkip=input.read(available);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){intnumToSkip=available;for(inti=0;i<numToSkip;i++){available+=input.getRead();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(available<0){for(inti=available;i<0;i++){available+=input.getRead();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){for(inti=available;i<0;i++){available+=input.getRead();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(available>=0){for(inti=available;i<0;i++){available+=input.getRead();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>numToSkip){inti=0;i<available;++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104intnumToSkip=input.getLength();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/SMALL_BUFFER_SIZE+numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/SKIP_BUF_SIZE+numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>numToSkip){for(inti=0;i<available;++i){input.skip(0);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104InputStreaminput=input.getInputStream();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>numToSkip){for(inti=0;i<available;++i){input.skip(1);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip/available;System.arraycopy(input,numToSkip,available,0);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104numToSkip/numToSkip;System.arraycopy(input,numToSkip,available,0);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>0){for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104for(inti=available;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>0){for(inti=available;i<0;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>0){for(inti=available;i<0;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*(available+numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-(numToSkip/available);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+input.longValue();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip,input.longValue();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip.longValue()+skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip/numToSkip;if(available<0){for(inti=0;i<available;++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip/numToSkip;if(available>=0){for(inti=0;i<available;++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available/numToSkip;if(available>0){for(inti=0;i<available;++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip+available;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available+input.length;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-missing+numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-saved+numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104InputStreamavailable=input.readInt();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available<numToSkip){for(inti=available;i<numToSkip;i++){available+i+=skipped;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>0){for(inti=available;i<0;i++){available+i+=skipped;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>0){for(inti=available;i<numToSkip;i++){available+i+=skipped;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>0){for(inti=available;i<0;i++){available+=skipped;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longskipped=input.skip(available);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip/numToSkip;if(available<0){for(inti=0;i<available;++i){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available/numToSkip;if(available>0){for(inti=0;i<available;++i){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip/numToSkip;if(available!=0){for(inti=0;i<available;++i){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+skipped;System.arraycopy(input,numToSkip,available,numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip*available;System.arraycopy(input,numToSkip,available,numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returninput*numToSkip;System.arraycopy(input,numToSkip,available,numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip;System.arraycopy(input,numToSkip,available,skipped);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=input.availableToInt()-skip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(available>-1){for(inti=0;i<available;++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returninput.numToSkip-available;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returninput-numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returninput-available.getShortValue();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returninput.available-available.getShortValue();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-skipped.getShortValue();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip+numToSkip;if(available>numToSkip){for(intnumToSkip=available;numToSkip<0;numToSkip++){available+=numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip+numToSkip;if(available>numToSkip){for(intnumToSkip=available;numToSkip>0;numToSkip--){available+=numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip+numToSkip;if(available>numToSkip){for(intnumToSkip=available;numToSkip>=0;numToSkip++){available+=numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip+numToSkip;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip+numToSkip;if(available>numToSkip){for(intnumToSkip=available;numToSkip>=0;numToSkip+numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip+numToSkip;InputStreamavailable=input.getInputStream();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip+numToSkip;if(available>numToSkip){for(inti=0;i<available;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>numToSkip){for(inti=0;i<available;++i){input.skip(available+skipped);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>numToSkip){for(inti=0;i<available;++i){input.skip(null);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*(available-skipped);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*(skipped-available);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+input.skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+input.length;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+input.getChars(numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+input.buffersize;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returninput*numToSkip;System.arraycopy(input,0,available,numToSkip,0);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+skipped;System.arraycopy(input,0,available,numToSkip,0);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available*numToSkip;InputStreamavailable=input.readInput();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+skipped;InputStreamavailable=input.readInput();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-input.getChars(0,available);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returninput.getChars(0).getChars(0,numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returninput-available.getChars(0,numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available+1;if(available>0){for(inti=available;i<numToSkip;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available+1;if(available>numToSkip){for(inti=available;i<numToSkip;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available+1;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available+1;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.getRead();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available+1;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.next();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available+1;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.getBytes(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available+1;if(available>0){for(inti=available;i<numToSkip;i++){available+=input.getRead();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available+1;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.length;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip;intnumToSkip=input.readInt();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+skipped;intnumToSkip=input.readInt();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip;intnumToSkip=input.readInt();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip-skipped.intValue();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip-input.length;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip/numToSkip;if(available>0){for(inti=available;i<0;i++){available+=input.getBytes(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available/numToSkip;if(available>0){for(inti=available;i<0;i++){available+=input.getBytes(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available<numToSkip){returnavailable/numToSkip;if(available>0){for(inti=available;i<0;i++){available+=input.getBytes(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip/numToSkip;if(available>=0){for(inti=available;i<0;i++){available+=input.getBytes(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available/numToSkip;if(available<0){for(inti=available;i<0;i++){available+=input.getBytes(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip/numToSkip;if(available<0){for(inti=available;i<0;i++){available+=input.getBytes(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+numToSkip;System.arraycopy(input,0,available,numToSkip,0);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+numToSkip;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+numToSkip;intnumToSkip=input.read(available);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+numToSkip;if(available>numToSkip){for(inti=0;i<available;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+numToSkip;System.arraycopy(input,0,available,numToSkip,numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+numToSkip;InputStreamavailable=input.getInputStream();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+numToSkip;InputStreamavailable=input.readLine();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available<numToSkip){returnavailable/numToSkip;if(available>0){for(inti=0;i<available;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-skipSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable%skip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip*numToSkip;System.arraycopy(input,0,available,numToSkip,0);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip*numToSkip;if(available>numToSkip){for(intnumToSkip=available;numToSkip<0;numToSkip++){available+=numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip*numToSkip;if(available>numToSkip){for(inti=0;i<available;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip*numToSkip;if(available>numToSkip){for(intnumToSkip=available;numToSkip>=0;numToSkip++){available+=numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip*numToSkip;InputStreamavailable=input.getInputStream();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip*numToSkip;InputStreamavailable=input.readLine();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){for(inti=available;i<0;i++){available+=input.getBytes(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.getBytes(0);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.getBytes(1);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.getBytes();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip+SKIP_BUF_SIZE;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip+input.skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip+SHORT_BUFFER_SIZE;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip+input.getCharacterEncoding();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/(numToSkip+SHORT_BUFFER_SIZE);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/(numToSkip+SHORT_NUMBER_OF_RANGE);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-(skipped*numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable%numToSkip;System.arraycopy(input,0,available,numToSkip,0);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable%numToSkip;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable%numToSkip;if(available>numToSkip){for(inti=0;i<available;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable%numToSkip;InputStreamavailable=input.readLine();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable%numToSkip;intnumToSkip=input.read();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable%numToSkip;if(available>numToSkip){for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available/numToSkip;if(available>=0){if(skipped>0){thrownewIllegalArgumentException("");}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available/numToSkip;if(available<numToSkip){if(skip>0){thrownewIllegalArgumentException("");}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip/available;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip*available;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104n*=numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available/numToSkip;InputStreamavailable=input.readInput();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/skipped;InputStreamavailable=input.readInput();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longnumToSkip-available*numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104for(inti=available;i<0;i++){if(available>0){break;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104for(inti=0;i<numToSkip;i++){if(available>0){break;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longnumToSkip=available+numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104intnumToSkip=available.size();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104numToSkip+=available;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104for(intnumToSkip=available;numToSkip>0;numToSkip-=available){numToSkip-=available;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104for(intnumToSkip=available;numToSkip>0;numToSkip--){numToSkip-=available;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available*numToSkip){numToSkip-=available;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104for(intnumToSkip=available;numToSkip>0;numToSkip-=0){numToSkip-=available;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104for(intnumToSkip=available;numToSkip>0;numToSkip){numToSkip-=available;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+skipped;InputStreamavailable=input.readInput();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-input.readLine();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returninput-available.readLine();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-input.readLine(skipped);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-input.readLine()+skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip;intnumToSkip=input.length();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+skipped;intnumToSkip=input.length();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip;intnumToSkip=input.length();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(available==0){for(inti=0;i<available;++i){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=input.read();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip/numToSkip;if(available<0){for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip/numToSkip;if(available>=0){for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available/numToSkip;if(available>0){for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){intnumToSkip=available;for(inti=0;i<numToSkip;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.getUpperBound();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){for(inti=available;i<0;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.getEnd();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available+SKIP_BUF_SIZE;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/input.length;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/input.skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>numToSkip){for(inti=0;i<available.size();i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>numToSkip){for(inti=0L;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*skipped;intnumToSkip=input.read();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+skipped;intnumToSkip=input.read();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available/numToSkip;if(available>0){for(inti=available;i<0;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip/numToSkip;if(available>0){for(inti=available;i<0;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available<numToSkip){returnavailable/numToSkip;if(available>0){for(inti=available;i<0;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available/numToSkip;if(available<0){for(inti=available;i<0;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip/numToSkip;if(available>=0){for(inti=available;i<0;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip/numToSkip;if(available<0){for(inti=available;i<0;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>0){for(inti=0;i<available;++i){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(skipped>0){for(inti=0;i<available;++i){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104intnumToSkip=available;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>numToSkip){for(inti=available+numToSkip;i<numToSkip;i++){input.reset();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip;System.arraycopy(input,0,input,numToSkip,0,skipped);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip;System.arraycopy(input,0,available,numToSkip,0,input.length);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104System.arraycopy(input,0,available,numToSkip,0,numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>0){for(inti=available;i<numToSkip;i++){available+=input.getChars(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=input.getChars(numToSkip);if(available>0){for(inti=available;i<numToSkip;i++){available+=input.getChars(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>0){for(longi=available;i<numToSkip;i++){available+=input.getChars(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>0){for(inti=available;i<numToSkip;i++){available+=input.getChars(0);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=input.getChars(numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*skipped+1;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-input.skipped+1;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-saved+1;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available/numToSkip;if(available>0){for(inti=available;i<0;i++){available+=input.length();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip/numToSkip;if(available>0){for(inti=available;i<0;i++){available+=input.length();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available/numToSkip;if(available<0){for(inti=available;i<0;i++){available+=input.length();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available<numToSkip){returnavailable/numToSkip;if(available>0){for(inti=available;i<0;i++){available+=input.length();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip/numToSkip;if(available>=0){for(inti=available;i<0;i++){available+=input.length();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-skip*SKIP_BUF_SIZE;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-saved*SKIP_BUF_SIZE;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-(numToSkip+available);if(available>0){for(inti=available;i<numToSkip;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-(numToSkip+available);if(available>0){for(inti=0;i<available;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-(numToSkip+available);InputStreamavailable=input.readLine();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-(numToSkip+available);InputStreamavailable=input.getInputStream();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-(numToSkip+available);if(available>0){for(inti=available;i<numToSkip;i++){available+=input.getRead();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-(numToSkip+available);if(available>0){for(inti=available;i<numToSkip;i++){available+=input.getReader().readLine();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip+1;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip+1;System.arraycopy(input,0,available,numToSkip,0);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip+1;if(available>numToSkip){for(inti=0;i<available;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip+1;if(available>numToSkip){for(inti=available;i<numToSkip;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip+1;intnumToSkip=input.read();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>0){for(inti=available;i<numToSkip;i++){available+=input.getBytes(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=input.skip(numToSkip);if(available>0){for(inti=available;i<numToSkip;i++){available+=input.getBytes(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>0){returnavailable;for(inti=0;i<numToSkip;i++){available+=input.getBytes(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>0){for(longi=available;i<numToSkip;i++){available+=input.getBytes(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>0){for(inti=available;i<numToSkip;i++){available+=input.getBytes(0);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip+SKIP_BUF_SIZE;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip+SHORT_BUFFER_SIZE;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip+input.skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(available>-1){for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=input.available;if(available>0){for(inti=available;i<numToSkip;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip+available;System.arraycopy(input,numToSkip,available,0);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returninput+numToSkip;System.arraycopy(input,numToSkip,available,0);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>skipped){for(inti=available;i<numToSkip;i++){input.skip(available+i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>numToSkip){for(inti=available;i<0;i++){input.skip(available+i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>numToSkip){inti=available;i<numToSkip;i++){input.skip(available+i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longskipped=available+numToSkip;if(skipped<0){returnavailable+numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longskipped=available+numToSkip;if(skipped>0){returnavailable+numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longskipped=input.skip(numToSkip);if(skipped<0){returnavailable+numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longskipped=input.skip(numToSkip);if(skipped>0){returnavailable+numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-(numToSkip*numToSkip);System.arraycopy(input,0,available,numToSkip,0);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-(numToSkip*numToSkip);if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-(numToSkip*numToSkip);intnumToSkip=input.read();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-(numToSkip*numToSkip);if(available>numToSkip){for(inti=0;i<available;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-(numToSkip*numToSkip);if(available>numToSkip){for(intnumToSkip=available;numToSkip<0;numToSkip++){available+=numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-(numToSkip*numToSkip);InputStreamavailable=input.readLine();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-(numToSkip*numToSkip);if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.next();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-(numToSkip*numToSkip);intnumToSkip=input.read(available);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+skipped;intnumToSkip=input.readLine();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip;intnumToSkip=input.readLine();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip;intnumToSkip=available*numToSkip+skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+1;intnumToSkip=available*numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip;intnumToSkip=available*numToSkip+1;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip*numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>0){for(inti=available;i<numToSkip;i++){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(available>0){for(longi=available;i<numToSkip;i++){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip;InputStreamavailable=input.getInputStream();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip;InputStreamavailable=input.getInputStream();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+skipped;InputStreamavailable=input.getInputStream();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104numToSkip-=available.longValue();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104numToSkip-=available*SKIP_BUF_SIZE;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*SKIP_BUF_SIZE;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip.length;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>numToSkip){for(inti=available;i<0;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>numToSkip){for(inti=available+numToSkip;i<numToSkip;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>numToSkip){for(inti=available.size();i<numToSkip;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+skipped;intnumToSkip=input.read();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available+1;numToSkip-=available;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip;numToSkip-=skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>0){for(inti=0;i<available;++i){input.flush();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>0){for(inti=0;i<available;++i){input.start();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-skipped*numToSkip+1;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-skipped*numToSkip.longValue();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-saved*numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+skipped;if(available>numToSkip){available=numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip/numToSkip;if(available>0){for(inti=available;i<0;i++){available+=input.getChars(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available/numToSkip;if(available>0){for(inti=available;i<0;i++){available+=input.getChars(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available<numToSkip){returnavailable/numToSkip;if(available>0){for(inti=available;i<0;i++){available+=input.getChars(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip/numToSkip;if(available>=0){for(inti=available;i<0;i++){available+=input.getChars(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available/numToSkip;if(available<0){for(inti=available;i<0;i++){available+=input.getChars(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available.longValue();if(available<numToSkip){if(skipped>0){returnavailable/numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available.longValue();if(available<numToSkip){if(skipped>0){returnavailable*numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available.longValue();if(available<numToSkip){if(skipped>0){returnavailable+numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-output;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104Longavailable=input.available-numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){returnnumToSkip-available;InputStreamavailable=input.readInput();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip;InputStreamavailable=input.readInput();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){returnnumToSkip-available;InputStreamavailable=input.readInput();}else{skip(input,numToSkip);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){returnnumToSkip-available;InputStreamavailable=input.readInput();}else{
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+1;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+1;if(available>numToSkip){for(inti=0;i<available;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+1;if(available>numToSkip){for(inti=available;i<numToSkip;++i){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+1;if(available>numToSkip){for(inti=available;i<numToSkip;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+1;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.next();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+1;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.getBytes(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+1;if(available>numToSkip){for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*(numToSkip-available);if(available>0){for(intnumToSkip=available;numToSkip>0;numToSkip--){available*(numToSkip-available);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*(numToSkip-available);if(available>0){for(intnumToSkip=available;numToSkip>0;numToSkip++){available*(numToSkip-available);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*(numToSkip-available);if(available>0){for(intnumToSkip=available;numToSkip>0;numToSkip--){available+=numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*(numToSkip-available);InputStreamavailable=input.readLine();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*(numToSkip-available);if(available>0){for(inti=available;i<numToSkip;i++){available+=input.next();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*(numToSkip-available);if(available>0){for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip-input.length;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip-skipped.longValue;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>0){for(inti=0;i<numToSkip;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>0){for(inti=available;i<numToSkip;i++){input.flush();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>0){for(inti=0;i<numToSkip;i++){input.flush();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip/available;if(available>0){for(inti=available;i<numToSkip;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip/available;if(available>numToSkip){for(inti=available;i<numToSkip;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip/available;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip/available;if(available>0){for(inti=available;i<numToSkip;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip/available;if(available>numToSkip){for(inti=available;i<numToSkip;++i){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip/available;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.getBytes(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip/available;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.getRead();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip/available;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.next();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.next();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=input.skip(numToSkip);if(available>0){for(inti=available;i<0;i++){available+=input.next();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(available<0){for(inti=available;i<0;i++){available+=input.next();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){for(inti=available;i<0;i++){available+=input.next();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip-input.length;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip-skipped+input.length;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip-skipped.longValue;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=input.length();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>0){returnavailable;for(inti=0;i<numToSkip;i++){available+=input.length();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>0){for(longi=available;i<numToSkip;i++){available+=input.length();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>0){for(inti=input;i<numToSkip;i++){available+=input.length();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip+available;if(available<numToSkip){for(inti=0;i<available.size();++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available+numToSkip;if(available<numToSkip){for(inti=0;i<available.size();++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip+available;if(available<0){for(inti=0;i<available.size();++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available+numToSkip;if(available<0){for(inti=0;i<available.size();++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip+available;if(available>0){for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available+numToSkip;if(available>0){for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip+available;if(available<0){for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip+available;if(available>numToSkip){for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longskipped=available*numToSkip;if(skipped<0){returnavailable*numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longnumToSkip=available*numToSkip;if(skipped<0){returnavailable*numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){intnumToSkip=available;for(inti=0;i<numToSkip;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(available<0){for(inti=available;i<0;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){for(inti=available;i<numToSkip;i++){input.flush();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;if(available>=0){for(inti=available;i<0;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available/numToSkip;if(available>0){for(inti=available;i<0;i++){available+=0;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip/numToSkip;if(available>0){for(inti=available;i<0;i++){available+=0;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available/numToSkip;if(available<0){for(inti=available;i<0;i++){available+=i;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available/numToSkip;if(skipped>0){for(inti=available;i<numToSkip;i++){available+=i;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip/numToSkip;if(available>=0){for(inti=available;i<0;i++){available+=i;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-input.skipped-skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-input.skip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available/numToSkip;if(available>0){for(inti=available;i<0;i++){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip/numToSkip;if(available>0){for(inti=available;i<0;i++){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available/numToSkip;if(available<0){for(inti=available;i<0;i++){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip/numToSkip;if(available>=0){for(inti=available;i<0;i++){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip/numToSkip;if(available<0){for(inti=available;i<0;i++){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available<=0){for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available<=0){returnnumToSkip-available;if(available>0){for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available/numToSkip;if(available>0){for(inti=available;i<0;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip/numToSkip;if(available>0){for(inti=available;i<0;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available/numToSkip;if(available<0){for(inti=available;i<0;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available/numToSkip;if(skipped>0){for(inti=available;i<numToSkip;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip/numToSkip;if(available<0){for(inti=available;i<0;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longskipped=available*numToSkip;if(skipped>0){for(inti=available;i<numToSkip;i++){available*numToSkip+=skipped;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longskipped=available*numToSkip;if(skip>0){for(inti=available;i<numToSkip;i++){available*numToSkip+=skipped;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longskipped=available*numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longskipped=input.skip(available);if(skipped>0){for(inti=available;i<numToSkip;i++){available*numToSkip+=skipped;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longskipped=available*numToSkip;if(skipped>0){for(longi=available;i<numToSkip;i++){available*numToSkip+=skipped;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longskipped=available*numToSkip;if(skipped>0){for(inti=0;i<numToSkip;i++){available*numToSkip+=skipped;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longskipped=available*numToSkip;if(skipped>0){for(inti=available;i<numToSkip;i++){available*numTo
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>0){for(intnumToSkip=available;numToSkip<0;numToSkip++){available+=numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=input.skip(available);if(available>0){for(intnumToSkip=available;numToSkip<0;numToSkip++){available+=numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=input.skip(numToSkip);if(available<0){for(intnumToSkip=available;numToSkip<0;numToSkip++){available+=numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip/numToSkip;System.arraycopy(input,0,available,numToSkip,0);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip/numToSkip;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip/numToSkip;intnumToSkip=input.read();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip/numToSkip;if(available>numToSkip){for(inti=0;i<available;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip/numToSkip;System.arraycopy(input,numToSkip,available,numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip/numToSkip;if(available>numToSkip){for(inti=available;i<numToSkip;++i){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip/numToSkip;System.arraycopy(input,0,available,numToSkip,numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip/numToSkip;if(available>numToSkip){for(inti=available;i<numToSkip;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>0){for(inti=0;i<numToSkip;i++){available+=input.length();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>0){for(inti=input.length;i<numToSkip;i++){available+=input.length();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>0){for(inti=input.length;i<numToSkip;i++){available+=input.length();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip+available;if(available>0){for(inti=available;i<0;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available+numToSkip;if(available<0){for(inti=available;i<0;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available+numToSkip;if(available>skipped){for(inti=available;i<numToSkip;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip-1;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip-1;System.arraycopy(input,0,available,numToSkip,0);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip-1;if(available>numToSkip){for(inti=0;i<available;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip-1;if(available>numToSkip){for(inti=available;i<numToSkip;++i){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip-1;InputStreamavailable=input.readLine();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip-1;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.next();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip-1;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.getBytes(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip-1;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.getChars(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available/numToSkip;if(available>0){if(skipped>0){returnavailable;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip/available;if(available<0){if(skipped>0){returnavailable;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-skipped+this.skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available*numToSkip;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available*numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available*numToSkip;if(available>0){for(inti=available;i<0;i++){available*0;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available*numToSkip;if(skipped>0){for(inti=available;i<numToSkip;i++){available*numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longnumToSkip=available*numToSkip;if(numToSkip>0){for(inti=available;i<numToSkip;i++){available*numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available*numToSkip;if(available<0){for(inti=available;i<0;i++){available*numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available*numToSkip;if(available>=0){for(inti=available;i<numToSkip;i++){available*numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available;numToSkip-skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;numToSkip-available;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip+available;if(available<numToSkip){for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available+numToSkip;if(available<numToSkip){for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available<numToSkip){for(inti=0;i<available;i++){input.flush();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>0){for(inti=available;i<numToSkip;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=input.skip(numToSkip);if(available>0){for(inti=available;i<numToSkip;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>0){returnavailable;for(inti=0;i<numToSkip;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>0){for(inti=available;i<numToSkip;i++){available+=input.getUpperBound();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){for(inti=0;i<available;i++){available+=input.getUpperBound();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){for(longi=0;i<available;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){for(inti=0;i<available;i++){available+=input.getEnd();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-output.longValue();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-read.longValue();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/skipped;intnumToSkip=input.read();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>0){for(inti=available;i<numToSkip;i++){input.skip(available*i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip+available;if(available>numToSkip){for(inti=0;i<available;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip+available;InputStreamavailable=input.getInputStream();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip+available;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip+available;InputStreamavailable=input.readLine();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip+available;if(available>numToSkip){for(inti=0;i<available;i++){available+=input.next();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip+available;if(available>numToSkip){for(inti=0;i<available;i++){available+=input.getRead();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip*available;System.arraycopy(input,numToSkip,available,0);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+skipped;System.arraycopy(input,numToSkip,available,0);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returninput*numToSkip;System.arraycopy(input,numToSkip,available,0);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returninput.readLine()-1;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-input.getCharacterEncoding();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-input.getStartLength();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-input.readLine();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-this.skipped+this.buffersize;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-this.buffersize+this.buffersize;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=input.available*numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+0;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip+SKIP_BUF_SIZE;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip+SHORT_BUFFER_SIZE;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip+input.skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=this.available*numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=this.available-input.getSize();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returninput*numToSkip;System.arraycopy(input,0,this.available,numToSkip,0);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip;System.arraycopy(input,0,this.available,numToSkip,0);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip;System.arraycopy(input,0,input,numToSkip,skipped);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returninput*numToSkip;System.arraycopy(input,numToSkip,available,skipped);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){for(inti=0;i<available;i++){input.skip();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){for(inti=0;i<available;i++){input.start();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104inti=0;++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returninput.readLine()-(skipped-available);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-skipd+this.buffersize;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>0){for(inti=0;i<numToSkip;i++){available+=input.getChars(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>0){for(inti=numToSkip;i<0;i++){available+=input.getChars(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){returnnumToSkip-available;numToSkip-=available;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip;numToSkip-=0;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>0){for(inti=0;i<available;i++){input.flush();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>0){for(inti=0;i<available;i++){input.skip();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>0){for(inti=0;i<available;i++){input.start();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104While(input!=null){available>0){for(inti=available;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104For(inti=available;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>0){for(inti=available;i<numToSkip;i++){input.skip();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>0){for(inti=available;i<numToSkip;i++){input.start();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longnumToSkip=available-numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){for(inti=0;i<available.size();++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){for(inti=0;i<available.size();++i){input.flush();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){for(inti=0;i<available.size();++i){input.skip();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>0){for(inti=available;i<numToSkip;i++){input.skip(available);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104for(inti=available;i<numToSkip;i++){input.skip();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104For(inti=available;i<numToSkip;i++){input.skip(available);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longskipped=input.skip(numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+numToSkip;if(available>numToSkip){for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+numToSkip;System.arraycopy(input,numToSkip,available,numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+numToSkip;if(available<=numToSkip){for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+numToSkip;if(available>numToSkip){for(inti=0;i<available;++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+numToSkip;System.arraycopy(input,0,available,numToSkip+numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returninput.numToSkip-skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnskipped-numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-(numToSkip+available);if(available>0){for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-(numToSkip+available);if(available<=0){for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-(numToSkip+available);if(available>0){for(inti=0;i<available;++i){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-(numToSkip+available);if(available>0){for(inti=0;i<available;++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-(numToSkip+available);if(available>numToSkip){for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-(numToSkip+available);if(available<=0){for(inti=0;i<available;++i){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-(numToSkip+available);System.arraycopy(input,numToSkip,0,available);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-(numToSkip+available);System.arraycopy(input,numToSkip,available,0);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>0){for(inti=available;i<numToSkip;i++){input.reset();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available>numToSkip){for(inti=0;i<numToSkip;i++){input.reset();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longnumToSkip=available/numToSkip;if(skipped<0){returnavailable;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){returnavailable+numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available*numToSkip;if(available<numToSkip){for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available*numToSkip;if(available>numToSkip){for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available*numToSkip;if(available<numToSkip){for(inti=0;i<available;++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available*numToSkip;if(available>numToSkip){for(inti=0;i<available;++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available*numToSkip;System.arraycopy(input,0,numToSkip,0,available);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available*numToSkip;if(available<numToSkip){for(inti=0;i<available.size();++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available*numToSkip;System.arraycopy(input,numToSkip,available,numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-input.getMillis();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/SHORT_WIDTH;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable%SHORT_SIZE;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable%SHORT_WIDTH;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*SKIP_BUFFER_SIZE;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-skipp+1;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.getChars(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available<numToSkip){for(inti=available;i<numToSkip;i++){available+=input.getChars(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){for(inti=available;i<0;i++){available+=input.getChars(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip*numToSkip;if(available>numToSkip){for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip*numToSkip;if(available>0){for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip*numToSkip;if(available>0){for(intnumToSkip=available;numToSkip>0;numToSkip--){available+=numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip*numToSkip;intnumToSkip=input.read();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip*numToSkip;if(available>numToSkip){for(inti=0;i<available;++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip*numToSkip;if(available>0){for(intnumToSkip=available;numToSkip>0;numToSkip++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip*numToSkip;if(available>0){for(intnumToSkip=available;numToSkip>0;numToSkip--numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longskipped=available+numToSkip;if(skipped>0){for(inti=0;i<numToSkip;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longnumToSkip=available+numToSkip;for(inti=0;i<numToSkip;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){for(inti=available;i<numToSkip;i++){input.skip();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longskipped=available+numToSkip;if(skipped>0){for(inti=available;i<numToSkip;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip;if(available>0){available+numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){available+numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip-skipped*numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-(numToSkip*numToSkip);if(available>numToSkip){for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-(numToSkip*numToSkip);if(available>0){for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-(numToSkip*numToSkip);if(available>0){for(intnumToSkip=available;numToSkip>0;numToSkip--numToSkip);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-(numToSkip*numToSkip);System.arraycopy(input,0,available,numToSkip,numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-(numToSkip*numToSkip);System.arraycopy(input,numToSkip,0,available);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-(numToSkip*numToSkip);if(available>numToSkip){for(inti=0;i<available;++i){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available<0){for(inti=0;i<available;++i){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>0){for(inti=0;available<numToSkip;++i){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-input.getShortValue(numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-input.shortValue();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-input.nextValue();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip+input.toString();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+_skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){for(inti=available;i<numToSkip;i++){available*numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available*numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longnumToSkip=available*numToSkip;if(available>numToSkip){for(inti=0;i<numToSkip;i++){available*numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){for(inti=0;i<numToSkip;i++){available*numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+input.toByteArray();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longnumToSkip=available+numToSkip;for(inti=0;i<available.size();++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){for(longi=0;i<available.size();++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>0){for(inti=0;i<numToSkip;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>0){for(inti=numToSkip;i<0;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longnumToSkip=input.getLength();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*input.longValue();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available<numToSkip){for(inti=0;i<available;++i){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104for(inti=available;i<numToSkip;i++){if(skip>=0){break;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip+skipd;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){returnavailable/numToSkip;}else{available=input.readInput();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104intnumToSkip=available/numToSkip;InputStreamavailable=input.readInput();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){returnavailable/numToSkip;InputStreamavailable=input.readInput();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available/numToSkip+skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available/input.getLength();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available<numToSkip){for(inti=available;i<numToSkip;i++){available+=input.getBytes(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){for(inti=0;i<numToSkip;i++){available+=input.getBytes(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){returnavailable+numToSkip;InputStreamavailable=input.readInput();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){returnavailable+numToSkip;}else{available=input.readInput();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longskipped=available/numToSkip;if(skipped<0){thrownewIllegalArgumentException("");}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available<numToSkip){for(inti=0;i<available;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(skipped<=0){returnavailable+numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip-1;if(available>numToSkip){for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip-1;if(available>numToSkip){for(inti=0;i<available;++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip-1;System.arraycopy(input,numToSkip,available,0);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip-1;if(available>numToSkip){for(inti=0;i<available.size();++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip-1;if(available>numToSkip){for(inti=0;i<available;++i){available*numToSkip-1;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip-1;if(available>numToSkip){available*numToSkip-1;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip*(available-skipped);
