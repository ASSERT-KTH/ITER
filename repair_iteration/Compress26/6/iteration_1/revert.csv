projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available-numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-skipped+numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-skip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip;InputStreamavailable=input.readInput();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip;intnumToSkip=input.read();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip;intnumToSkip=input.readInt();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip;intnumToSkip=input.read(available);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip;intnumToSkip=input.length();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip;intnumToSkip=input.readLine();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip;longnumToSkip=input.readLine();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip;numToSkip=input.read();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=input.available-numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=numToSkip-available;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=input.availableToInt()-numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104intavailable=available-numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=skipped-numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=output.available-numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip-skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip/numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+1;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+skip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip+skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable%numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip-skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/(numToSkip+skipped);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*(numToSkip-available);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip/available;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available;numToSkip-=available;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available;numToSkip-available;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available;InputStreamavailable=input.readInput();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available;if(available>0){for(intnumToSkip=available;numToSkip<0;numToSkip++){available+=numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available;if(available>0){for(inti=available;i<numToSkip;i++){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available;if(available>0){for(inti=available;i<numToSkip;i++){available+=input.length();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available;if(available>0){for(inti=available;i<numToSkip;i++){available+=input.getBytes(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available;if(available>0){for(inti=available;i<numToSkip;i++){available+=input.getChars(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-skipd;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-skipped.longValue();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-skipped.longValue;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-skipped.length;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-skipped+this.buffersize;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip+numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip+numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip*numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-skip+numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip+available;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailablenumToSkip-numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available+1;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available*numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available+skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-skipped+1;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-this.skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104for(inti=available;i<numToSkip;i++){if(available>0){break;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>0){for(inti=available;i<numToSkip;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>0){for(inti=available;i<numToSkip;i++){input.skip(available+i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>0){for(inti=available;i<numToSkip;i++){available+=input.length();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip;if(available<numToSkip){if(skipped>0){returnavailable*numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip;InputStreamavailable=input.readInput();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip;if(available>numToSkip){for(inti=0;i<available.size();i++){available*numToSkip+=i;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available*numToSkip+=skipped;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available*numToSkip+=i;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.length();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available*numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip;intnumToSkip=available*numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip;InputStreamavailable=input.readInput();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip;if(available<numToSkip){if(skipped>0){returnavailable/numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.length();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.getChars(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.getBytes(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=i;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip;if(available<numToSkip){if(skipped>0){thrownewIllegalArgumentException("");}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip;System.arraycopy(input,0,available,numToSkip,0);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip;if(available>numToSkip){for(inti=0;i<available;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip;intnumToSkip=input.read();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip;if(available>numToSkip){for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip;if(available>numToSkip){for(inti=0;i<available;i++){available+=input.next();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.getBytes(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip.longValue();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/skipped+numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip;System.arraycopy(input,0,available,numToSkip,0);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip;if(available>numToSkip){for(inti=0;i<available;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip;intnumToSkip=input.read();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip;if(available>numToSkip){for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip;if(available>numToSkip){for(inti=available;i<numToSkip;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){for(inti=available;i<numToSkip;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){for(inti=available;i<numToSkip;i++){input.skip(available+i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){for(inti=available;i<numToSkip;i++){input.reset();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){for(inti=available;i<numToSkip;i++){input.skip(available);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){for(inti=available;i<numToSkip;i++){input.write(available);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>0){for(inti=available;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=this.available-numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-input.skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104while(available-numToSkip){numToSkip-=available;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104numToSkip-=available;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available;if(available>0){for(inti=available;i<numToSkip;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available;if(available>0){for(inti=available;i<numToSkip;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available;if(available>numToSkip){for(inti=available;i<numToSkip;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available;if(available>numToSkip){for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.getRead();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.getBytes(i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+=input.next();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-skipped*numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-input.getSize();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-input.getShortValue();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip;if(available>numToSkip){for(inti=available;i<numToSkip;i++){available+i+=skipped;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip;if(available>numToSkip){if(skipped>0){returnavailable+numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip;if(available>numToSkip){for(inti=available;i<numToSkip;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip;if(available>numToSkip){for(inti=0;i<available;i++){available+=input.getLength();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip;InputStreamavailable=input.getInputStream();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip;System.arraycopy(input,numToSkip,available,0);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip;if(available>numToSkip){for(inti=0;i<available;++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip;if(available>numToSkip){for(inti=0;i<available.size();++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip;if(available<numToSkip){if(skipped>0){returnavailable;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip;if(available>numToSkip){for(inti=0;i<available;++i){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip;System.arraycopy(input,numToSkip,available,0);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available-skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104longavailable=available/numToSkip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-input.getChars(0,numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-input.getChars(numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-input.readLine();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip+skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip-skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable/numToSkip+1;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-numToSkip+skipped;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returninput.readLine();
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){for(inti=0;i<available;++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>0){for(inti=0;i<available;++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){for(inti=0;i<available;++i){input.skip(available+i);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){for(inti=0;i<available;++i){input.skip();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104if(available>numToSkip){for(inti=0;i<available;++i){input.skip(available);}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available+skip;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-(numToSkip*numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-(numToSkip+available);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable-skipped*SKIP_BUF_SIZE;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip-1;
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip;if(available<numToSkip){if(skipped>0){returnavailable+numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip;if(available>numToSkip){for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip;if(available<numToSkip){for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip;if(available>numToSkip){for(inti=0;i<available.size();++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip;if(available<numToSkip){for(inti=0;i<available.size();++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable+numToSkip;if(available>numToSkip){available+numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip;if(available>numToSkip){if(skipped>0){returnavailable*numToSkip;}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip;if(available>numToSkip){for(inti=0;i<available;++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip;if(available>numToSkip){for(inti=0;i<available.size();++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip;System.arraycopy(input,numToSkip,available,0);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnavailable*numToSkip;System.arraycopy(input,numToSkip,available,numToSkip);
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available;if(available>0){for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available;if(available>0){for(inti=0;i<available;++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available;if(available>numToSkip){for(inti=0;i<available;++i){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available;if(available<=0){for(inti=0;i<available;i++){input.close();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available;if(available>0){for(inti=0;i<available;++i){available+=input.read();}
projects/Compress26/src/main/java/org/apache/commons/compress/utils/IOUtils.java104returnnumToSkip-available;if(available>numToSkip){for(inti=0;i<available;++i){available+=input.read();}
