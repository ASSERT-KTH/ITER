bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    junit.framework.AssertionFailedError:  registry  [CONTEXT]  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  [BUGGY]  if(fmtCount  >  0)  {  fmtCount++;  }  [BUGGY]  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	164	164	1	add	if(fmtCount  >  0)  {  fmtCount++;  }	fmtCount++;  	compilable	  [FE]  IllegalArgumentException  	17	5	replace
2	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  fmtCount++;  }  [FE]  IllegalArgumentException  [FE]    junit.framework.AssertionFailedError:  registry  [CONTEXT]  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  [BUGGY]  if(fmtCount  >  0)  {  fmtCount++;  }  [BUGGY]  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	164	164	1	replace	if(fmtCount  >  0)  {  fmtCount++;  }	fmtCount++;  	compilable	  [FE]  IllegalArgumentException  	17	5	replace
3	[BUG]  [BUGGY]  int  fmtCount++;  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  registry  [CONTEXT]  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  [BUGGY]  int  fmtCount++;  [BUGGY]  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	164	164	1	replace	int  fmtCount++;	fmtCount++;  	non-compiled	[CE]  ';'  expected	17	None	replace
4	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  fmtCount++;  }  else  {  System.arraycopy(c,  start,  pos,  fmtCount,  fmtCount);  }  [CE]  cannot  find  symbol  start  [FE]        junit.framework.AssertionFailedError:  registry  [CONTEXT]  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  [BUGGY]  if(fmtCount  >  0)  {  fmtCount++;  }  else  {  System.arraycopy(c,  start,  pos,  fmtCount,  fmtCount);  }  [BUGGY]  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	164	164	1	replace	if(fmtCount  >  0)  {  fmtCount++;  }  else  {  System.arraycopy(c,  start,  pos,  fmtCount,  fmtCount);  }	fmtCount++;  	non-compiled	[CE]  cannot  find  symbol  start	17	None	replace
5	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          junit.framework.AssertionFailedError:  registry  [CONTEXT]  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  [BUGGY]    [BUGGY]  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	164	164	1	add	  	fmtCount++;  	compilable	  [FE]  IllegalArgumentException  	17	5	replace
6	[BUG]  [BUGGY]    [FE]  IllegalArgumentException  [FE]          junit.framework.AssertionFailedError:  registry  [CONTEXT]  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  [BUGGY]    [BUGGY]  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	164	164	1	replace	  	fmtCount++;  	compilable	  [FE]  IllegalArgumentException  	17	5	replace
7	[BUG]  [BUGGY]    int  fmtCount  =  readArgumentIndex(pattern,  pos);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]    junit.framework.AssertionFailedError:  registry  [CONTEXT]  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  [BUGGY]    int  fmtCount  =  readArgumentIndex(pattern,  pos);  [BUGGY]  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	164	164	1	replace	    int  fmtCount  =  readArgumentIndex(pattern,  pos);		non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	18	None	add
8	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      junit.framework.AssertionFailedError:  registry  [CONTEXT]  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  [BUGGY]    fmtCount  =  readArgumentIndex(pattern,  pos);  [BUGGY]  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	164	164	1	add	    fmtCount  =  readArgumentIndex(pattern,  pos);		compilable	  [FE]  IllegalArgumentException  	18	5	add
9	[BUG]  [BUGGY]    fmtCount  =  readArgumentIndex(pattern,  pos);  [FE]  IllegalArgumentException  [FE]      junit.framework.AssertionFailedError:  registry  [CONTEXT]  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  [BUGGY]    fmtCount  =  readArgumentIndex(pattern,  pos);  [BUGGY]  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	164	164	1	replace	    fmtCount  =  readArgumentIndex(pattern,  pos);		compilable	  [FE]  IllegalArgumentException  	18	5	add
10	[BUG]  [BUGGY]    int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]        junit.framework.AssertionFailedError:  registry  [CONTEXT]  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  [BUGGY]    int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  [BUGGY]  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	164	164	1	replace	    int  fmtCount  =  readArgumentIndex(pattern,  next(pos));		non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	18	None	add
11	[BUG]  [BUGGY]    int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]          junit.framework.AssertionFailedError:  registry  [CONTEXT]  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  [BUGGY]    int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  [BUGGY]  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	164	164	1	replace	    int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());		non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	18	None	add
12	[BUG]  [BUGGY]    char[]  c  =  pattern.toCharArray();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry  [CONTEXT]  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  [BUGGY]    char[]  c  =  pattern.toCharArray();  [BUGGY]  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	164	164	1	replace	    char[]  c  =  pattern.toCharArray();		non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	18	None	add
13	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    junit.framework.AssertionFailedError:  registry  [CONTEXT]  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  [BUGGY]  fmtCount  =  0;  [BUGGY]  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	164	164	1	add	fmtCount  =  0;	fmtCount++;  	compilable	  [FE]  IllegalArgumentException  	17	5	replace
14	[BUG]  [BUGGY]  fmtCount  =  0;  [FE]  IllegalArgumentException  [FE]    junit.framework.AssertionFailedError:  registry  [CONTEXT]  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  [BUGGY]  fmtCount  =  0;  [BUGGY]  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	164	164	1	replace	fmtCount  =  0;	fmtCount++;  	compilable	  [FE]  IllegalArgumentException  	17	5	replace
15	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry  [CONTEXT]  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  [BUGGY]  if(fmtCount  ==  0)  {  fmtCount++;  }  [BUGGY]  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	164	164	1	add	if(fmtCount  ==  0)  {  fmtCount++;  }	fmtCount++;  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	17	3	replace
16	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  fmtCount++;  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry  [CONTEXT]  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  [BUGGY]  if(fmtCount  ==  0)  {  fmtCount++;  }  [BUGGY]  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	164	164	1	replace	if(fmtCount  ==  0)  {  fmtCount++;  }	fmtCount++;  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	17	3	replace
17	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    junit.framework.AssertionFailedError:  registry  [CONTEXT]  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  [BUGGY]    fmtCount  =  readArgumentIndex(pattern,  next(pos));  [BUGGY]  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	164	164	1	add	    fmtCount  =  readArgumentIndex(pattern,  next(pos));		compilable	  [FE]  IllegalArgumentException  	18	5	add
18	[BUG]  [BUGGY]    fmtCount  =  readArgumentIndex(pattern,  next(pos));  [FE]  IllegalArgumentException  [FE]    junit.framework.AssertionFailedError:  registry  [CONTEXT]  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  [BUGGY]    fmtCount  =  readArgumentIndex(pattern,  next(pos));  [BUGGY]  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	164	164	1	replace	    fmtCount  =  readArgumentIndex(pattern,  next(pos));		compilable	  [FE]  IllegalArgumentException  	18	5	add
19	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry  [CONTEXT]  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  [BUGGY]    char[]  f  =  pattern.toCharArray();  [BUGGY]  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	164	164	1	add	    char[]  f  =  pattern.toCharArray();		compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	18	1	add
20	[BUG]  [BUGGY]    char[]  f  =  pattern.toCharArray();  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry  [CONTEXT]  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  [BUGGY]    char[]  f  =  pattern.toCharArray();  [BUGGY]  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	164	164	1	replace	    char[]  f  =  pattern.toCharArray();		compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	18	1	add
