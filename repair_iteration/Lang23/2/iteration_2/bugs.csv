bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(2);  [BUGGY]    StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	add	ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(2);	  ArrayList    <    String>    foundDescriptions    =    new    ArrayList    <    String>(1);    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	3	1	replace
2	[BUG]  [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(2);  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(2);  [BUGGY]    StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(2);	  ArrayList    <    String>    foundDescriptions    =    new    ArrayList    <    String>(1);    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	3	1	replace
3	[BUG]  [BUGGY]  Iterator  <  Format>  it  =  foundDescriptions.iterator();  [CE]  cannot  find  symbol  foundDescriptions  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  Iterator  <  Format>  it  =  foundDescriptions.iterator();  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	Iterator  <  Format>  it  =  foundDescriptions.iterator();	      Iterator    <    Format>    it    =    foundFormats.iterator();    	non-compiled	[CE]  cannot  find  symbol  foundDescriptions	14	None	replace
4	[BUG]  [BUGGY]  Iterator  <  Format>  it  =  this.foundFormats.iterator();  [CE]  cannot  find  symbol  foundFormats  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  Iterator  <  Format>  it  =  this.foundFormats.iterator();  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	Iterator  <  Format>  it  =  this.foundFormats.iterator();	      Iterator    <    Format>    it    =    foundFormats.iterator();    	non-compiled	[CE]  cannot  find  symbol  foundFormats	14	None	replace
5	[BUG]  [BUGGY]  Iterator  <  Format>  it  =  origFormats.iterator();  [CE]  cannot  find  symbol  origFormats  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  Iterator  <  Format>  it  =  origFormats.iterator();  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	Iterator  <  Format>  it  =  origFormats.iterator();	      Iterator    <    Format>    it    =    foundFormats.iterator();    	non-compiled	[CE]  cannot  find  symbol  origFormats	14	None	replace
6	[BUG]  [BUGGY]  if(foundFormats!=  null)  {  if(!foundFormats.isEmpty())  {  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  toPattern.add(it.next());  }  }  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  if(foundFormats!=  null)  {  if(!foundFormats.isEmpty())  {  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  toPattern.add(it.next());  }  }  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	if(foundFormats!=  null)  {  if(!foundFormats.isEmpty())  {  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  toPattern.add(it.next());  }  }	      if(!foundFormats.isEmpty())    {    for(Iterator    <    String>    it    =    foundFormats.iterator();    it.hasNext();)    {    toPattern.add(it.next());    }    	non-compiled	[CE]  ';'  expected	9	None	replace
7	[BUG]  [BUGGY]  if(foundFormats  ==  null)  {  if(!foundFormats.isEmpty())  {  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  toPattern.add(it.next());  }  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  if(foundFormats  ==  null)  {  if(!foundFormats.isEmpty())  {  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  toPattern.add(it.next());  }  }  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	if(foundFormats  ==  null)  {  if(!foundFormats.isEmpty())  {  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  toPattern.add(it.next());  }  }	      if(!foundFormats.isEmpty())    {    for(Iterator    <    String>    it    =    foundFormats.iterator();    it.hasNext();)    {    toPattern.add(it.next());    }    	non-compiled	[CE]  ';'  expected	9	None	replace
8	[BUG]  [BUGGY]  if(!foundFormats.isEmpty())  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern.add(it.next());  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  if(!foundFormats.isEmpty())  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern.add(it.next());  }  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	if(!foundFormats.isEmpty())  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern.add(it.next());  }	      if(!foundFormats.isEmpty())    {    for(Iterator    <    String>    it    =    foundFormats.iterator();    it.hasNext();)    {    toPattern.add(it.next());    }    	non-compiled	[CE]  ';'  expected	9	None	replace
9	[BUG]  [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(0);  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(0);  [CE]  variable  foundDescriptions  is  already  defined  in  method  applyPattern(String)  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(0);  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(0);  [BUGGY]    StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	ArrayList    <    String>    foundDescriptions    =    new    ArrayList    <    String>(0);    ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(0);	  	non-compiled	[CE]  variable  foundDescriptions  is  already  defined  in  method  applyPattern(String)	4	None	add
10	[BUG]  [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(0);  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(1);  [CE]  variable  foundDescriptions  is  already  defined  in  method  applyPattern(String)  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(0);  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(1);  [BUGGY]    StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	ArrayList    <    String>    foundDescriptions    =    new    ArrayList    <    String>(0);    ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(1);	  	non-compiled	[CE]  variable  foundDescriptions  is  already  defined  in  method  applyPattern(String)	4	None	add
11	[BUG]  [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(0);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  true);  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(0);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  true);  [BUGGY]    StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	ArrayList    <    String>    foundDescriptions    =    new    ArrayList    <    String>(0);    junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  true);	  	non-compiled	[CE]  not  a  statement	4	None	add
12	[BUG]  [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(0);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  pattern);  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(0);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  pattern);  [BUGGY]    StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	ArrayList    <    String>    foundDescriptions    =    new    ArrayList    <    String>(0);    junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  pattern);	  	non-compiled	[CE]  not  a  statement	4	None	add
13	[BUG]  [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(0);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  this);  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(0);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  this);  [BUGGY]    StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	ArrayList    <    String>    foundDescriptions    =    new    ArrayList    <    String>(0);    junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  this);	  	non-compiled	[CE]  not  a  statement	4	None	add
14	[BUG]  [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(1);  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(1);  [CE]  variable  foundDescriptions  is  already  defined  in  method  applyPattern(String)  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(1);  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(1);  [BUGGY]    StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	ArrayList    <    String>    foundDescriptions    =    new    ArrayList    <    String>(1);    ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(1);	  	non-compiled	[CE]  variable  foundDescriptions  is  already  defined  in  method  applyPattern(String)	2	None	add
15	[BUG]  [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(1);  java.util.ArrayList  <  String>  foundDescriptions  =  new  java.util.ArrayList  <  String>(1);  [CE]  variable  foundDescriptions  is  already  defined  in  method  applyPattern(String)  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(1);  java.util.ArrayList  <  String>  foundDescriptions  =  new  java.util.ArrayList  <  String>(1);  [BUGGY]    StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	ArrayList    <    String>    foundDescriptions    =    new    ArrayList    <    String>(1);    java.util.ArrayList  <  String>  foundDescriptions  =  new  java.util.ArrayList  <  String>(1);	  	non-compiled	[CE]  variable  foundDescriptions  is  already  defined  in  method  applyPattern(String)	2	None	add
16	[BUG]  [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(1);  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(2);  [CE]  variable  foundDescriptions  is  already  defined  in  method  applyPattern(String)  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(1);  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(2);  [BUGGY]    StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	ArrayList    <    String>    foundDescriptions    =    new    ArrayList    <    String>(1);    ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(2);	  	non-compiled	[CE]  variable  foundDescriptions  is  already  defined  in  method  applyPattern(String)	2	None	add
17	[BUG]  [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  true);  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  true);  [BUGGY]    StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	ArrayList    <    String>    foundDescriptions    =    new    ArrayList    <    String>(1);    junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  true);	  	non-compiled	[CE]  not  a  statement	2	None	add
18	[BUG]  [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  pattern);  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  pattern);  [BUGGY]    StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	ArrayList    <    String>    foundDescriptions    =    new    ArrayList    <    String>(1);    junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  pattern);	  	non-compiled	[CE]  not  a  statement	2	None	add
19	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(7);  [BUGGY]    StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	add	ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(7);	  ArrayList    <    String>    foundDescriptions    =    new    ArrayList    <    String>(8);    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	12	1	replace
20	[BUG]  [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(7);  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(7);  [BUGGY]    StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(7);	  ArrayList    <    String>    foundDescriptions    =    new    ArrayList    <    String>(8);    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	12	1	replace
21	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(6);  [BUGGY]    StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	add	ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(6);	  ArrayList    <    String>    foundDescriptions    =    new    ArrayList    <    String>(8);    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	12	1	replace
22	[BUG]  [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(6);  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(6);  [BUGGY]    StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(6);	  ArrayList    <    String>    foundDescriptions    =    new    ArrayList    <    String>(8);    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	12	1	replace
23	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendPattern(pattern,  it.next());  }  [CE]  cannot  find  symbol  foundDescriptions  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendPattern(pattern,  it.next());  }  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendPattern(pattern,  it.next());  }	      if(foundFormats    ==    null)    {    for(Iterator    <    String>    it    =    foundFormats.iterator();    it.hasNext();)    {    appendPattern(pattern,    it.next());    }    	non-compiled	[CE]  cannot  find  symbol  foundDescriptions	7	None	replace
24	[BUG]  [BUGGY]  if(foundFormats  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendPattern(pattern,  it.next());  }  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  if(foundFormats  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendPattern(pattern,  it.next());  }  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	if(foundFormats  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendPattern(pattern,  it.next());  }	      if(foundFormats    ==    null)    {    for(Iterator    <    String>    it    =    foundFormats.iterator();    it.hasNext();)    {    appendPattern(pattern,    it.next());    }    	non-compiled	[CE]  ';'  expected	7	None	replace
25	[BUG]  [BUGGY]  if(foundFormats!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendPattern(pattern,  it.next());  }  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  if(foundFormats!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendPattern(pattern,  it.next());  }  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	if(foundFormats!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendPattern(pattern,  it.next());  }	      if(foundFormats    ==    null)    {    for(Iterator    <    String>    it    =    foundFormats.iterator();    it.hasNext();)    {    appendPattern(pattern,    it.next());    }    	non-compiled	[CE]  ';'  expected	7	None	replace
26	[BUG]  [BUGGY]  if(foundFormats!=  null)  {  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendPattern(pattern,  it.next());  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  if(foundFormats!=  null)  {  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendPattern(pattern,  it.next());  }  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	if(foundFormats!=  null)  {  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendPattern(pattern,  it.next());  }	      if(foundFormats    ==    null)    {    for(Iterator    <    String>    it    =    foundFormats.iterator();    it.hasNext();)    {    appendPattern(pattern,    it.next());    }    	non-compiled	[CE]  ';'  expected	7	None	replace
27	[BUG]  [BUGGY]  if(!foundFormats.isEmpty())  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  break;  }  }  [CE]  cannot  find  symbol  foundDescriptions  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  if(!foundFormats.isEmpty())  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  break;  }  }  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	if(!foundFormats.isEmpty())  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  break;  }  }	      if(!foundFormats.isEmpty())    {    for(Iterator    <    String>    it    =    foundFormats.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    break;    }    	non-compiled	[CE]  cannot  find  symbol  foundDescriptions	21	None	replace
28	[BUG]  [BUGGY]  if(!foundFormats.isEmpty())  {  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  break;  }  }  [CE]  incompatible  types  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  if(!foundFormats.isEmpty())  {  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  break;  }  }  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	if(!foundFormats.isEmpty())  {  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  break;  }  }	      if(!foundFormats.isEmpty())    {    for(Iterator    <    String>    it    =    foundFormats.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    break;    }    	non-compiled	[CE]  incompatible  types	21	None	replace
29	[BUG]  [BUGGY]  if(!foundFormats.isEmpty())  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  break;  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  if(!foundFormats.isEmpty())  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  break;  }  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	if(!foundFormats.isEmpty())  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  break;  }	      if(!foundFormats.isEmpty())    {    for(Iterator    <    String>    it    =    foundFormats.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    break;    }    	non-compiled	[CE]  ';'  expected	21	None	replace
30	[BUG]  [BUGGY]  if(foundFormats!=  null)  {  if(!foundFormats.isEmpty())  {  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.n  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  if(foundFormats!=  null)  {  if(!foundFormats.isEmpty())  {  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.n  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	if(foundFormats!=  null)  {  if(!foundFormats.isEmpty())  {  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.n	      if(!foundFormats.isEmpty())    {    for(Iterator    <    String>    it    =    foundFormats.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    break;    }    	non-compiled	[CE]  ')'  expected	21	None	replace
31	[BUG]  [BUGGY]  Iterator  <  String>  it  =  foundDescriptions.iterator();  [CE]  cannot  find  symbol  foundDescriptions  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  Iterator  <  String>  it  =  foundDescriptions.iterator();  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	Iterator  <  String>  it  =  foundDescriptions.iterator();	      Iterator    <    String>    it    =    foundFormats.iterator();    	non-compiled	[CE]  cannot  find  symbol  foundDescriptions	13	None	replace
32	[BUG]  [BUGGY]  Iterator  <  String>  it  =  origFormats.iterator();  [CE]  cannot  find  symbol  origFormats  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  Iterator  <  String>  it  =  origFormats.iterator();  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	Iterator  <  String>  it  =  origFormats.iterator();	      Iterator    <    String>    it    =    foundFormats.iterator();    	non-compiled	[CE]  cannot  find  symbol  origFormats	13	None	replace
33	[BUG]  [BUGGY]  Iterator  <  String>  it  =  this.foundFormats.iterator();  [CE]  cannot  find  symbol  foundFormats  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  Iterator  <  String>  it  =  this.foundFormats.iterator();  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	Iterator  <  String>  it  =  this.foundFormats.iterator();	      Iterator    <    String>    it    =    foundFormats.iterator();    	non-compiled	[CE]  cannot  find  symbol  foundFormats	13	None	replace
34	[BUG]  [BUGGY]  ArrayList  <  Format>  foundDescriptions  =  new  ArrayList  <  Format>(toPattern);  [CE]  no  suitable  constructor  found  for  ArrayList(String)  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  ArrayList  <  Format>  foundDescriptions  =  new  ArrayList  <  Format>(toPattern);  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	ArrayList  <  Format>  foundDescriptions  =  new  ArrayList  <  Format>(toPattern);	      ArrayList    <    Format>    foundDescriptions    =    new    ArrayList    <    Format>();    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayList(String)	15	None	replace
35	[BUG]  [BUGGY]  List  <  Format>  foundDescriptions  =  new  ArrayList  <  Format>();  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  List  <  Format>  foundDescriptions  =  new  ArrayList  <  Format>();  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	List  <  Format>  foundDescriptions  =  new  ArrayList  <  Format>();	      ArrayList    <    Format>    foundDescriptions    =    new    ArrayList    <    Format>();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
36	[BUG]  [BUGGY]  ArrayList  <  Format>  foundDescriptions  =  new  ArrayList  <  Format>(1);  [CE]  no  suitable  method  found  for  add(String)  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  ArrayList  <  Format>  foundDescriptions  =  new  ArrayList  <  Format>(1);  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	ArrayList  <  Format>  foundDescriptions  =  new  ArrayList  <  Format>(1);	      ArrayList    <    Format>    foundDescriptions    =    new    ArrayList    <    Format>();    	non-compiled	[CE]  no  suitable  method  found  for  add(String)	15	None	replace
37	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  Lists.newArrayList();  [CE]  variable  foundFormats  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  ArrayList  <  Format>  foundFormats  =  Lists.newArrayList();  [BUGGY]    StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	ArrayList  <  Format>  foundFormats  =  Lists.newArrayList();	      	non-compiled	[CE]  variable  foundFormats  is  already  defined  in  method  applyPattern(String)	6	None	replace
38	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>();  toPattern.addAll(origFormats);  [CE]  variable  foundFormats  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>();  toPattern.addAll(origFormats);  [BUGGY]    StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>();  toPattern.addAll(origFormats);	      	non-compiled	[CE]  variable  foundFormats  is  already  defined  in  method  applyPattern(String)	6	None	replace
39	[BUG]  [BUGGY]  Collection  <  String>  foundDescriptions  =  new  ArrayList  <  String>();  [CE]  method  insertFormats  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  Collection  <  String>  foundDescriptions  =  new  ArrayList  <  String>();  [BUGGY]    StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	Collection  <  String>  foundDescriptions  =  new  ArrayList  <  String>();	  List    <    String>    foundDescriptions    =    new    ArrayList    <    String>();    	non-compiled	[CE]  method  insertFormats  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	1	None	replace
40	[BUG]  [BUGGY]  if(foundFormats  ==  null)  {  for(Iterator  <  Format>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFormats(it.next());  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  if(foundFormats  ==  null)  {  for(Iterator  <  Format>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFormats(it.next());  }  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	if(foundFormats  ==  null)  {  for(Iterator  <  Format>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFormats(it.next());  }	      if(foundFormats    ==    null)    {    for(Iterator    <    Format>    it    =    foundFormats.iterator();    it.hasNext();)    {    appendFormats(it.next());    }    	non-compiled	[CE]  ';'  expected	17	None	replace
41	[BUG]  [BUGGY]  for(Iterator  <  Format>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFormats(it.next());  }  [CE]  cannot  find  symbol  foundDescriptions  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  for(Iterator  <  Format>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFormats(it.next());  }  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	for(Iterator  <  Format>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFormats(it.next());  }	      if(foundFormats    ==    null)    {    for(Iterator    <    Format>    it    =    foundFormats.iterator();    it.hasNext();)    {    appendFormats(it.next());    }    	non-compiled	[CE]  cannot  find  symbol  foundDescriptions	17	None	replace
42	[BUG]  [BUGGY]  if(foundFormats!=  null)  {  for(Iterator  <  Format>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFormats(it.next());  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  if(foundFormats!=  null)  {  for(Iterator  <  Format>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFormats(it.next());  }  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	if(foundFormats!=  null)  {  for(Iterator  <  Format>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFormats(it.next());  }	      if(foundFormats    ==    null)    {    for(Iterator    <    Format>    it    =    foundFormats.iterator();    it.hasNext();)    {    appendFormats(it.next());    }    	non-compiled	[CE]  ';'  expected	17	None	replace
43	[BUG]  [BUGGY]  if(foundFormats!=  null)  {  for(Iterator  <  Format>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendFormats(it.next());  }  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  if(foundFormats!=  null)  {  for(Iterator  <  Format>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendFormats(it.next());  }  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	if(foundFormats!=  null)  {  for(Iterator  <  Format>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendFormats(it.next());  }	      if(foundFormats    ==    null)    {    for(Iterator    <    Format>    it    =    foundFormats.iterator();    it.hasNext();)    {    appendFormats(it.next());    }    	non-compiled	[CE]  ';'  expected	17	None	replace
44	[BUG]  [BUGGY]  if(!foundFormats.isEmpty())  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  if(!foundFormats.isEmpty())  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	if(!foundFormats.isEmpty())  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	      if(!foundFormats.isEmpty())    {    for(Iterator    <    String>    it    =    foundFormats.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  ';'  expected	20	None	replace
45	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  incompatible  types  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	      if(!foundFormats.isEmpty())    {    for(Iterator    <    String>    it    =    foundFormats.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  incompatible  types	20	None	replace
46	[BUG]  [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(4);  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(4);  [CE]  variable  foundDescriptions  is  already  defined  in  method  applyPattern(String)  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(4);  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(4);  [BUGGY]    StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	ArrayList    <    String>    foundDescriptions    =    new    ArrayList    <    String>(4);    ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(4);	  	non-compiled	[CE]  variable  foundDescriptions  is  already  defined  in  method  applyPattern(String)	18	None	add
47	[BUG]  [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(4);  java.util.ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(4);  [CE]  variable  foundDescriptions  is  already  defined  in  method  applyPattern(String)  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(4);  java.util.ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(4);  [BUGGY]    StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	ArrayList    <    String>    foundDescriptions    =    new    ArrayList    <    String>(4);    java.util.ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(4);	  	non-compiled	[CE]  variable  foundDescriptions  is  already  defined  in  method  applyPattern(String)	18	None	add
48	[BUG]  [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(4);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  true);  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(4);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  true);  [BUGGY]    StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	ArrayList    <    String>    foundDescriptions    =    new    ArrayList    <    String>(4);    junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  true);	  	non-compiled	[CE]  not  a  statement	18	None	add
49	[BUG]  [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(4);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  pattern);  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(4);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  pattern);  [BUGGY]    StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	ArrayList    <    String>    foundDescriptions    =    new    ArrayList    <    String>(4);    junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  pattern);	  	non-compiled	[CE]  not  a  statement	18	None	add
50	[BUG]  [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(4);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  this);  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(4);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  this);  [BUGGY]    StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	ArrayList    <    String>    foundDescriptions    =    new    ArrayList    <    String>(4);    junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  this);	  	non-compiled	[CE]  not  a  statement	18	None	add
51	[BUG]  [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(8);  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(8);  [CE]  variable  foundDescriptions  is  already  defined  in  method  applyPattern(String)  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(8);  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(8);  [BUGGY]    StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	ArrayList    <    String>    foundDescriptions    =    new    ArrayList    <    String>(8);    ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(8);	  	non-compiled	[CE]  variable  foundDescriptions  is  already  defined  in  method  applyPattern(String)	11	None	add
52	[BUG]  [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(8);  java.util.ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(8);  [CE]  variable  foundDescriptions  is  already  defined  in  method  applyPattern(String)  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(8);  java.util.ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(8);  [BUGGY]    StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	ArrayList    <    String>    foundDescriptions    =    new    ArrayList    <    String>(8);    java.util.ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(8);	  	non-compiled	[CE]  variable  foundDescriptions  is  already  defined  in  method  applyPattern(String)	11	None	add
53	[BUG]  [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(8);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  true);  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(8);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  true);  [BUGGY]    StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	ArrayList    <    String>    foundDescriptions    =    new    ArrayList    <    String>(8);    junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  true);	  	non-compiled	[CE]  not  a  statement	11	None	add
54	[BUG]  [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(8);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  pattern);  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(8);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  pattern);  [BUGGY]    StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	ArrayList    <    String>    foundDescriptions    =    new    ArrayList    <    String>(8);    junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  pattern);	  	non-compiled	[CE]  not  a  statement	11	None	add
55	[BUG]  [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(8);  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(7);  [CE]  variable  foundDescriptions  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(8);  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(7);  [BUGGY]    StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	ArrayList    <    String>    foundDescriptions    =    new    ArrayList    <    String>(8);    ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(7);	  	non-compiled	[CE]  variable  foundDescriptions  is  already  defined  in  method  applyPattern(String)	11	None	add
56	[BUG]  [BUGGY]  if(!foundFormats.isEmpty())  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendPattern(pattern,  it.next());  }  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  if(!foundFormats.isEmpty())  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendPattern(pattern,  it.next());  }  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	if(!foundFormats.isEmpty())  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendPattern(pattern,  it.next());  }	      if(!foundFormats.isEmpty())    {    for(Iterator    <    String>    it    =    foundFormats.iterator();    it.hasNext();)    {    appendPattern(pattern,    it.next());    }    	non-compiled	[CE]  ';'  expected	8	None	replace
57	[BUG]  [BUGGY]  if(foundFormats!=  null)  {  if(!foundFormats.isEmpty())  {  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendPattern(pattern,  it.next());  }  }  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  if(foundFormats!=  null)  {  if(!foundFormats.isEmpty())  {  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendPattern(pattern,  it.next());  }  }  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	if(foundFormats!=  null)  {  if(!foundFormats.isEmpty())  {  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendPattern(pattern,  it.next());  }  }	      if(!foundFormats.isEmpty())    {    for(Iterator    <    String>    it    =    foundFormats.iterator();    it.hasNext();)    {    appendPattern(pattern,    it.next());    }    	non-compiled	[CE]  ';'  expected	8	None	replace
58	[BUG]  [BUGGY]  if(foundFormats!=  null)  {  if(!foundFormats.isEmpty())  {  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendPattern(pattern,  it.next());  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  if(foundFormats!=  null)  {  if(!foundFormats.isEmpty())  {  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendPattern(pattern,  it.next());  }  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	if(foundFormats!=  null)  {  if(!foundFormats.isEmpty())  {  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendPattern(pattern,  it.next());  }	      if(!foundFormats.isEmpty())    {    for(Iterator    <    String>    it    =    foundFormats.iterator();    it.hasNext();)    {    appendPattern(pattern,    it.next());    }    	non-compiled	[CE]  ';'  expected	8	None	replace
59	[BUG]  [BUGGY]  if(!foundFormats.isEmpty())  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  if(!foundFormats.isEmpty())  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	if(!foundFormats.isEmpty())  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }	      if(!foundFormats.isEmpty())    {    for(Iterator    <    String>    it    =    foundFormats.iterator();    it.hasNext();)    {    applyPattern(it.next());    }    	non-compiled	[CE]  ';'  expected	10	None	replace
60	[BUG]  [BUGGY]  if(foundFormats!=  null)  {  if(!foundFormats.isEmpty())  {  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  if(foundFormats!=  null)  {  if(!foundFormats.isEmpty())  {  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  }  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	if(foundFormats!=  null)  {  if(!foundFormats.isEmpty())  {  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  }	      if(!foundFormats.isEmpty())    {    for(Iterator    <    String>    it    =    foundFormats.iterator();    it.hasNext();)    {    applyPattern(it.next());    }    	non-compiled	[CE]  ';'  expected	10	None	replace
61	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [CE]  incompatible  types  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  applyPattern(it.next());  }	      if(!foundFormats.isEmpty())    {    for(Iterator    <    String>    it    =    foundFormats.iterator();    it.hasNext();)    {    applyPattern(it.next());    }    	non-compiled	[CE]  incompatible  types	10	None	replace
62	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(toPattern);  [CE]  variable  foundFormats  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(toPattern);  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(toPattern);	      ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>();    	non-compiled	[CE]  variable  foundFormats  is  already  defined  in  method  applyPattern(String)	22	None	replace
63	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  [CE]  variable  foundFormats  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);	      ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>();    	non-compiled	[CE]  variable  foundFormats  is  already  defined  in  method  applyPattern(String)	22	None	replace
64	[BUG]  [BUGGY]  List  <  Format>  foundFormats  =  new  ArrayList  <  Format>();  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  List  <  Format>  foundFormats  =  new  ArrayList  <  Format>();  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	List  <  Format>  foundFormats  =  new  ArrayList  <  Format>();	      ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
65	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [CE]  cannot  find  symbol  foundDescriptions  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }	      if(foundFormats    ==    null)    {    for(Iterator    <    String>    it    =    foundFormats.iterator();    it.hasNext();)    {    appendString(pattern,    it.next());    }    	non-compiled	[CE]  cannot  find  symbol  foundDescriptions	16	None	replace
66	[BUG]  [BUGGY]  if(foundFormats  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  if(foundFormats  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	if(foundFormats  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }	      if(foundFormats    ==    null)    {    for(Iterator    <    String>    it    =    foundFormats.iterator();    it.hasNext();)    {    appendString(pattern,    it.next());    }    	non-compiled	[CE]  ';'  expected	16	None	replace
67	[BUG]  [BUGGY]  if(foundFormats!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  if(foundFormats!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	if(foundFormats!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }	      if(foundFormats    ==    null)    {    for(Iterator    <    String>    it    =    foundFormats.iterator();    it.hasNext();)    {    appendString(pattern,    it.next());    }    	non-compiled	[CE]  ';'  expected	16	None	replace
68	[BUG]  [BUGGY]  if(foundFormats!=  null)  {  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  if(foundFormats!=  null)  {  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	if(foundFormats!=  null)  {  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }	      if(foundFormats    ==    null)    {    for(Iterator    <    String>    it    =    foundFormats.iterator();    it.hasNext();)    {    appendString(pattern,    it.next());    }    	non-compiled	[CE]  ';'  expected	16	None	replace
69	[BUG]  [BUGGY]  if(foundFormats!=  null)  {  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  toPattern.add(it.next());  }  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  if(foundFormats!=  null)  {  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  toPattern.add(it.next());  }  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	if(foundFormats!=  null)  {  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  toPattern.add(it.next());  }	      if(!foundFormats.isEmpty())    {    for(Iterator    <    String>    it    =    foundFormats.iterator();    it.hasNext();)    {    toPattern.add(it.next());    }    	non-compiled	[CE]  ';'  expected	9	None	replace
70	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  toPattern.add(it.next());  }  [CE]  incompatible  types  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  toPattern.add(it.next());  }  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  toPattern.add(it.next());  }	      if(!foundFormats.isEmpty())    {    for(Iterator    <    String>    it    =    foundFormats.iterator();    it.hasNext();)    {    toPattern.add(it.next());    }    	non-compiled	[CE]  incompatible  types	9	None	replace
71	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendPattern(pattern,  it.next());  }  [CE]  incompatible  types  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendPattern(pattern,  it.next());  }  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendPattern(pattern,  it.next());  }	      if(!foundFormats.isEmpty())    {    for(Iterator    <    String>    it    =    foundFormats.iterator();    it.hasNext();)    {    appendPattern(pattern,    it.next());    }    	non-compiled	[CE]  incompatible  types	8	None	replace
72	[BUG]  [BUGGY]  if(!foundFormats.isEmpty())  {  for(Iterator  <  String>  it  =  origFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  if(!foundFormats.isEmpty())  {  for(Iterator  <  String>  it  =  origFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	if(!foundFormats.isEmpty())  {  for(Iterator  <  String>  it  =  origFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	      if(!foundFormats.isEmpty())    {    for(Iterator    <    String>    it    =    foundFormats.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  ';'  expected	20	None	replace
73	[BUG]  [BUGGY]  for(Iterator  <  Format>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendFormats(it.next());  }  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  for(Iterator  <  Format>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendFormats(it.next());  }  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	for(Iterator  <  Format>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendFormats(it.next());  }	      if(foundFormats    ==    null)    {    for(Iterator    <    Format>    it    =    foundFormats.iterator();    it.hasNext();)    {    appendFormats(it.next());    }    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
74	[BUG]  [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  Format>();  [CE]  incompatible  types  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  Format>();  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  Format>();	      if(foundFormats    ==    null)    {    for(Iterator    <    Format>    it    =    foundFormats.iterator();    it.hasNext();)    {    appendFormats(it.next());    }    	non-compiled	[CE]  incompatible  types	17	None	replace
75	[BUG]  [BUGGY]  ArrayList  <  Format>  toPattern  =  new  ArrayList  <  Format>();  [CE]  cannot  find  symbol  foundDescriptions  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  ArrayList  <  Format>  toPattern  =  new  ArrayList  <  Format>();  [BUGGY]    StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	ArrayList  <  Format>  toPattern  =  new  ArrayList  <  Format>();	      	non-compiled	[CE]  cannot  find  symbol  foundDescriptions	6	None	replace
76	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [CE]  incompatible  types  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }	      if(foundFormats    ==    null)    {    for(Iterator    <    String>    it    =    foundFormats.iterator();    it.hasNext();)    {    appendString(pattern,    it.next());    }    	non-compiled	[CE]  incompatible  types	16	None	replace
77	[BUG]  [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(8);  List  <  String>  foundDescriptions  =  new  ArrayList  <  String>(8);  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(8);  List  <  String>  foundDescriptions  =  new  ArrayList  <  String>(8);  [BUGGY]    StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	ArrayList    <    String>    foundDescriptions    =    new    ArrayList    <    String>(8);    List  <  String>  foundDescriptions  =  new  ArrayList  <  String>(8);	  	non-compiled	[CE]  cannot  find  symbol	11	None	add
78	[BUG]  [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(8);  Iterator  <  String>  it  =  foundFormats.iterator();  [CE]  incompatible  types  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(8);  Iterator  <  String>  it  =  foundFormats.iterator();  [BUGGY]    StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	ArrayList    <    String>    foundDescriptions    =    new    ArrayList    <    String>(8);    Iterator  <  String>  it  =  foundFormats.iterator();	  	non-compiled	[CE]  incompatible  types	11	None	add
79	[BUG]  [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(8);  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(6);  [CE]  variable  foundDescriptions  is  already  defined  in  method  applyPattern(String)  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(8);  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(6);  [BUGGY]    StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	ArrayList    <    String>    foundDescriptions    =    new    ArrayList    <    String>(8);    ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(6);	  	non-compiled	[CE]  variable  foundDescriptions  is  already  defined  in  method  applyPattern(String)	11	None	add
80	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  [CE]  variable  foundFormats  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);	      ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>();    	non-compiled	[CE]  variable  foundFormats  is  already  defined  in  method  applyPattern(String)	22	None	replace
81	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(2);  [CE]  variable  foundFormats  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(2);  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(2);	      ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>();    	non-compiled	[CE]  variable  foundFormats  is  already  defined  in  method  applyPattern(String)	22	None	replace
82	[BUG]  [BUGGY]  if(foundFormats!=  null)  {  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  if(foundFormats!=  null)  {  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	if(foundFormats!=  null)  {  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  applyPattern(it.next());  }	      if(!foundFormats.isEmpty())    {    for(Iterator    <    String>    it    =    foundFormats.iterator();    it.hasNext();)    {    applyPattern(it.next());    }    	non-compiled	[CE]  ';'  expected	10	None	replace
83	[BUG]  [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(0);  List  <  String>  foundDescriptions  =  new  ArrayList  <  String>(0);  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(0);  List  <  String>  foundDescriptions  =  new  ArrayList  <  String>(0);  [BUGGY]    StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	ArrayList    <    String>    foundDescriptions    =    new    ArrayList    <    String>(0);    List  <  String>  foundDescriptions  =  new  ArrayList  <  String>(0);	  	non-compiled	[CE]  cannot  find  symbol	4	None	add
84	[BUG]  [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(0);  List  <  String>  foundDescriptions  =  new  ArrayList  <  String>(1);  [CE]  cannot  find  symbol  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(0);  List  <  String>  foundDescriptions  =  new  ArrayList  <  String>(1);  [BUGGY]    StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	ArrayList    <    String>    foundDescriptions    =    new    ArrayList    <    String>(0);    List  <  String>  foundDescriptions  =  new  ArrayList  <  String>(1);	  	non-compiled	[CE]  cannot  find  symbol	4	None	add
85	[BUG]  [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(4);  List  <  String>  foundDescriptions  =  new  ArrayList  <  String>(4);  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(4);  List  <  String>  foundDescriptions  =  new  ArrayList  <  String>(4);  [BUGGY]    StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	ArrayList    <    String>    foundDescriptions    =    new    ArrayList    <    String>(4);    List  <  String>  foundDescriptions  =  new  ArrayList  <  String>(4);	  	non-compiled	[CE]  cannot  find  symbol	18	None	add
86	[BUG]  [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(4);  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(5);  [CE]  variable  foundDescriptions  is  already  defined  in  method  applyPattern(String)  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(4);  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(5);  [BUGGY]    StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	ArrayList    <    String>    foundDescriptions    =    new    ArrayList    <    String>(4);    ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(5);	  	non-compiled	[CE]  variable  foundDescriptions  is  already  defined  in  method  applyPattern(String)	18	None	add
87	[BUG]  [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(4);  Iterator  <  String>  it  =  foundFormats.iterator();  [CE]  incompatible  types  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(4);  Iterator  <  String>  it  =  foundFormats.iterator();  [BUGGY]    StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	ArrayList    <    String>    foundDescriptions    =    new    ArrayList    <    String>(4);    Iterator  <  String>  it  =  foundFormats.iterator();	  	non-compiled	[CE]  incompatible  types	18	None	add
88	[BUG]  [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(4);  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(6);  [CE]  variable  foundDescriptions  is  already  defined  in  method  applyPattern(String)  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(4);  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(6);  [BUGGY]    StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	ArrayList    <    String>    foundDescriptions    =    new    ArrayList    <    String>(4);    ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(6);	  	non-compiled	[CE]  variable  foundDescriptions  is  already  defined  in  method  applyPattern(String)	18	None	add
89	[BUG]  [BUGGY]  Collections.  <  String>  foundDescriptions  =  new  ArrayList  <  String>();  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  Collections.  <  String>  foundDescriptions  =  new  ArrayList  <  String>();  [BUGGY]    StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	Collections.  <  String>  foundDescriptions  =  new  ArrayList  <  String>();	  List    <    String>    foundDescriptions    =    new    ArrayList    <    String>();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
90	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(5);  [BUGGY]    StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	add	ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(5);	  ArrayList    <    String>    foundDescriptions    =    new    ArrayList    <    String>(4);    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	19	1	replace
91	[BUG]  [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(5);  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(5);  [BUGGY]    StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(5);	  ArrayList    <    String>    foundDescriptions    =    new    ArrayList    <    String>(4);    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	19	1	replace
92	[BUG]  [BUGGY]  Iterator  <  Format>  it  =  this.foundDescriptions.iterator();  [CE]  cannot  find  symbol  foundDescriptions  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  Iterator  <  Format>  it  =  this.foundDescriptions.iterator();  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	Iterator  <  Format>  it  =  this.foundDescriptions.iterator();	      Iterator    <    Format>    it    =    foundFormats.iterator();    	non-compiled	[CE]  cannot  find  symbol  foundDescriptions	14	None	replace
93	[BUG]  [BUGGY]  ArrayList  <  Format>  foundDescriptions  =  new  ArrayList  <  Format>(2);  [CE]  no  suitable  method  found  for  add(String)  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  ArrayList  <  Format>  foundDescriptions  =  new  ArrayList  <  Format>(2);  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	ArrayList  <  Format>  foundDescriptions  =  new  ArrayList  <  Format>(2);	      ArrayList    <    Format>    foundDescriptions    =    new    ArrayList    <    Format>();    	non-compiled	[CE]  no  suitable  method  found  for  add(String)	15	None	replace
94	[BUG]  [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(1);  List  <  String>  foundDescriptions  =  new  ArrayList  <  String>(1);  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(1);  List  <  String>  foundDescriptions  =  new  ArrayList  <  String>(1);  [BUGGY]    StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	ArrayList    <    String>    foundDescriptions    =    new    ArrayList    <    String>(1);    List  <  String>  foundDescriptions  =  new  ArrayList  <  String>(1);	  	non-compiled	[CE]  cannot  find  symbol	2	None	add
95	[BUG]  [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(1);  Iterator  <  String>  it  =  foundFormats.iterator();  [CE]  incompatible  types  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(1);  Iterator  <  String>  it  =  foundFormats.iterator();  [BUGGY]    StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	ArrayList    <    String>    foundDescriptions    =    new    ArrayList    <    String>(1);    Iterator  <  String>  it  =  foundFormats.iterator();	  	non-compiled	[CE]  incompatible  types	2	None	add
96	[BUG]  [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(1);  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(3);  [CE]  variable  foundDescriptions  is  already  defined  in  method  applyPattern(String)  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(1);  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(3);  [BUGGY]    StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	ArrayList    <    String>    foundDescriptions    =    new    ArrayList    <    String>(1);    ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(3);	  	non-compiled	[CE]  variable  foundDescriptions  is  already  defined  in  method  applyPattern(String)	2	None	add
97	[BUG]  [BUGGY]  if(foundFormats!=  null)  {  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  break;  }  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  if(foundFormats!=  null)  {  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  break;  }  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	if(foundFormats!=  null)  {  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  break;  }	      if(!foundFormats.isEmpty())    {    for(Iterator    <    String>    it    =    foundFormats.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    break;    }    	non-compiled	[CE]  ';'  expected	21	None	replace
98	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  break;  }  [CE]  cannot  find  symbol  foundDescriptions  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  break;  }  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  break;  }	      if(!foundFormats.isEmpty())    {    for(Iterator    <    String>    it    =    foundFormats.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    break;    }    	non-compiled	[CE]  cannot  find  symbol  foundDescriptions	21	None	replace
99	[BUG]  [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(4);  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(8);  [CE]  variable  foundDescriptions  is  already  defined  in  method  applyPattern(String)  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(4);  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(8);  [BUGGY]    StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	ArrayList    <    String>    foundDescriptions    =    new    ArrayList    <    String>(4);    ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(8);	  	non-compiled	[CE]  variable  foundDescriptions  is  already  defined  in  method  applyPattern(String)	18	None	add
100	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(fmtCount);  [CE]  variable  foundFormats  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(fmtCount);  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(fmtCount);	      ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>();    	non-compiled	[CE]  variable  foundFormats  is  already  defined  in  method  applyPattern(String)	22	None	replace
101	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(4);  [CE]  variable  foundFormats  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(4);  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(4);	      ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>();    	non-compiled	[CE]  variable  foundFormats  is  already  defined  in  method  applyPattern(String)	22	None	replace
102	[BUG]  [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(0);  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>((0);  [CE]  ')'  expected  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(0);  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>((0);  [BUGGY]    StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	ArrayList    <    String>    foundDescriptions    =    new    ArrayList    <    String>(0);    ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>((0);	  	non-compiled	[CE]  ')'  expected	4	None	add
103	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendPattern(pattern,  it.next());  }  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  if(toPattern  ==  null)  {  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendPattern(pattern,  it.next());  }  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	if(toPattern  ==  null)  {  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendPattern(pattern,  it.next());  }	      if(foundFormats    ==    null)    {    for(Iterator    <    String>    it    =    foundFormats.iterator();    it.hasNext();)    {    appendPattern(pattern,    it.next());    }    	non-compiled	[CE]  ';'  expected	7	None	replace
104	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendPattern(pattern,  it.next());  }  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  if(toPattern  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendPattern(pattern,  it.next());  }  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	if(toPattern  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendPattern(pattern,  it.next());  }	      if(foundFormats    ==    null)    {    for(Iterator    <    String>    it    =    foundFormats.iterator();    it.hasNext();)    {    appendPattern(pattern,    it.next());    }    	non-compiled	[CE]  ';'  expected	7	None	replace
105	[BUG]  [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(1);  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(4);  [CE]  variable  foundDescriptions  is  already  defined  in  method  applyPattern(String)  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(1);  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(4);  [BUGGY]    StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	ArrayList    <    String>    foundDescriptions    =    new    ArrayList    <    String>(1);    ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(4);	  	non-compiled	[CE]  variable  foundDescriptions  is  already  defined  in  method  applyPattern(String)	2	None	add
106	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [CE]  cannot  find  symbol  foundDescriptions  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }	      if(!foundFormats.isEmpty())    {    for(Iterator    <    String>    it    =    foundFormats.iterator();    it.hasNext();)    {    applyPattern(it.next());    }    	non-compiled	[CE]  cannot  find  symbol  foundDescriptions	10	None	replace
107	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  cannot  find  symbol  foundDescriptions  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	      if(!foundFormats.isEmpty())    {    for(Iterator    <    String>    it    =    foundFormats.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  cannot  find  symbol  foundDescriptions	20	None	replace
108	[BUG]  [BUGGY]  Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	      if(!foundFormats.isEmpty())    {    for(Iterator    <    String>    it    =    foundFormats.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
109	[BUG]  [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(8);  ArrayList  <  String>  discoveredDescriptions  =  new  ArrayList  <  String>(8);  [CE]  variable  foundDescriptions  is  already  defined  in  method  applyPattern(String)  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(8);  ArrayList  <  String>  discoveredDescriptions  =  new  ArrayList  <  String>(8);  [BUGGY]    StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	ArrayList    <    String>    foundDescriptions    =    new    ArrayList    <    String>(8);    ArrayList  <  String>  discoveredDescriptions  =  new  ArrayList  <  String>(8);	  	non-compiled	[CE]  variable  foundDescriptions  is  already  defined  in  method  applyPattern(String)	11	None	add
110	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  if(!foundFormats.isEmpty())  {  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  if(toPattern  ==  null)  {  if(!foundFormats.isEmpty())  {  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	if(toPattern  ==  null)  {  if(!foundFormats.isEmpty())  {  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.	      if(!foundFormats.isEmpty())    {    for(Iterator    <    String>    it    =    foundFormats.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    break;    }    	non-compiled	[CE]  ')'  expected	21	None	replace
111	[BUG]  [BUGGY]  Iterator  <  String>  it  =  this.foundDescriptions.iterator();  [CE]  cannot  find  symbol  foundDescriptions  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();    [BUGGY]  Iterator  <  String>  it  =  this.foundDescriptions.iterator();  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	152	152	1	replace	Iterator  <  String>  it  =  this.foundDescriptions.iterator();	      Iterator    <    String>    it    =    foundFormats.iterator();    	non-compiled	[CE]  cannot  find  symbol  foundDescriptions	13	None	replace
