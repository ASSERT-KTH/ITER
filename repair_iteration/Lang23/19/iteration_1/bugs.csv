bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  format  =  parseFormatDescription(pattern,  next(pos));  [CE]  incompatible  types  [FE]    junit.framework.AssertionFailedError:  registry  [CONTEXT]  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  [BUGGY]  format  =  parseFormatDescription(pattern,  next(pos));  [BUGGY]  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	175	175	1	replace	format  =  parseFormatDescription(pattern,  next(pos));	format  =  getFormat(formatDescription);  	non-compiled	[CE]  incompatible  types	37	None	replace
2	[BUG]  [BUGGY]  format  =  getFormat(formatDescription,  pos);  [CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]      junit.framework.AssertionFailedError:  registry  [CONTEXT]  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  [BUGGY]  format  =  getFormat(formatDescription,  pos);  [BUGGY]  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	175	175	1	replace	format  =  getFormat(formatDescription,  pos);	format  =  getFormat(formatDescription);  	non-compiled	[CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	37	None	replace
3	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        junit.framework.AssertionFailedError:  registry  [CONTEXT]  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  [BUGGY]  format  =  getFormat(DUMMY_PATTERN);  [BUGGY]  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	175	175	1	add	format  =  getFormat(DUMMY_PATTERN);	format  =  getFormat(formatDescription);  	compilable	  [FE]  IllegalArgumentException  	37	5	replace
4	[BUG]  [BUGGY]  format  =  getFormat(DUMMY_PATTERN);  [FE]  IllegalArgumentException  [FE]        junit.framework.AssertionFailedError:  registry  [CONTEXT]  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  [BUGGY]  format  =  getFormat(DUMMY_PATTERN);  [BUGGY]  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	175	175	1	replace	format  =  getFormat(DUMMY_PATTERN);	format  =  getFormat(formatDescription);  	compilable	  [FE]  IllegalArgumentException  	37	5	replace
5	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          junit.framework.AssertionFailedError:  registry  [CONTEXT]  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  [BUGGY]    [BUGGY]  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	175	175	1	add	  	format  =  getFormat(formatDescription);  	compilable	  [FE]  IllegalArgumentException  	37	5	replace
6	[BUG]  [BUGGY]    [FE]  IllegalArgumentException  [FE]          junit.framework.AssertionFailedError:  registry  [CONTEXT]  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  [BUGGY]    [BUGGY]  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	175	175	1	replace	  	format  =  getFormat(formatDescription);  	compilable	  [FE]  IllegalArgumentException  	37	5	replace
7	[BUG]  [BUGGY]    if(formatDescription!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  formatDescription  =  it.next();  }  [CE]  orphaned  default  [FE]    junit.framework.AssertionFailedError:  registry  [CONTEXT]  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  [BUGGY]    if(formatDescription!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  formatDescription  =  it.next();  }  [BUGGY]  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	175	175	1	replace	    if(formatDescription!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  formatDescription  =  it.next();  }		non-compiled	[CE]  orphaned  default	38	None	add
8	[BUG]  [BUGGY]    if(formatDescription!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  orphaned  default  [FE]      junit.framework.AssertionFailedError:  registry  [CONTEXT]  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  [BUGGY]    if(formatDescription!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	175	175	1	replace	    if(formatDescription!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }		non-compiled	[CE]  orphaned  default	38	None	add
9	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        junit.framework.AssertionFailedError:  registry  [CONTEXT]  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  [BUGGY]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  [BUGGY]  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	175	175	1	add	    formatDescription  =  parseFormatDescription(pattern,  next(pos));		compilable	  [FE]  ArrayIndexOutOfBoundsException  	38	5	add
10	[BUG]  [BUGGY]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  [FE]  ArrayIndexOutOfBoundsException  [FE]        junit.framework.AssertionFailedError:  registry  [CONTEXT]  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  [BUGGY]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  [BUGGY]  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	175	175	1	replace	    formatDescription  =  parseFormatDescription(pattern,  next(pos));		compilable	  [FE]  ArrayIndexOutOfBoundsException  	38	5	add
11	[BUG]  [BUGGY]    if(formatDescription!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(QUOTE).append(formatDescription);  }  [CE]  orphaned  default  [FE]          junit.framework.AssertionFailedError:  registry  [CONTEXT]  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  [BUGGY]    if(formatDescription!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(QUOTE).append(formatDescription);  }  [BUGGY]  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	175	175	1	replace	    if(formatDescription!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(QUOTE).append(formatDescription);  }		non-compiled	[CE]  orphaned  default	38	None	add
12	[BUG]  [BUGGY]    if(formatDescription!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry  [CONTEXT]  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  [BUGGY]    if(formatDescription!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	175	175	1	replace	    if(formatDescription!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }		non-compiled	[CE]  orphaned  default	38	None	add
13	[BUG]  [BUGGY]  format  =  getFormat(DUMMY_PATTERN,  formatDescription);  [CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]    junit.framework.AssertionFailedError:  registry  [CONTEXT]  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  [BUGGY]  format  =  getFormat(DUMMY_PATTERN,  formatDescription);  [BUGGY]  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	175	175	1	replace	format  =  getFormat(DUMMY_PATTERN,  formatDescription);	format  =  getFormat(formatDescription);  	non-compiled	[CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	37	None	replace
14	[BUG]  [BUGGY]    if(formatDescription!=  null)  {  for(Iterator  it  =  origFormats.iterator();  it.hasNext();)  {  formatDescription  =  it.next();  }  [CE]  orphaned  default  [FE]    junit.framework.AssertionFailedError:  registry  [CONTEXT]  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  [BUGGY]    if(formatDescription!=  null)  {  for(Iterator  it  =  origFormats.iterator();  it.hasNext();)  {  formatDescription  =  it.next();  }  [BUGGY]  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	175	175	1	replace	    if(formatDescription!=  null)  {  for(Iterator  it  =  origFormats.iterator();  it.hasNext();)  {  formatDescription  =  it.next();  }		non-compiled	[CE]  orphaned  default	38	None	add
15	[BUG]  [BUGGY]    if(formatDescription!=  null)  {  for(Iterator  <  Object>  it  =  origFormats.iterator();  it.hasNext();)  {  formatDescription  =  it.next();  }  [CE]  orphaned  default  [FE]      junit.framework.AssertionFailedError:  registry  [CONTEXT]  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  [BUGGY]    if(formatDescription!=  null)  {  for(Iterator  <  Object>  it  =  origFormats.iterator();  it.hasNext();)  {  formatDescription  =  it.next();  }  [BUGGY]  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	175	175	1	replace	    if(formatDescription!=  null)  {  for(Iterator  <  Object>  it  =  origFormats.iterator();  it.hasNext();)  {  formatDescription  =  it.next();  }		non-compiled	[CE]  orphaned  default	38	None	add
16	[BUG]  [BUGGY]    if(formatDescription!=  null)  {  for(Iterator  it  =  origFormats.iterator();  it.hasNext();)  {  stripCustom.append(QUOTE).append(formatDescription);  }  [CE]  orphaned  default  [FE]        junit.framework.AssertionFailedError:  registry  [CONTEXT]  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  [BUGGY]    if(formatDescription!=  null)  {  for(Iterator  it  =  origFormats.iterator();  it.hasNext();)  {  stripCustom.append(QUOTE).append(formatDescription);  }  [BUGGY]  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	175	175	1	replace	    if(formatDescription!=  null)  {  for(Iterator  it  =  origFormats.iterator();  it.hasNext();)  {  stripCustom.append(QUOTE).append(formatDescription);  }		non-compiled	[CE]  orphaned  default	38	None	add
17	[BUG]  [BUGGY]    if(formatDescription!=  null)  {  for(Iterator  it  =  origFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  orphaned  default  [FE]          junit.framework.AssertionFailedError:  registry  [CONTEXT]  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  [BUGGY]    if(formatDescription!=  null)  {  for(Iterator  it  =  origFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	175	175	1	replace	    if(formatDescription!=  null)  {  for(Iterator  it  =  origFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }		non-compiled	[CE]  orphaned  default	38	None	add
18	[BUG]  [BUGGY]  format  =  getFormat(formatDescription,  c);  [CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]    junit.framework.AssertionFailedError:  registry  [CONTEXT]  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  [BUGGY]  format  =  getFormat(formatDescription,  c);  [BUGGY]  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	175	175	1	replace	format  =  getFormat(formatDescription,  c);	format  =  getFormat(formatDescription);  	non-compiled	[CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	37	None	replace
19	[BUG]  [BUGGY]  format  =  getFormat(formatDescription)+  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]      junit.framework.AssertionFailedError:  registry  [CONTEXT]  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  [BUGGY]  format  =  getFormat(formatDescription)+  1;  [BUGGY]  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	175	175	1	replace	format  =  getFormat(formatDescription)+  1;	format  =  getFormat(formatDescription);  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	37	None	replace
20	[BUG]  [BUGGY]    if(formatDescription!=  null)  {  for(Iterator  it  =  formatDescriptions.iterator();  it.hasNext();)  {  formatDescription  =  it.next();  }  [CE]  orphaned  default  [FE]    junit.framework.AssertionFailedError:  registry  [CONTEXT]  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  [BUGGY]    if(formatDescription!=  null)  {  for(Iterator  it  =  formatDescriptions.iterator();  it.hasNext();)  {  formatDescription  =  it.next();  }  [BUGGY]  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	175	175	1	replace	    if(formatDescription!=  null)  {  for(Iterator  it  =  formatDescriptions.iterator();  it.hasNext();)  {  formatDescription  =  it.next();  }		non-compiled	[CE]  orphaned  default	38	None	add
21	[BUG]  [BUGGY]    if(formatDescription!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  formatDescription  +=  it.next();  }  [CE]  orphaned  default  [FE]      junit.framework.AssertionFailedError:  registry  [CONTEXT]  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  [BUGGY]    if(formatDescription!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  formatDescription  +=  it.next();  }  [BUGGY]  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	175	175	1	replace	    if(formatDescription!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  formatDescription  +=  it.next();  }		non-compiled	[CE]  orphaned  default	38	None	add
22	[BUG]  [BUGGY]    if(formatDescription!=  null)  {  for(Iterator  it  =  formatDescriptions.iterator();  it.hasNext();)  {  formatDescription  +=  it.next();  }  [CE]  orphaned  default  [FE]        junit.framework.AssertionFailedError:  registry  [CONTEXT]  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  [BUGGY]    if(formatDescription!=  null)  {  for(Iterator  it  =  formatDescriptions.iterator();  it.hasNext();)  {  formatDescription  +=  it.next();  }  [BUGGY]  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	175	175	1	replace	    if(formatDescription!=  null)  {  for(Iterator  it  =  formatDescriptions.iterator();  it.hasNext();)  {  formatDescription  +=  it.next();  }		non-compiled	[CE]  orphaned  default	38	None	add
23	[BUG]  [BUGGY]    if(formatDescription!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE).append(formatDescription);  }  [CE]  orphaned  default  [FE]          junit.framework.AssertionFailedError:  registry  [CONTEXT]  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  [BUGGY]    if(formatDescription!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE).append(formatDescription);  }  [BUGGY]  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	175	175	1	replace	    if(formatDescription!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE).append(formatDescription);  }		non-compiled	[CE]  orphaned  default	38	None	add
