bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  Integer  fmtCount  =  0;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	add	Integer  fmtCount  =  0;	  char    fmtCount    =    0;    Character    fmtCount    =    0;    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	49	1	replace
2	[BUG]  [BUGGY]  Integer  fmtCount  =  0;  [FE]  junit.framework.AssertionFailedError:  registry  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  Integer  fmtCount  =  0;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	Integer  fmtCount  =  0;	  char    fmtCount    =    0;    Character    fmtCount    =    0;    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	49	1	replace
3	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  Integer  fmtCount  =  c.length;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	add	Integer  fmtCount  =  c.length;	  int    fmtCount    =    c.length;    int    fmtCount    =    c.length;    	compilable	  [FE]  IllegalArgumentException  	1	5	replace
4	[BUG]  [BUGGY]  Integer  fmtCount  =  c.length;  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  Integer  fmtCount  =  c.length;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	Integer  fmtCount  =  c.length;	  int    fmtCount    =    c.length;    int    fmtCount    =    c.length;    	compilable	  [FE]  IllegalArgumentException  	1	5	replace
5	[BUG]  [BUGGY]  String  fmtCount  =  c.length;  [CE]  incompatible  types  [FE]          IllegalArgumentException      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  String  fmtCount  =  c.length;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	String  fmtCount  =  c.length;	  int    fmtCount    =    c.length;    char    fmtCount    =    c.length;    	non-compiled	[CE]  incompatible  types	2	None	replace
6	[BUG]  [BUGGY]  pos.setIndex(c,  fmtCount);  [CE]  cannot  find  symbol  fmtCount  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos.setIndex(c,  fmtCount);  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	pos.setIndex(c,  fmtCount);	  pos.setIndex(c,    start);    	non-compiled	[CE]  cannot  find  symbol  fmtCount	36	None	replace
7	[BUG]  [BUGGY]  pos.setIndex(c,  indent);  [CE]  cannot  find  symbol  indent  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos.setIndex(c,  indent);  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	pos.setIndex(c,  indent);	  pos.setIndex(c,    start);    	non-compiled	[CE]  cannot  find  symbol  indent	36	None	replace
8	[BUG]  [BUGGY]  String  fmtCount  =  1;  [CE]  incompatible  types  [FE]    IllegalArgumentException    [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  String  fmtCount  =  1;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	String  fmtCount  =  1;	  char    fmtCount    =    1;    	non-compiled	[CE]  incompatible  types	6	None	replace
9	[BUG]  [BUGGY]  char  fmtCount  =  c.length();  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  fmtCount  =  c.length();  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	char  fmtCount  =  c.length();	  char    fmtCount    =    1;    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
10	[BUG]  [BUGGY]  int  fmtCount  =  foundFormats.length;  [CE]  cannot  find  symbol  length  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  foundFormats.length;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	int  fmtCount  =  foundFormats.length;	  int    fmtCount    =    findFormats.length;    	non-compiled	[CE]  cannot  find  symbol  length	61	None	replace
11	[BUG]  [BUGGY]  int  fmtCount  =  0;  break;  [CE]  break  outside  switch  or  loop  [FE]          IllegalArgumentException      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  0;  break;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	int  fmtCount  =  0;  break;	  int    fmtCount    =    2;    int    fmtCount    =    2;    break;    	non-compiled	[CE]  break  outside  switch  or  loop	31	None	replace
12	[BUG]  [BUGGY]  int  fmtCount  =  1;  break;  [CE]  break  outside  switch  or  loop  [FE]            IllegalArgumentException      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  1;  break;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	int  fmtCount  =  1;  break;	  int    fmtCount    =    2;    int    fmtCount    =    2;    break;    	non-compiled	[CE]  break  outside  switch  or  loop	31	None	replace
13	[BUG]  [BUGGY]  char  fmtCount  =  2;  break;  [CE]  break  outside  switch  or  loop  [FE]              IllegalArgumentException      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  fmtCount  =  2;  break;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	char  fmtCount  =  2;  break;	  int    fmtCount    =    2;    int    fmtCount    =    2;    break;    	non-compiled	[CE]  break  outside  switch  or  loop	31	None	replace
14	[BUG]  [BUGGY]  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  c,  false);  break;  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  c,  false);  break;  }  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  c,  false);  break;  }	  if(c!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    c,    false);    break;    }    	non-compiled	[CE]  ';'  expected	50	None	replace
15	[BUG]  [BUGGY]  int  fmtCount  =  0;  int  fmtCount  =  0;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  0;  int  fmtCount  =  0;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	int  fmtCount  =  0;  int  fmtCount  =  0;	  char    fmtCount    =    0;    char    fmtCount    =    0;    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	45	None	replace
16	[BUG]  [BUGGY]  int  fmtCount  =  0;  Integer  fmtCount  =  0;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  0;  Integer  fmtCount  =  0;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	int  fmtCount  =  0;  Integer  fmtCount  =  0;	  char    fmtCount    =    0;    char    fmtCount    =    0;    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	45	None	replace
17	[BUG]  [BUGGY]  int  fmtCount  =  pattern.length  -  1;  [CE]  cannot  find  symbol  length  [FE]    IllegalArgumentException    [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  pattern.length  -  1;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	int  fmtCount  =  pattern.length  -  1;	  int    fmtCount    =    c.length    -    1;    	non-compiled	[CE]  cannot  find  symbol  length	23	None	replace
18	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  c.length  -  3;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	add	int  fmtCount  =  c.length  -  3;	  int    fmtCount    =    c.length    -    1;    	compilable	  [FE]  IllegalArgumentException  	23	5	replace
19	[BUG]  [BUGGY]  int  fmtCount  =  c.length  -  3;  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  c.length  -  3;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	int  fmtCount  =  c.length  -  3;	  int    fmtCount    =    c.length    -    1;    	compilable	  [FE]  IllegalArgumentException  	23	5	replace
20	[BUG]  [BUGGY]  int  fmtCount  =  0;  char  fmtCount  =  0;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                IllegalArgumentException      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  0;  char  fmtCount  =  0;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	int  fmtCount  =  0;  char  fmtCount  =  0;	  int    fmtCount    =    2;    char    fmtCount    =    2;    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	34	None	replace
21	[BUG]  [BUGGY]  int  fmtCount  =  0;  String  fmtCount  =  0;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  IllegalArgumentException      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  0;  String  fmtCount  =  0;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	int  fmtCount  =  0;  String  fmtCount  =  0;	  int    fmtCount    =    2;    char    fmtCount    =    2;    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	34	None	replace
22	[BUG]  [BUGGY]  pos.setIndex(c.length()  -  2);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos.setIndex(c.length()  -  2);  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	pos.setIndex(c.length()  -  2);	  pos.setIndex(c.length());    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
23	[BUG]  [BUGGY]  pos.setIndex(c.length()  /  2);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos.setIndex(c.length()  /  2);  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	pos.setIndex(c.length()  /  2);	  pos.setIndex(c.length()    *    2);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
24	[BUG]  [BUGGY]  pos.setIndex(c.length()  *  2  +  1);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos.setIndex(c.length()  *  2  +  1);  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	pos.setIndex(c.length()  *  2  +  1);	  pos.setIndex(c.length()    *    2);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
25	[BUG]  [BUGGY]  pos.setIndex(c,  DECEMBER_FIELD_NAME);  [CE]  cannot  find  symbol  DECEMBER_FIELD_NAME  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos.setIndex(c,  DECEMBER_FIELD_NAME);  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	pos.setIndex(c,  DECEMBER_FIELD_NAME);	  pos.setIndex(c,    started);    	non-compiled	[CE]  cannot  find  symbol  DECEMBER_FIELD_NAME	38	None	replace
26	[BUG]  [BUGGY]  pos.setIndex(c,  DECIMAL_FIELD_NAME);  [CE]  cannot  find  symbol  DECIMAL_FIELD_NAME  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos.setIndex(c,  DECIMAL_FIELD_NAME);  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	pos.setIndex(c,  DECIMAL_FIELD_NAME);	  pos.setIndex(c,    started);    	non-compiled	[CE]  cannot  find  symbol  DECIMAL_FIELD_NAME	38	None	replace
27	[BUG]  [BUGGY]  char  fmtCount  =  2;  char  fmtCount  =  2;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]    IllegalArgumentException    [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  fmtCount  =  2;  char  fmtCount  =  2;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	char    fmtCount    =    2;    char  fmtCount  =  2;	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	63	None	add
28	[BUG]  [BUGGY]  char  fmtCount  =  2;  char  fmtCount  =  2;  break;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]      IllegalArgumentException    [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  fmtCount  =  2;  char  fmtCount  =  2;  break;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	char    fmtCount    =    2;    char  fmtCount  =  2;  break;	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	63	None	add
29	[BUG]  [BUGGY]  char  fmtCount  =  2;  int  fmtCount  =  2;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]        IllegalArgumentException    [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  fmtCount  =  2;  int  fmtCount  =  2;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	char    fmtCount    =    2;    int  fmtCount  =  2;	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	63	None	add
30	[BUG]  [BUGGY]  char  fmtCount  =  2;  Char  fmtCount  =  2;  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException    [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  fmtCount  =  2;  Char  fmtCount  =  2;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	char    fmtCount    =    2;    Char  fmtCount  =  2;	  	non-compiled	[CE]  cannot  find  symbol	63	None	add
31	[BUG]  [BUGGY]  int  fmtCount  =  c.length;  break;  [CE]  break  outside  switch  or  loop  [FE]              IllegalArgumentException      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  c.length;  break;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	int  fmtCount  =  c.length;  break;	  int    fmtCount    =    c.length;    int    fmtCount    =    c.length;    break;    	non-compiled	[CE]  break  outside  switch  or  loop	4	None	replace
32	[BUG]  [BUGGY]  char  fmtCount  =  c.length;  break;  [CE]  possible  loss  of  precision  [FE]                IllegalArgumentException      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  fmtCount  =  c.length;  break;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	char  fmtCount  =  c.length;  break;	  int    fmtCount    =    c.length;    int    fmtCount    =    c.length;    break;    	non-compiled	[CE]  possible  loss  of  precision	4	None	replace
33	[BUG]  [BUGGY]  int  fmtCount  =  pattern.length;  break;  [CE]  cannot  find  symbol  length  [FE]                  IllegalArgumentException      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  pattern.length;  break;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	int  fmtCount  =  pattern.length;  break;	  int    fmtCount    =    c.length;    int    fmtCount    =    c.length;    break;    	non-compiled	[CE]  cannot  find  symbol  length	4	None	replace
34	[BUG]  [BUGGY]  char[]  c  =  toPattern.toCharArray(foundDescriptions);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  char[]  c  =  toPattern.toCharArray(foundDescriptions);  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	char[]  c  =  toPattern.toCharArray(foundDescriptions);	  char[]    c    =    toPattern.toCharArray();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	7	None	replace
35	[BUG]  [BUGGY]  char[]  c  =  toPattern.toString();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  char[]  c  =  toPattern.toString();  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	char[]  c  =  toPattern.toString();	  char[]    c    =    toPattern.toCharArray();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	7	None	replace
36	[BUG]  [BUGGY]  pos.setIndex(c.length()  /  1);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos.setIndex(c.length()  /  1);  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	pos.setIndex(c.length()  /  1);	  pos.setIndex(c.length()    *    1);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
37	[BUG]  [BUGGY]  pos.setIndex(c,  pos.length());  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos.setIndex(c,  pos.length());  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	pos.setIndex(c,  pos.length());	  pos.setIndex(c,    pos.length()    -    1);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
38	[BUG]  [BUGGY]  pos.setIndex(c,  pos.length()  +  1);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos.setIndex(c,  pos.length()  +  1);  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	pos.setIndex(c,  pos.length()  +  1);	  pos.setIndex(c,    pos.length()    -    1);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
39	[BUG]  [BUGGY]  if(c!=  null  ||  c.length  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(c!=  null  ||  c.length  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	if(c!=  null  ||  c.length  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  if(c!=    null    &&    c.length    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  ';'  expected	68	None	replace
40	[BUG]  [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  cannot  find  symbol  fmtCount  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  if(c!=    null    &&    c.length    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  cannot  find  symbol  fmtCount	68	None	replace
41	[BUG]  [BUGGY]  int  fmtCount  =  c.length  +  1;  int  fmtCount  =  c.length  +  1;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]    IllegalArgumentException    [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  c.length  +  1;  int  fmtCount  =  c.length  +  1;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	int    fmtCount    =    c.length    +    1;    int  fmtCount  =  c.length  +  1;	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	24	None	add
42	[BUG]  [BUGGY]  int  fmtCount  =  c.length  +  1;  Integer  fmtCount  =  c.length  +  1;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]      IllegalArgumentException    [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  c.length  +  1;  Integer  fmtCount  =  c.length  +  1;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	int    fmtCount    =    c.length    +    1;    Integer  fmtCount  =  c.length  +  1;	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	24	None	add
43	[BUG]  [BUGGY]  int  fmtCount  =  c.length  +  1;  char  fmtCount  =  c.length  +  1;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]        IllegalArgumentException    [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  c.length  +  1;  char  fmtCount  =  c.length  +  1;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	int    fmtCount    =    c.length    +    1;    char  fmtCount  =  c.length  +  1;	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	24	None	add
44	[BUG]  [BUGGY]  int  fmtCount  =  c.length  +  1;  int  fmtCount  =  c.length  +  1;  break;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]          IllegalArgumentException    [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  c.length  +  1;  int  fmtCount  =  c.length  +  1;  break;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	int    fmtCount    =    c.length    +    1;    int  fmtCount  =  c.length  +  1;  break;	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	24	None	add
45	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  Integer  fmtCount  =  2;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	add	Integer  fmtCount  =  2;	  int    fmtCount    =    2;    Integer    fmtCount    =    2;    	compilable	  [FE]  IllegalArgumentException  	32	5	replace
46	[BUG]  [BUGGY]  Integer  fmtCount  =  2;  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  Integer  fmtCount  =  2;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	Integer  fmtCount  =  2;	  int    fmtCount    =    2;    Integer    fmtCount    =    2;    	compilable	  [FE]  IllegalArgumentException  	32	5	replace
47	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  Integer  fmtCount  =  1;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	add	Integer  fmtCount  =  1;	  int    fmtCount    =    2;    Integer    fmtCount    =    2;    	compilable	  [FE]  IllegalArgumentException  	32	5	replace
48	[BUG]  [BUGGY]  Integer  fmtCount  =  1;  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  Integer  fmtCount  =  1;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	Integer  fmtCount  =  1;	  int    fmtCount    =    2;    Integer    fmtCount    =    2;    	compilable	  [FE]  IllegalArgumentException  	32	5	replace
49	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  pos);  [CE]  cannot  find  symbol  index  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  pos);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index,  pos);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    pos);    	non-compiled	[CE]  cannot  find  symbol  index	78	None	replace
50	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	add	int  fmtCount  =  readArgumentIndex(pattern,  next(pos));	  int    fmtCount    =    readArgumentIndex(pattern,    start,    pos);    	compilable	  [FE]  IllegalArgumentException  	78	5	replace
51	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  [FE]  IllegalArgumentException  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos));	  int    fmtCount    =    readArgumentIndex(pattern,    start,    pos);    	compilable	  [FE]  IllegalArgumentException  	78	5	replace
52	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index);  [CE]  cannot  find  symbol  index  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    pos);    	non-compiled	[CE]  cannot  find  symbol  index	78	None	replace
53	[BUG]  [BUGGY]  char[]  c  =  foundDescriptions.toCharArray(pos);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  char[]  c  =  foundDescriptions.toCharArray(pos);  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	char[]  c  =  foundDescriptions.toCharArray(pos);	  char[]    c    =    foundDescriptions.toCharArray();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	8	None	replace
54	[BUG]  [BUGGY]  pos.setIndex(c,  pattern.length());  [CE]  method  setIndex  in  class  ParsePosition  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos.setIndex(c,  pattern.length());  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	pos.setIndex(c,  pattern.length());	  pos.setIndex(c,    pattern.length()    -    1);    	non-compiled	[CE]  method  setIndex  in  class  ParsePosition  cannot  be  applied  to  given  types;	65	None	replace
55	[BUG]  [BUGGY]  pos.setIndex(c,  start,  pattern.length()  -  1);  [CE]  cannot  find  symbol  start  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos.setIndex(c,  start,  pattern.length()  -  1);  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	pos.setIndex(c,  start,  pattern.length()  -  1);	  pos.setIndex(c,    pattern.length()    -    1);    	non-compiled	[CE]  cannot  find  symbol  start	65	None	replace
56	[BUG]  [BUGGY]  pos.setIndex(c,  index,  pattern.length()  -  1);  [CE]  cannot  find  symbol  index  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos.setIndex(c,  index,  pattern.length()  -  1);  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	pos.setIndex(c,  index,  pattern.length()  -  1);	  pos.setIndex(c,    pattern.length()    -    1);    	non-compiled	[CE]  cannot  find  symbol  index	65	None	replace
57	[BUG]  [BUGGY]  String  fmtCount  =  0;  int  fmtCount  =  0;  [CE]  incompatible  types  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  String  fmtCount  =  0;  int  fmtCount  =  0;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	String  fmtCount  =  0;  int  fmtCount  =  0;	  char    fmtCount    =    0;    int    fmtCount    =    0;    	non-compiled	[CE]  incompatible  types	46	None	replace
58	[BUG]  [BUGGY]  char[]  c  =  toPattern.toCharArray(pos);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  char[]  c  =  toPattern.toCharArray(pos);  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	char[]  c  =  toPattern.toCharArray(pos);	  char[]    c    =    pattern.toCharArray(pos);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	79	None	replace
59	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharArray(pos,  foundDescriptions);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  char[]  c  =  pattern.toCharArray(pos,  foundDescriptions);  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	char[]  c  =  pattern.toCharArray(pos,  foundDescriptions);	  char[]    c    =    pattern.toCharArray(pos);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	79	None	replace
60	[BUG]  [BUGGY]  char[]  c  =  toPattern.toCharArray(p);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  char[]  c  =  toPattern.toCharArray(p);  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	char[]  c  =  toPattern.toCharArray(p);	  char[]    c    =    pattern.toCharArray(pos);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	79	None	replace
61	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  pos);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]    IllegalArgumentException    [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  pos);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	int  fmtCount  =  readArgumentIndex(c,  pos);	  int    fmtCount    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	77	None	replace
62	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  pos);  [CE]  possible  loss  of  precision  [FE]      IllegalArgumentException    [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  pos);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  pos);	  int    fmtCount    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  possible  loss  of  precision	77	None	replace
63	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(p,  pos);  [CE]  cannot  find  symbol  p  [FE]        IllegalArgumentException    [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  readArgumentIndex(p,  pos);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	int  fmtCount  =  readArgumentIndex(p,  pos);	  int    fmtCount    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  cannot  find  symbol  p	77	None	replace
64	[BUG]  [BUGGY]  int  fmtCount  =  c.length  -  2;  int  fmtCount  =  c.length  -  2;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]    IllegalArgumentException    [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  c.length  -  2;  int  fmtCount  =  c.length  -  2;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	int    fmtCount    =    c.length    -    2;    int  fmtCount  =  c.length  -  2;	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	73	None	add
65	[BUG]  [BUGGY]  int  fmtCount  =  c.length  -  2;  Integer  fmtCount  =  c.length  -  2;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]      IllegalArgumentException    [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  c.length  -  2;  Integer  fmtCount  =  c.length  -  2;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	int    fmtCount    =    c.length    -    2;    Integer  fmtCount  =  c.length  -  2;	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	73	None	add
66	[BUG]  [BUGGY]  int  fmtCount  =  c.length  -  2;  char  fmtCount  =  c.length  -  2;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]        IllegalArgumentException    [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  c.length  -  2;  char  fmtCount  =  c.length  -  2;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	int    fmtCount    =    c.length    -    2;    char  fmtCount  =  c.length  -  2;	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	73	None	add
67	[BUG]  [BUGGY]  int  fmtCount  =  c.length  -  2;  int  fmtCount  =  c.length  -  2;  break;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]          IllegalArgumentException    [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  c.length  -  2;  int  fmtCount  =  c.length  -  2;  break;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	int    fmtCount    =    c.length    -    2;    int  fmtCount  =  c.length  -  2;  break;	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	73	None	add
68	[BUG]  [BUGGY]  String  fmtCount  =  2;  [CE]  incompatible  types  [FE]    IllegalArgumentException    [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  String  fmtCount  =  2;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	String  fmtCount  =  2;	  char    fmtCount    =    2;    	non-compiled	[CE]  incompatible  types	64	None	replace
69	[BUG]  [BUGGY]  if(c!=  null  ||  c.length  <  2)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(c!=  null  ||  c.length  <  2)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	if(c!=  null  ||  c.length  <  2)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  if(c    ==    null    ||    c.length    <    2)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    false);    break;    }    	non-compiled	[CE]  ';'  expected	71	None	replace
70	[BUG]  [BUGGY]  if(c!=  null  ||  c.length  <  2)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(c!=  null  ||  c.length  <  2)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	if(c!=  null  ||  c.length  <  2)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }	  if(c    ==    null    ||    c.length    <    2)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    false);    break;    }    	non-compiled	[CE]  ';'  expected	71	None	replace
71	[BUG]  [BUGGY]  String  fmtCount  =  0L;  [CE]  incompatible  types  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  String  fmtCount  =  0L;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	String  fmtCount  =  0L;	  String    fmtCount    =    0;    	non-compiled	[CE]  incompatible  types	52	None	replace
72	[BUG]  [BUGGY]  int  fmtCount  =  discoveredDescriptions.length;  [CE]  cannot  find  symbol  discoveredDescriptions  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  discoveredDescriptions.length;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	int  fmtCount  =  discoveredDescriptions.length;	  int    fmtCount    =    orderedDescriptions.length;    	non-compiled	[CE]  cannot  find  symbol  discoveredDescriptions	44	None	replace
73	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  c.length  /  2;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	add	int  fmtCount  =  c.length  /  2;	  int    fmtCount    =    c.length    -    2;    	compilable	  [FE]  IllegalArgumentException  	74	5	replace
74	[BUG]  [BUGGY]  int  fmtCount  =  c.length  /  2;  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  c.length  /  2;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	int  fmtCount  =  c.length  /  2;	  int    fmtCount    =    c.length    -    2;    	compilable	  [FE]  IllegalArgumentException  	74	5	replace
75	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  foundDescriptions.size();  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	add	int  fmtCount  =  foundDescriptions.size();	  int    fmtCount    =    findFormats.size();    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	62	1	replace
76	[BUG]  [BUGGY]  int  fmtCount  =  foundDescriptions.size();  [FE]  junit.framework.AssertionFailedError:  registry  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  foundDescriptions.size();  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	int  fmtCount  =  foundDescriptions.size();	  int    fmtCount    =    findFormats.size();    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	62	1	replace
77	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  foundFormats.size();  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	add	int  fmtCount  =  foundFormats.size();	  int    fmtCount    =    findFormats.size();    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	62	1	replace
78	[BUG]  [BUGGY]  int  fmtCount  =  foundFormats.size();  [FE]  junit.framework.AssertionFailedError:  registry  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  foundFormats.size();  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	int  fmtCount  =  foundFormats.size();	  int    fmtCount    =    findFormats.size();    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	62	1	replace
79	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  Integer  fmtCount  =  foundFormats.size();  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	add	Integer  fmtCount  =  foundFormats.size();	  int    fmtCount    =    findFormats.size();    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	62	1	replace
80	[BUG]  [BUGGY]  Integer  fmtCount  =  foundFormats.size();  [FE]  junit.framework.AssertionFailedError:  registry  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  Integer  fmtCount  =  foundFormats.size();  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	Integer  fmtCount  =  foundFormats.size();	  int    fmtCount    =    findFormats.size();    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	62	1	replace
81	[BUG]  [BUGGY]  Int  fmtCount  =  1;  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  Int  fmtCount  =  1;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	Int  fmtCount  =  1;	  int    fmtCount    =    1;    Int    fmtCount    =    1;    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
82	[BUG]  [BUGGY]  char  fmtCount  =  1;  break;  [CE]  break  outside  switch  or  loop  [FE]          IllegalArgumentException      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  fmtCount  =  1;  break;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	char  fmtCount  =  1;  break;	  int    fmtCount    =    1;    int    fmtCount    =    1;    break;    	non-compiled	[CE]  break  outside  switch  or  loop	40	None	replace
83	[BUG]  [BUGGY]  if(c!=  null  ||  c.length  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(c!=  null  ||  c.length  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	if(c!=  null  ||  c.length  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }	  if(c!=    null    &&    c.length    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    false);    break;    }    	non-compiled	[CE]  ';'  expected	82	None	replace
84	[BUG]  [BUGGY]  pos.setIndex(start,  c);  [CE]  cannot  find  symbol  start  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos.setIndex(start,  c);  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	pos.setIndex(start,  c);	  pos.setIndex(index,    c);    	non-compiled	[CE]  cannot  find  symbol  start	81	None	replace
85	[BUG]  [BUGGY]  pos.setIndex(i,  c);  [CE]  cannot  find  symbol  i  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos.setIndex(i,  c);  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	pos.setIndex(i,  c);	  pos.setIndex(index,    c);    	non-compiled	[CE]  cannot  find  symbol  i	81	None	replace
86	[BUG]  [BUGGY]  pos.setIndex(c,  c);  [CE]  method  setIndex  in  class  ParsePosition  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos.setIndex(c,  c);  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	pos.setIndex(c,  c);	  pos.setIndex(index,    c);    	non-compiled	[CE]  method  setIndex  in  class  ParsePosition  cannot  be  applied  to  given  types;	81	None	replace
87	[BUG]  [BUGGY]  pos.setIndex(fmtCount,  c);  [CE]  cannot  find  symbol  fmtCount  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos.setIndex(fmtCount,  c);  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	pos.setIndex(fmtCount,  c);	  pos.setIndex(index,    c);    	non-compiled	[CE]  cannot  find  symbol  fmtCount	81	None	replace
88	[BUG]  [BUGGY]  int  fmtCount  =  0;  String  fmtCount  =  1;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]              IllegalArgumentException      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  0;  String  fmtCount  =  1;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	int  fmtCount  =  0;  String  fmtCount  =  1;	  int    fmtCount    =    1;    char    fmtCount    =    1;    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	42	None	replace
89	[BUG]  [BUGGY]  char[]  c  =  pattern.toString();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  char[]  c  =  pattern.toString();  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	char[]  c  =  pattern.toString();	  char[]    c    =    pattern.toCharArray()    +    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	60	None	replace
90	[BUG]  [BUGGY]  char[]  c  =  pattern.toStringArray();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  char[]  c  =  pattern.toStringArray();  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	char[]  c  =  pattern.toStringArray();	  char[]    c    =    pattern.toCharArray()    +    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	60	None	replace
91	[BUG]  [BUGGY]  Integer  fmtCount  =  foundDescriptions.length  +  1;  [CE]  cannot  find  symbol  length  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  Integer  fmtCount  =  foundDescriptions.length  +  1;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	Integer  fmtCount  =  foundDescriptions.length  +  1;	  Integer    fmtCount    =    foundDescriptions.length;    	non-compiled	[CE]  cannot  find  symbol  length	57	None	replace
92	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  Integer  fmtCount  =  foundDescriptions.size();  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	add	Integer  fmtCount  =  foundDescriptions.size();	  Integer    fmtCount    =    foundDescriptions.length;    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	57	1	replace
93	[BUG]  [BUGGY]  Integer  fmtCount  =  foundDescriptions.size();  [FE]  junit.framework.AssertionFailedError:  registry  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  Integer  fmtCount  =  foundDescriptions.size();  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	Integer  fmtCount  =  foundDescriptions.size();	  Integer    fmtCount    =    foundDescriptions.length;    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	57	1	replace
94	[BUG]  [BUGGY]  int  fmtCount  =  c.length  -  1;  int  fmtCount  =  c.length  -  1;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]    IllegalArgumentException    [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  c.length  -  1;  int  fmtCount  =  c.length  -  1;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	int    fmtCount    =    c.length    -    1;    int  fmtCount  =  c.length  -  1;	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	22	None	add
95	[BUG]  [BUGGY]  int  fmtCount  =  c.length  -  1;  Integer  fmtCount  =  c.length  -  1;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]      IllegalArgumentException    [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  c.length  -  1;  Integer  fmtCount  =  c.length  -  1;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	int    fmtCount    =    c.length    -    1;    Integer  fmtCount  =  c.length  -  1;	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	22	None	add
96	[BUG]  [BUGGY]  int  fmtCount  =  c.length  -  1;  char  fmtCount  =  c.length  -  1;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]        IllegalArgumentException    [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  c.length  -  1;  char  fmtCount  =  c.length  -  1;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	int    fmtCount    =    c.length    -    1;    char  fmtCount  =  c.length  -  1;	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	22	None	add
97	[BUG]  [BUGGY]  int  fmtCount  =  c.length  -  1;  int  fmtCount  =  c.length  -  1;  break;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]          IllegalArgumentException    [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  c.length  -  1;  int  fmtCount  =  c.length  -  1;  break;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	int    fmtCount    =    c.length    -    1;    int  fmtCount  =  c.length  -  1;  break;	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	22	None	add
98	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos);  int  fmtCount  =  readArgumentIndex(pattern,  pos);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]    IllegalArgumentException    [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos);  int  fmtCount  =  readArgumentIndex(pattern,  pos);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	int    fmtCount    =    readArgumentIndex(pattern,    pos);    int  fmtCount  =  readArgumentIndex(pattern,  pos);	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	76	None	add
99	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos);  int  fmtCount  =  readArgumentIndex(pattern,  pos);  break;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]      IllegalArgumentException    [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos);  int  fmtCount  =  readArgumentIndex(pattern,  pos);  break;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	int    fmtCount    =    readArgumentIndex(pattern,    pos);    int  fmtCount  =  readArgumentIndex(pattern,  pos);  break;	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	76	None	add
100	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos);  Integer  fmtCount  =  readArgumentIndex(pattern,  pos);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]        IllegalArgumentException    [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos);  Integer  fmtCount  =  readArgumentIndex(pattern,  pos);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	int    fmtCount    =    readArgumentIndex(pattern,    pos);    Integer  fmtCount  =  readArgumentIndex(pattern,  pos);	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	76	None	add
101	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos);  int  fmtCount  =  readArgumentIndex(pattern,  pos);  continue;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]          IllegalArgumentException    [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos);  int  fmtCount  =  readArgumentIndex(pattern,  pos);  continue;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	int    fmtCount    =    readArgumentIndex(pattern,    pos);    int  fmtCount  =  readArgumentIndex(pattern,  pos);  continue;	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	76	None	add
102	[BUG]  [BUGGY]  pos.setIndex(c,  end);  [CE]  cannot  find  symbol  end  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos.setIndex(c,  end);  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	pos.setIndex(c,  end);	  pos.setIndex(c,    index);    	non-compiled	[CE]  cannot  find  symbol  end	35	None	replace
103	[BUG]  [BUGGY]  pos.setIndex(c,  begin);  [CE]  cannot  find  symbol  begin  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos.setIndex(c,  begin);  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	pos.setIndex(c,  begin);	  pos.setIndex(c,    index);    	non-compiled	[CE]  cannot  find  symbol  begin	35	None	replace
104	[BUG]  [BUGGY]  char  fmtCount  =  1;  char  fmtCount  =  1;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]    IllegalArgumentException    [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  fmtCount  =  1;  char  fmtCount  =  1;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	char    fmtCount    =    1;    char  fmtCount  =  1;	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	5	None	add
105	[BUG]  [BUGGY]  char  fmtCount  =  1;  char  fmtCount  =  1;  break;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]      IllegalArgumentException    [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  fmtCount  =  1;  char  fmtCount  =  1;  break;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	char    fmtCount    =    1;    char  fmtCount  =  1;  break;	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	5	None	add
106	[BUG]  [BUGGY]  char  fmtCount  =  1;  int  fmtCount  =  1;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]        IllegalArgumentException    [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  fmtCount  =  1;  int  fmtCount  =  1;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	char    fmtCount    =    1;    int  fmtCount  =  1;	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	5	None	add
107	[BUG]  [BUGGY]  char  fmtCount  =  1;  String  fmtCount  =  1;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]          IllegalArgumentException    [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  fmtCount  =  1;  String  fmtCount  =  1;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	char    fmtCount    =    1;    String  fmtCount  =  1;	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	5	None	add
108	[BUG]  [BUGGY]  char  fmtCount  =  1;  Char  fmtCount  =  1;  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException    [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  fmtCount  =  1;  Char  fmtCount  =  1;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	char    fmtCount    =    1;    Char  fmtCount  =  1;	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
109	[BUG]  [BUGGY]  int  fmtCount  =  foundDescriptions.length  +  1;  [CE]  cannot  find  symbol  length  [FE]              IllegalArgumentException      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  foundDescriptions.length  +  1;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	int  fmtCount  =  foundDescriptions.length  +  1;	  int    fmtCount    =    foundDescriptions.length;    	non-compiled	[CE]  cannot  find  symbol  length	27	None	replace
110	[BUG]  [BUGGY]  int  fmtCount  =  foundDescriptions.length  -  1;  [CE]  cannot  find  symbol  length  [FE]                IllegalArgumentException      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  foundDescriptions.length  -  1;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	int  fmtCount  =  foundDescriptions.length  -  1;	  int    fmtCount    =    foundDescriptions.length;    	non-compiled	[CE]  cannot  find  symbol  length	27	None	replace
111	[BUG]  [BUGGY]  Integer  fmtCount  =  0;  String  fmtCount  =  0;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  Integer  fmtCount  =  0;  String  fmtCount  =  0;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	Integer  fmtCount  =  0;  String  fmtCount  =  0;	  char    fmtCount    =    0;    String    fmtCount    =    0;    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	47	None	replace
112	[BUG]  [BUGGY]  int  fmtCount  =  0;  Char  fmtCount  =  0;  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  0;  Char  fmtCount  =  0;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	int  fmtCount  =  0;  Char  fmtCount  =  0;	  char    fmtCount    =    0;    Char    fmtCount    =    0;    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
113	[BUG]  [BUGGY]  if(c!=  null  ||  c.length  >  0)  {  for(int  i  =  0;  i  <  c.length;  ++i)  {  appendQuotedString(pattern,  pos,  c,  true);  break;  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(c!=  null  ||  c.length  >  0)  {  for(int  i  =  0;  i  <  c.length;  ++i)  {  appendQuotedString(pattern,  pos,  c,  true);  break;  }  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	if(c!=  null  ||  c.length  >  0)  {  for(int  i  =  0;  i  <  c.length;  ++i)  {  appendQuotedString(pattern,  pos,  c,  true);  break;  }	  if(c!=    null    &&    c.length    >    0)    {    for(int    i    =    0;    i    <    c.length;    ++i)    {    appendQuotedString(pattern,    pos,    c,    true);    break;    }    	non-compiled	[CE]  ';'  expected	67	None	replace
114	[BUG]  [BUGGY]  pos.setIndex(c,  start,  foundDescriptions);  [CE]  cannot  find  symbol  start  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos.setIndex(c,  start,  foundDescriptions);  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	pos.setIndex(c,  start,  foundDescriptions);	  pos.setIndex(c,    foundDescriptions);    	non-compiled	[CE]  cannot  find  symbol  start	37	None	replace
115	[BUG]  [BUGGY]  pos.setIndex(c,  index,  foundDescriptions);  [CE]  cannot  find  symbol  index  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos.setIndex(c,  index,  foundDescriptions);  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	pos.setIndex(c,  index,  foundDescriptions);	  pos.setIndex(c,    foundDescriptions);    	non-compiled	[CE]  cannot  find  symbol  index	37	None	replace
116	[BUG]  [BUGGY]  pos.setIndex(c,  foundDescriptions,  stripCustom);  [CE]  method  setIndex  in  class  ParsePosition  cannot  be  applied  to  given  types;  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos.setIndex(c,  foundDescriptions,  stripCustom);  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	pos.setIndex(c,  foundDescriptions,  stripCustom);	  pos.setIndex(c,    foundDescriptions);    	non-compiled	[CE]  method  setIndex  in  class  ParsePosition  cannot  be  applied  to  given  types;	37	None	replace
117	[BUG]  [BUGGY]  pos.setIndex(c,  started,  foundDescriptions);  [CE]  cannot  find  symbol  started  [FE]                            junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos.setIndex(c,  started,  foundDescriptions);  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	pos.setIndex(c,  started,  foundDescriptions);	  pos.setIndex(c,    foundDescriptions);    	non-compiled	[CE]  cannot  find  symbol  started	37	None	replace
118	[BUG]  [BUGGY]  int  fmtCount  =  0;  Int  fmtCount  =  0;  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  0;  Int  fmtCount  =  0;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	int  fmtCount  =  0;  Int  fmtCount  =  0;	  int    fmtCount    =    2;    Int    fmtCount    =    2;    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
119	[BUG]  [BUGGY]  Int  fmtCount  =  2;  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  Int  fmtCount  =  2;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	Int  fmtCount  =  2;	  int    fmtCount    =    2;    Int    fmtCount    =    2;    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
120	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  c.length  /  1;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	add	int  fmtCount  =  c.length  /  1;	  int    fmtCount    =    c.length    +    1;    	compilable	  [FE]  IllegalArgumentException  	25	5	replace
121	[BUG]  [BUGGY]  int  fmtCount  =  c.length  /  1;  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  c.length  /  1;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	int  fmtCount  =  c.length  /  1;	  int    fmtCount    =    c.length    +    1;    	compilable	  [FE]  IllegalArgumentException  	25	5	replace
122	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  c.length  +  2;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	add	int  fmtCount  =  c.length  +  2;	  int    fmtCount    =    c.length    +    1;    	compilable	  [FE]  IllegalArgumentException  	25	5	replace
123	[BUG]  [BUGGY]  int  fmtCount  =  c.length  +  2;  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  c.length  +  2;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	int  fmtCount  =  c.length  +  2;	  int    fmtCount    =    c.length    +    1;    	compilable	  [FE]  IllegalArgumentException  	25	5	replace
124	[BUG]  [BUGGY]  if(c!=  null  ||  c.length  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  c,  true);  break;  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(c!=  null  ||  c.length  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  c,  true);  break;  }  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	if(c!=  null  ||  c.length  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  c,  true);  break;  }	  if(c!=    null    &&    c.length    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    c,    true);    break;    }    	non-compiled	[CE]  ';'  expected	72	None	replace
125	[BUG]  [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  c,  true);  break;  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  c,  true);  break;  }  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  c,  true);  break;  }	  if(c!=    null    &&    c.length    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    c,    true);    break;    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	72	None	replace
126	[BUG]  [BUGGY]  Int  fmtCount  =  c.length;  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  Int  fmtCount  =  c.length;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	Int  fmtCount  =  c.length;	  int    fmtCount    =    c.length;    Int    fmtCount    =    c.length;    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
127	[BUG]  [BUGGY]  if(c!=  null  ||  c.length  >  0)  {  for(int  i  =  0;  i  <  c.length;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(c!=  null  ||  c.length  >  0)  {  for(int  i  =  0;  i  <  c.length;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	if(c!=  null  ||  c.length  >  0)  {  for(int  i  =  0;  i  <  c.length;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  if(c!=    null    &&    c.length    >    0)    {    for(int    i    =    0;    i    <    c.length;    ++i)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  ';'  expected	70	None	replace
128	[BUG]  [BUGGY]  if(c!=  null  ||  c.length  >  0)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(c!=  null  ||  c.length  >  0)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	if(c!=  null  ||  c.length  >  0)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  if(c!=    null    &&    c.length    >    0)    {    for(int    i    =    0;    i    <    c.length();    ++i)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  ';'  expected	80	None	replace
129	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  if(c!=    null    &&    c.length    >    0)    {    for(int    i    =    0;    i    <    c.length();    ++i)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
130	[BUG]  [BUGGY]  if(c!=  null  ||  c.length  >  0)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  c,  true);  break;  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(c!=  null  ||  c.length  >  0)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  c,  true);  break;  }  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	if(c!=  null  ||  c.length  >  0)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  c,  true);  break;  }	  if(c!=    null    &&    c.length    >    0)    {    for(int    i    =    0;    i    <    c.length();    ++i)    {    appendQuotedString(pattern,    pos,    c,    true);    break;    }    	non-compiled	[CE]  ';'  expected	75	None	replace
131	[BUG]  [BUGGY]  pos.setIndex(c.length()  *  4);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos.setIndex(c.length()  *  4);  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	pos.setIndex(c.length()  *  4);	  pos.setIndex(c.length()    *    2);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
132	[BUG]  [BUGGY]  int  fmtCount  =  c.length  -  2;  Int  fmtCount  =  c.length  -  2;  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  c.length  -  2;  Int  fmtCount  =  c.length  -  2;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	int    fmtCount    =    c.length    -    2;    Int  fmtCount  =  c.length  -  2;	  	non-compiled	[CE]  cannot  find  symbol	73	None	add
133	[BUG]  [BUGGY]  if(c  ==  null)  {  for(int  i  =  0;  i  <  c.length;  ++i)  {  appendQuotedString(pattern,  pos,  c,  false);  break;  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(c  ==  null)  {  for(int  i  =  0;  i  <  c.length;  ++i)  {  appendQuotedString(pattern,  pos,  c,  false);  break;  }  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	if(c  ==  null)  {  for(int  i  =  0;  i  <  c.length;  ++i)  {  appendQuotedString(pattern,  pos,  c,  false);  break;  }	  if(c    ==    null)    {    for(int    i    =    0;    i    <    c.length;    ++i)    {    appendQuotedString(pattern,    pos,    c,    true);    break;    }    	non-compiled	[CE]  ';'  expected	53	None	replace
134	[BUG]  [BUGGY]  char  fmtCount  =  2;  char  fmtCount  =  3;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]    IllegalArgumentException    [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  fmtCount  =  2;  char  fmtCount  =  3;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	char    fmtCount    =    2;    char  fmtCount  =  3;	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	63	None	add
135	[BUG]  [BUGGY]  char  fmtCount  =  2;  String  fmtCount  =  2;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]      IllegalArgumentException    [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  fmtCount  =  2;  String  fmtCount  =  2;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	char    fmtCount    =    2;    String  fmtCount  =  2;	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	63	None	add
136	[BUG]  [BUGGY]  char  fmtCount  =  c.length;  Int  fmtCount  =  c.length;  [CE]  possible  loss  of  precision  [FE]            IllegalArgumentException      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  fmtCount  =  c.length;  Int  fmtCount  =  c.length;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	char  fmtCount  =  c.length;  Int  fmtCount  =  c.length;	  int    fmtCount    =    c.length;    Int    fmtCount    =    c.length;    	non-compiled	[CE]  possible  loss  of  precision	3	None	replace
137	[BUG]  [BUGGY]  pos.setIndex(c,  START_FE);  [CE]  method  setIndex  in  class  ParsePosition  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos.setIndex(c,  START_FE);  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	pos.setIndex(c,  START_FE);	  pos.setIndex(c,    started);    	non-compiled	[CE]  method  setIndex  in  class  ParsePosition  cannot  be  applied  to  given  types;	38	None	replace
138	[BUG]  [BUGGY]  pos.setIndex(c,  START_FMT);  [CE]  method  setIndex  in  class  ParsePosition  cannot  be  applied  to  given  types;  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos.setIndex(c,  START_FMT);  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	pos.setIndex(c,  START_FMT);	  pos.setIndex(c,    started);    	non-compiled	[CE]  method  setIndex  in  class  ParsePosition  cannot  be  applied  to  given  types;	38	None	replace
139	[BUG]  [BUGGY]  char  fmtCount  =  1;  int  fmtCount  =  0;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  fmtCount  =  1;  int  fmtCount  =  0;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	char  fmtCount  =  1;  int  fmtCount  =  0;	  char    fmtCount    =    0;    int    fmtCount    =    0;    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	46	None	replace
140	[BUG]  [BUGGY]  if(c!=  null  &&  c.length  >  0)  {  for(int  i  =  0;  i  <  c.length;  ++i)  {  appendQuotedString(pattern,  pos,  c,  false);  break;  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(c!=  null  &&  c.length  >  0)  {  for(int  i  =  0;  i  <  c.length;  ++i)  {  appendQuotedString(pattern,  pos,  c,  false);  break;  }  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	if(c!=  null  &&  c.length  >  0)  {  for(int  i  =  0;  i  <  c.length;  ++i)  {  appendQuotedString(pattern,  pos,  c,  false);  break;  }	  if(c!=    null    &&    c.length    >    0)    {    for(int    i    =    0;    i    <    c.length;    ++i)    {    appendQuotedString(pattern,    pos,    c,    true);    break;    }    	non-compiled	[CE]  ';'  expected	67	None	replace
141	[BUG]  [BUGGY]  int  fmtCount  =  c.length  +  1;  Int  fmtCount  =  c.length  +  1;  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  c.length  +  1;  Int  fmtCount  =  c.length  +  1;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	int    fmtCount    =    c.length    +    1;    Int  fmtCount  =  c.length  +  1;	  	non-compiled	[CE]  cannot  find  symbol	24	None	add
142	[BUG]  [BUGGY]  Integer  fmtCount  =  foundDescriptions.length-1;  [CE]  cannot  find  symbol  length  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  Integer  fmtCount  =  foundDescriptions.length-1;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	Integer  fmtCount  =  foundDescriptions.length-1;	  Integer    fmtCount    =    foundDescriptions.length;    	non-compiled	[CE]  cannot  find  symbol  length	57	None	replace
143	[BUG]  [BUGGY]  char[]  c  =  toPattern.toCharArray()  +  1;  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  char[]  c  =  toPattern.toCharArray()  +  1;  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	char[]  c  =  toPattern.toCharArray()  +  1;	  char[]    c    =    toPattern.toCharArray();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	7	None	replace
144	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start);  [CE]  cannot  find  symbol  start  [FE]    IllegalArgumentException    [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start);	  int    fmtCount    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  cannot  find  symbol  start	77	None	replace
145	[BUG]  [BUGGY]  char  fmtCount  =  c.length;  int  fmtCount  =  c.length;  break;  [CE]  possible  loss  of  precision  [FE]              IllegalArgumentException      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  fmtCount  =  c.length;  int  fmtCount  =  c.length;  break;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	char  fmtCount  =  c.length;  int  fmtCount  =  c.length;  break;	  int    fmtCount    =    c.length;    int    fmtCount    =    c.length;    break;    	non-compiled	[CE]  possible  loss  of  precision	4	None	replace
146	[BUG]  [BUGGY]  if(c!=  null  &&  c.length  >  0)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(c!=  null  &&  c.length  >  0)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	if(c!=  null  &&  c.length  >  0)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }	  if(c!=    null    &&    c.length    >    0)    {    for(int    i    =    0;    i    <    c.length();    ++i)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  ';'  expected	80	None	replace
147	[BUG]  [BUGGY]  Integer  fmtCount  =  0;  int  fmtCount  =  0;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  Integer  fmtCount  =  0;  int  fmtCount  =  0;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	Integer  fmtCount  =  0;  int  fmtCount  =  0;	  char    fmtCount    =    0;    char    fmtCount    =    0;    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	45	None	replace
148	[BUG]  [BUGGY]  int  fmtCount  =  c.length;  char  fmtCount  =  c.length  +  1;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]          IllegalArgumentException      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  c.length;  char  fmtCount  =  c.length  +  1;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	int  fmtCount  =  c.length;  char  fmtCount  =  c.length  +  1;	  int    fmtCount    =    c.length;    char    fmtCount    =    c.length;    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	2	None	replace
149	[BUG]  [BUGGY]  if(c!=  null  &&  c.length  >  0)  {  for(int  i  =  0;  i  <  c.length;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(c!=  null  &&  c.length  >  0)  {  for(int  i  =  0;  i  <  c.length;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	if(c!=  null  &&  c.length  >  0)  {  for(int  i  =  0;  i  <  c.length;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }	  if(c!=    null    &&    c.length    >    0)    {    for(int    i    =    0;    i    <    c.length;    ++i)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  ';'  expected	70	None	replace
150	[BUG]  [BUGGY]  char  fmtCount  =  2;  int  fmtCount  =  3;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]              IllegalArgumentException      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  fmtCount  =  2;  int  fmtCount  =  3;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	char  fmtCount  =  2;  int  fmtCount  =  3;	  int    fmtCount    =    2;    int    fmtCount    =    3;    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	33	None	replace
151	[BUG]  [BUGGY]  if(c!=  null  ||  c.length  ==  2)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(c!=  null  ||  c.length  ==  2)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	if(c!=  null  ||  c.length  ==  2)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  if(c    ==    null    ||    c.length    <    2)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  ';'  expected	69	None	replace
152	[BUG]  [BUGGY]  if(c  ==  null  ||  c.length!=  2)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(c  ==  null  ||  c.length!=  2)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	if(c  ==  null  ||  c.length!=  2)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  if(c    ==    null    ||    c.length    <    2)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  ';'  expected	69	None	replace
153	[BUG]  [BUGGY]  pos.setIndex(c,  foundDescriptions.length  -  1);  [CE]  cannot  find  symbol  length  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos.setIndex(c,  foundDescriptions.length  -  1);  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	pos.setIndex(c,  foundDescriptions.length  -  1);	  pos.setIndex(c,    pattern.length()    -    1);    	non-compiled	[CE]  cannot  find  symbol  length	65	None	replace
154	[BUG]  [BUGGY]  pos.setIndex(c,  foundFormats.length()  -  1);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos.setIndex(c,  foundFormats.length()  -  1);  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	pos.setIndex(c,  foundFormats.length()  -  1);	  pos.setIndex(c,    pattern.length()    -    1);    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
155	[BUG]  [BUGGY]  int  fmtCount  =  1;  Int  fmtCount  =  2;  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  1;  Int  fmtCount  =  2;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	int  fmtCount  =  1;  Int  fmtCount  =  2;	  int    fmtCount    =    2;    Int    fmtCount    =    2;    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
156	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharArray(pos  +  1);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  char[]  c  =  pattern.toCharArray(pos  +  1);  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	char[]  c  =  pattern.toCharArray(pos  +  1);	  char[]    c    =    pattern.toCharArray(pos);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	79	None	replace
157	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  c.length  -  1  +  1;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	add	int  fmtCount  =  c.length  -  1  +  1;	  int    fmtCount    =    c.length    -    1;    	compilable	  [FE]  IllegalArgumentException  	23	5	replace
158	[BUG]  [BUGGY]  int  fmtCount  =  c.length  -  1  +  1;  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  c.length  -  1  +  1;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	int  fmtCount  =  c.length  -  1  +  1;	  int    fmtCount    =    c.length    -    1;    	compilable	  [FE]  IllegalArgumentException  	23	5	replace
159	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  c.length  -  4;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	add	int  fmtCount  =  c.length  -  4;	  int    fmtCount    =    c.length    -    1;    	compilable	  [FE]  IllegalArgumentException  	23	5	replace
160	[BUG]  [BUGGY]  int  fmtCount  =  c.length  -  4;  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  c.length  -  4;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	int  fmtCount  =  c.length  -  4;	  int    fmtCount    =    c.length    -    1;    	compilable	  [FE]  IllegalArgumentException  	23	5	replace
161	[BUG]  [BUGGY]  int  fmtCount  =  0;  int  fmtCount  =  0;  break;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]          IllegalArgumentException      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  0;  int  fmtCount  =  0;  break;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	int  fmtCount  =  0;  int  fmtCount  =  0;  break;	  int    fmtCount    =    2;    int    fmtCount    =    2;    break;    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	31	None	replace
162	[BUG]  [BUGGY]  char  fmtCount  =  2;  int  fmtCount  =  2;  break;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]            IllegalArgumentException      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  fmtCount  =  2;  int  fmtCount  =  2;  break;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	char  fmtCount  =  2;  int  fmtCount  =  2;  break;	  int    fmtCount    =    2;    int    fmtCount    =    2;    break;    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	31	None	replace
163	[BUG]  [BUGGY]  pos.setIndex(c,  foundDescriptions.length()  -  1);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos.setIndex(c,  foundDescriptions.length()  -  1);  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	pos.setIndex(c,  foundDescriptions.length()  -  1);	  pos.setIndex(c,    pos.length()    -    1);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
164	[BUG]  [BUGGY]  pos.setIndex(c,  DECEMBER_FMT);  [CE]  cannot  find  symbol  DECEMBER_FMT  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos.setIndex(c,  DECEMBER_FMT);  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	pos.setIndex(c,  DECEMBER_FMT);	  pos.setIndex(c,    start);    	non-compiled	[CE]  cannot  find  symbol  DECEMBER_FMT	36	None	replace
165	[BUG]  [BUGGY]  pos.setIndex(c,  i);  [CE]  cannot  find  symbol  i  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos.setIndex(c,  i);  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	pos.setIndex(c,  i);	  pos.setIndex(c,    start);    	non-compiled	[CE]  cannot  find  symbol  i	36	None	replace
166	[BUG]  [BUGGY]  if(c  ==  null)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  c,  false);  break;  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(c  ==  null)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  c,  false);  break;  }  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	if(c  ==  null)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  c,  false);  break;  }	  if(c!=    null)    {    for(int    i    =    0;    i    <    c.length();    ++i)    {    appendQuotedString(pattern,    pos,    c,    false);    break;    }    	non-compiled	[CE]  ';'  expected	28	None	replace
167	[BUG]  [BUGGY]  Int  fmtCount  =  foundDescriptions.length;  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  Int  fmtCount  =  foundDescriptions.length;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	Int  fmtCount  =  foundDescriptions.length;	  int    fmtCount    =    orderedDescriptions.length;    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
168	[BUG]  [BUGGY]  char[]  c  =  Pattern.toCharArray();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  char[]  c  =  Pattern.toCharArray();  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	char[]  c  =  Pattern.toCharArray();	  char[]    c    =    pattern.toCharArray()    +    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	60	None	replace
169	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos);  Int  fmtCount  =  readArgumentIndex(pattern,  pos);  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos);  Int  fmtCount  =  readArgumentIndex(pattern,  pos);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	int    fmtCount    =    readArgumentIndex(pattern,    pos);    Int  fmtCount  =  readArgumentIndex(pattern,  pos);	  	non-compiled	[CE]  cannot  find  symbol	76	None	add
170	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos);  char  fmtCount  =  readArgumentIndex(pattern,  pos);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]      IllegalArgumentException    [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos);  char  fmtCount  =  readArgumentIndex(pattern,  pos);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	int    fmtCount    =    readArgumentIndex(pattern,    pos);    char  fmtCount  =  readArgumentIndex(pattern,  pos);	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	76	None	add
171	[BUG]  [BUGGY]  int  fmtCount  =  0;  Character  fmtCount  =  0;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  0;  Character  fmtCount  =  0;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	int  fmtCount  =  0;  Character  fmtCount  =  0;	  char    fmtCount    =    0;    Character    fmtCount    =    0;    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	49	None	replace
172	[BUG]  [BUGGY]  Integer  fmtCount  =  0;  Character  fmtCount  =  0;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  Integer  fmtCount  =  0;  Character  fmtCount  =  0;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	Integer  fmtCount  =  0;  Character  fmtCount  =  0;	  char    fmtCount    =    0;    Character    fmtCount    =    0;    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	49	None	replace
173	[BUG]  [BUGGY]  char  fmtCount  =  1;  char  fmtCount  =  2;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]    IllegalArgumentException    [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  fmtCount  =  1;  char  fmtCount  =  2;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	char    fmtCount    =    1;    char  fmtCount  =  2;	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	5	None	add
174	[BUG]  [BUGGY]  char  fmtCount  =  1;  Character  fmtCount  =  1;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]      IllegalArgumentException    [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  fmtCount  =  1;  Character  fmtCount  =  1;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	char    fmtCount    =    1;    Character  fmtCount  =  1;	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	5	None	add
175	[BUG]  [BUGGY]  int  fmtCount  =  1;  char  fmtCount  =  2;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                IllegalArgumentException      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  1;  char  fmtCount  =  2;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	int  fmtCount  =  1;  char  fmtCount  =  2;	  int    fmtCount    =    2;    char    fmtCount    =    2;    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	34	None	replace
176	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos,  c);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos,  c);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos,  c);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    pos);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	78	None	replace
177	[BUG]  [BUGGY]  char  fmtCount  =  1;  int  fmtCount  =  2;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                IllegalArgumentException      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  fmtCount  =  1;  int  fmtCount  =  2;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	char  fmtCount  =  1;  int  fmtCount  =  2;	  int    fmtCount    =    1;    int    fmtCount    =    2;    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	43	None	replace
178	[BUG]  [BUGGY]  Integer  fmtCount  =  1;  int  fmtCount  =  2;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  IllegalArgumentException      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  Integer  fmtCount  =  1;  int  fmtCount  =  2;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	Integer  fmtCount  =  1;  int  fmtCount  =  2;	  int    fmtCount    =    1;    int    fmtCount    =    2;    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	43	None	replace
179	[BUG]  [BUGGY]  char  fmtCount  =  1;  int  fmtCount  =  1;  break;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]          IllegalArgumentException      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  fmtCount  =  1;  int  fmtCount  =  1;  break;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	char  fmtCount  =  1;  int  fmtCount  =  1;  break;	  int    fmtCount    =    1;    int    fmtCount    =    1;    break;    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	40	None	replace
180	[BUG]  [BUGGY]  if(c!=  null  &&  c.length  >  0)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  c,  false);  break;  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(c!=  null  &&  c.length  >  0)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  c,  false);  break;  }  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	if(c!=  null  &&  c.length  >  0)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  c,  false);  break;  }	  if(c!=    null    &&    c.length    >    0)    {    for(int    i    =    0;    i    <    c.length();    ++i)    {    appendQuotedString(pattern,    pos,    c,    true);    break;    }    	non-compiled	[CE]  ';'  expected	75	None	replace
181	[BUG]  [BUGGY]  pos.setIndex(foundDescriptions,  c);  [CE]  method  setIndex  in  class  ParsePosition  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos.setIndex(foundDescriptions,  c);  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	pos.setIndex(foundDescriptions,  c);	  pos.setIndex(c,    foundDescriptions);    	non-compiled	[CE]  method  setIndex  in  class  ParsePosition  cannot  be  applied  to  given  types;	37	None	replace
182	[BUG]  [BUGGY]  pos,  c.setIndex(c.length());  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos,  c.setIndex(c.length());  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	pos,  c.setIndex(c.length());	  pos.setIndex(c.length()    +    1);    	non-compiled	[CE]  not  a  statement	13	None	replace
183	[BUG]  [BUGGY]  Int  fmtCount  =  c.length;  Int  fmtCount  =  c.length;  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  Int  fmtCount  =  c.length;  Int  fmtCount  =  c.length;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	Int  fmtCount  =  c.length;  Int  fmtCount  =  c.length;	  int    fmtCount    =    c.length;    Int    fmtCount    =    c.length;    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
184	[BUG]  [BUGGY]  pos.setIndex(indent,  c);  [CE]  cannot  find  symbol  indent  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos.setIndex(indent,  c);  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	pos.setIndex(indent,  c);	  pos.setIndex(index,    c);    	non-compiled	[CE]  cannot  find  symbol  indent	81	None	replace
185	[BUG]  [BUGGY]  if(c  ==  null  ||  c.length()  ==  0)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(c  ==  null  ||  c.length()  ==  0)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	if(c  ==  null  ||  c.length()  ==  0)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  if(c    ==    null)    {    for(int    i    =    0;    i    <    c.length();    ++i)    {    appendQuotedString(pattern,    pos,    stripCustom,    false);    break;    }    	non-compiled	[CE]  ';'  expected	20	None	replace
186	[BUG]  [BUGGY]  int  fmtCount  =  c.length  -  1;  Int  fmtCount  =  c.length  -  1;  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  c.length  -  1;  Int  fmtCount  =  c.length  -  1;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	int    fmtCount    =    c.length    -    1;    Int  fmtCount  =  c.length  -  1;	  	non-compiled	[CE]  cannot  find  symbol	22	None	add
187	[BUG]  [BUGGY]  if(c  ==  null  ||  c.length  <  2)  {  for(int  i  =  0;  i  <  c.length;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(c  ==  null  ||  c.length  <  2)  {  for(int  i  =  0;  i  <  c.length;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	if(c  ==  null  ||  c.length  <  2)  {  for(int  i  =  0;  i  <  c.length;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  if(c    ==    null)    {    for(int    i    =    0;    i    <    c.length;    ++i)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  ';'  expected	16	None	replace
188	[BUG]  [BUGGY]  pos.setIndex(indent,  c,  foundDescriptions);  [CE]  cannot  find  symbol  indent  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos.setIndex(indent,  c,  foundDescriptions);  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	pos.setIndex(indent,  c,  foundDescriptions);	  pos.setIndex(c,    foundDescriptions);    	non-compiled	[CE]  cannot  find  symbol  indent	37	None	replace
189	[BUG]  [BUGGY]  pos.setIndex(i,  c,  foundDescriptions);  [CE]  cannot  find  symbol  i  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos.setIndex(i,  c,  foundDescriptions);  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	pos.setIndex(i,  c,  foundDescriptions);	  pos.setIndex(c,    foundDescriptions);    	non-compiled	[CE]  cannot  find  symbol  i	37	None	replace
190	[BUG]  [BUGGY]  pos.setIndex(start,  c,  foundDescriptions);  [CE]  cannot  find  symbol  start  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos.setIndex(start,  c,  foundDescriptions);  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	pos.setIndex(start,  c,  foundDescriptions);	  pos.setIndex(c,    foundDescriptions);    	non-compiled	[CE]  cannot  find  symbol  start	37	None	replace
191	[BUG]  [BUGGY]  if(c!=  null  &&  c.length  <  2)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(c!=  null  &&  c.length  <  2)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	if(c!=  null  &&  c.length  <  2)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  if(c    ==    null    ||    c.length    <    2)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  ';'  expected	69	None	replace
192	[BUG]  [BUGGY]  pos.setIndex(c,  i,  pos.length()  -  1);  [CE]  cannot  find  symbol  i  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos.setIndex(c,  i,  pos.length()  -  1);  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	pos.setIndex(c,  i,  pos.length()  -  1);	  pos.setIndex(c,    pos.length()    -    1);    	non-compiled	[CE]  cannot  find  symbol  i	14	None	replace
193	[BUG]  [BUGGY]  pos.setIndex(c,  p.length()  -  1);  [CE]  cannot  find  symbol  p  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos.setIndex(c,  p.length()  -  1);  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	pos.setIndex(c,  p.length()  -  1);	  pos.setIndex(c,    pos.length()    -    1);    	non-compiled	[CE]  cannot  find  symbol  p	14	None	replace
194	[BUG]  [BUGGY]  pos.setIndex(c,  i,  pattern.length()  -  1);  [CE]  cannot  find  symbol  i  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos.setIndex(c,  i,  pattern.length()  -  1);  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	pos.setIndex(c,  i,  pattern.length()  -  1);	  pos.setIndex(c,    pattern.length()    -    1);    	non-compiled	[CE]  cannot  find  symbol  i	65	None	replace
195	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]    IllegalArgumentException    [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos  +  1);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos  +  1);	  int    fmtCount    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	77	None	replace
196	[BUG]  [BUGGY]  int  fmtCount  =  c.length  -  1;  break;  [CE]  break  outside  switch  or  loop  [FE]              IllegalArgumentException      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  c.length  -  1;  break;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	int  fmtCount  =  c.length  -  1;  break;	  int    fmtCount    =    c.length;    int    fmtCount    =    c.length;    break;    	non-compiled	[CE]  break  outside  switch  or  loop	4	None	replace
197	[BUG]  [BUGGY]  pos.setIndex(c,  DEMY_QUOTE);  [CE]  cannot  find  symbol  DEMY_QUOTE  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos.setIndex(c,  DEMY_QUOTE);  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	pos.setIndex(c,  DEMY_QUOTE);	  pos.setIndex(c,    start);    	non-compiled	[CE]  cannot  find  symbol  DEMY_QUOTE	36	None	replace
198	[BUG]  [BUGGY]  if(c  ==  null  ||  c.length  <  2)  {  for(int  i  =  0;  i  <  c.length;  ++i)  {  appendQuotedString(pattern,  pos,  c,  true);  break;  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(c  ==  null  ||  c.length  <  2)  {  for(int  i  =  0;  i  <  c.length;  ++i)  {  appendQuotedString(pattern,  pos,  c,  true);  break;  }  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	if(c  ==  null  ||  c.length  <  2)  {  for(int  i  =  0;  i  <  c.length;  ++i)  {  appendQuotedString(pattern,  pos,  c,  true);  break;  }	  if(c    ==    null)    {    for(int    i    =    0;    i    <    c.length;    ++i)    {    appendQuotedString(pattern,    pos,    c,    true);    break;    }    	non-compiled	[CE]  ';'  expected	53	None	replace
199	[BUG]  [BUGGY]  Char  fmtCount  =  0;  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  Char  fmtCount  =  0;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	Char  fmtCount  =  0;	  char    fmtCount    =    0;    Char    fmtCount    =    0;    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
200	[BUG]  [BUGGY]  if(c!=  null  &&  c.length  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  c,  false);  break;  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(c!=  null  &&  c.length  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  c,  false);  break;  }  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	if(c!=  null  &&  c.length  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  c,  false);  break;  }	  if(c!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    c,    false);    break;    }    	non-compiled	[CE]  ';'  expected	50	None	replace
201	[BUG]  [BUGGY]  char[]  c  =  format.toCharArray();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  char[]  c  =  format.toCharArray();  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	char[]  c  =  format.toCharArray();	  char[]    c    =    foundFormats.toCharArray();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	9	None	replace
202	[BUG]  [BUGGY]  if(c  ==  null  ||  c.length  <  2)  {  for(int  i  =  0;  i  <  c.length;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(c  ==  null  ||  c.length  <  2)  {  for(int  i  =  0;  i  <  c.length;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	if(c  ==  null  ||  c.length  <  2)  {  for(int  i  =  0;  i  <  c.length;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }	  if(c    ==    null)    {    for(int    i    =    0;    i    <    c.length;    ++i)    {    appendQuotedString(pattern,    pos,    stripCustom,    false);    break;    }    	non-compiled	[CE]  ';'  expected	29	None	replace
203	[BUG]  [BUGGY]  char[]  c  =  toPattern.trim();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  char[]  c  =  toPattern.trim();  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	char[]  c  =  toPattern.trim();	  char[]    c    =    toPattern.toCharArray();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	7	None	replace
204	[BUG]  [BUGGY]  pos.setIndex(c,  pos.length()  *  1);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos.setIndex(c,  pos.length()  *  1);  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	pos.setIndex(c,  pos.length()  *  1);	  pos.setIndex(c.length()    *    1);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
205	[BUG]  [BUGGY]  if(c!=  null  &&  c.length  <  2)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(c!=  null  &&  c.length  <  2)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	if(c!=  null  &&  c.length  <  2)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }	  if(c    ==    null    ||    c.length    <    2)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    false);    break;    }    	non-compiled	[CE]  ';'  expected	71	None	replace
206	[BUG]  [BUGGY]  if(c  ==  null  ||  c.length  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(c  ==  null  ||  c.length  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	if(c  ==  null  ||  c.length  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  if(c!=    null    &&    c.length    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  ';'  expected	68	None	replace
207	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharArray(start);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  char[]  c  =  pattern.toCharArray(start);  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	char[]  c  =  pattern.toCharArray(start);	  char[]    c    =    pattern.toCharArray(pos);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	79	None	replace
208	[BUG]  [BUGGY]  int  fmtCount  =  c.length;  String  fmtCount  =  c.length;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]          IllegalArgumentException      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  fmtCount  =  c.length;  String  fmtCount  =  c.length;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	int  fmtCount  =  c.length;  String  fmtCount  =  c.length;	  int    fmtCount    =    c.length;    char    fmtCount    =    c.length;    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	2	None	replace
209	[BUG]  [BUGGY]  pos.setIndex(c,  pos.length()  *  2);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos.setIndex(c,  pos.length()  *  2);  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	157	157	1	replace	pos.setIndex(c,  pos.length()  *  2);	  pos.setIndex(c.length()    *    2);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
