bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions.length  +  2);  [CE]  cannot  find  symbol  length  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions.length  +  2);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition  pos  =  new  ParsePosition(foundDescriptions.length  +  2);	  ParsePosition    pos    =    new    ParsePosition(foundDescriptions.length    +    1);    	non-compiled	[CE]  cannot  find  symbol  length	36	None	replace
2	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions.size()  +  1);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	add	ParsePosition  pos  =  new  ParsePosition(foundDescriptions.size()  +  1);	  ParsePosition    pos    =    new    ParsePosition(foundDescriptions.length    +    1);    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	36	5	replace
3	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions.size()  +  1);  [FE]  junit.framework.AssertionFailedError:  registry  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions.size()  +  1);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition  pos  =  new  ParsePosition(foundDescriptions.size()  +  1);	  ParsePosition    pos    =    new    ParsePosition(foundDescriptions.length    +    1);    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	36	5	replace
4	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions.length  +  3);  [CE]  cannot  find  symbol  length  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions.length  +  3);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition  pos  =  new  ParsePosition(foundDescriptions.length  +  3);	  ParsePosition    pos    =    new    ParsePosition(foundDescriptions.length    +    1);    	non-compiled	[CE]  cannot  find  symbol  length	36	None	replace
5	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions.size()  -  1);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	add	ParsePosition  pos  =  new  ParsePosition(foundDescriptions.size()  -  1);	  ParsePosition    pos    =    new    ParsePosition(foundDescriptions.size());    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	40	5	replace
6	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions.size()  -  1);  [FE]  ArrayIndexOutOfBoundsException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions.size()  -  1);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition  pos  =  new  ParsePosition(foundDescriptions.size()  -  1);	  ParsePosition    pos    =    new    ParsePosition(foundDescriptions.size());    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	40	5	replace
7	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions.size()  -  2);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	add	ParsePosition  pos  =  new  ParsePosition(foundDescriptions.size()  -  2);	  ParsePosition    pos    =    new    ParsePosition(foundDescriptions.size());    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	40	5	replace
8	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions.size()  -  2);  [FE]  ArrayIndexOutOfBoundsException  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions.size()  -  2);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition  pos  =  new  ParsePosition(foundDescriptions.size()  -  2);	  ParsePosition    pos    =    new    ParsePosition(foundDescriptions.size());    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	40	5	replace
9	[BUG]  [BUGGY]  pos  =  new  ParsePosition(1);  [CE]  cannot  find  symbol  pos  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  pos  =  new  ParsePosition(1);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	pos  =  new  ParsePosition(1);	  ParsePosition    pos    =    new    ParsePosition(1);    pos    =    new    ParsePosition(1);    	non-compiled	[CE]  cannot  find  symbol  pos	8	None	replace
10	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions.length,  stripCustom,  pattern);  [CE]  cannot  find  symbol  length  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions.length,  stripCustom,  pattern);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition  pos  =  new  ParsePosition(foundDescriptions.length,  stripCustom,  pattern);	  ParsePosition    pos    =    new    ParsePosition(foundDescriptions.length,    stripCustom);    	non-compiled	[CE]  cannot  find  symbol  length	37	None	replace
11	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions.size(),  stripCustom);  [CE]  constructor  ParsePosition  in  class  ParsePosition  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions.size(),  stripCustom);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition  pos  =  new  ParsePosition(foundDescriptions.size(),  stripCustom);	  ParsePosition    pos    =    new    ParsePosition(foundDescriptions.length,    stripCustom);    	non-compiled	[CE]  constructor  ParsePosition  in  class  ParsePosition  cannot  be  applied  to  given  types;	37	None	replace
12	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions.length,  toPattern);  [CE]  cannot  find  symbol  length  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions.length,  toPattern);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition  pos  =  new  ParsePosition(foundDescriptions.length,  toPattern);	  ParsePosition    pos    =    new    ParsePosition(foundDescriptions.length,    stripCustom);    	non-compiled	[CE]  cannot  find  symbol  length	37	None	replace
13	[BUG]  [BUGGY]  Formats.for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern.add(it.next());  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  Formats.for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern.add(it.next());  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	Formats.for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern.add(it.next());  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    toPattern.add(it.next());    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
14	[BUG]  [BUGGY]  for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern.add(it.next());  }  [CE]  incompatible  types  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern.add(it.next());  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern.add(it.next());  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    toPattern.add(it.next());    }    	non-compiled	[CE]  incompatible  types	45	None	replace
15	[BUG]  [BUGGY]  Iterator  <  String>  it  =  foundDescriptions.iterator();  toPattern.add(it.next());  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  Iterator  <  String>  it  =  foundDescriptions.iterator();  toPattern.add(it.next());  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	Iterator  <  String>  it  =  foundDescriptions.iterator();  toPattern.add(it.next());	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    toPattern.add(it.next());    }    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
16	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions,  foundFormats);  [CE]  constructor  ParsePosition  in  class  ParsePosition  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions,  foundFormats);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition  pos  =  new  ParsePosition(foundDescriptions,  foundFormats);	  ParsePosition    pos    =    new    ParsePosition(foundFormats);    	non-compiled	[CE]  constructor  ParsePosition  in  class  ParsePosition  cannot  be  applied  to  given  types;	63	None	replace
17	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(toPattern,  foundFormats);  [CE]  constructor  ParsePosition  in  class  ParsePosition  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(toPattern,  foundFormats);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition  pos  =  new  ParsePosition(toPattern,  foundFormats);	  ParsePosition    pos    =    new    ParsePosition(foundFormats);    	non-compiled	[CE]  constructor  ParsePosition  in  class  ParsePosition  cannot  be  applied  to  given  types;	63	None	replace
18	[BUG]  [BUGGY]  if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  break;  }  }  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  break;  }  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  break;  }  }	  if(foundDescriptions!=    null)    {    for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendString(pattern,    it.next());    break;    }    }    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
19	[BUG]  [BUGGY]  Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }	  Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendString(pattern,    it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
20	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  if(foundDescriptions!=  null)  {  Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	if(foundDescriptions!=  null)  {  Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }	  Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendString(pattern,    it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
21	[BUG]  [BUGGY]  ArrayList  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ArrayList  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ArrayList  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }	  Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendString(pattern,    it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
22	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(toPattern,  foundDescriptions,  stripCustom);  [CE]  constructor  ParsePosition  in  class  ParsePosition  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(toPattern,  foundDescriptions,  stripCustom);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition  pos  =  new  ParsePosition(toPattern,  foundDescriptions,  stripCustom);	  ParsePosition    pos    =    new    ParsePosition(toPattern,    foundDescriptions);    	non-compiled	[CE]  constructor  ParsePosition  in  class  ParsePosition  cannot  be  applied  to  given  types;	64	None	replace
23	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions,  toPattern);  [CE]  constructor  ParsePosition  in  class  ParsePosition  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions,  toPattern);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition  pos  =  new  ParsePosition(foundDescriptions,  toPattern);	  ParsePosition    pos    =    new    ParsePosition(toPattern,    foundDescriptions);    	non-compiled	[CE]  constructor  ParsePosition  in  class  ParsePosition  cannot  be  applied  to  given  types;	64	None	replace
24	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(toPattern,  stripCustom,  foundDescriptions);  [CE]  constructor  ParsePosition  in  class  ParsePosition  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(toPattern,  stripCustom,  foundDescriptions);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition  pos  =  new  ParsePosition(toPattern,  stripCustom,  foundDescriptions);	  ParsePosition    pos    =    new    ParsePosition(toPattern,    foundDescriptions);    	non-compiled	[CE]  constructor  ParsePosition  in  class  ParsePosition  cannot  be  applied  to  given  types;	64	None	replace
25	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundFormats,  toPattern);  [CE]  constructor  ParsePosition  in  class  ParsePosition  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundFormats,  toPattern);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition  pos  =  new  ParsePosition(foundFormats,  toPattern);	  ParsePosition    pos    =    new    ParsePosition(toPattern,    foundDescriptions);    	non-compiled	[CE]  constructor  ParsePosition  in  class  ParsePosition  cannot  be  applied  to  given  types;	64	None	replace
26	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(4);  pos  =  new  ParsePosition(4);  [CE]  variable  pos  is  already  defined  in  method  applyPattern(String)  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(4);  pos  =  new  ParsePosition(4);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition    pos    =    new    ParsePosition(4);    pos  =  new  ParsePosition(4);	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  applyPattern(String)	79	None	add
27	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(4);  ParsePosition  pos  =  new  ParsePosition(4);  [CE]  variable  pos  is  already  defined  in  method  applyPattern(String)  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(4);  ParsePosition  pos  =  new  ParsePosition(4);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition    pos    =    new    ParsePosition(4);    ParsePosition  pos  =  new  ParsePosition(4);	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  applyPattern(String)	79	None	add
28	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(4);  pos  =  new  ParsePosition(5);  [CE]  variable  pos  is  already  defined  in  method  applyPattern(String)  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(4);  pos  =  new  ParsePosition(5);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition    pos    =    new    ParsePosition(4);    pos  =  new  ParsePosition(5);	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  applyPattern(String)	79	None	add
29	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(4);  ParsePosition  pos  =  new  ParsePosition(5);  [CE]  variable  pos  is  already  defined  in  method  applyPattern(String)  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(4);  ParsePosition  pos  =  new  ParsePosition(5);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition    pos    =    new    ParsePosition(4);    ParsePosition  pos  =  new  ParsePosition(5);	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  applyPattern(String)	79	None	add
30	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(4);  ParsePosition  pos  =  new  ParsePosition(6);  [CE]  variable  pos  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(4);  ParsePosition  pos  =  new  ParsePosition(6);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition    pos    =    new    ParsePosition(4);    ParsePosition  pos  =  new  ParsePosition(6);	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  applyPattern(String)	79	None	add
31	[BUG]  [BUGGY]  Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  toPattern.add(it.next());  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  toPattern.add(it.next());  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  toPattern.add(it.next());  }	  Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    toPattern.add(it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
32	[BUG]  [BUGGY]  Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern.add(it.next());  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern.add(it.next());  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern.add(it.next());  }	  Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    toPattern.add(it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
33	[BUG]  [BUGGY]  Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern.add(it.next());  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern.add(it.next());  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern.add(it.next());	  Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    toPattern.add(it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
34	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(3);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	add	ParsePosition  pos  =  new  ParsePosition(3);	  ParsePosition    pos    =    new    ParsePosition(2);    ParsePosition    pos    =    new    ParsePosition(3);    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	54	5	replace
35	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(3);  [FE]  junit.framework.AssertionFailedError:  registry  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(3);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition  pos  =  new  ParsePosition(3);	  ParsePosition    pos    =    new    ParsePosition(2);    ParsePosition    pos    =    new    ParsePosition(3);    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	54	5	replace
36	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  stripCustom,  it.next());  break;  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  stripCustom,  it.next());  break;  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  stripCustom,  it.next());  break;  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    i,    it.next());    break;    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	76	None	replace
37	[BUG]  [BUGGY]  Formats.for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  fmtCount,  it.next());  break;  }  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  Formats.for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  fmtCount,  it.next());  break;  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	Formats.for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  fmtCount,  it.next());  break;  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    i,    it.next());    break;    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
38	[BUG]  [BUGGY]  For(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  stripCustom,  it.next());  break;  }  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  For(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  stripCustom,  it.next());  break;  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	For(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  stripCustom,  it.next());  break;  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    i,    it.next());    break;    }    	non-compiled	[CE]  ')'  expected	76	None	replace
39	[BUG]  [BUGGY]  Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  stripCustom,  it.next());  break;  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  stripCustom,  it.next());  break;  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  stripCustom,  it.next());  break;  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    i,    it.next());    break;    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
40	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions,  foundDescriptions.length);  [CE]  cannot  find  symbol  length  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions,  foundDescriptions.length);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition  pos  =  new  ParsePosition(foundDescriptions,  foundDescriptions.length);	  ParsePosition    pos    =    new    ParsePosition(foundDescriptions,    stripCustom.length);    	non-compiled	[CE]  cannot  find  symbol  length	38	None	replace
41	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions,  pattern.length);  [CE]  cannot  find  symbol  length  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions,  pattern.length);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition  pos  =  new  ParsePosition(foundDescriptions,  pattern.length);	  ParsePosition    pos    =    new    ParsePosition(foundDescriptions,    stripCustom.length);    	non-compiled	[CE]  cannot  find  symbol  length	38	None	replace
42	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions,  foundFormats.length);  [CE]  cannot  find  symbol  length  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions,  foundFormats.length);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition  pos  =  new  ParsePosition(foundDescriptions,  foundFormats.length);	  ParsePosition    pos    =    new    ParsePosition(foundDescriptions,    stripCustom.length);    	non-compiled	[CE]  cannot  find  symbol  length	38	None	replace
43	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions,  stripCustom.length  +  1);  [CE]  cannot  find  symbol  length  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions,  stripCustom.length  +  1);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition  pos  =  new  ParsePosition(foundDescriptions,  stripCustom.length  +  1);	  ParsePosition    pos    =    new    ParsePosition(foundDescriptions,    stripCustom.length);    	non-compiled	[CE]  cannot  find  symbol  length	38	None	replace
44	[BUG]  [BUGGY]  pos  =  new  ParsePosition(3);  [CE]  cannot  find  symbol  pos  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  pos  =  new  ParsePosition(3);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	pos  =  new  ParsePosition(3);	  ParsePosition    pos    =    new    ParsePosition(1);    pos    =    new    ParsePosition(3);    	non-compiled	[CE]  cannot  find  symbol  pos	12	None	replace
45	[BUG]  [BUGGY]  Formats.for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  Formats.for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	Formats.for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendString(pattern,    it.next());    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
46	[BUG]  [BUGGY]  For(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  For(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	For(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendString(pattern,    it.next());    }    	non-compiled	[CE]  ')'  expected	19	None	replace
47	[BUG]  [BUGGY]  for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [CE]  incompatible  types  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendString(pattern,    it.next());    }    	non-compiled	[CE]  incompatible  types	19	None	replace
48	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundFormats,  stripCustom,  foundDescriptions);  [CE]  constructor  ParsePosition  in  class  ParsePosition  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundFormats,  stripCustom,  foundDescriptions);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition  pos  =  new  ParsePosition(foundFormats,  stripCustom,  foundDescriptions);	  ParsePosition    pos    =    new    ParsePosition(foundFormats,    foundDescriptions);    	non-compiled	[CE]  constructor  ParsePosition  in  class  ParsePosition  cannot  be  applied  to  given  types;	5	None	replace
49	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundFormats,  foundDescriptions,  stripCustom);  [CE]  constructor  ParsePosition  in  class  ParsePosition  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundFormats,  foundDescriptions,  stripCustom);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition  pos  =  new  ParsePosition(foundFormats,  foundDescriptions,  stripCustom);	  ParsePosition    pos    =    new    ParsePosition(foundFormats,    foundDescriptions);    	non-compiled	[CE]  constructor  ParsePosition  in  class  ParsePosition  cannot  be  applied  to  given  types;	5	None	replace
50	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundFormats,  origFormats,  foundDescriptions);  [CE]  cannot  find  symbol  origFormats  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundFormats,  origFormats,  foundDescriptions);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition  pos  =  new  ParsePosition(foundFormats,  origFormats,  foundDescriptions);	  ParsePosition    pos    =    new    ParsePosition(foundFormats,    foundDescriptions);    	non-compiled	[CE]  cannot  find  symbol  origFormats	5	None	replace
51	[BUG]  [BUGGY]  Formats.for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  Formats.for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	Formats.for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    applyPattern(it.next());    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
52	[BUG]  [BUGGY]  For(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  For(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	For(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    applyPattern(it.next());    }    	non-compiled	[CE]  ')'  expected	14	None	replace
53	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [CE]  incompatible  types  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  applyPattern(it.next());  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    applyPattern(it.next());    }    	non-compiled	[CE]  incompatible  types	14	None	replace
54	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions,  pattern);  [CE]  constructor  ParsePosition  in  class  ParsePosition  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions,  pattern);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition  pos  =  new  ParsePosition(foundDescriptions,  pattern);	  ParsePosition    pos    =    new    ParsePosition(pattern,    foundDescriptions);    	non-compiled	[CE]  constructor  ParsePosition  in  class  ParsePosition  cannot  be  applied  to  given  types;	81	None	replace
55	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundFormats,  pattern);  [CE]  constructor  ParsePosition  in  class  ParsePosition  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundFormats,  pattern);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition  pos  =  new  ParsePosition(foundFormats,  pattern);	  ParsePosition    pos    =    new    ParsePosition(pattern,    foundDescriptions);    	non-compiled	[CE]  constructor  ParsePosition  in  class  ParsePosition  cannot  be  applied  to  given  types;	81	None	replace
56	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(pattern,  foundDescriptions,  stripCustom);  [CE]  constructor  ParsePosition  in  class  ParsePosition  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(pattern,  foundDescriptions,  stripCustom);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition  pos  =  new  ParsePosition(pattern,  foundDescriptions,  stripCustom);	  ParsePosition    pos    =    new    ParsePosition(pattern,    foundDescriptions);    	non-compiled	[CE]  constructor  ParsePosition  in  class  ParsePosition  cannot  be  applied  to  given  types;	81	None	replace
57	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(findFormats,  pattern,  foundDescriptions);  [CE]  cannot  find  symbol  findFormats  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(findFormats,  pattern,  foundDescriptions);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition  pos  =  new  ParsePosition(findFormats,  pattern,  foundDescriptions);	  ParsePosition    pos    =    new    ParsePosition(pattern,    foundDescriptions);    	non-compiled	[CE]  cannot  find  symbol  findFormats	81	None	replace
58	[BUG]  [BUGGY]  pos  =  new  ParsePosition(2);  [CE]  cannot  find  symbol  pos  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  pos  =  new  ParsePosition(2);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	pos  =  new  ParsePosition(2);	  ParsePosition    pos    =    new    ParsePosition(1);    pos    =    new    ParsePosition(2);    	non-compiled	[CE]  cannot  find  symbol  pos	9	None	replace
59	[BUG]  [BUGGY]  Formats.for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  break;  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  Formats.for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  break;  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	Formats.for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  break;  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendString(pattern,    it.next());    break;    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
60	[BUG]  [BUGGY]  For(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  break;  }  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  For(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  break;  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	For(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  break;  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendString(pattern,    it.next());    break;    }    	non-compiled	[CE]  ')'  expected	22	None	replace
61	[BUG]  [BUGGY]  for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  break;  }  [CE]  incompatible  types  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  break;  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  break;  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendString(pattern,    it.next());    break;    }    	non-compiled	[CE]  incompatible  types	22	None	replace
62	[BUG]  [BUGGY]  if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  0,  foundDescriptions.size());  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  0,  foundDescriptions.size());  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  0,  foundDescriptions.size());  }	  if(foundDescriptions!=    null)    {    for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    0,    foundDescriptions.size());    }    	non-compiled	[CE]  ';'  expected	89	None	replace
63	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  0,  foundDescriptions.size());  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  0,  foundDescriptions.size());  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  0,  foundDescriptions.size());  }	  if(foundDescriptions!=    null)    {    for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    0,    foundDescriptions.size());    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	89	None	replace
64	[BUG]  [BUGGY]  if(foundFormats!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  0,  foundDescriptions.size());  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  if(foundFormats!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  0,  foundDescriptions.size());  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	if(foundFormats!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  0,  foundDescriptions.size());  }	  if(foundDescriptions!=    null)    {    for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    0,    foundDescriptions.size());    }    	non-compiled	[CE]  ';'  expected	89	None	replace
65	[BUG]  [BUGGY]  Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	  if(doesFormats    ==    null)    {    for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
66	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  stripCustom,  it.next());  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  stripCustom,  it.next());  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  stripCustom,  it.next());  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    i,    it.next());    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	24	None	replace
67	[BUG]  [BUGGY]  Formats.for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  fmtCount,  it.next());  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  Formats.for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  fmtCount,  it.next());  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	Formats.for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  fmtCount,  it.next());  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    i,    it.next());    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
68	[BUG]  [BUGGY]  For(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  stripCustom,  it.next());  }  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  For(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  stripCustom,  it.next());  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	For(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  stripCustom,  it.next());  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    i,    it.next());    }    	non-compiled	[CE]  ')'  expected	24	None	replace
69	[BUG]  [BUGGY]  Formats.for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  i.next());  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  Formats.for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  i.next());  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	Formats.for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  i.next());  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    i,    it.next());    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
70	[BUG]  [BUGGY]  if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next(),  stripCustom,  true);  break;  }  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next(),  stripCustom,  true);  break;  }  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next(),  stripCustom,  true);  break;  }  }	  if(foundDescriptions!=    null)    {    for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    it.next(),    stripCustom,    true);    break;    }    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	32	None	replace
71	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  stripCustom,  it.next());  break;  }  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  if(foundDescriptions!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  stripCustom,  it.next());  break;  }  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	if(foundDescriptions!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  stripCustom,  it.next());  break;  }  }	  if(foundDescriptions!=    null)    {    for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    i,    it.next());    break;    }    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	34	None	replace
72	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  fmtCount,  it.next());  break;  }  [CE]  cannot  find  symbol  fmtCount  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  fmtCount,  it.next());  break;  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  fmtCount,  it.next());  break;  }	  if(foundDescriptions!=    null)    {    for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    i,    it.next());    break;    }    }    	non-compiled	[CE]  cannot  find  symbol  fmtCount	34	None	replace
73	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  stripCustom,  it.next());  break;  }  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  if(foundDescriptions!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  stripCustom,  it.next());  break;  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	if(foundDescriptions!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  stripCustom,  it.next());  break;  }	  if(foundDescriptions!=    null)    {    for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    i,    it.next());    break;    }    }    	non-compiled	[CE]  ';'  expected	34	None	replace
74	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(stripCustom,  foundDescriptions);  [CE]  constructor  ParsePosition  in  class  ParsePosition  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(stripCustom,  foundDescriptions);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition  pos  =  new  ParsePosition(stripCustom,  foundDescriptions);	  ParsePosition    pos    =    new    ParsePosition(foundDescriptions,    stripCustom);    	non-compiled	[CE]  constructor  ParsePosition  in  class  ParsePosition  cannot  be  applied  to  given  types;	4	None	replace
75	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions,  stripCustom,  pattern);  [CE]  constructor  ParsePosition  in  class  ParsePosition  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions,  stripCustom,  pattern);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition  pos  =  new  ParsePosition(foundDescriptions,  stripCustom,  pattern);	  ParsePosition    pos    =    new    ParsePosition(foundDescriptions,    stripCustom);    	non-compiled	[CE]  constructor  ParsePosition  in  class  ParsePosition  cannot  be  applied  to  given  types;	4	None	replace
76	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions,  stripCustom,  foundFormats);  [CE]  constructor  ParsePosition  in  class  ParsePosition  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions,  stripCustom,  foundFormats);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition  pos  =  new  ParsePosition(foundDescriptions,  stripCustom,  foundFormats);	  ParsePosition    pos    =    new    ParsePosition(foundDescriptions,    stripCustom);    	non-compiled	[CE]  constructor  ParsePosition  in  class  ParsePosition  cannot  be  applied  to  given  types;	4	None	replace
77	[BUG]  [BUGGY]  Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  stripCustom,  it.next());  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  stripCustom,  it.next());  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  stripCustom,  it.next());  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
78	[BUG]  [BUGGY]  Formats.for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  stripCustom,  it.next());  }  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  Formats.for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  stripCustom,  it.next());  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	Formats.for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  stripCustom,  it.next());  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
79	[BUG]  [BUGGY]  if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  0,  it.next());  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  0,  it.next());  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  0,  it.next());  }	  if(foundDescriptions!=    null)    {    for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    0,    it.next());    }    	non-compiled	[CE]  ';'  expected	85	None	replace
80	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  0,  it.next());  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  0,  it.next());  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  0,  it.next());  }	  if(foundDescriptions!=    null)    {    for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    0,    it.next());    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	85	None	replace
81	[BUG]  [BUGGY]  if(foundFormats!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  0,  it.next());  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  if(foundFormats!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  0,  it.next());  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	if(foundFormats!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  0,  it.next());  }	  if(foundDescriptions!=    null)    {    for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    0,    it.next());    }    	non-compiled	[CE]  ';'  expected	85	None	replace
82	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos.next(),  stripCustom,  true);  }  [CE]  cannot  find  symbol  pos  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos.next(),  stripCustom,  true);  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos.next(),  stripCustom,  true);  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    it.next(),    stripCustom,    true);    }    	non-compiled	[CE]  cannot  find  symbol  pos	28	None	replace
83	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next(),  stripCustom,  true);  }  [CE]  incompatible  types  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next(),  stripCustom,  true);  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next(),  stripCustom,  true);  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    it.next(),    stripCustom,    true);    }    	non-compiled	[CE]  incompatible  types	28	None	replace
84	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next(),  stripCustom,  false);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next(),  stripCustom,  false);  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next(),  stripCustom,  false);  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    it.next(),    stripCustom,    true);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	28	None	replace
85	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos.next(),  stripCustom,  true);  }  [CE]  incompatible  types  [FE]                            junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos.next(),  stripCustom,  true);  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos.next(),  stripCustom,  true);  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    it.next(),    stripCustom,    true);    }    	non-compiled	[CE]  incompatible  types	28	None	replace
86	[BUG]  [BUGGY]  Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  applyPattern(it.next());  }	  Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    applyPattern(it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
87	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  if(foundDescriptions!=  null)  {  Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	if(foundDescriptions!=  null)  {  Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }	  Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    applyPattern(it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
88	[BUG]  [BUGGY]  Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }	  Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    applyPattern(it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
89	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos.next(),  stripCustom,  true);  break;  }  [CE]  cannot  find  symbol  pos  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos.next(),  stripCustom,  true);  break;  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos.next(),  stripCustom,  true);  break;  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    it.next(),    stripCustom,    true);    break;    }    	non-compiled	[CE]  cannot  find  symbol  pos	31	None	replace
90	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next(),  stripCustom,  true);  break;  }  [CE]  incompatible  types  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next(),  stripCustom,  true);  break;  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next(),  stripCustom,  true);  break;  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    it.next(),    stripCustom,    true);    break;    }    	non-compiled	[CE]  incompatible  types	31	None	replace
91	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next(),  stripCustom,  false);  break;  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next(),  stripCustom,  false);  break;  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next(),  stripCustom,  false);  break;  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    it.next(),    stripCustom,    true);    break;    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	31	None	replace
92	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(stripCustom,  foundFormats);  [CE]  constructor  ParsePosition  in  class  ParsePosition  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(stripCustom,  foundFormats);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition  pos  =  new  ParsePosition(stripCustom,  foundFormats);	  ParsePosition    pos    =    new    ParsePosition(foundFormats,    stripCustom);    	non-compiled	[CE]  constructor  ParsePosition  in  class  ParsePosition  cannot  be  applied  to  given  types;	7	None	replace
93	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(0);  Iterator  <  Object>  it  =  foundDescriptions.iterator();  [CE]  incompatible  types  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(0);  Iterator  <  Object>  it  =  foundDescriptions.iterator();  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition  pos  =  new  ParsePosition(0);  Iterator  <  Object>  it  =  foundDescriptions.iterator();	  ParsePosition    pos    =    new    ParsePosition(1);    Iterator    <    Object>    it    =    foundDescriptions.iterator();    	non-compiled	[CE]  incompatible  types	65	None	replace
94	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(1L);  Iterator  <  Object>  it  =  foundDescriptions.iterator();  [CE]  constructor  ParsePosition  in  class  ParsePosition  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(1L);  Iterator  <  Object>  it  =  foundDescriptions.iterator();  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition  pos  =  new  ParsePosition(1L);  Iterator  <  Object>  it  =  foundDescriptions.iterator();	  ParsePosition    pos    =    new    ParsePosition(1);    Iterator    <    Object>    it    =    foundDescriptions.iterator();    	non-compiled	[CE]  constructor  ParsePosition  in  class  ParsePosition  cannot  be  applied  to  given  types;	65	None	replace
95	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next(),  stripCustom);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next(),  stripCustom);  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next(),  stripCustom);  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    it.next());    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	42	None	replace
96	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next());  }  [CE]  incompatible  types  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next());  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next());  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    it.next());    }    	non-compiled	[CE]  incompatible  types	42	None	replace
97	[BUG]  [BUGGY]  for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next());  }  [CE]  incompatible  types  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next());  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next());  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    it.next());    }    	non-compiled	[CE]  incompatible  types	42	None	replace
98	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(4);  Iterator  <  Object>  it  =  foundDescriptions.iterator();  [CE]  incompatible  types  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(4);  Iterator  <  Object>  it  =  foundDescriptions.iterator();  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition  pos  =  new  ParsePosition(4);  Iterator  <  Object>  it  =  foundDescriptions.iterator();	  ParsePosition    pos    =    new    ParsePosition(2);    Iterator    <    Object>    it    =    foundDescriptions.iterator();    	non-compiled	[CE]  incompatible  types	70	None	replace
99	[BUG]  [BUGGY]  if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  stripCustom,  it.next());  break;  }  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  stripCustom,  it.next());  break;  }  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  stripCustom,  it.next());  break;  }  }	  if(foundDescriptions    ==    null)    {    for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    i,    it.next());    break;    }    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	35	None	replace
100	[BUG]  [BUGGY]  if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next(),  stripCustom,  false);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next(),  stripCustom,  false);  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next(),  stripCustom,  false);  }	  if(foundDescriptions!=    null)    {    for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    it.next(),    stripCustom,    false);    }    	non-compiled	[CE]  ';'  expected	27	None	replace
101	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions.size());  pos  =  new  ParsePosition(foundDescriptions.size());  [CE]  variable  pos  is  already  defined  in  method  applyPattern(String)  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions.size());  pos  =  new  ParsePosition(foundDescriptions.size());  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition    pos    =    new    ParsePosition(foundDescriptions.size());    pos  =  new  ParsePosition(foundDescriptions.size());	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  applyPattern(String)	39	None	add
102	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions.size());  ParsePosition  pos  =  new  ParsePosition(foundDescriptions.size());  [CE]  variable  pos  is  already  defined  in  method  applyPattern(String)  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions.size());  ParsePosition  pos  =  new  ParsePosition(foundDescriptions.size());  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition    pos    =    new    ParsePosition(foundDescriptions.size());    ParsePosition  pos  =  new  ParsePosition(foundDescriptions.size());	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  applyPattern(String)	39	None	add
103	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions.size());  Pattern  pos  =  new  Pattern(foundDescriptions.size());  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions.size());  Pattern  pos  =  new  Pattern(foundDescriptions.size());  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition    pos    =    new    ParsePosition(foundDescriptions.size());    Pattern  pos  =  new  Pattern(foundDescriptions.size());	  	non-compiled	[CE]  cannot  find  symbol	39	None	add
104	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions.size());  pos.setIndex(foundDescriptions.size());  [CE]  variable  pos  is  already  defined  in  method  applyPattern(String)  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions.size());  pos.setIndex(foundDescriptions.size());  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition    pos    =    new    ParsePosition(foundDescriptions.size());    pos.setIndex(foundDescriptions.size());	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  applyPattern(String)	39	None	add
105	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions.size());  Iterator  <  Object>  it  =  foundDescriptions.iterator();  [CE]  incompatible  types  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions.size());  Iterator  <  Object>  it  =  foundDescriptions.iterator();  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition    pos    =    new    ParsePosition(foundDescriptions.size());    Iterator  <  Object>  it  =  foundDescriptions.iterator();	  	non-compiled	[CE]  incompatible  types	39	None	add
106	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next(),  stripCustom);  break;  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next(),  stripCustom);  break;  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next(),  stripCustom);  break;  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    it.next());    break;    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	48	None	replace
107	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next());  break;  }  [CE]  incompatible  types  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next());  break;  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next());  break;  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    it.next());    break;    }    	non-compiled	[CE]  incompatible  types	48	None	replace
108	[BUG]  [BUGGY]  for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next());  break;  }  [CE]  incompatible  types  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next());  break;  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next());  break;  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    it.next());    break;    }    	non-compiled	[CE]  incompatible  types	48	None	replace
109	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(5);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	add	ParsePosition  pos  =  new  ParsePosition(5);	  ParsePosition    pos    =    new    ParsePosition(2);    ParsePosition    pos    =    new    ParsePosition(4);    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	83	5	replace
110	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(5);  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(5);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition  pos  =  new  ParsePosition(5);	  ParsePosition    pos    =    new    ParsePosition(2);    ParsePosition    pos    =    new    ParsePosition(4);    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	83	5	replace
111	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions,  description);  [CE]  cannot  find  symbol  description  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions,  description);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition  pos  =  new  ParsePosition(foundDescriptions,  description);	  ParsePosition    pos    =    new    ParsePosition(foundFormats,    description);    	non-compiled	[CE]  cannot  find  symbol  description	6	None	replace
112	[BUG]  [BUGGY]  pos  =  new  ParsePosition(4);  [CE]  cannot  find  symbol  pos  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  pos  =  new  ParsePosition(4);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	pos  =  new  ParsePosition(4);	  ParsePosition    pos    =    new    ParsePosition(2);    pos    =    new    ParsePosition(4);    	non-compiled	[CE]  cannot  find  symbol  pos	55	None	replace
113	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  stripCustom,  0);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  stripCustom,  0);  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  stripCustom,  0);  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    0);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	17	None	replace
114	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  0);  }  [CE]  incompatible  types  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  0);  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  0);  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    0);    }    	non-compiled	[CE]  incompatible  types	17	None	replace
115	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  stripCustom);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  stripCustom);  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  stripCustom);  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    0);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	17	None	replace
116	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  0,  foundDescriptions.length);  }  [CE]  cannot  find  symbol  length  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  0,  foundDescriptions.length);  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  0,  foundDescriptions.length);  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    0);    }    	non-compiled	[CE]  cannot  find  symbol  length	17	None	replace
117	[BUG]  [BUGGY]  if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next(),  stripCustom,  false);  break;  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next(),  stripCustom,  false);  break;  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next(),  stripCustom,  false);  break;  }	  if(foundDescriptions!=    null)    {    for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    it.next(),    stripCustom,    false);    break;    }    	non-compiled	[CE]  ';'  expected	84	None	replace
118	[BUG]  [BUGGY]  if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next());  break;  }  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next());  break;  }  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next());  break;  }  }	  if(foundDescriptions!=    null)    {    for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    it.next());    break;    }    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	49	None	replace
119	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>();  [CE]  variable  foundFormats  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>();  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>();	  if(foundFormats!=    null)    {    for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    it.next());    }    	non-compiled	[CE]  variable  foundFormats  is  already  defined  in  method  applyPattern(String)	73	None	replace
120	[BUG]  [BUGGY]  if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  fmtCount,  it.next());  break;  }  }  [CE]  cannot  find  symbol  fmtCount  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  fmtCount,  it.next());  break;  }  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  fmtCount,  it.next());  break;  }  }	  if(foundDescriptions    ==    null)    {    for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    i,    it.next());    break;    }    }    	non-compiled	[CE]  cannot  find  symbol  fmtCount	35	None	replace
121	[BUG]  [BUGGY]  if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  0,  it.next());  break;  }  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  0,  it.next());  break;  }  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  0,  it.next());  break;  }  }	  if(foundDescriptions    ==    null)    {    for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    i,    it.next());    break;    }    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	35	None	replace
122	[BUG]  [BUGGY]  if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  fmtCount,  it.next());  break;  }  [CE]  ';'  expected  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  fmtCount,  it.next());  break;  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  fmtCount,  it.next());  break;  }	  if(foundDescriptions    ==    null)    {    for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    i,    it.next());    break;    }    }    	non-compiled	[CE]  ';'  expected	35	None	replace
123	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundFormats,  strips);  [CE]  cannot  find  symbol  strips  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundFormats,  strips);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition  pos  =  new  ParsePosition(foundFormats,  strips);	  ParsePosition    pos    =    new    ParsePosition(foundFormats,    description);    	non-compiled	[CE]  cannot  find  symbol  strips	6	None	replace
124	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern.add(it.next());  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  if(foundDescriptions!=  null)  {  Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern.add(it.next());  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	if(foundDescriptions!=  null)  {  Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern.add(it.next());  }	  Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    toPattern.add(it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
125	[BUG]  [BUGGY]  ArrayList  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern.add(it.next());  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ArrayList  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern.add(it.next());  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ArrayList  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern.add(it.next());  }	  Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    toPattern.add(it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
126	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  0,  it.next());  break;  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  if(foundDescriptions!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  0,  it.next());  break;  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	if(foundDescriptions!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  0,  it.next());  break;  }	  if(foundFormats!=    null)    {    for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    i,    it.next());    break;    }    	non-compiled	[CE]  ';'  expected	75	None	replace
127	[BUG]  [BUGGY]  ArrayList  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ArrayList  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ArrayList  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }	  Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    applyPattern(it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
128	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  charIndex,  it.next());  }  [CE]  cannot  find  symbol  charIndex  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  charIndex,  it.next());  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  charIndex,  it.next());  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    i,    it.next());    }    	non-compiled	[CE]  cannot  find  symbol  charIndex	24	None	replace
129	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  i.next());  }  [CE]  incompatible  types  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  i.next());  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  i.next());  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    i,    it.next());    }    	non-compiled	[CE]  incompatible  types	24	None	replace
130	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  0,  foundDescriptions.length);  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  if(foundDescriptions!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  0,  foundDescriptions.length);  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	if(foundDescriptions!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  0,  foundDescriptions.length);  }	  if(foundFormats!=    null)    {    for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    0);    }    	non-compiled	[CE]  ';'  expected	67	None	replace
131	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>();  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  i,  it.next());  break;  }  [CE]  variable  foundFormats  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>();  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  i,  it.next());  break;  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>();  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  i,  it.next());  break;  }	  if(foundFormats    ==    null)    {    for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    i,    it.next());    break;    }    	non-compiled	[CE]  variable  foundFormats  is  already  defined  in  method  applyPattern(String)	74	None	replace
132	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  break;  }  }  [CE]  incompatible  types  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  if(foundDescriptions!=  null)  {  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  break;  }  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	if(foundDescriptions!=  null)  {  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  break;  }  }	  if(foundDescriptions!=    null)    {    for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendString(pattern,    it.next());    break;    }    }    	non-compiled	[CE]  incompatible  types	23	None	replace
133	[BUG]  [BUGGY]  if(foundFormats!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next(),  stripCustom,  false);  break;  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  if(foundFormats!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next(),  stripCustom,  false);  break;  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	if(foundFormats!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next(),  stripCustom,  false);  break;  }	  if(foundDescriptions!=    null)    {    for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    it.next(),    stripCustom,    false);    break;    }    	non-compiled	[CE]  ';'  expected	84	None	replace
134	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(new  Format[foundFormats.size()  ]);  [CE]  constructor  ParsePosition  in  class  ParsePosition  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(new  Format[foundFormats.size()  ]);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition  pos  =  new  ParsePosition(new  Format[foundFormats.size()  ]);	  ParsePosition    pos    =    new    ParsePosition(foundFormats);    	non-compiled	[CE]  constructor  ParsePosition  in  class  ParsePosition  cannot  be  applied  to  given  types;	63	None	replace
135	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions.length,  1);  [CE]  cannot  find  symbol  length  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions.length,  1);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition  pos  =  new  ParsePosition(foundDescriptions.length,  1);	  ParsePosition    pos    =    new    ParsePosition(foundDescriptions.length,    stripCustom);    	non-compiled	[CE]  cannot  find  symbol  length	37	None	replace
136	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  break;  }  [CE]  incompatible  types  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  break;  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  break;  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendString(pattern,    it.next());    break;    }    	non-compiled	[CE]  incompatible  types	22	None	replace
137	[BUG]  [BUGGY]  Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  break;  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  break;  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  break;  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendString(pattern,    it.next());    break;    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
138	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  toPattern.add(it.next());  }  [CE]  incompatible  types  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  toPattern.add(it.next());  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  toPattern.add(it.next());  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    toPattern.add(it.next());    }    	non-compiled	[CE]  incompatible  types	45	None	replace
139	[BUG]  [BUGGY]  For(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern.add(it.next());  }  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  For(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern.add(it.next());  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	For(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern.add(it.next());  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    toPattern.add(it.next());    }    	non-compiled	[CE]  ')'  expected	45	None	replace
140	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(toPattern,  foundFormats,  stripCustom);  [CE]  constructor  ParsePosition  in  class  ParsePosition  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(toPattern,  foundFormats,  stripCustom);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition  pos  =  new  ParsePosition(toPattern,  foundFormats,  stripCustom);	  ParsePosition    pos    =    new    ParsePosition(foundFormats,    stripCustom);    	non-compiled	[CE]  constructor  ParsePosition  in  class  ParsePosition  cannot  be  applied  to  given  types;	7	None	replace
141	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  fmtCount,  it.next());  break;  }  }  [CE]  cannot  find  symbol  fmtCount  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  if(foundDescriptions!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  fmtCount,  it.next());  break;  }  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	if(foundDescriptions!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  fmtCount,  it.next());  break;  }  }	  if(foundDescriptions!=    null)    {    for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    i,    it.next());    break;    }    }    	non-compiled	[CE]  cannot  find  symbol  fmtCount	34	None	replace
142	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  fmtCount,  it.next());  break;  }  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  if(foundDescriptions!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  fmtCount,  it.next());  break;  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	if(foundDescriptions!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  fmtCount,  it.next());  break;  }	  if(foundDescriptions!=    null)    {    for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    i,    it.next());    break;    }    }    	non-compiled	[CE]  ';'  expected	34	None	replace
143	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  stripCustom,  true);  break;  }  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  if(foundDescriptions!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  stripCustom,  true);  break;  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	if(foundDescriptions!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  stripCustom,  true);  break;  }	  if(foundDescriptions!=    null)    {    for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    i,    it.next());    break;    }    }    	non-compiled	[CE]  ';'  expected	34	None	replace
144	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [CE]  incompatible  types  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendString(pattern,    it.next());    }    	non-compiled	[CE]  incompatible  types	19	None	replace
145	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions.size  +  1);  [CE]  size  has  private  access  in  ArrayList  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions.size  +  1);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition  pos  =  new  ParsePosition(foundDescriptions.size  +  1);	  ParsePosition    pos    =    new    ParsePosition(foundDescriptions.length    +    1);    	non-compiled	[CE]  size  has  private  access  in  ArrayList	36	None	replace
146	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next(),  stripCustom,  true);  break;  }  }  [CE]  incompatible  types  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  if(foundDescriptions!=  null)  {  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next(),  stripCustom,  true);  break;  }  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	if(foundDescriptions!=  null)  {  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next(),  stripCustom,  true);  break;  }  }	  if(foundDescriptions!=    null)    {    for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    it.next(),    stripCustom,    true);    break;    }    }    	non-compiled	[CE]  incompatible  types	32	None	replace
147	[BUG]  [BUGGY]  if(foundFormats!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next(),  stripCustom,  true);  break;  }  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  if(foundFormats!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next(),  stripCustom,  true);  break;  }  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	if(foundFormats!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next(),  stripCustom,  true);  break;  }  }	  if(foundDescriptions!=    null)    {    for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    it.next(),    stripCustom,    true);    break;    }    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	32	None	replace
148	[BUG]  [BUGGY]  if(foundFormats  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  0,  foundDescriptions.size());  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  if(foundFormats  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  0,  foundDescriptions.size());  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	if(foundFormats  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  0,  foundDescriptions.size());  }	  if(foundDescriptions!=    null)    {    for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    0,    foundDescriptions.size());    }    	non-compiled	[CE]  ';'  expected	89	None	replace
149	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions,  stripCustom,  foundDescriptions.length);  [CE]  cannot  find  symbol  length  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions,  stripCustom,  foundDescriptions.length);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition  pos  =  new  ParsePosition(foundDescriptions,  stripCustom,  foundDescriptions.length);	  ParsePosition    pos    =    new    ParsePosition(foundDescriptions,    stripCustom.length);    	non-compiled	[CE]  cannot  find  symbol  length	38	None	replace
150	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions,  stripCustom,  foundFormats.length);  [CE]  cannot  find  symbol  length  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions,  stripCustom,  foundFormats.length);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition  pos  =  new  ParsePosition(foundDescriptions,  stripCustom,  foundFormats.length);	  ParsePosition    pos    =    new    ParsePosition(foundDescriptions,    stripCustom.length);    	non-compiled	[CE]  cannot  find  symbol  length	38	None	replace
151	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions.size());  Iterator  <  String>  it  =  foundDescriptions.iterator();  [CE]  variable  pos  is  already  defined  in  method  applyPattern(String)  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions.size());  Iterator  <  String>  it  =  foundDescriptions.iterator();  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition    pos    =    new    ParsePosition(foundDescriptions.size());    Iterator  <  String>  it  =  foundDescriptions.iterator();	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  applyPattern(String)	39	None	add
152	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions.size());  Integer  pos  =  new  Integer(foundDescriptions.size());  [CE]  variable  pos  is  already  defined  in  method  applyPattern(String)  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions.size());  Integer  pos  =  new  Integer(foundDescriptions.size());  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition    pos    =    new    ParsePosition(foundDescriptions.size());    Integer  pos  =  new  Integer(foundDescriptions.size());	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  applyPattern(String)	39	None	add
153	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  incompatible  types  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  incompatible  types	2	None	replace
154	[BUG]  [BUGGY]  for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [CE]  incompatible  types  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    applyPattern(it.next());    }    	non-compiled	[CE]  incompatible  types	14	None	replace
155	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  i,  it.next());  break;  }  [CE]  incompatible  types  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  i,  it.next());  break;  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  i,  it.next());  break;  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    i,    it.next());    break;    }    	non-compiled	[CE]  incompatible  types	76	None	replace
156	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  charIndex,  it.next());  break;  }  [CE]  cannot  find  symbol  charIndex  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  charIndex,  it.next());  break;  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  charIndex,  it.next());  break;  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    i,    it.next());    break;    }    	non-compiled	[CE]  cannot  find  symbol  charIndex	76	None	replace
157	[BUG]  [BUGGY]  if(foundFormats!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next());  break;  }  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  if(foundFormats!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next());  break;  }  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	if(foundFormats!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next());  break;  }  }	  if(foundDescriptions!=    null)    {    for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    it.next());    break;    }    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	49	None	replace
158	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next());  break;  }  }  [CE]  incompatible  types  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  if(foundDescriptions!=  null)  {  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next());  break;  }  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	if(foundDescriptions!=  null)  {  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next());  break;  }  }	  if(foundDescriptions!=    null)    {    for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    it.next());    break;    }    }    	non-compiled	[CE]  incompatible  types	49	None	replace
159	[BUG]  [BUGGY]  pos  =  new  ParsePosition(1);  pos  =  new  ParsePosition(2);  [CE]  cannot  find  symbol  pos  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  pos  =  new  ParsePosition(1);  pos  =  new  ParsePosition(2);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	pos  =  new  ParsePosition(1);  pos  =  new  ParsePosition(2);	  ParsePosition    pos    =    new    ParsePosition(1);    pos    =    new    ParsePosition(2);    	non-compiled	[CE]  cannot  find  symbol  pos	9	None	replace
160	[BUG]  [BUGGY]  if(foundFormats!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next(),  stripCustom,  false);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  if(foundFormats!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next(),  stripCustom,  false);  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	if(foundFormats!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next(),  stripCustom,  false);  }	  if(foundDescriptions!=    null)    {    for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    it.next(),    stripCustom,    false);    }    	non-compiled	[CE]  ';'  expected	27	None	replace
161	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(new  Format[foundDescriptions.size()  ]);  [CE]  constructor  ParsePosition  in  class  ParsePosition  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(new  Format[foundDescriptions.size()  ]);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition  pos  =  new  ParsePosition(new  Format[foundDescriptions.size()  ]);	  ParsePosition    pos    =    new    ParsePosition(foundFormats);    	non-compiled	[CE]  constructor  ParsePosition  in  class  ParsePosition  cannot  be  applied  to  given  types;	63	None	replace
162	[BUG]  [BUGGY]  if(stripCustom  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  if(stripCustom  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	if(stripCustom  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	  if(stripCustom!=    null)    {    for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  ';'  expected	86	None	replace
163	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos.next(),  stripCustom,  true);  break;  }  [CE]  incompatible  types  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos.next(),  stripCustom,  true);  break;  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos.next(),  stripCustom,  true);  break;  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    it.next(),    stripCustom,    true);    break;    }    	non-compiled	[CE]  incompatible  types	31	None	replace
164	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos.next(),  stripCustom,  false);  break;  }  [CE]  cannot  find  symbol  pos  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos.next(),  stripCustom,  false);  break;  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos.next(),  stripCustom,  false);  break;  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    it.next(),    stripCustom,    true);    break;    }    	non-compiled	[CE]  cannot  find  symbol  pos	31	None	replace
165	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions.size());  Pattern  p  =  new  Pattern(foundDescriptions.size());  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions.size());  Pattern  p  =  new  Pattern(foundDescriptions.size());  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition    pos    =    new    ParsePosition(foundDescriptions.size());    Pattern  p  =  new  Pattern(foundDescriptions.size());	  	non-compiled	[CE]  cannot  find  symbol	39	None	add
166	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos.getIndex(),  stripCustom,  true);  }  [CE]  cannot  find  symbol  pos  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos.getIndex(),  stripCustom,  true);  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos.getIndex(),  stripCustom,  true);  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    it.next(),    stripCustom,    true);    }    	non-compiled	[CE]  cannot  find  symbol  pos	28	None	replace
167	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions.length,  pattern);  [CE]  cannot  find  symbol  length  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions.length,  pattern);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition  pos  =  new  ParsePosition(foundDescriptions.length,  pattern);	  ParsePosition    pos    =    new    ParsePosition(foundDescriptions.length,    stripCustom);    	non-compiled	[CE]  cannot  find  symbol  length	37	None	replace
168	[BUG]  [BUGGY]  Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  0,  it.next());  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  0,  it.next());  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  0,  it.next());  }	  if(foundDescriptions!=    null)    {    for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    0,    it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
169	[BUG]  [BUGGY]  if(doesFormats!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  if(doesFormats!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	if(doesFormats!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	  if(doesFormats    ==    null)    {    for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  ';'  expected	87	None	replace
170	[BUG]  [BUGGY]  if(origFormats  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  if(origFormats  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	if(origFormats  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	  if(doesFormats    ==    null)    {    for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  ';'  expected	87	None	replace
171	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(stripCustom,  discoveredDescriptions);  [CE]  cannot  find  symbol  discoveredDescriptions  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(stripCustom,  discoveredDescriptions);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition  pos  =  new  ParsePosition(stripCustom,  discoveredDescriptions);	  ParsePosition    pos    =    new    ParsePosition(foundDescriptions,    stripCustom);    	non-compiled	[CE]  cannot  find  symbol  discoveredDescriptions	4	None	replace
172	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(0,  1);  [CE]  constructor  ParsePosition  in  class  ParsePosition  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(0,  1);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition  pos  =  new  ParsePosition(0,  1);	  ParsePosition    pos    =    new    ParsePosition(2);    ParsePosition    pos    =    new    ParsePosition(1);    	non-compiled	[CE]  constructor  ParsePosition  in  class  ParsePosition  cannot  be  applied  to  given  types;	71	None	replace
173	[BUG]  [BUGGY]  if(stripCustom  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next());  }  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  if(stripCustom  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next());  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	if(stripCustom  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next());  }	  if(stripCustom!=    null)    {    for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    it.next());    }    	non-compiled	[CE]  ';'  expected	78	None	replace
174	[BUG]  [BUGGY]  if(foundDescriptions!=  null  &&  foundFormats.size()  >  0)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next(),  stripCustom,  true);  break;  }  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  if(foundDescriptions!=  null  &&  foundFormats.size()  >  0)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next(),  stripCustom,  true);  break;  }  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	if(foundDescriptions!=  null  &&  foundFormats.size()  >  0)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next(),  stripCustom,  true);  break;  }  }	  if(foundDescriptions!=    null)    {    for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    it.next(),    stripCustom,    true);    break;    }    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	32	None	replace
175	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next(),  stripCustom,  false);  break;  }  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  if(foundDescriptions!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next(),  stripCustom,  false);  break;  }  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	if(foundDescriptions!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next(),  stripCustom,  false);  break;  }  }	  if(foundDescriptions!=    null)    {    for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    it.next(),    stripCustom,    true);    break;    }    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	32	None	replace
176	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  END_FE,  it.next());  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  END_FE,  it.next());  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  END_FE,  it.next());  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    i,    it.next());    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	24	None	replace
177	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  fmtCount,  it.next());  }  [CE]  cannot  find  symbol  fmtCount  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  fmtCount,  it.next());  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  fmtCount,  it.next());  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    i,    it.next());    }    	non-compiled	[CE]  cannot  find  symbol  fmtCount	24	None	replace
178	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundFormats,  pattern,  foundDescriptions);  [CE]  constructor  ParsePosition  in  class  ParsePosition  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundFormats,  pattern,  foundDescriptions);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition  pos  =  new  ParsePosition(foundFormats,  pattern,  foundDescriptions);	  ParsePosition    pos    =    new    ParsePosition(pattern,    foundDescriptions);    	non-compiled	[CE]  constructor  ParsePosition  in  class  ParsePosition  cannot  be  applied  to  given  types;	81	None	replace
179	[BUG]  [BUGGY]  if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  END_FE,  it.next());  break;  }  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  END_FE,  it.next());  break;  }  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  END_FE,  it.next());  break;  }  }	  if(foundDescriptions    ==    null)    {    for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    i,    it.next());    break;    }    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	35	None	replace
180	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.entrySet().iterator();  it.hasNext();)  {  toPattern.add(it.next());  }  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.entrySet().iterator();  it.hasNext();)  {  toPattern.add(it.next());  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	for(Iterator  <  String>  it  =  foundDescriptions.entrySet().iterator();  it.hasNext();)  {  toPattern.add(it.next());  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    toPattern.add(it.next());    }    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
181	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(pattern,  foundFormats,  stripCustom);  [CE]  constructor  ParsePosition  in  class  ParsePosition  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(pattern,  foundFormats,  stripCustom);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition  pos  =  new  ParsePosition(pattern,  foundFormats,  stripCustom);	  ParsePosition    pos    =    new    ParsePosition(foundFormats,    stripCustom);    	non-compiled	[CE]  constructor  ParsePosition  in  class  ParsePosition  cannot  be  applied  to  given  types;	7	None	replace
182	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext()  &&  it.hasNext();)  {  appendQuotedString(pattern,  it.next());  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext()  &&  it.hasNext();)  {  appendQuotedString(pattern,  it.next());  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext()  &&  it.hasNext();)  {  appendQuotedString(pattern,  it.next());  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    it.next());    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	42	None	replace
183	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.entrySet().iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.entrySet().iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	for(Iterator  <  String>  it  =  foundDescriptions.entrySet().iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendString(pattern,    it.next());    }    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
184	[BUG]  [BUGGY]  if(foundDescriptions.size()  >  0)  {  Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  if(foundDescriptions.size()  >  0)  {  Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	if(foundDescriptions.size()  >  0)  {  Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }	  Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendString(pattern,    it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
185	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  END_FE,  it.next());  break;  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  END_FE,  it.next());  break;  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  END_FE,  it.next());  break;  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    i,    it.next());    break;    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	76	None	replace
186	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  d,  it.next());  break;  }  [CE]  cannot  find  symbol  d  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  d,  it.next());  break;  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  d,  it.next());  break;  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    i,    it.next());    break;    }    	non-compiled	[CE]  cannot  find  symbol  d	76	None	replace
187	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(toPattern,  pattern,  foundDescriptions);  [CE]  constructor  ParsePosition  in  class  ParsePosition  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(toPattern,  pattern,  foundDescriptions);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition  pos  =  new  ParsePosition(toPattern,  pattern,  foundDescriptions);	  ParsePosition    pos    =    new    ParsePosition(toPattern,    foundDescriptions);    	non-compiled	[CE]  constructor  ParsePosition  in  class  ParsePosition  cannot  be  applied  to  given  types;	64	None	replace
188	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  END_FE,  it.next());  break;  }  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  if(foundDescriptions!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  END_FE,  it.next());  break;  }  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	if(foundDescriptions!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  END_FE,  it.next());  break;  }  }	  if(foundDescriptions!=    null)    {    for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    i,    it.next());    break;    }    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	34	None	replace
189	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  0,  it.next());  break;  }  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  if(foundDescriptions!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  0,  it.next());  break;  }  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	if(foundDescriptions!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  0,  it.next());  break;  }  }	  if(foundDescriptions!=    null)    {    for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    i,    it.next());    break;    }    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	34	None	replace
190	[BUG]  [BUGGY]  if(foundDescriptions!=  null  &&  foundFormats.size()  >  0)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next());  break;  }  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  if(foundDescriptions!=  null  &&  foundFormats.size()  >  0)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next());  break;  }  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	if(foundDescriptions!=  null  &&  foundFormats.size()  >  0)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next());  break;  }  }	  if(foundDescriptions!=    null)    {    for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    it.next());    break;    }    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	49	None	replace
191	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.entrySet().iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  break;  }  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.entrySet().iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  break;  }  [BUGGY]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	for(Iterator  <  String>  it  =  foundDescriptions.entrySet().iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  break;  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendString(pattern,    it.next());    break;    }    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
192	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions,  stripCustom.size());  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());      [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions,  stripCustom.size());  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition  pos  =  new  ParsePosition(foundDescriptions,  stripCustom.size());	  ParsePosition    pos    =    new    ParsePosition(foundDescriptions,    stripCustom.length);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
