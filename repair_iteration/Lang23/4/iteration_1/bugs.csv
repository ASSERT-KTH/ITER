bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next());  }  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  [BUGGY]    if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next());  }  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	    if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next());  }		non-compiled	[CE]  ';'  expected	8	None	add
2	[BUG]  [BUGGY]    if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern.add(it.next());  }  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  registry  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  [BUGGY]    if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern.add(it.next());  }  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	    if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern.add(it.next());  }		non-compiled	[CE]  ';'  expected	8	None	add
3	[BUG]  [BUGGY]    if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next(),  stripCustom,  true);  break;  }  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  registry  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  [BUGGY]    if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next(),  stripCustom,  true);  break;  }  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	    if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next(),  stripCustom,  true);  break;  }		non-compiled	[CE]  ';'  expected	8	None	add
4	[BUG]  [BUGGY]    if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next(),  stripCustom,  true);  }  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  registry  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  [BUGGY]    if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next(),  stripCustom,  true);  }  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	    if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next(),  stripCustom,  true);  }		non-compiled	[CE]  ';'  expected	8	None	add
5	[BUG]  [BUGGY]    if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  [BUGGY]    if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	    if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }		non-compiled	[CE]  ';'  expected	8	None	add
6	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(1);  [BUGGY]  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	add	ParsePosition  pos  =  new  ParsePosition(1);	ParsePosition  pos  =  new  ParsePosition(0);  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	7	5	replace
7	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(1);  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(1);  [BUGGY]  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition  pos  =  new  ParsePosition(1);	ParsePosition  pos  =  new  ParsePosition(0);  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	7	5	replace
8	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions);  [CE]  constructor  ParsePosition  in  class  ParsePosition  cannot  be  applied  to  given  types;  [FE]      junit.framework.AssertionFailedError:  registry  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions);  [BUGGY]  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition  pos  =  new  ParsePosition(foundDescriptions);	ParsePosition  pos  =  new  ParsePosition(0);  	non-compiled	[CE]  constructor  ParsePosition  in  class  ParsePosition  cannot  be  applied  to  given  types;	7	None	replace
9	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions.length);  [CE]  cannot  find  symbol  length  [FE]        junit.framework.AssertionFailedError:  registry  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(foundDescriptions.length);  [BUGGY]  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition  pos  =  new  ParsePosition(foundDescriptions.length);	ParsePosition  pos  =  new  ParsePosition(0);  	non-compiled	[CE]  cannot  find  symbol  length	7	None	replace
10	[BUG]  [BUGGY]    if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  [BUGGY]    if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	    if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }		non-compiled	[CE]  ';'  expected	8	None	add
11	[BUG]  [BUGGY]    if(foundDescriptions!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  registry  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  [BUGGY]    if(foundDescriptions!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	    if(foundDescriptions!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }		non-compiled	[CE]  ';'  expected	8	None	add
12	[BUG]  [BUGGY]    if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  break;  }  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  registry  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  [BUGGY]    if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  break;  }  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	    if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  break;  }		non-compiled	[CE]  ';'  expected	8	None	add
13	[BUG]  [BUGGY]    if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next());  break;  }  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  registry  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  [BUGGY]    if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next());  break;  }  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	    if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  it.next());  break;  }		non-compiled	[CE]  ';'  expected	8	None	add
14	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(2);  [BUGGY]  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	add	ParsePosition  pos  =  new  ParsePosition(2);	ParsePosition  pos  =  new  ParsePosition(0);  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	7	5	replace
15	[BUG]  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(2);  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(2);  [BUGGY]  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	ParsePosition  pos  =  new  ParsePosition(2);	ParsePosition  pos  =  new  ParsePosition(0);  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	7	5	replace
16	[BUG]  [BUGGY]    if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  i,  it.next());  }  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  [BUGGY]    if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  i,  it.next());  }  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	    if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  i,  it.next());  }		non-compiled	[CE]  ';'  expected	8	None	add
17	[BUG]  [BUGGY]    if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  0);  }  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  registry  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  [BUGGY]    if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  0);  }  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	    if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  0);  }		non-compiled	[CE]  ';'  expected	8	None	add
18	[BUG]  [BUGGY]    if(foundDescriptions!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  i,  it.next());  }  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  registry  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  [BUGGY]    if(foundDescriptions!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  i,  it.next());  }  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	    if(foundDescriptions!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  i,  it.next());  }		non-compiled	[CE]  ';'  expected	8	None	add
19	[BUG]  [BUGGY]    if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  i,  it.next());  break;  }  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  registry  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  [BUGGY]    if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  i,  it.next());  break;  }  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	    if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  i,  it.next());  break;  }		non-compiled	[CE]  ';'  expected	8	None	add
20	[BUG]  [BUGGY]    if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  [BUGGY]    if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	155	155	1	replace	    if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }		non-compiled	[CE]  ';'  expected	8	None	add
