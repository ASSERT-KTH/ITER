bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(format!=  null)  {  if(format  ==  null  ||  format.equals( "   "))  {  [CE]  orphaned  default  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  if(format  ==  null  ||  format.equals( "   "))  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  if(format  ==  null  ||  format.equals( "   "))  {	  if(format    ==    null    ||    format.equals(       "       "))    {    if(format    ==    null    ||    format.equals(       "       "))    {    	non-compiled	[CE]  orphaned  default	34	None	replace
2	[BUG]  [BUGGY]  if(format  >=  null  ||  format.equals( "   "))  {  [CE]  bad  operand  types  for  binary  operator  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  >=  null  ||  format.equals( "   "))  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format  >=  null  ||  format.equals( "   "))  {	  if(format    ==    null    ||    format.equals(       "       "))    {    if(format    ==    null    ||    format.equals(       "       "))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  	34	None	replace
3	[BUG]  [BUGGY]  if(format!=  null)  {  stripCustom.append(START_FMT);  }  [CE]  orphaned  default  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  stripCustom.append(START_FMT);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  stripCustom.append(START_FMT);  }	          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  orphaned  default	4	None	replace
4	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(format);  [CE]  orphaned  default  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(format);  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(format);	  char    fmtCount    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(format);    	non-compiled	[CE]  orphaned  default	22	None	replace
5	[BUG]  [BUGGY]  String  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(format);  [CE]  orphaned  default  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  String  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(format);  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	String  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(format);	  char    fmtCount    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(format);    	non-compiled	[CE]  orphaned  default	22	None	replace
6	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(start,  next(pos));  stripCustom.append(END_FE).append(format);  [CE]  orphaned  default  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  char  fmtCount  =  readArgumentIndex(start,  next(pos));  stripCustom.append(END_FE).append(format);  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	char  fmtCount  =  readArgumentIndex(start,  next(pos));  stripCustom.append(END_FE).append(format);	  char    fmtCount    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(format);    	non-compiled	[CE]  orphaned  default	22	None	replace
7	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }  [CE]  orphaned  default  [FE]    IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE).append(format);    }    if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }	  	non-compiled	[CE]  orphaned  default	100	None	add
8	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }  if(format  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }  [CE]  orphaned  default  [FE]      IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }  if(format  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE).append(format);    }    if(format  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }	  	non-compiled	[CE]  orphaned  default	100	None	add
9	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }  }  [CE]  orphaned  default  [FE]        IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE).append(format);    }    if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }  }	  	non-compiled	[CE]  orphaned  default	100	None	add
10	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }  if(format  >=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }  [CE]  orphaned  default  [FE]          IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }  if(format  >=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE).append(format);    }    if(format  >=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }	  	non-compiled	[CE]  orphaned  default	100	None	add
11	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  orphaned  default  [FE]    IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }	  	non-compiled	[CE]  orphaned  default	85	None	add
12	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  [CE]  orphaned  default  [FE]      IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }	  	non-compiled	[CE]  orphaned  default	85	None	add
13	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  orphaned  default  [FE]        IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }	  	non-compiled	[CE]  orphaned  default	85	None	add
14	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  >=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  orphaned  default  [FE]          IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  >=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  >=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }	  	non-compiled	[CE]  orphaned  default	85	None	add
15	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FE).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	add	if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FE).append(formatDescription);  }	  if(format    ==    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE).append(formatDescription);    }    	compilable	  [FE]  IllegalArgumentException  	131	5	replace
16	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FE).append(formatDescription);  }  [FE]  IllegalArgumentException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FE).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FE).append(formatDescription);  }	  if(format    ==    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE).append(formatDescription);    }    	compilable	  [FE]  IllegalArgumentException  	131	5	replace
17	[BUG]  [BUGGY]  if(format  >=  null)  {  stripCustom.append(END_FE).append(formatDescription);  }  [CE]  orphaned  default  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  >=  null)  {  stripCustom.append(END_FE).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format  >=  null)  {  stripCustom.append(END_FE).append(formatDescription);  }	  if(format    ==    null)    {    stripCustom.append(END_FE).append(formatDescription);    }    	non-compiled	[CE]  orphaned  default	75	None	replace
18	[BUG]  [BUGGY]  if(format.length()  ==  0)  {  if(format!=  null)  {  stripCustom.append(END_FE).append(formatDescription);  }  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format.length()  ==  0)  {  if(format!=  null)  {  stripCustom.append(END_FE).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format.length()  ==  0)  {  if(format!=  null)  {  stripCustom.append(END_FE).append(formatDescription);  }	  if(format    ==    null)    {    stripCustom.append(END_FE).append(formatDescription);    }    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
19	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	add	if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(START_FMT).append(formatDescription);  }	  if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    stripCustom.append(DUMMY_PATTERN);    }    	compilable	  [FE]  IllegalArgumentException  	86	5	replace
20	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(START_FMT).append(formatDescription);  }	  if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    stripCustom.append(DUMMY_PATTERN);    }    	compilable	  [FE]  IllegalArgumentException  	86	5	replace
21	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FMT).append(format);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FMT).append(format);  }  [CE]  orphaned  default  [FE]    IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FMT).append(format);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FMT).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(START_FMT).append(format);    }    if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FMT).append(format);  }	  	non-compiled	[CE]  orphaned  default	40	None	add
22	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FMT).append(format);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }  [CE]  orphaned  default  [FE]      IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FMT).append(format);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(START_FMT).append(format);    }    if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }	  	non-compiled	[CE]  orphaned  default	40	None	add
23	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FMT).append(format);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(STRING_FMT).append(format);  }  [CE]  orphaned  default  [FE]        IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FMT).append(format);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(STRING_FMT).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(START_FMT).append(format);    }    if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(STRING_FMT).append(format);  }	  	non-compiled	[CE]  orphaned  default	40	None	add
24	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FMT).append(format);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(FIELD_FMT).append(format);  }  [CE]  orphaned  default  [FE]          IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FMT).append(format);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(FIELD_FMT).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(START_FMT).append(format);    }    if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(FIELD_FMT).append(format);  }	  	non-compiled	[CE]  orphaned  default	40	None	add
25	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FMT).append(format);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FMT).append(format);  }  [CE]  orphaned  default  [FE]            IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FMT).append(format);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FMT).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(START_FMT).append(format);    }    if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FMT).append(format);  }	  	non-compiled	[CE]  orphaned  default	40	None	add
26	[BUG]  [BUGGY]  if(format!=  null  ||  formatDescription.length()  ==  0)  {  if(format!=  null  ||  formatDescription.length()  ==  0)  {  [CE]  orphaned  default  [FE]    IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null  ||  formatDescription.length()  ==  0)  {  if(format!=  null  ||  formatDescription.length()  ==  0)  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null    ||    formatDescription.length()    ==    0)    {    if(format!=  null  ||  formatDescription.length()  ==  0)  {	  	non-compiled	[CE]  orphaned  default	43	None	add
27	[BUG]  [BUGGY]  if(format!=  null  ||  formatDescription.length()  ==  0)  {  if(format  ==  null  ||  formatDescription.length()  ==  0)  {  [CE]  orphaned  default  [FE]      IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null  ||  formatDescription.length()  ==  0)  {  if(format  ==  null  ||  formatDescription.length()  ==  0)  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null    ||    formatDescription.length()    ==    0)    {    if(format  ==  null  ||  formatDescription.length()  ==  0)  {	  	non-compiled	[CE]  orphaned  default	43	None	add
28	[BUG]  [BUGGY]  if(format!=  null  ||  formatDescription.length()  ==  0)  {  if(format  >=  null  ||  formatDescription.length()  ==  0)  {  [CE]  orphaned  default  [FE]        IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null  ||  formatDescription.length()  ==  0)  {  if(format  >=  null  ||  formatDescription.length()  ==  0)  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null    ||    formatDescription.length()    ==    0)    {    if(format  >=  null  ||  formatDescription.length()  ==  0)  {	  	non-compiled	[CE]  orphaned  default	43	None	add
29	[BUG]  [BUGGY]  if(format!=  null  ||  formatDescription.length()  ==  0)  {  if(format  >>  null  ||  formatDescription.length()  ==  0)  {  [CE]  orphaned  default  [FE]          IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null  ||  formatDescription.length()  ==  0)  {  if(format  >>  null  ||  formatDescription.length()  ==  0)  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null    ||    formatDescription.length()    ==    0)    {    if(format  >>  null  ||  formatDescription.length()  ==  0)  {	  	non-compiled	[CE]  orphaned  default	43	None	add
30	[BUG]  [BUGGY]  if(format.length()  ==  0)  {  if(format!=  null)  {  stripCustom.append(END_FE).append(format);  }  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format.length()  ==  0)  {  if(format!=  null)  {  stripCustom.append(END_FE).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format.length()  ==  0)  {  if(format!=  null)  {  stripCustom.append(END_FE).append(format);  }	          if(format    ==    null)    {    stripCustom.append(END_FE).append(format);    }    if(format!=    null)    {    stripCustom.append(END_FE).append(format);    }    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
31	[BUG]  [BUGGY]  if(format.length()  >  0)  {  if(format!=  null)  {  stripCustom.append(END_FE).append(format);  }  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format.length()  >  0)  {  if(format!=  null)  {  stripCustom.append(END_FE).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format.length()  >  0)  {  if(format!=  null)  {  stripCustom.append(END_FE).append(format);  }	          if(format    ==    null)    {    stripCustom.append(END_FE).append(format);    }    if(format!=    null)    {    stripCustom.append(END_FE).append(format);    }    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
32	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(index);  [CE]  orphaned  default  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(index);  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(index);	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  orphaned  default	23	None	replace
33	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  [CE]  orphaned  default  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  orphaned  default	23	None	replace
34	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start);  stripCustom.append(END_FE).append(index);  [CE]  orphaned  default  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start);  stripCustom.append(END_FE).append(index);  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start);  stripCustom.append(END_FE).append(index);	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  orphaned  default	23	None	replace
35	[BUG]  [BUGGY]  if(format!=  null  ||  format.length()!=  0)  {  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null  ||  format.length()!=  0)  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null  ||  format.length()!=  0)  {	  if(format    ==    null    ||    format.length()!=    0)    {    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
36	[BUG]  [BUGGY]  if(format  ==  null  ||  format.length()  >=  0)  {  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null  ||  format.length()  >=  0)  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format  ==  null  ||  format.length()  >=  0)  {	  if(format    ==    null    ||    format.length()!=    0)    {    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
37	[BUG]  [BUGGY]  if(format  ==  null  &&  format.length()  >  0)  {  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null  &&  format.length()  >  0)  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format  ==  null  &&  format.length()  >  0)  {	  if(format!=    null    &&    format.length()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
38	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null  &&  formatDescription.length()  >  0)  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	add	if(format!=  null  &&  formatDescription.length()  >  0)  {	  if(format!=    null    &&    format.length()    >    0)    {    	compilable	  [FE]  IllegalArgumentException  	46	5	replace
39	[BUG]  [BUGGY]  if(format!=  null  &&  formatDescription.length()  >  0)  {  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null  &&  formatDescription.length()  >  0)  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null  &&  formatDescription.length()  >  0)  {	  if(format!=    null    &&    format.length()    >    0)    {    	compilable	  [FE]  IllegalArgumentException  	46	5	replace
40	[BUG]  [BUGGY]  if(format!=  null  ||  format.length()  >  0)  {  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null  ||  format.length()  >  0)  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null  ||  format.length()  >  0)  {	  if(format!=    null    &&    format.length()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
41	[BUG]  [BUGGY]  if(format  ==  null  &&  format.equals(   "     "))  {  if(format  ==  null  &&  format.equals(   "   "))  {  [CE]  orphaned  default  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null  &&  format.equals(   "     "))  {  if(format  ==  null  &&  format.equals(   "   "))  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format    ==    null    &&    format.equals(   "       "))    {    if(format  ==  null  &&  format.equals(   "   "))  {	  	non-compiled	[CE]  orphaned  default	16	None	add
42	[BUG]  [BUGGY]  if(format  ==  null  &&  format.equals(   "     "))  {  if(format!=  null  &&  format.equals(   "   "))  {  [CE]  orphaned  default  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null  &&  format.equals(   "     "))  {  if(format!=  null  &&  format.equals(   "   "))  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format    ==    null    &&    format.equals(   "       "))    {    if(format!=  null  &&  format.equals(   "   "))  {	  	non-compiled	[CE]  orphaned  default	16	None	add
43	[BUG]  [BUGGY]  if(format  ==  null  &&  format.equals(   "     "))  {  If(format  ==  null  &&  format.equals(   "   "))  {  [CE]  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null  &&  format.equals(   "     "))  {  If(format  ==  null  &&  format.equals(   "   "))  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format    ==    null    &&    format.equals(   "       "))    {    If(format  ==  null  &&  format.equals(   "   "))  {	  	non-compiled	[CE]  	16	None	add
44	[BUG]  [BUGGY]  if(format.length()  ==  0)  {  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format.length()  ==  0)  {  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format.length()  ==  0)  {  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }	          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
45	[BUG]  [BUGGY]  if(format.length()  ==  0)  {  if(format!=  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format.length()  ==  0)  {  if(format!=  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format.length()  ==  0)  {  if(format!=  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }	          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
46	[BUG]  [BUGGY]  if(format  ==  null  ||  format.equals(   "-   "))  {  if(format  ==  null  ||  format.equals(   "-   "))  {  [CE]  orphaned  default  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null  ||  format.equals(   "-   "))  {  if(format  ==  null  ||  format.equals(   "-   "))  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format    ==    null    ||    format.equals(   "-   "))    {    if(format  ==  null  ||  format.equals(   "-   "))  {	  	non-compiled	[CE]  orphaned  default	133	None	add
47	[BUG]  [BUGGY]  if(format  ==  null  ||  format.equals(   "-   "))  {  if(format!=  null  ||  format.equals(   "-   "))  {  [CE]  orphaned  default  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null  ||  format.equals(   "-   "))  {  if(format!=  null  ||  format.equals(   "-   "))  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format    ==    null    ||    format.equals(   "-   "))    {    if(format!=  null  ||  format.equals(   "-   "))  {	  	non-compiled	[CE]  orphaned  default	133	None	add
48	[BUG]  [BUGGY]  if(format  ==  null  ||  format.equals(   "-   "))  {  if(format  ==  null  ||  format.equals( ".-   "))  {  [CE]  orphaned  default  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null  ||  format.equals(   "-   "))  {  if(format  ==  null  ||  format.equals( ".-   "))  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format    ==    null    ||    format.equals(   "-   "))    {    if(format  ==  null  ||  format.equals( ".-   "))  {	  	non-compiled	[CE]  orphaned  default	133	None	add
49	[BUG]  [BUGGY]  if(format.length()  >  0)  {  if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format.length()  >  0)  {  if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format.length()  >  0)  {  if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }	          if(format    ==    null)    {    stripCustom.append(END_FE).append(format);    }    If(format    ==    null)    {    stripCustom.append(END_FE).append(format);    }    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
50	[BUG]  [BUGGY]  if(format.length()  ==  0)  {  if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format.length()  ==  0)  {  if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format.length()  ==  0)  {  if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }	          if(format    ==    null)    {    stripCustom.append(END_FE).append(format);    }    If(format    ==    null)    {    stripCustom.append(END_FE).append(format);    }    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
51	[BUG]  [BUGGY]  ||  format  ==  null)  {  stripCustom.append(END_FE);  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  ||  format  ==  null)  {  stripCustom.append(END_FE);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	||  format  ==  null)  {  stripCustom.append(END_FE);  }	  ||    format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
52	[BUG]  [BUGGY]  ||  format!=  null)  {  stripCustom.append(END_FE);  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  ||  format!=  null)  {  stripCustom.append(END_FE);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	||  format!=  null)  {  stripCustom.append(END_FE);  }	  ||    format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
53	[BUG]  [BUGGY]  ||  format  ==  null)  {  stripCustom.append(STRING_QUOTE);  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  ||  format  ==  null)  {  stripCustom.append(STRING_QUOTE);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	||  format  ==  null)  {  stripCustom.append(STRING_QUOTE);  }	  ||    format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
54	[BUG]  [BUGGY]  stripCustom.append(DUMMY_PATTERN);  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  stripCustom.append(DUMMY_PATTERN);  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	stripCustom.append(DUMMY_PATTERN);	          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format    >=    null)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  orphaned  default	5	None	replace
55	[BUG]  [BUGGY]  if(format!=  null)  {  stripCustom.append(END_FE).append(formatDescription);  }  else  {  foundFormats.add(format);  }  [CE]  orphaned  default  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  stripCustom.append(END_FE).append(formatDescription);  }  else  {  foundFormats.add(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  stripCustom.append(END_FE).append(formatDescription);  }  else  {  foundFormats.add(format);  }	  if(format!=    null)    {    stripCustom.append(END_FE).append(formatDescription);    }    	non-compiled	[CE]  orphaned  default	68	None	replace
56	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	add	                if(format!=        null)        {        stripCustom.append(DUMMY_PATTERN).append(format);        }        if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }	  	compilable	  [FE]  IllegalArgumentException  	79	5	add
57	[BUG]  [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format!=        null)        {        stripCustom.append(DUMMY_PATTERN).append(format);        }        if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }	  	compilable	  [FE]  IllegalArgumentException  	79	5	add
58	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(END_FE).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	add	                if(format!=        null)        {        stripCustom.append(DUMMY_PATTERN).append(format);        }        if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(END_FE).append(format);  }	  	compilable	  [FE]  IllegalArgumentException  	79	5	add
59	[BUG]  [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(END_FE).append(format);  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(END_FE).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format!=        null)        {        stripCustom.append(DUMMY_PATTERN).append(format);        }        if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(END_FE).append(format);  }	  	compilable	  [FE]  IllegalArgumentException  	79	5	add
60	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(START_FMT).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	add	                if(format!=        null)        {        stripCustom.append(DUMMY_PATTERN).append(format);        }        if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(START_FMT).append(format);  }	  	compilable	  [FE]  IllegalArgumentException  	79	5	add
61	[BUG]  [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(START_FMT).append(format);  }  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(START_FMT).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format!=        null)        {        stripCustom.append(DUMMY_PATTERN).append(format);        }        if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(START_FMT).append(format);  }	  	compilable	  [FE]  IllegalArgumentException  	79	5	add
62	[BUG]  [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(STRING_FMT).append(format);  }  [CE]  cannot  find  symbol  STRING_FMT  [FE]          IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(STRING_FMT).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format!=        null)        {        stripCustom.append(DUMMY_PATTERN).append(format);        }        if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(STRING_FMT).append(format);  }	  	non-compiled	[CE]  cannot  find  symbol  STRING_FMT	79	None	add
63	[BUG]  [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format!=        null)        {        stripCustom.append(DUMMY_PATTERN).append(format);        }        if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(	  	non-compiled	[CE]  illegal  start  of  expression	79	None	add
64	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null  ||  format.equals( "- "))  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	add	if(format!=  null  ||  format.equals( "- "))  {	  if(format    ==    null    ||    format.equals(   "-   "))    {    	compilable	  [FE]  IllegalArgumentException  	134	5	replace
65	[BUG]  [BUGGY]  if(format!=  null  ||  format.equals( "- "))  {  [FE]  IllegalArgumentException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null  ||  format.equals( "- "))  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null  ||  format.equals( "- "))  {	  if(format    ==    null    ||    format.equals(   "-   "))    {    	compilable	  [FE]  IllegalArgumentException  	134	5	replace
66	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null  &&  format.equals( "-   "))  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	add	if(format!=  null  &&  format.equals( "-   "))  {	  if(format    ==    null    ||    format.equals(   "-   "))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	134	2	replace
67	[BUG]  [BUGGY]  if(format!=  null  &&  format.equals( "-   "))  {  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null  &&  format.equals( "-   "))  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null  &&  format.equals( "-   "))  {	  if(format    ==    null    ||    format.equals(   "-   "))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	134	2	replace
68	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null  &&  format.equals( "-   "))  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	add	if(format  ==  null  &&  format.equals( "-   "))  {	  if(format    ==    null    ||    format.equals(   "-   "))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	134	2	replace
69	[BUG]  [BUGGY]  if(format  ==  null  &&  format.equals( "-   "))  {  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null  &&  format.equals( "-   "))  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format  ==  null  &&  format.equals( "-   "))  {	  if(format    ==    null    ||    format.equals(   "-   "))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	134	2	replace
70	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }  [CE]  orphaned  default  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format    ==    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE).append(formatDescription);    }    if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }	  	non-compiled	[CE]  orphaned  default	130	None	add
71	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }  [CE]  orphaned  default  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format    ==    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE).append(formatDescription);    }    if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }	  	non-compiled	[CE]  orphaned  default	130	None	add
72	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }  [CE]  orphaned  default  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format    ==    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE).append(formatDescription);    }    for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }	  	non-compiled	[CE]  orphaned  default	130	None	add
73	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FMT).append(formatDescription);  }  [CE]  orphaned  default  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FMT).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format    ==    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE).append(formatDescription);    }    if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FMT).append(formatDescription);  }	  	non-compiled	[CE]  orphaned  default	130	None	add
74	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FMT).append(formatDescription);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CE]  orphaned  default  [FE]    IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FMT).append(formatDescription);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(START_FMT).append(formatDescription);    }    if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FMT).append(formatDescription);  }	  	non-compiled	[CE]  orphaned  default	59	None	add
75	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FMT).append(formatDescription);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }  [CE]  orphaned  default  [FE]      IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FMT).append(formatDescription);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(START_FMT).append(formatDescription);    }    if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }	  	non-compiled	[CE]  orphaned  default	59	None	add
76	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FMT).append(formatDescription);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(STRING_FMT).append(formatDescription);  }  [CE]  orphaned  default  [FE]        IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FMT).append(formatDescription);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(STRING_FMT).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(START_FMT).append(formatDescription);    }    if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(STRING_FMT).append(formatDescription);  }	  	non-compiled	[CE]  orphaned  default	59	None	add
77	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FMT).append(formatDescription);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(FIELD_FMT).append(formatDescription);  }  [CE]  orphaned  default  [FE]          IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FMT).append(formatDescription);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(FIELD_FMT).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(START_FMT).append(formatDescription);    }    if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(FIELD_FMT).append(formatDescription);  }	  	non-compiled	[CE]  orphaned  default	59	None	add
78	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FMT).append(formatDescription);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FMT).append(formatDescription);  }  [CE]  orphaned  default  [FE]            IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FMT).append(formatDescription);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FMT).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(START_FMT).append(formatDescription);    }    if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FMT).append(formatDescription);  }	  	non-compiled	[CE]  orphaned  default	59	None	add
79	[BUG]  [BUGGY]  stripCustom.append(DUMMY_PATTERN).append(format);  [CE]  orphaned  default  [FE]        IllegalArgumentException      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  stripCustom.append(DUMMY_PATTERN).append(format);  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	stripCustom.append(DUMMY_PATTERN).append(format);	          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format    >>    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    	non-compiled	[CE]  orphaned  default	108	None	replace
80	[BUG]  [BUGGY]  StripCustom.append(DUMMY_PATTERN).append(format);  [CE]  orphaned  default  [FE]          IllegalArgumentException      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  StripCustom.append(DUMMY_PATTERN).append(format);  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	StripCustom.append(DUMMY_PATTERN).append(format);	          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format    >>    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    	non-compiled	[CE]  orphaned  default	108	None	replace
81	[BUG]  [BUGGY]  stripCustom.append(START_FMT).append(format);  [CE]  orphaned  default  [FE]            IllegalArgumentException      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  stripCustom.append(START_FMT).append(format);  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	stripCustom.append(START_FMT).append(format);	          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format    >>    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    	non-compiled	[CE]  orphaned  default	108	None	replace
82	[BUG]  [BUGGY]  stripCustom.append(END_FE).append(format);  [CE]  orphaned  default  [FE]              IllegalArgumentException      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  stripCustom.append(END_FE).append(format);  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	stripCustom.append(END_FE).append(format);	          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format    >>    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    	non-compiled	[CE]  orphaned  default	108	None	replace
83	[BUG]  [BUGGY]  if(format  ==  null  &&  format.length()  ==  0)  {  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null  &&  format.length()  ==  0)  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format  ==  null  &&  format.length()  ==  0)  {	  if(format!=    null    &&    format.length()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
84	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null  &&  formatDescription.length()  ==  0)  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	add	if(format!=  null  &&  formatDescription.length()  ==  0)  {	  if(format!=    null    &&    format.length()    ==    0)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	129	2	replace
85	[BUG]  [BUGGY]  if(format!=  null  &&  formatDescription.length()  ==  0)  {  [FE]  junit.framework.AssertionFailedError:  registry  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null  &&  formatDescription.length()  ==  0)  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null  &&  formatDescription.length()  ==  0)  {	  if(format!=    null    &&    format.length()    ==    0)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	129	2	replace
86	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FE);    }    if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }	  	non-compiled	[CE]  orphaned  default	87	None	add
87	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE).append(formatDescription);  }  [CE]  orphaned  default  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FE);    }    if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE).append(formatDescription);  }	  	non-compiled	[CE]  orphaned  default	87	None	add
88	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FE);    }    if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }	  	non-compiled	[CE]  orphaned  default	87	None	add
89	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  If(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  If(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FE);    }    If(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }	  	non-compiled	[CE]  ';'  expected	87	None	add
90	[BUG]  [BUGGY]  Format.append(DUMMY_PATTERN).append(formatDescription);  [CE]  orphaned  default  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  Format.append(DUMMY_PATTERN).append(formatDescription);  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	Format.append(DUMMY_PATTERN).append(formatDescription);	  if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(formatDescription);    }    	non-compiled	[CE]  orphaned  default	42	None	replace
91	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  index;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  for(int  i  =  start;  i  <  index;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  orphaned  default  [FE]    IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  index;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  for(int  i  =  start;  i  <  index;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    start;    i    <    index;    i++)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format!=  null)  {  for(int  i  =  start;  i  <  index;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }	  	non-compiled	[CE]  orphaned  default	110	None	add
92	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  index;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  for(int  i  =  start;  i  <  index;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  orphaned  default  [FE]      IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  index;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  for(int  i  =  start;  i  <  index;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    start;    i    <    index;    i++)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  ==  null)  {  for(int  i  =  start;  i  <  index;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }	  	non-compiled	[CE]  orphaned  default	110	None	add
93	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  index;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  >=  null)  {  for(int  i  =  start;  i  <  index;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  orphaned  default  [FE]        IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  index;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  >=  null)  {  for(int  i  =  start;  i  <  index;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    start;    i    <    index;    i++)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  >=  null)  {  for(int  i  =  start;  i  <  index;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }	  	non-compiled	[CE]  orphaned  default	110	None	add
94	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  index;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  >>  null)  {  for(int  i  =  start;  i  <  index;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  orphaned  default  [FE]          IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  index;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  >>  null)  {  for(int  i  =  start;  i  <  index;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    start;    i    <    index;    i++)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  >>  null)  {  for(int  i  =  start;  i  <  index;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }	  	non-compiled	[CE]  orphaned  default	110	None	add
95	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	add	                if(format!=        null)        {        stripCustom.append(DUMMY_PATTERN);        }        if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	1	5	add
96	[BUG]  [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  [FE]  StringIndexOutOfBoundsException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format!=        null)        {        stripCustom.append(DUMMY_PATTERN);        }        if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	1	5	add
97	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	add	                if(format!=        null)        {        stripCustom.append(DUMMY_PATTERN);        }        if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	1	5	add
98	[BUG]  [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  [FE]  StringIndexOutOfBoundsException  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format!=        null)        {        stripCustom.append(DUMMY_PATTERN);        }        if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	1	5	add
99	[BUG]  [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_  [CE]  ')'  expected  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format!=        null)        {        stripCustom.append(DUMMY_PATTERN);        }        if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_	  	non-compiled	[CE]  ')'  expected	1	None	add
100	[BUG]  [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format!=        null)        {        stripCustom.append(DUMMY_PATTERN);        }        if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }	  	non-compiled	[CE]  ')'  expected	1	None	add
101	[BUG]  [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format!=        null)        {        stripCustom.append(DUMMY_PATTERN);        }        if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY	  	non-compiled	[CE]  ')'  expected	1	None	add
102	[BUG]  [BUGGY]  if(format  <  null  ||  format.length()!=  0)  {  [CE]  orphaned  default  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  <  null  ||  format.length()!=  0)  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format  <  null  ||  format.length()!=  0)  {	  if(format    <    null    ||    format.length()    ==    0)    {    	non-compiled	[CE]  orphaned  default	99	None	replace
103	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  index;  i++)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]    IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  index;  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  for(int  i  =  start;  i  <  index;  i++)  {  stripCustom.append(END_FE);  }	  if(format!=    null)    {    for(int    i    =    start;    i    <    index;    i++)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  orphaned  default	111	None	replace
104	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  0;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  orphaned  default  [FE]      IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  0;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  for(int  i  =  start;  i  <  0;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }	  if(format!=    null)    {    for(int    i    =    start;    i    <    index;    i++)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  orphaned  default	111	None	replace
105	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(start,  next(pos),  format);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  int  fmtCount  =  readArgumentIndex(start,  next(pos),  format);  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	int  fmtCount  =  readArgumentIndex(start,  next(pos),  format);	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos),    format);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	19	None	replace
106	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  format);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  format);  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index,  format);	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos),    format);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	19	None	replace
107	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN[i]);  }  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN[i]);  }  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN[i]);  }	  if(format!=    null)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(DUMMY_PATTERN[i]);    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	114	None	replace
108	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN[0]);  }  [CE]  orphaned  default  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN[0]);  }  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN[0]);  }	  if(format!=    null)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(DUMMY_PATTERN[i]);    }    	non-compiled	[CE]  orphaned  default	114	None	replace
109	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN[0]);  }  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN[0]);  }  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN[0]);  }	  if(format!=    null)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(DUMMY_PATTERN[i]);    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	114	None	replace
110	[BUG]  [BUGGY]  if(format!=  null)  {  stripCustom.append(END_FMT).append(formatDescription);  }  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]    IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  stripCustom.append(END_FMT).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  stripCustom.append(END_FMT).append(formatDescription);  }	          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(formatDescription);    }    if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(formatDescription);    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	72	None	replace
111	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  orphaned  default  [FE]    IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }	  	non-compiled	[CE]  orphaned  default	77	None	add
112	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  orphaned  default  [FE]      IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }	  	non-compiled	[CE]  orphaned  default	77	None	add
113	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  [CE]  orphaned  default  [FE]        IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }	  	non-compiled	[CE]  orphaned  default	77	None	add
114	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  >=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  orphaned  default  [FE]          IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  >=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  >=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }	  	non-compiled	[CE]  orphaned  default	77	None	add
115	[BUG]  [BUGGY]  Format  <?>  foundFormats  =  format.toArray(new  Format[foundFormats.size()  ]);  [CE]  possible  loss  of  precision  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  Format  <?>  foundFormats  =  format.toArray(new  Format[foundFormats.size()  ]);  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	Format  <?>  foundFormats  =  format.toArray(new  Format[foundFormats.size()  ]);	  if(format!=    null)    {    for(int    i    =    0;    i    <    numFormats;    i++)    {    stripCustom.append(END_FE).append(format);    }    	non-compiled	[CE]  possible  loss  of  precision	102	None	replace
116	[BUG]  [BUGGY]  FormatUtil.appendFormat(format,  start,  pos);  [CE]  possible  loss  of  precision  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  FormatUtil.appendFormat(format,  start,  pos);  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	FormatUtil.appendFormat(format,  start,  pos);	  if(format!=    null)    {    for(int    i    =    0;    i    <    numFormats;    i++)    {    stripCustom.append(END_FE).append(format);    }    	non-compiled	[CE]  possible  loss  of  precision	102	None	replace
117	[BUG]  [BUGGY]  FormatUtils.appendFormat(format,  start,  pos);  [CE]  possible  loss  of  precision  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  FormatUtils.appendFormat(format,  start,  pos);  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	FormatUtils.appendFormat(format,  start,  pos);	  if(format!=    null)    {    for(int    i    =    0;    i    <    numFormats;    i++)    {    stripCustom.append(END_FE).append(format);    }    	non-compiled	[CE]  possible  loss  of  precision	102	None	replace
118	[BUG]  [BUGGY]  Integer  fmtCount  =  readArgumentIndex(pattern,  next(pos));  [CE]  possible  loss  of  precision  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  Integer  fmtCount  =  readArgumentIndex(pattern,  next(pos));  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	Integer  fmtCount  =  readArgumentIndex(pattern,  next(pos));	  if(format    ==    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  possible  loss  of  precision	104	None	replace
119	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }  [CE]  possible  loss  of  precision  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }	          if(format    ==    null)    {    stripCustom.append(END_FE).append(format);    }    for(format    ==    null)    {    stripCustom.append(END_FE).append(format);    }    	non-compiled	[CE]  possible  loss  of  precision	54	None	replace
120	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  index;  i++)  {  stripCustom.append(END_FE).append(format);  }  [CE]  possible  loss  of  precision  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  for(int  i  =  start;  i  <  index;  i++)  {  stripCustom.append(END_FE).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	for(int  i  =  start;  i  <  index;  i++)  {  stripCustom.append(END_FE).append(format);  }	          if(format    ==    null)    {    stripCustom.append(END_FE).append(format);    }    for(format    ==    null)    {    stripCustom.append(END_FE).append(format);    }    	non-compiled	[CE]  possible  loss  of  precision	54	None	replace
121	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }  [CE]  possible  loss  of  precision  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }	          if(format    ==    null)    {    stripCustom.append(END_FE).append(format);    }    for(format    ==    null)    {    stripCustom.append(END_FE).append(format);    }    	non-compiled	[CE]  possible  loss  of  precision	54	None	replace
122	[BUG]  [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  [CE]  possible  loss  of  precision  [FE]    IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format        ==        null)        {        stripCustom.append(DUMMY_PATTERN).append(format);        }        if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }	  	non-compiled	[CE]  possible  loss  of  precision	63	None	add
123	[BUG]  [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(END_FE).append(format);  }  [CE]  possible  loss  of  precision  [FE]      IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(END_FE).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format        ==        null)        {        stripCustom.append(DUMMY_PATTERN).append(format);        }        if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(END_FE).append(format);  }	  	non-compiled	[CE]  possible  loss  of  precision	63	None	add
124	[BUG]  [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format        ==        null)        {        stripCustom.append(DUMMY_PATTERN).append(format);        }        if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(	  	non-compiled	[CE]  illegal  start  of  expression	63	None	add
125	[BUG]  [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format        ==        null)        {        stripCustom.append(DUMMY_PATTERN).append(format);        }        if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }	  	non-compiled	[CE]  illegal  start  of  expression	63	None	add
126	[BUG]  [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append  [CE]  not  a  statement  [FE]            IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format        ==        null)        {        stripCustom.append(DUMMY_PATTERN).append(format);        }        if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append	  	non-compiled	[CE]  not  a  statement	63	None	add
127	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index);  stripCustom.append(DUMMY_PATTERN).append(format);  [CE]  possible  loss  of  precision  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index);  stripCustom.append(DUMMY_PATTERN).append(format);  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index);  stripCustom.append(DUMMY_PATTERN).append(format);	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(DUMMY_PATTERN).append(format);    	non-compiled	[CE]  possible  loss  of  precision	123	None	replace
128	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(DUMMY_PATTERN).append(format);  [CE]  possible  loss  of  precision  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(DUMMY_PATTERN).append(format);  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(DUMMY_PATTERN).append(format);	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(DUMMY_PATTERN).append(format);    	non-compiled	[CE]  possible  loss  of  precision	123	None	replace
129	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start);  stripCustom.append(DUMMY_PATTERN).append(format);  [CE]  possible  loss  of  precision  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start);  stripCustom.append(DUMMY_PATTERN).append(format);  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start);  stripCustom.append(DUMMY_PATTERN).append(format);	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(DUMMY_PATTERN).append(format);    	non-compiled	[CE]  possible  loss  of  precision	123	None	replace
130	[BUG]  [BUGGY]  if(format!=  null)  {  if(format!=  null  ||  format.equals( "   "))  {  [CE]  orphaned  default  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  if(format!=  null  ||  format.equals( "   "))  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  if(format!=  null  ||  format.equals( "   "))  {	  if(format    ==    null    ||    format.equals(       "       "))    {    if(format!=    null    ||    format.equals(       "       "))    {    	non-compiled	[CE]  orphaned  default	35	None	replace
131	[BUG]  [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format        ==        null)        {        stripCustom.append(DUMMY_PATTERN).append(format);        }        if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }	  	non-compiled	[CE]  not  a  statement	61	None	add
132	[BUG]  [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format        ==        null)        {        stripCustom.append(DUMMY_PATTERN).append(format);        }        if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }	  	non-compiled	[CE]  not  a  statement	61	None	add
133	[BUG]  [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format        ==        null)        {        stripCustom.append(DUMMY_PATTERN).append(format);        }        if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }	  	non-compiled	[CE]  not  a  statement	61	None	add
134	[BUG]  [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format        ==        null)        {        stripCustom.append(DUMMY_PATTERN).append(format);        }        if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }	  	non-compiled	[CE]  not  a  statement	61	None	add
135	[BUG]  [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format        ==        null)        {        stripCustom.append(DUMMY_PATTERN).append(format);        }        if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }	  	non-compiled	[CE]  not  a  statement	61	None	add
136	[BUG]  [BUGGY]  FormatUtil.appendFormat(format,  start,  fmtCount);  [CE]  possible  loss  of  precision  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  FormatUtil.appendFormat(format,  start,  fmtCount);  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	FormatUtil.appendFormat(format,  start,  fmtCount);	  if(format    ==    null)    {    for(int    i    =    0;    i    <    numDescriptions;    i++)    {    stripCustom.append(END_FE).append(format);    }    	non-compiled	[CE]  possible  loss  of  precision	124	None	replace
137	[BUG]  [BUGGY]  FormatUtils.appendFormat(format,  start,  index);  [CE]  possible  loss  of  precision  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  FormatUtils.appendFormat(format,  start,  index);  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	FormatUtils.appendFormat(format,  start,  index);	  if(format    ==    null)    {    for(int    i    =    0;    i    <    numDescriptions;    i++)    {    stripCustom.append(END_FE).append(format);    }    	non-compiled	[CE]  possible  loss  of  precision	124	None	replace
138	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }	  	non-compiled	[CE]  not  a  statement	121	None	add
139	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  not  a  statement  [FE]      IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }	  	non-compiled	[CE]  not  a  statement	121	None	add
140	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  [CE]  not  a  statement  [FE]        IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }	  	non-compiled	[CE]  not  a  statement	121	None	add
141	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  >=  null)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  not  a  statement  [FE]          IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  >=  null)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  >=  null)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }	  	non-compiled	[CE]  not  a  statement	121	None	add
142	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }	  if(format    ==    null)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  orphaned  default	113	None	replace
143	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FMT).append(format);  }  [CE]  orphaned  default  [FE]    IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FMT).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FMT).append(format);  }	  if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(START_FMT).append(format);    }    	non-compiled	[CE]  orphaned  default	41	None	replace
144	[BUG]  [BUGGY]  stripCustom.append(STRING_FMT).append(format);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]            IllegalArgumentException      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  stripCustom.append(STRING_FMT).append(format);  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	stripCustom.append(STRING_FMT).append(format);	          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format    >=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	83	None	replace
145	[BUG]  [BUGGY]  ||  format!=  null)  {  stripCustom.append(END_FE).append(format);  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  ||  format!=  null)  {  stripCustom.append(END_FE).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	||  format!=  null)  {  stripCustom.append(END_FE).append(format);  }	  ||    format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
146	[BUG]  [BUGGY]  ||  format!=  null)  {  stripCustom.append(STRING_QUOTE).append(format);  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  ||  format!=  null)  {  stripCustom.append(STRING_QUOTE).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	||  format!=  null)  {  stripCustom.append(STRING_QUOTE).append(format);  }	  ||    format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
147	[BUG]  [BUGGY]  ||  format!=  null)  {  stripCustom.append(START_FMT).append(format);  }  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  ||  format!=  null)  {  stripCustom.append(START_FMT).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	||  format!=  null)  {  stripCustom.append(START_FMT).append(format);  }	  ||    format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
148	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }	          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    for(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	105	None	replace
149	[BUG]  [BUGGY]  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  stripCustom.append(START_FMT).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  stripCustom.append(START_FMT).append(formatDescription);  }	          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    for(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	105	None	replace
150	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  index;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  for(int  i  =  start;  i  <  index;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	for(int  i  =  start;  i  <  index;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }	          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    for(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	105	None	replace
151	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(FIELD_PATTERN);  }  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(FIELD_PATTERN);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(FIELD_PATTERN);  }	          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    for(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	105	None	replace
152	[BUG]  [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format!=        null)        {        stripCustom.append(DUMMY_PATTERN);        }        if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }	  	non-compiled	[CE]  not  a  statement	3	None	add
153	[BUG]  [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format!=        null)        {        stripCustom.append(DUMMY_PATTERN);        }        if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }	  	non-compiled	[CE]  not  a  statement	3	None	add
154	[BUG]  [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format!=        null)        {        stripCustom.append(DUMMY_PATTERN);        }        if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }	  	non-compiled	[CE]  not  a  statement	3	None	add
155	[BUG]  [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format!=        null)        {        stripCustom.append(DUMMY_PATTERN);        }        if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }	  	non-compiled	[CE]  not  a  statement	3	None	add
156	[BUG]  [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format!=        null)        {        stripCustom.append(DUMMY_PATTERN);        }        if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }	  	non-compiled	[CE]  not  a  statement	3	None	add
157	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  end(pos),  format);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  end(pos),  format);  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  end(pos),  format);	  int    fmtCount    =    readArgumentIndex(pattern,    end(pos));    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
158	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(start,  end(pos));  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  int  fmtCount  =  readArgumentIndex(start,  end(pos));  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	int  fmtCount  =  readArgumentIndex(start,  end(pos));	  int    fmtCount    =    readArgumentIndex(pattern,    end(pos));    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
159	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FMT).append(formatDescription);  }  [CE]  orphaned  default  [FE]    IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FMT).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FMT).append(formatDescription);  }	  if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(START_FMT).append(formatDescription);    }    	non-compiled	[CE]  orphaned  default	60	None	replace
160	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(STRING_FMT).append(formatDescription);  }  [CE]  orphaned  default  [FE]      IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(STRING_FMT).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(STRING_FMT).append(formatDescription);  }	  if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(START_FMT).append(formatDescription);    }    	non-compiled	[CE]  orphaned  default	60	None	replace
161	[BUG]  [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(formatDescription);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(formatDescription);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format        ==        null)        {        stripCustom.append(DUMMY_PATTERN).append(formatDescription);        }        if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(formatDescription);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }	  	non-compiled	[CE]  not  a  statement	71	None	add
162	[BUG]  [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(formatDescription);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format!=  null)  {  stripCustom.append(END_FE).append(formatDescription);  }  [CE]  not  a  statement  [FE]      IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(formatDescription);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format!=  null)  {  stripCustom.append(END_FE).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format        ==        null)        {        stripCustom.append(DUMMY_PATTERN).append(formatDescription);        }        if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(formatDescription);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format!=  null)  {  stripCustom.append(END_FE).append(formatDescription);  }	  	non-compiled	[CE]  not  a  statement	71	None	add
163	[BUG]  [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(formatDescription);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format!=  null)  {  stripCustom.append(  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(formatDescription);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format!=  null)  {  stripCustom.append(  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format        ==        null)        {        stripCustom.append(DUMMY_PATTERN).append(formatDescription);        }        if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(formatDescription);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format!=  null)  {  stripCustom.append(	  	non-compiled	[CE]  illegal  start  of  expression	71	None	add
164	[BUG]  [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(formatDescription);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format!=  null)  {  stripCustom.append  [CE]  not  a  statement  [FE]          IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(formatDescription);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format!=  null)  {  stripCustom.append  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format        ==        null)        {        stripCustom.append(DUMMY_PATTERN).append(formatDescription);        }        if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(formatDescription);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format!=  null)  {  stripCustom.append	  	non-compiled	[CE]  not  a  statement	71	None	add
165	[BUG]  [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(formatDescription);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format!=  null)  {  stripCustom.app  [CE]  not  a  statement  [FE]            IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(formatDescription);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format!=  null)  {  stripCustom.app  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format        ==        null)        {        stripCustom.append(DUMMY_PATTERN).append(formatDescription);        }        if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(formatDescription);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format!=  null)  {  stripCustom.app	  	non-compiled	[CE]  not  a  statement	71	None	add
166	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(start,  index);  [CE]  cannot  find  symbol  start  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  int  fmtCount  =  readArgumentIndex(start,  index);  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	int  fmtCount  =  readArgumentIndex(start,  index);	  int    fmtCount    =    readArgumentIndex(start,    next(pos));    	non-compiled	[CE]  cannot  find  symbol  start	18	None	replace
167	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(format,  next(pos));  [CE]  cannot  find  symbol  start  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  int  fmtCount  =  readArgumentIndex(format,  next(pos));  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	int  fmtCount  =  readArgumentIndex(format,  next(pos));	  int    fmtCount    =    readArgumentIndex(start,    next(pos));    	non-compiled	[CE]  cannot  find  symbol  start	18	None	replace
168	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pos,  start));  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  int  fmtCount  =  readArgumentIndex(pos,  start));  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	int  fmtCount  =  readArgumentIndex(pos,  start));	  int    fmtCount    =    readArgumentIndex(start,    next(pos));    	non-compiled	[CE]  ';'  expected	18	None	replace
169	[BUG]  [BUGGY]  If(format  ==  null  ||  format.equals( "   "))  {  [CE]  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  If(format  ==  null  ||  format.equals( "   "))  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	If(format  ==  null  ||  format.equals( "   "))  {	  if(format    ==    null    ||    format.equals(       "       "))    {    If(format    ==    null    ||    format.equals(       "       "))    {    	non-compiled	[CE]  	36	None	replace
170	[BUG]  [BUGGY]  if(format!=  null  ||  format.equals( "   "))  {  If(format  ==  null  ||  format.equals( "   "))  {  [CE]  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null  ||  format.equals( "   "))  {  If(format  ==  null  ||  format.equals( "   "))  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null  ||  format.equals( "   "))  {  If(format  ==  null  ||  format.equals( "   "))  {	  if(format    ==    null    ||    format.equals(       "       "))    {    If(format    ==    null    ||    format.equals(       "       "))    {    	non-compiled	[CE]  	36	None	replace
171	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index  +  1);  [CE]  cannot  find  symbol  start  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index  +  1);  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index  +  1);	  int    fmtCount    =    readArgumentIndex(pattern,    index);    	non-compiled	[CE]  cannot  find  symbol  start	20	None	replace
172	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(format,  index);  [CE]  cannot  find  symbol  start  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  int  fmtCount  =  readArgumentIndex(format,  index);  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	int  fmtCount  =  readArgumentIndex(format,  index);	  int    fmtCount    =    readArgumentIndex(pattern,    index);    	non-compiled	[CE]  cannot  find  symbol  start	20	None	replace
173	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pos,  index);  [CE]  cannot  find  symbol  start  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  int  fmtCount  =  readArgumentIndex(pos,  index);  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	int  fmtCount  =  readArgumentIndex(pos,  index);	  int    fmtCount    =    readArgumentIndex(pattern,    index);    	non-compiled	[CE]  cannot  find  symbol  start	20	None	replace
174	[BUG]  [BUGGY]  if(format.equals( " "))  {  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  [CE]  orphaned  default  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format.equals( " "))  {  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format.equals( " "))  {  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }	          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    	non-compiled	[CE]  orphaned  default	62	None	replace
175	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE).append(formatDescription);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE).append(formatDescription);  }  [CE]  orphaned  default  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE).append(formatDescription);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FE).append(formatDescription);    }    if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE).append(formatDescription);  }	  	non-compiled	[CE]  orphaned  default	116	None	add
176	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE).append(formatDescription);  }  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE).append(formatDescription);  }  [CE]  orphaned  default  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE).append(formatDescription);  }  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FE).append(formatDescription);    }    if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE).append(formatDescription);  }	  	non-compiled	[CE]  orphaned  default	116	None	add
177	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE).append(formatDescription);  }  If(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE).append(formatDescription);  }  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE).append(formatDescription);  }  If(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FE).append(formatDescription);    }    If(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE).append(formatDescription);  }	  	non-compiled	[CE]  ';'  expected	116	None	add
178	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(start,  index);  stripCustom.append(END_FE).append(format);  [CE]  orphaned  default  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  int  fmtCount  =  readArgumentIndex(start,  index);  stripCustom.append(END_FE).append(format);  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	int  fmtCount  =  readArgumentIndex(start,  index);  stripCustom.append(END_FE).append(format);	  int    fmtCount    =    readArgumentIndex(start,    next(pos));    stripCustom.append(END_FE).append(format);    	non-compiled	[CE]  orphaned  default	94	None	replace
179	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }  [CE]  orphaned  default  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE).append(formatDescription);    }    if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }	  	non-compiled	[CE]  orphaned  default	57	None	add
180	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }  [CE]  orphaned  default  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE).append(formatDescription);    }    if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }	  	non-compiled	[CE]  orphaned  default	57	None	add
181	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }  If(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }  If(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE).append(formatDescription);    }    If(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }	  	non-compiled	[CE]  ';'  expected	57	None	add
182	[BUG]  [BUGGY]  if(format  ==  null  ||  format.equals(DUMMY_PATTERN))  {  if(format  ==  null  ||  format.equals(DUMMY_PATTERN))  {  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null  ||  format.equals(DUMMY_PATTERN))  {  if(format  ==  null  ||  format.equals(DUMMY_PATTERN))  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format    ==    null    ||    format.equals(DUMMY_PATTERN))    {    if(format  ==  null  ||  format.equals(DUMMY_PATTERN))  {	  	non-compiled	[CE]  ';'  expected	96	None	add
183	[BUG]  [BUGGY]  if(format  ==  null  ||  format.equals(DUMMY_PATTERN))  {  if(format!=  null  ||  format.equals(DUMMY_PATTERN))  {  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null  ||  format.equals(DUMMY_PATTERN))  {  if(format!=  null  ||  format.equals(DUMMY_PATTERN))  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format    ==    null    ||    format.equals(DUMMY_PATTERN))    {    if(format!=  null  ||  format.equals(DUMMY_PATTERN))  {	  	non-compiled	[CE]  ';'  expected	96	None	add
184	[BUG]  [BUGGY]  if(format  ==  null  ||  format.equals(DUMMY_PATTERN))  {  If(format  ==  null  ||  format.equals(DUMMY_PATTERN))  {  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null  ||  format.equals(DUMMY_PATTERN))  {  If(format  ==  null  ||  format.equals(DUMMY_PATTERN))  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format    ==    null    ||    format.equals(DUMMY_PATTERN))    {    If(format  ==  null  ||  format.equals(DUMMY_PATTERN))  {	  	non-compiled	[CE]  ';'  expected	96	None	add
185	[BUG]  [BUGGY]  if(format  ==  null  ||  format.equals(DUMMY_PATTERN))  {  if(format  >=  null  ||  format.equals(DUMMY_PATTERN))  {  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null  ||  format.equals(DUMMY_PATTERN))  {  if(format  >=  null  ||  format.equals(DUMMY_PATTERN))  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format    ==    null    ||    format.equals(DUMMY_PATTERN))    {    if(format  >=  null  ||  format.equals(DUMMY_PATTERN))  {	  	non-compiled	[CE]  ';'  expected	96	None	add
186	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex()  -  1));  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex()  -  1));  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex()  -  1));	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos.getIndex()));    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
187	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(start,  next(pos.getIndex()));  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  int  fmtCount  =  readArgumentIndex(start,  next(pos.getIndex()));  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	int  fmtCount  =  readArgumentIndex(start,  next(pos.getIndex()));	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos.getIndex()));    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
188	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  next(pos.getIndex()));  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  next(pos.getIndex()));  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	int  fmtCount  =  readArgumentIndex(c,  next(pos.getIndex()));	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos.getIndex()));    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
189	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex()  +  1));  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex()  +  1));  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex()  +  1));	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos.getIndex()));    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
190	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }  [CE]  orphaned  default  [FE]    IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }	  if(format!=    null)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE).append(format);    }    	non-compiled	[CE]  orphaned  default	101	None	replace
191	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }  [CE]  orphaned  default  [FE]      IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }	  if(format!=    null)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE).append(format);    }    	non-compiled	[CE]  orphaned  default	101	None	replace
192	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  0;  i++)  {  stripCustom.append(END_FE).append(format);  }  [CE]  orphaned  default  [FE]        IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  0;  i++)  {  stripCustom.append(END_FE).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  for(int  i  =  start;  i  <  0;  i++)  {  stripCustom.append(END_FE).append(format);  }	  if(format!=    null)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE).append(format);    }    	non-compiled	[CE]  orphaned  default	101	None	replace
193	[BUG]  [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  orphaned  default  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format        ==        null)        {        stripCustom.append(DUMMY_PATTERN);        }        if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }	  	non-compiled	[CE]  orphaned  default	7	None	add
194	[BUG]  [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  orphaned  default  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format        ==        null)        {        stripCustom.append(DUMMY_PATTERN);        }        if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }	  	non-compiled	[CE]  orphaned  default	7	None	add
195	[BUG]  [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_  [CE]  ')'  expected  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format        ==        null)        {        stripCustom.append(DUMMY_PATTERN);        }        if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_	  	non-compiled	[CE]  ')'  expected	7	None	add
196	[BUG]  [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format        ==        null)        {        stripCustom.append(DUMMY_PATTERN);        }        if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY	  	non-compiled	[CE]  ')'  expected	7	None	add
197	[BUG]  [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format        ==        null)        {        stripCustom.append(DUMMY_PATTERN);        }        if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }	  	non-compiled	[CE]  orphaned  default	7	None	add
198	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN[i]);  }  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN[i]);  }  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN[i]);  }	  if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(DUMMY_PATTERN[i]);    }    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
199	[BUG]  [BUGGY]  Format[]  found  =  new  Format[fmtCount];  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN[i]);  }  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  Format[]  found  =  new  Format[fmtCount];  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN[i]);  }  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	Format[]  found  =  new  Format[fmtCount];  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN[i]);  }	  if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(DUMMY_PATTERN[i]);    }    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
200	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN[i],  format);  }  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN[i],  format);  }  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN[i],  format);  }	  if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(DUMMY_PATTERN[i]);    }    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
201	[BUG]  [BUGGY]  ||  format!=  null)  {  stripCustom.append(STRING_QUOTE);  }  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  ||  format!=  null)  {  stripCustom.append(STRING_QUOTE);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	||  format!=  null)  {  stripCustom.append(STRING_QUOTE);  }	  ||    format!=    null)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
202	[BUG]  [BUGGY]  ||  format!=  null)  {  stripCustom.append(FIELD_PATTERN);  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  ||  format!=  null)  {  stripCustom.append(FIELD_PATTERN);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	||  format!=  null)  {  stripCustom.append(FIELD_PATTERN);  }	  ||    format!=    null)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
203	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format    ==    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE);    }    if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }	  	non-compiled	[CE]  orphaned  default	103	None	add
204	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format    ==    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE);    }    if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }	  	non-compiled	[CE]  ';'  expected	103	None	add
205	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format    ==    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE);    }    if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }	  	non-compiled	[CE]  orphaned  default	103	None	add
206	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  If(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  If(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format    ==    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE);    }    If(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }	  	non-compiled	[CE]  ';'  expected	103	None	add
207	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  index;  i++)  {  stripCustom.append(END_FMT).append(format);  }  [CE]  orphaned  default  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  index;  i++)  {  stripCustom.append(END_FMT).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  for(int  i  =  0;  i  <  index;  i++)  {  stripCustom.append(END_FMT).append(format);  }	  if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FMT).append(format);    }    	non-compiled	[CE]  orphaned  default	107	None	replace
208	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FIELD_NAME).append(format);  }  [CE]  orphaned  default  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FIELD_NAME).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FIELD_NAME).append(format);  }	  if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FMT).append(format);    }    	non-compiled	[CE]  orphaned  default	107	None	replace
209	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  pos.getIndex();  i++)  {  stripCustom.append(END_FMT).append(format);  }  [CE]  orphaned  default  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  pos.getIndex();  i++)  {  stripCustom.append(END_FMT).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  for(int  i  =  0;  i  <  pos.getIndex();  i++)  {  stripCustom.append(END_FMT).append(format);  }	  if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FMT).append(format);    }    	non-compiled	[CE]  orphaned  default	107	None	replace
210	[BUG]  [BUGGY]          if(format    ==    null)    {    stripCustom.append(END_FE).append(format);    }    if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  [CE]  orphaned  default  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format    ==    null)    {    stripCustom.append(END_FE).append(format);    }    if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format        ==        null)        {        stripCustom.append(END_FE).append(format);        }        if(format    ==    null)    {    stripCustom.append(END_FE).append(format);    }    if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }	  	non-compiled	[CE]  orphaned  default	49	None	add
211	[BUG]  [BUGGY]          if(format    ==    null)    {    stripCustom.append(END_FE).append(format);    }    if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  [CE]  orphaned  default  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format    ==    null)    {    stripCustom.append(END_FE).append(format);    }    if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format        ==        null)        {        stripCustom.append(END_FE).append(format);        }        if(format    ==    null)    {    stripCustom.append(END_FE).append(format);    }    if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }	  	non-compiled	[CE]  orphaned  default	49	None	add
212	[BUG]  [BUGGY]          if(format    ==    null)    {    stripCustom.append(END_FE).append(format);    }    if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  if(format!=  null)  {  stripCustom.append(END_FE).append(format);  }  [CE]  orphaned  default  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format    ==    null)    {    stripCustom.append(END_FE).append(format);    }    if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  if(format!=  null)  {  stripCustom.append(END_FE).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format        ==        null)        {        stripCustom.append(END_FE).append(format);        }        if(format    ==    null)    {    stripCustom.append(END_FE).append(format);    }    if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  if(format!=  null)  {  stripCustom.append(END_FE).append(format);  }	  	non-compiled	[CE]  orphaned  default	49	None	add
213	[BUG]  [BUGGY]          if(format    ==    null)    {    stripCustom.append(END_FE).append(format);    }    if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  if(format!=  null)  {  stripCustom.append(END_FE).append(format);  }  if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  [CE]  orphaned  default  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format    ==    null)    {    stripCustom.append(END_FE).append(format);    }    if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  if(format!=  null)  {  stripCustom.append(END_FE).append(format);  }  if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format        ==        null)        {        stripCustom.append(END_FE).append(format);        }        if(format    ==    null)    {    stripCustom.append(END_FE).append(format);    }    if(format!=  null)  {  stripCustom.append(END_FE).append(format);  }  if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }	  	non-compiled	[CE]  orphaned  default	49	None	add
214	[BUG]  [BUGGY]          if(format    ==    null)    {    stripCustom.append(END_FE).append(format);    }    if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  if(format  ==  null)  {  stripCustom.append(END_FMT).append(format);  }  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format    ==    null)    {    stripCustom.append(END_FE).append(format);    }    if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  if(format  ==  null)  {  stripCustom.append(END_FMT).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format        ==        null)        {        stripCustom.append(END_FE).append(format);        }        if(format    ==    null)    {    stripCustom.append(END_FE).append(format);    }    if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  if(format  ==  null)  {  stripCustom.append(END_FMT).append(format);  }	  	non-compiled	[CE]  orphaned  default	49	None	add
215	[BUG]  [BUGGY]  if(format!=  null  &&  formatDescription.length  >  0)  {  [CE]  orphaned  default  [FE]        IllegalArgumentException      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null  &&  formatDescription.length  >  0)  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null  &&  formatDescription.length  >  0)  {	  if(format!=    null    &&    format.length    >    0)    {    	non-compiled	[CE]  orphaned  default	120	None	replace
216	[BUG]  [BUGGY]  if(format  ==  null  &&  format.length  >  0)  {  [CE]  orphaned  default  [FE]          IllegalArgumentException      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null  &&  format.length  >  0)  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format  ==  null  &&  format.length  >  0)  {	  if(format!=    null    &&    format.length    >    0)    {    	non-compiled	[CE]  orphaned  default	120	None	replace
217	[BUG]  [BUGGY]  if(format!=  null  &&  format.length  >  0  ||  format.charAt(pos.getIndex()  -  1)!=  '-')  {  [CE]  orphaned  default  [FE]            IllegalArgumentException      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null  &&  format.length  >  0  ||  format.charAt(pos.getIndex()  -  1)!=  '-')  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null  &&  format.length  >  0  ||  format.charAt(pos.getIndex()  -  1)!=  '-')  {	  if(format!=    null    &&    format.length    >    0)    {    	non-compiled	[CE]  orphaned  default	120	None	replace
218	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }  [CE]  orphaned  default  [FE]    ComparisonFailure    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE).append(format);    }    if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }	  	non-compiled	[CE]  orphaned  default	28	None	add
219	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }  [CE]  orphaned  default  [FE]      ComparisonFailure    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE).append(format);    }    if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }	  	non-compiled	[CE]  orphaned  default	28	None	add
220	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }  if(format  >=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }  [CE]  orphaned  default  [FE]        ComparisonFailure    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }  if(format  >=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE).append(format);    }    if(format  >=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }	  	non-compiled	[CE]  orphaned  default	28	None	add
221	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }  If(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }  If(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE).append(format);    }    If(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }	  	non-compiled	[CE]  ';'  expected	28	None	add
222	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE);    }    if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }	  	non-compiled	[CE]  orphaned  default	55	None	add
223	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE);    }    if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }	  	non-compiled	[CE]  orphaned  default	55	None	add
224	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }  [CE]  orphaned  default  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE);    }    if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }	  	non-compiled	[CE]  orphaned  default	55	None	add
225	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  If(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  If(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE);    }    If(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }	  	non-compiled	[CE]  ';'  expected	55	None	add
226	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(START_FE).append(formatDescription);  }  [CE]  orphaned  default  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(START_FE).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(START_FE).append(formatDescription);  }	  if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FE).append(formatDescription);    }    	non-compiled	[CE]  orphaned  default	117	None	replace
227	[BUG]  [BUGGY]  if(format  ==  null  ||  format.equals(END_FE))  {  [CE]  orphaned  default  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null  ||  format.equals(END_FE))  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format  ==  null  ||  format.equals(END_FE))  {	  if(format    ==    null    ||    format.equals(DUMMY_PATTERN))    {    	non-compiled	[CE]  orphaned  default	97	None	replace
228	[BUG]  [BUGGY]  if(format!=  null  ||  format.equals(END_FE))  {  [CE]  orphaned  default  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null  ||  format.equals(END_FE))  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null  ||  format.equals(END_FE))  {	  if(format    ==    null    ||    format.equals(DUMMY_PATTERN))    {    	non-compiled	[CE]  orphaned  default	97	None	replace
229	[BUG]  [BUGGY]  if(format  ==  null  ||  format.equals(ESCAPED_QUOTE))  {  [CE]  orphaned  default  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null  ||  format.equals(ESCAPED_QUOTE))  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format  ==  null  ||  format.equals(ESCAPED_QUOTE))  {	  if(format    ==    null    ||    format.equals(DUMMY_PATTERN))    {    	non-compiled	[CE]  orphaned  default	97	None	replace
230	[BUG]  [BUGGY]  if(format!=  null  &&  format.equals(DUMMY_PATTERN))  {  [CE]  orphaned  default  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null  &&  format.equals(DUMMY_PATTERN))  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null  &&  format.equals(DUMMY_PATTERN))  {	  if(format    ==    null    ||    format.equals(DUMMY_PATTERN))    {    	non-compiled	[CE]  orphaned  default	97	None	replace
231	[BUG]  [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  orphaned  default  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format        ==        null)        {        stripCustom.append(DUMMY_PATTERN);        }        if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }	  	non-compiled	[CE]  orphaned  default	9	None	add
232	[BUG]  [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  orphaned  default  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format        ==        null)        {        stripCustom.append(DUMMY_PATTERN);        }        if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }	  	non-compiled	[CE]  orphaned  default	9	None	add
233	[BUG]  [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  orphaned  default  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format        ==        null)        {        stripCustom.append(DUMMY_PATTERN);        }        if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }	  	non-compiled	[CE]  orphaned  default	9	None	add
234	[BUG]  [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  orphaned  default  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format        ==        null)        {        stripCustom.append(DUMMY_PATTERN);        }        if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }	  	non-compiled	[CE]  orphaned  default	9	None	add
235	[BUG]  [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format        ==        null)        {        stripCustom.append(DUMMY_PATTERN);        }        if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_	  	non-compiled	[CE]  ')'  expected	9	None	add
236	[BUG]  [BUGGY]  if(format!=  null  ||  format.equals(   "     "))  {  if(format!=  null  ||  format.equals(   "   "))  {  [CE]  orphaned  default  [FE]    IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null  ||  format.equals(   "     "))  {  if(format!=  null  ||  format.equals(   "   "))  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null    ||    format.equals(   "       "))    {    if(format!=  null  ||  format.equals(   "   "))  {	  	non-compiled	[CE]  orphaned  default	12	None	add
237	[BUG]  [BUGGY]  if(format!=  null  ||  format.equals(   "     "))  {  if(format  ==  null  ||  format.equals(   "   "))  {  [CE]  orphaned  default  [FE]      IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null  ||  format.equals(   "     "))  {  if(format  ==  null  ||  format.equals(   "   "))  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null    ||    format.equals(   "       "))    {    if(format  ==  null  ||  format.equals(   "   "))  {	  	non-compiled	[CE]  orphaned  default	12	None	add
238	[BUG]  [BUGGY]  if(format!=  null  ||  format.equals(   "     "))  {  if(format  >=  null  ||  format.equals(   "   "))  {  [CE]  orphaned  default  [FE]        IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null  ||  format.equals(   "     "))  {  if(format  >=  null  ||  format.equals(   "   "))  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null    ||    format.equals(   "       "))    {    if(format  >=  null  ||  format.equals(   "   "))  {	  	non-compiled	[CE]  orphaned  default	12	None	add
239	[BUG]  [BUGGY]  if(format!=  null  ||  format.equals(   "     "))  {  if(format  >>  null  ||  format.equals(   "   "))  {  [CE]  orphaned  default  [FE]          IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null  ||  format.equals(   "     "))  {  if(format  >>  null  ||  format.equals(   "   "))  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null    ||    format.equals(   "       "))    {    if(format  >>  null  ||  format.equals(   "   "))  {	  	non-compiled	[CE]  orphaned  default	12	None	add
240	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  orphaned  default  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format    ==    null)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }	  	non-compiled	[CE]  orphaned  default	112	None	add
241	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  [CE]  orphaned  default  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format    ==    null)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }	  	non-compiled	[CE]  orphaned  default	112	None	add
242	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  orphaned  default  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format    ==    null)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }	  	non-compiled	[CE]  orphaned  default	112	None	add
243	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  If(format  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  If(format  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format    ==    null)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(DUMMY_PATTERN);    }    If(format  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }	  	non-compiled	[CE]  ';'  expected	112	None	add
244	[BUG]  [BUGGY]          if(format    ==    null)    {    stripCustom.append(END_FE).append(format);    }    if(format!=  null)  {  stripCustom.append(END_FE).append(format);  }  if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  if(format!=  null)  {  stripCustom.append(END_FE).append(format);  }  [CE]  orphaned  default  [FE]    ComparisonFailure    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format    ==    null)    {    stripCustom.append(END_FE).append(format);    }    if(format!=  null)  {  stripCustom.append(END_FE).append(format);  }  if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  if(format!=  null)  {  stripCustom.append(END_FE).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format        ==        null)        {        stripCustom.append(END_FE).append(format);        }        if(format!=    null)    {    stripCustom.append(END_FE).append(format);    }    if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  if(format!=  null)  {  stripCustom.append(END_FE).append(format);  }	  	non-compiled	[CE]  orphaned  default	51	None	add
245	[BUG]  [BUGGY]          if(format    ==    null)    {    stripCustom.append(END_FE).append(format);    }    if(format!=  null)  {  stripCustom.append(END_FE).append(format);  }  if(format!=  null)  {  stripCustom.append(END_FE).append(format);  }  if(format!=  null)  {  stripCustom.append(END_FE).append(format);  }  [CE]  orphaned  default  [FE]      ComparisonFailure    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format    ==    null)    {    stripCustom.append(END_FE).append(format);    }    if(format!=  null)  {  stripCustom.append(END_FE).append(format);  }  if(format!=  null)  {  stripCustom.append(END_FE).append(format);  }  if(format!=  null)  {  stripCustom.append(END_FE).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format        ==        null)        {        stripCustom.append(END_FE).append(format);        }        if(format!=    null)    {    stripCustom.append(END_FE).append(format);    }    if(format!=  null)  {  stripCustom.append(END_FE).append(format);  }  if(format!=  null)  {  stripCustom.append(END_FE).append(format);  }	  	non-compiled	[CE]  orphaned  default	51	None	add
246	[BUG]  [BUGGY]          if(format    ==    null)    {    stripCustom.append(END_FE).append(format);    }    if(format!=  null)  {  stripCustom.append(END_FE).append(format);  }  if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  if(format!=  null)  {  stripCustom.append(END_FMT).append(format);  }  [CE]  orphaned  default  [FE]        ComparisonFailure    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format    ==    null)    {    stripCustom.append(END_FE).append(format);    }    if(format!=  null)  {  stripCustom.append(END_FE).append(format);  }  if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  if(format!=  null)  {  stripCustom.append(END_FMT).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format        ==        null)        {        stripCustom.append(END_FE).append(format);        }        if(format!=    null)    {    stripCustom.append(END_FE).append(format);    }    if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  if(format!=  null)  {  stripCustom.append(END_FMT).append(format);  }	  	non-compiled	[CE]  orphaned  default	51	None	add
247	[BUG]  [BUGGY]          if(format    ==    null)    {    stripCustom.append(END_FE).append(format);    }    if(format!=  null)  {  stripCustom.append(END_FE).append(format);  }  if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  if(format!=  null)  {  stripCustom.append(START_FMT).append(format);  }  [CE]  orphaned  default  [FE]          ComparisonFailure    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format    ==    null)    {    stripCustom.append(END_FE).append(format);    }    if(format!=  null)  {  stripCustom.append(END_FE).append(format);  }  if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  if(format!=  null)  {  stripCustom.append(START_FMT).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format        ==        null)        {        stripCustom.append(END_FE).append(format);        }        if(format!=    null)    {    stripCustom.append(END_FE).append(format);    }    if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  if(format!=  null)  {  stripCustom.append(START_FMT).append(format);  }	  	non-compiled	[CE]  orphaned  default	51	None	add
248	[BUG]  [BUGGY]  if(format.length()  ==  0)  {  if(format!=  null)  {  stripCustom.append(START_FMT).append(format);  }  [CE]  orphaned  default  [FE]              IllegalArgumentException      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format.length()  ==  0)  {  if(format!=  null)  {  stripCustom.append(START_FMT).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format.length()  ==  0)  {  if(format!=  null)  {  stripCustom.append(START_FMT).append(format);  }	          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    If(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    	non-compiled	[CE]  orphaned  default	84	None	replace
249	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE).append(formatDescription);  }  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE).append(formatDescription);  }  [CE]  orphaned  default  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE).append(formatDescription);  }  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format    ==    null)    {    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FE).append(formatDescription);    }    if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE).append(formatDescription);  }	  	non-compiled	[CE]  orphaned  default	118	None	add
250	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE).append(formatDescription);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE).append(formatDescription);  }  [CE]  orphaned  default  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE).append(formatDescription);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format    ==    null)    {    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FE).append(formatDescription);    }    if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE).append(formatDescription);  }	  	non-compiled	[CE]  orphaned  default	118	None	add
251	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE).append(formatDescription);  }  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE).append(formatDescription);  }  [CE]  orphaned  default  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE).append(formatDescription);  }  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format    ==    null)    {    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FE).append(formatDescription);    }    for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE).append(formatDescription);  }	  	non-compiled	[CE]  orphaned  default	118	None	add
252	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE).append(formatDescription);  }  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT).append(formatDescription);  }  [CE]  orphaned  default  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE).append(formatDescription);  }  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format    ==    null)    {    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FE).append(formatDescription);    }    if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT).append(formatDescription);  }	  	non-compiled	[CE]  orphaned  default	118	None	add
253	[BUG]  [BUGGY]  ||  format!=  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  ||  format!=  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	||  format!=  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }	  if(format!=    null)    {    stripCustom.append(START_FMT).append(formatDescription);    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
254	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FE).append(format);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FE).append(format);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(START_FE).append(format);    }    if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
255	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FE).append(format);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FE).append(format);  }  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FE).append(format);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FE).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(START_FE).append(format);    }    if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FE).append(format);  }	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
256	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FE).append(format);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(FIELD_FMT).append(format);  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FE).append(format);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(FIELD_FMT).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(START_FE).append(format);    }    if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(FIELD_FMT).append(format);  }	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
257	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FE).append(format);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(STRING_FE).append(format);  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FE).append(format);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(STRING_FE).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(START_FE).append(format);    }    if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(STRING_FE).append(format);  }	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
258	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FE).append(format);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FMT).append(format);  }  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FE).append(format);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FMT).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(START_FE).append(format);    }    if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FMT).append(format);  }	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
259	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index  +  1);  stripCustom.append(END_FE).append(format);  [CE]  orphaned  default  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index  +  1);  stripCustom.append(END_FE).append(format);  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index  +  1);  stripCustom.append(END_FE).append(format);	  int    fmtCount    =    readArgumentIndex(pattern,    index);    stripCustom.append(END_FE).append(format);    	non-compiled	[CE]  orphaned  default	21	None	replace
260	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start);  stripCustom.append(END_FE).append(format);  [CE]  orphaned  default  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start);  stripCustom.append(END_FE).append(format);  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start);  stripCustom.append(END_FE).append(format);	  int    fmtCount    =    readArgumentIndex(pattern,    index);    stripCustom.append(END_FE).append(format);    	non-compiled	[CE]  orphaned  default	21	None	replace
261	[BUG]  [BUGGY]  if(format  ==  null  ||  formatDescription.length()  ==  0)  {  if(format  ==  null  ||  formatDescription.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null  ||  formatDescription.length()  ==  0)  {  if(format  ==  null  ||  formatDescription.length()  ==  0)  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format    ==    null    ||    formatDescription.length()    ==    0)    {    if(format  ==  null  ||  formatDescription.length()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	38	None	add
262	[BUG]  [BUGGY]  if(format  ==  null  ||  formatDescription.length()  ==  0)  {  if(format!=  null  ||  formatDescription.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null  ||  formatDescription.length()  ==  0)  {  if(format!=  null  ||  formatDescription.length()  ==  0)  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format    ==    null    ||    formatDescription.length()    ==    0)    {    if(format!=  null  ||  formatDescription.length()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	38	None	add
263	[BUG]  [BUGGY]  if(format  ==  null  ||  formatDescription.length()  ==  0)  {  if(format  ==  null  ||  formatDescription.length()!=  0)  {  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null  ||  formatDescription.length()  ==  0)  {  if(format  ==  null  ||  formatDescription.length()!=  0)  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format    ==    null    ||    formatDescription.length()    ==    0)    {    if(format  ==  null  ||  formatDescription.length()!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	38	None	add
264	[BUG]  [BUGGY]  if(format  ==  null  ||  formatDescription.length()  ==  0)  {  If(format  ==  null  ||  formatDescription.length()  ==  0)  {  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null  ||  formatDescription.length()  ==  0)  {  If(format  ==  null  ||  formatDescription.length()  ==  0)  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format    ==    null    ||    formatDescription.length()    ==    0)    {    If(format  ==  null  ||  formatDescription.length()  ==  0)  {	  	non-compiled	[CE]  ';'  expected	38	None	add
265	[BUG]  [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(formatDescription);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(formatDescription);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format        ==        null)        {        stripCustom.append(DUMMY_PATTERN).append(formatDescription);        }        if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(formatDescription);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }	  	non-compiled	[CE]  illegal  start  of  expression	69	None	add
266	[BUG]  [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(formatDescription);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  [CE]  illegal  start  of  expression  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(formatDescription);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format        ==        null)        {        stripCustom.append(DUMMY_PATTERN).append(formatDescription);        }        if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(formatDescription);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }	  	non-compiled	[CE]  illegal  start  of  expression	69	None	add
267	[BUG]  [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(formatDescription);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format  ==  null)  {  stripCustom.append(END_FE).append(formatDescription);  }  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(formatDescription);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format  ==  null)  {  stripCustom.append(END_FE).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format        ==        null)        {        stripCustom.append(DUMMY_PATTERN).append(formatDescription);        }        if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(formatDescription);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format  ==  null)  {  stripCustom.append(END_FE).append(formatDescription);  }	  	non-compiled	[CE]  illegal  start  of  expression	69	None	add
268	[BUG]  [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(formatDescription);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(formatDescription);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format        ==        null)        {        stripCustom.append(DUMMY_PATTERN).append(formatDescription);        }        if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(formatDescription);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }	  	non-compiled	[CE]  illegal  start  of  expression	69	None	add
269	[BUG]  [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(formatDescription);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_FMT).append(formatDescription);  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(formatDescription);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_FMT).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format        ==        null)        {        stripCustom.append(DUMMY_PATTERN).append(formatDescription);        }        if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(formatDescription);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_FMT).append(formatDescription);  }	  	non-compiled	[CE]  illegal  start  of  expression	69	None	add
270	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format    ==    null)    {    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FE);    }    if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }	  	non-compiled	[CE]  illegal  start  of  expression	89	None	add
271	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE).append(formatDescription);  }  [CE]  illegal  start  of  expression  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format    ==    null)    {    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FE);    }    if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE).append(formatDescription);  }	  	non-compiled	[CE]  illegal  start  of  expression	89	None	add
272	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format    ==    null)    {    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FE);    }    if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }	  	non-compiled	[CE]  illegal  start  of  expression	89	None	add
273	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  If(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  If(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format    ==    null)    {    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FE);    }    If(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }	  	non-compiled	[CE]  ';'  expected	89	None	add
274	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FE).append(format);  }  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FE).append(format);  }  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format    ==    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(START_FE).append(format);    }    if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }	  	non-compiled	[CE]  illegal  start  of  expression	32	None	add
275	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FE).append(format);  }  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FE).append(format);  }  [CE]  illegal  start  of  expression  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FE).append(format);  }  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FE).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format    ==    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(START_FE).append(format);    }    if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FE).append(format);  }	  	non-compiled	[CE]  illegal  start  of  expression	32	None	add
276	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FE).append(format);  }  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(FIELD_FMT).append(format);  }  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FE).append(format);  }  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(FIELD_FMT).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format    ==    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(START_FE).append(format);    }    if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(FIELD_FMT).append(format);  }	  	non-compiled	[CE]  illegal  start  of  expression	32	None	add
277	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FE).append(format);  }  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(STRING_FE).append(format);  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FE).append(format);  }  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(STRING_FE).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format    ==    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(START_FE).append(format);    }    if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(STRING_FE).append(format);  }	  	non-compiled	[CE]  illegal  start  of  expression	32	None	add
278	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FE).append(format);  }  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(FIELD_FE).append(format);  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FE).append(format);  }  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(FIELD_FE).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format    ==    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(START_FE).append(format);    }    if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(FIELD_FE).append(format);  }	  	non-compiled	[CE]  illegal  start  of  expression	32	None	add
279	[BUG]  [BUGGY]  if(formatDescription!=  null  ||  format.length()  ==  0)  {  [CE]  orphaned  default  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(formatDescription!=  null  ||  format.length()  ==  0)  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(formatDescription!=  null  ||  format.length()  ==  0)  {	  if(formatDescription    ==    null    ||    format.length()    ==    0)    {    	non-compiled	[CE]  orphaned  default	98	None	replace
280	[BUG]  [BUGGY]  if(formatDescription  ==  null  ||  format.length()!=  0)  {  [CE]  orphaned  default  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(formatDescription  ==  null  ||  format.length()!=  0)  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(formatDescription  ==  null  ||  format.length()!=  0)  {	  if(formatDescription    ==    null    ||    format.length()    ==    0)    {    	non-compiled	[CE]  orphaned  default	98	None	replace
281	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]    IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }	  if(format!=    null)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  orphaned  default	122	None	replace
282	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  0;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  orphaned  default  [FE]      IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  0;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  for(int  i  =  start;  i  <  0;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }	  if(format!=    null)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  orphaned  default	122	None	replace
283	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  index;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  orphaned  default  [FE]        IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  index;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  for(int  i  =  start;  i  <  index;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }	  if(format!=    null)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  orphaned  default	122	None	replace
284	[BUG]  [BUGGY]  if(format!=  null  &&  format.equals(   "     "))  {  if(format!=  null  &&  format.equals(   "   "))  {  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null  &&  format.equals(   "     "))  {  if(format!=  null  &&  format.equals(   "   "))  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null    &&    format.equals(   "       "))    {    if(format!=  null  &&  format.equals(   "   "))  {	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
285	[BUG]  [BUGGY]  if(format!=  null  &&  format.equals(   "     "))  {  if(format  ==  null  &&  format.equals(   "   "))  {  [CE]  illegal  start  of  expression  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null  &&  format.equals(   "     "))  {  if(format  ==  null  &&  format.equals(   "   "))  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null    &&    format.equals(   "       "))    {    if(format  ==  null  &&  format.equals(   "   "))  {	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
286	[BUG]  [BUGGY]  if(format!=  null  &&  format.equals(   "     "))  {  if(format  >=  null  &&  format.equals(   "   "))  {  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null  &&  format.equals(   "     "))  {  if(format  >=  null  &&  format.equals(   "   "))  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null    &&    format.equals(   "       "))    {    if(format  >=  null  &&  format.equals(   "   "))  {	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
287	[BUG]  [BUGGY]  if(format!=  null  &&  format.equals(   "     "))  {  If(format!=  null  &&  format.equals(   "   "))  {  [CE]  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null  &&  format.equals(   "     "))  {  If(format!=  null  &&  format.equals(   "   "))  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null    &&    format.equals(   "       "))    {    If(format!=  null  &&  format.equals(   "   "))  {	  	non-compiled	[CE]  	14	None	add
288	[BUG]  [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format!=        null)        {        stripCustom.append(DUMMY_PATTERN).append(format);        }        if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
289	[BUG]  [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(END_FE).append(format);  }  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(END_FE).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format!=        null)        {        stripCustom.append(DUMMY_PATTERN).append(format);        }        if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(END_FE).append(format);  }	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
290	[BUG]  [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format!=        null)        {        stripCustom.append(DUMMY_PATTERN).append(format);        }        if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
291	[BUG]  [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format!=        null)        {        stripCustom.append(DUMMY_PATTERN).append(format);        }        if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
292	[BUG]  [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format!=        null)        {        stripCustom.append(DUMMY_PATTERN).append(format);        }        if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
293	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  [CE]  orphaned  default  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }	          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(formatDescription);    }    for(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(formatDescription);    }    	non-compiled	[CE]  orphaned  default	106	None	replace
294	[BUG]  [BUGGY]  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  else  {  foundFormats.add(format);  }  [CE]  orphaned  default  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  else  {  foundFormats.add(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  else  {  foundFormats.add(format);  }	          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(formatDescription);    }    for(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(formatDescription);    }    	non-compiled	[CE]  orphaned  default	106	None	replace
295	[BUG]  [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(formatDescription);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format  ==  null)  {  stripCustom.append  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(formatDescription);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format  ==  null)  {  stripCustom.append  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format        ==        null)        {        stripCustom.append(DUMMY_PATTERN).append(formatDescription);        }        if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(formatDescription);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format  ==  null)  {  stripCustom.append	  	non-compiled	[CE]  not  a  statement	69	None	add
296	[BUG]  [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(formatDescription);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format  ==  null)  {  stripCustom  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(formatDescription);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format  ==  null)  {  stripCustom  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format        ==        null)        {        stripCustom.append(DUMMY_PATTERN).append(formatDescription);        }        if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(formatDescription);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format  ==  null)  {  stripCustom	  	non-compiled	[CE]  not  a  statement	69	None	add
297	[BUG]  [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(formatDescription);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format  ==  null)  {  stripCustom.append(  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(formatDescription);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format  ==  null)  {  stripCustom.append(  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format        ==        null)        {        stripCustom.append(DUMMY_PATTERN).append(formatDescription);        }        if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(formatDescription);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format  ==  null)  {  stripCustom.append(	  	non-compiled	[CE]  illegal  start  of  expression	69	None	add
298	[BUG]  [BUGGY]  Format.append(DUMMY_PATTERN).append(format);  [CE]  orphaned  default  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  Format.append(DUMMY_PATTERN).append(format);  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	Format.append(DUMMY_PATTERN).append(format);	  if(format!=    null)    {    stripCustom.append(END_FE).append(format);    }    	non-compiled	[CE]  orphaned  default	74	None	replace
299	[BUG]  [BUGGY]  ||  format  ==  null)  {  stripCustom.append(ESCAPED_QUOTE);  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  ||  format  ==  null)  {  stripCustom.append(ESCAPED_QUOTE);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	||  format  ==  null)  {  stripCustom.append(ESCAPED_QUOTE);  }	  ||    format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
300	[BUG]  [BUGGY]  ||  format!=  null)  {  stripCustom.append(ESCAPED_QUOTE);  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  ||  format!=  null)  {  stripCustom.append(ESCAPED_QUOTE);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	||  format!=  null)  {  stripCustom.append(ESCAPED_QUOTE);  }	  ||    format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
301	[BUG]  [BUGGY]  ||  format  ==  null)  {  stripCustom.append(ESCAPED_QUOTE).append(formatDescription);  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  ||  format  ==  null)  {  stripCustom.append(ESCAPED_QUOTE).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	||  format  ==  null)  {  stripCustom.append(ESCAPED_QUOTE).append(formatDescription);  }	  ||    format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
302	[BUG]  [BUGGY]  ||  format!=  null)  {  stripCustom.append(ESCAPED_QUOTE).append(formatDescription);  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  ||  format!=  null)  {  stripCustom.append(ESCAPED_QUOTE).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	||  format!=  null)  {  stripCustom.append(ESCAPED_QUOTE).append(formatDescription);  }	  ||    format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
303	[BUG]  [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATT  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATT  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format!=        null)        {        stripCustom.append(DUMMY_PATTERN);        }        if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATT	  	non-compiled	[CE]  ';'  expected	3	None	add
304	[BUG]  [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(END_FE);  }  [CE]  illegal  start  of  expression  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(END_FE);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format!=        null)        {        stripCustom.append(DUMMY_PATTERN);        }        if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(END_FE);  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
305	[BUG]  [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format!=        null)        {        stripCustom.append(DUMMY_PATTERN);        }        if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY	  	non-compiled	[CE]  ';'  expected	3	None	add
306	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start(pos));  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start(pos));  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start(pos));	  int    fmtCount    =    readArgumentIndex(pattern,    end(pos));    	non-compiled	[CE]  orphaned  default	109	None	replace
307	[BUG]  [BUGGY]  if(format!=  null)  {  stripCustom.append(FIELD_PATTERN);  }  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  stripCustom.append(FIELD_PATTERN);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  stripCustom.append(FIELD_PATTERN);  }	          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    If(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  orphaned  default	11	None	replace
308	[BUG]  [BUGGY]  if(format!=  null)  {  stripCustom.append(QUOTE);  }  [CE]  orphaned  default  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  stripCustom.append(QUOTE);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  stripCustom.append(QUOTE);  }	  if(format    >=    null)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  orphaned  default	91	None	replace
309	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FMT).append(format);  }  [CE]  orphaned  default  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FMT).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FMT).append(format);  }	  if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FMT).append(format);    }    	non-compiled	[CE]  orphaned  default	107	None	replace
310	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  start;  i++)  {  stripCustom.append(END_FMT).append(format);  }  [CE]  orphaned  default  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  start;  i++)  {  stripCustom.append(END_FMT).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  for(int  i  =  0;  i  <  start;  i++)  {  stripCustom.append(END_FMT).append(format);  }	  if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FMT).append(format);    }    	non-compiled	[CE]  orphaned  default	107	None	replace
311	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FIELD).append(format);  }  [CE]  orphaned  default  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FIELD).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FIELD).append(format);  }	  if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FMT).append(format);    }    	non-compiled	[CE]  orphaned  default	107	None	replace
312	[BUG]  [BUGGY]  if(format!=  null)  {  stripCustom.append(START_FMT).append(format);  }  [CE]  orphaned  default  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  stripCustom.append(START_FMT).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  stripCustom.append(START_FMT).append(format);  }	          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    	non-compiled	[CE]  orphaned  default	62	None	replace
313	[BUG]  [BUGGY]  if(format!=  null)  {  stripCustom.append(END_FMT).append(format);  }  [CE]  orphaned  default  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  stripCustom.append(END_FMT).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  stripCustom.append(END_FMT).append(format);  }	          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    	non-compiled	[CE]  orphaned  default	62	None	replace
314	[BUG]  [BUGGY]  if(format  ==  null)  {  stripCustom.append(START_FMT).append(format);  }  [CE]  orphaned  default  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null)  {  stripCustom.append(START_FMT).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format  ==  null)  {  stripCustom.append(START_FMT).append(format);  }	          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    	non-compiled	[CE]  orphaned  default	62	None	replace
315	[BUG]  [BUGGY]  stripCustom.append(ESCAPED_QUOTE).append(format);  [CE]  orphaned  default  [FE]            IllegalArgumentException      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  stripCustom.append(ESCAPED_QUOTE).append(format);  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	stripCustom.append(ESCAPED_QUOTE).append(format);	          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format    >=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    	non-compiled	[CE]  orphaned  default	83	None	replace
316	[BUG]  [BUGGY]  if(format  ==  null)  {  stripCustom.append(QUOTE);  }  [CE]  orphaned  default  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null)  {  stripCustom.append(QUOTE);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format  ==  null)  {  stripCustom.append(QUOTE);  }	  if(format    ==    null)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  orphaned  default	93	None	replace
317	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FMT).append(formatDescription);  }  [CE]  orphaned  default  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FMT).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE).append(formatDescription);    }    if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FMT).append(formatDescription);  }	  	non-compiled	[CE]  orphaned  default	57	None	add
318	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }  [CE]  orphaned  default  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE).append(formatDescription);    }    for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }	  	non-compiled	[CE]  orphaned  default	57	None	add
319	[BUG]  [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(  [CE]  ')'  expected  [FE]    IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format!=        null)        {        stripCustom.append(DUMMY_PATTERN).append(format);        }        if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(	  	non-compiled	[CE]  ')'  expected	81	None	add
320	[BUG]  [BUGGY]  if(format  ==  null)  {  stripCustom.append(END_FMT).append(formatDescription);  }  [CE]  orphaned  default  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null)  {  stripCustom.append(END_FMT).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format  ==  null)  {  stripCustom.append(END_FMT).append(formatDescription);  }	          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(formatDescription);    }    if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(formatDescription);    }    	non-compiled	[CE]  orphaned  default	70	None	replace
321	[BUG]  [BUGGY]  if(format  ==  null  ||  format.equals(DUMMY_PATTERN))  {  for(format  ==  null  ||  format.equals(DUMMY_PATTERN))  {  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null  ||  format.equals(DUMMY_PATTERN))  {  for(format  ==  null  ||  format.equals(DUMMY_PATTERN))  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format    ==    null    ||    format.equals(DUMMY_PATTERN))    {    for(format  ==  null  ||  format.equals(DUMMY_PATTERN))  {	  	non-compiled	[CE]  not  a  statement	96	None	add
322	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  i  =  start;  i  <  index;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  orphaned  default  [FE]    IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null)  {  for(int  i  =  start;  i  <  index;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format  ==  null)  {  for(int  i  =  start;  i  <  index;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }	  if(format!=    null)    {    for(int    i    =    start;    i    <    index;    i++)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  orphaned  default	111	None	replace
323	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  start);  stripCustom.append(END_FE).append(format);  [CE]  orphaned  default  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  start);  stripCustom.append(END_FE).append(format);  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  start);  stripCustom.append(END_FE).append(format);	  char    fmtCount    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(format);    	non-compiled	[CE]  orphaned  default	22	None	replace
324	[BUG]  [BUGGY]  if(format!=  null  ||  format.equals(   "     "))  {  If(format!=  null  ||  format.equals(   "   "))  {  [CE]  [FE]    IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null  ||  format.equals(   "     "))  {  If(format!=  null  ||  format.equals(   "   "))  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null    ||    format.equals(   "       "))    {    If(format!=  null  ||  format.equals(   "   "))  {	  	non-compiled	[CE]  	12	None	add
325	[BUG]  [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATT  [CE]  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATT  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format        ==        null)        {        stripCustom.append(DUMMY_PATTERN);        }        if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATT	  	non-compiled	[CE]  	7	None	add
326	[BUG]  [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN  [CE]  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format        ==        null)        {        stripCustom.append(DUMMY_PATTERN);        }        if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN	  	non-compiled	[CE]  	7	None	add
327	[BUG]  [BUGGY]  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  stripCustom.append(END_FE).append(formatDescription);  }  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  stripCustom.append(END_FE).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  stripCustom.append(END_FE).append(formatDescription);  }	          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    for(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  not  a  statement	105	None	replace
328	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  start;  i++)  {  stripCustom.append(END_FE);  }  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  start;  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  for(int  i  =  0;  i  <  start;  i++)  {  stripCustom.append(END_FE);  }	  if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  not  a  statement	56	None	replace
329	[BUG]  [BUGGY]  if(format!=  null)  {  int  fmtCount  =  readArgumentIndex(start,  next(pos));  stripCustom.append(END_FE).append(format);  }  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  int  fmtCount  =  readArgumentIndex(start,  next(pos));  stripCustom.append(END_FE).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  int  fmtCount  =  readArgumentIndex(start,  next(pos));  stripCustom.append(END_FE).append(format);  }	  int    fmtCount    =    readArgumentIndex(start,    next(pos));    stripCustom.append(END_FE).append(format);    	non-compiled	[CE]  not  a  statement	94	None	replace
330	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  if(format  >=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [CE]  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  if(format  >=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FE);    }    if(format  >=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }	  	non-compiled	[CE]  	87	None	add
331	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [CE]  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FE);    }    for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }	  	non-compiled	[CE]  	87	None	add
332	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  pos.getIndex();  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  pos.getIndex();  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  for(int  i  =  0;  i  <  pos.getIndex();  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }	  if(format    ==    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE).append(formatDescription);    }    	non-compiled	[CE]  not  a  statement	131	None	replace
333	[BUG]  [BUGGY]  if(formatDescription  ==  null  ||  format.trim().length()  ==  0)  {  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(formatDescription  ==  null  ||  format.trim().length()  ==  0)  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(formatDescription  ==  null  ||  format.trim().length()  ==  0)  {	  if(formatDescription    ==    null    ||    format.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	98	None	replace
334	[BUG]  [BUGGY]  if(format!=  null  &&  format.equals( "n "))  {  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null  &&  format.equals( "n "))  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null  &&  format.equals( "n "))  {	  if(format!=    null    &&    format.equals(   "       "))    {    	non-compiled	[CE]  not  a  statement	15	None	replace
335	[BUG]  [BUGGY]          if(format    ==    null)    {    stripCustom.append(END_FE).append(format);    }    if(format!=  null)  {  stripCustom.append(END_FE).append(format);  }  if(format  ==  null)  {  stripCustom.append(END_FMT).append(format);  }  if(format!=  null)  {  stripCustom.append(END_FE).append(format);  }  [CE]  not  a  statement  [FE]    ComparisonFailure    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format    ==    null)    {    stripCustom.append(END_FE).append(format);    }    if(format!=  null)  {  stripCustom.append(END_FE).append(format);  }  if(format  ==  null)  {  stripCustom.append(END_FMT).append(format);  }  if(format!=  null)  {  stripCustom.append(END_FE).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format        ==        null)        {        stripCustom.append(END_FE).append(format);        }        if(format!=    null)    {    stripCustom.append(END_FE).append(format);    }    if(format  ==  null)  {  stripCustom.append(END_FMT).append(format);  }  if(format!=  null)  {  stripCustom.append(END_FE).append(format);  }	  	non-compiled	[CE]  not  a  statement	51	None	add
336	[BUG]  [BUGGY]          if(format    ==    null)    {    stripCustom.append(END_FE).append(format);    }    if(format!=  null)  {  stripCustom.append(END_FE).append(format);  }  if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  if(format  >=  null)  {  stripCustom.append(END_FE).append(format);  }  [CE]  not  a  statement  [FE]      ComparisonFailure    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format    ==    null)    {    stripCustom.append(END_FE).append(format);    }    if(format!=  null)  {  stripCustom.append(END_FE).append(format);  }  if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  if(format  >=  null)  {  stripCustom.append(END_FE).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format        ==        null)        {        stripCustom.append(END_FE).append(format);        }        if(format!=    null)    {    stripCustom.append(END_FE).append(format);    }    if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  if(format  >=  null)  {  stripCustom.append(END_FE).append(format);  }	  	non-compiled	[CE]  not  a  statement	51	None	add
337	[BUG]  [BUGGY]  Format.append(ESCAPED_QUOTE).append(formatDescription);  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  Format.append(ESCAPED_QUOTE).append(formatDescription);  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	Format.append(ESCAPED_QUOTE).append(formatDescription);	  if(format    >=    null)    {    stripCustom.append(DUMMY_PATTERN).append(formatDescription);    }    	non-compiled	[CE]  not  a  statement	67	None	replace
338	[BUG]  [BUGGY]  if(format  >=  null)  {  [CE]  not  a  statement  [FE]            IllegalArgumentException      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  >=  null)  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format  >=  null)  {	  if(format!=    null)    {    if(format    >=    null)    {    	non-compiled	[CE]  not  a  statement	26	None	replace
339	[BUG]  [BUGGY]  if(format.length()  ==  0)  {  [CE]  not  a  statement  [FE]              IllegalArgumentException      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format.length()  ==  0)  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format.length()  ==  0)  {	  if(format!=    null)    {    if(format    >=    null)    {    	non-compiled	[CE]  not  a  statement	26	None	replace
340	[BUG]  [BUGGY]  if(format!=  null  ||  format.equals(DUMMY_PATTERN))  {  If(format  ==  null  ||  format.equals(DUMMY_PATTERN))  {  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null  ||  format.equals(DUMMY_PATTERN))  {  If(format  ==  null  ||  format.equals(DUMMY_PATTERN))  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null  ||  format.equals(DUMMY_PATTERN))  {  If(format  ==  null  ||  format.equals(DUMMY_PATTERN))  {	  if(format    ==    null    ||    format.equals(       "       "))    {    If(format    ==    null    ||    format.equals(       "       "))    {    	non-compiled	[CE]  ';'  expected	36	None	replace
341	[BUG]  [BUGGY]  if(format  ==  null  ||  format.equals(DUMMY_PATTERN))  {  If(format!=  null  ||  format.equals(DUMMY_PATTERN))  {  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null  ||  format.equals(DUMMY_PATTERN))  {  If(format!=  null  ||  format.equals(DUMMY_PATTERN))  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format  ==  null  ||  format.equals(DUMMY_PATTERN))  {  If(format!=  null  ||  format.equals(DUMMY_PATTERN))  {	  if(format    ==    null    ||    format.equals(       "       "))    {    If(format    ==    null    ||    format.equals(       "       "))    {    	non-compiled	[CE]  ';'  expected	36	None	replace
342	[BUG]  [BUGGY]  if(format!=  null)  {  stripCustom.append(STRING_FMT).append(format);  }  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  stripCustom.append(STRING_FMT).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  stripCustom.append(STRING_FMT).append(format);  }	          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    	non-compiled	[CE]  not  a  statement	64	None	replace
343	[BUG]  [BUGGY]  ||  format!=  null)  {  stripCustom.append(ESCAPED_QUOTE).append(format);  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  ||  format!=  null)  {  stripCustom.append(ESCAPED_QUOTE).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	||  format!=  null)  {  stripCustom.append(ESCAPED_QUOTE).append(format);  }	  ||    format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
344	[BUG]  [BUGGY]  ||  format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  ||  format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	||  format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }	  ||    format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
345	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  start;  ++i)  {  stripCustom.append(END_FE);  }  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  start;  ++i)  {  stripCustom.append(END_FE);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  for(int  i  =  0;  i  <  start;  ++i)  {  stripCustom.append(END_FE);  }	  if(format    ==    null)    {    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  not  a  statement	90	None	replace
346	[BUG]  [BUGGY]  if(format  ==  null  ||  formatDescription.length()  ==  0)  {  if(format  {  null  ||  formatDescription.length()  ==  0)  {  [CE]  ')'  expected  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null  ||  formatDescription.length()  ==  0)  {  if(format  {  null  ||  formatDescription.length()  ==  0)  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format    ==    null    ||    formatDescription.length()    ==    0)    {    if(format  {  null  ||  formatDescription.length()  ==  0)  {	  	non-compiled	[CE]  ')'  expected	38	None	add
347	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  If(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  If(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    stripCustom.append(DUMMY_PATTERN);    }    If(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }	  	non-compiled	[CE]  ';'  expected	85	None	add
348	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  >>  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  >>  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  >>  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }	  	non-compiled	[CE]  illegal  start  of  expression	85	None	add
349	[BUG]  [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format        ==        null)        {        stripCustom.append(DUMMY_PATTERN).append(format);        }        if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
350	[BUG]  [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format        ==        null)        {        stripCustom.append(DUMMY_PATTERN).append(format);        }        if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append	  	non-compiled	[CE]  not  a  statement	61	None	add
351	[BUG]  [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format        ==        null)        {        stripCustom.append(DUMMY_PATTERN).append(format);        }        if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom	  	non-compiled	[CE]  not  a  statement	61	None	add
352	[BUG]  [BUGGY]  if(format!=  null)  {  stripCustom.append(QUOTE).append(format);  }  [CE]  not  a  statement  [FE]    ComparisonFailure    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  stripCustom.append(QUOTE).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  stripCustom.append(QUOTE).append(format);  }	          if(format    ==    null)    {    stripCustom.append(END_FE).append(format);    }    if(format!=    null)    {    stripCustom.append(END_FE).append(format);    }    	non-compiled	[CE]  not  a  statement	52	None	replace
353	[BUG]  [BUGGY]  if(format  ==  null)  {  stripCustom.append(QUOTE).append(format);  }  [CE]  not  a  statement  [FE]      ComparisonFailure    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null)  {  stripCustom.append(QUOTE).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format  ==  null)  {  stripCustom.append(QUOTE).append(format);  }	          if(format    ==    null)    {    stripCustom.append(END_FE).append(format);    }    if(format!=    null)    {    stripCustom.append(END_FE).append(format);    }    	non-compiled	[CE]  not  a  statement	52	None	replace
354	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE).append(formatDescription);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT).append(formatDescription);  }  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE).append(formatDescription);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FE).append(formatDescription);    }    if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT).append(formatDescription);  }	  	non-compiled	[CE]  not  a  statement	116	None	add
355	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE).append(formatDescription);  }  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE).append(formatDescription);  }  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE).append(formatDescription);  }  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FE).append(formatDescription);    }    for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE).append(formatDescription);  }	  	non-compiled	[CE]  not  a  statement	116	None	add
356	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format    ==    null)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(DUMMY_PATTERN);    }    for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }	  	non-compiled	[CE]  not  a  statement	112	None	add
357	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_FATTERN);  }  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_FATTERN);  }  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format    ==    null)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_FATTERN);  }	  	non-compiled	[CE]  not  a  statement	112	None	add
358	[BUG]  [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format!=        null)        {        stripCustom.append(DUMMY_PATTERN).append(format);        }        if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append	  	non-compiled	[CE]  not  a  statement	79	None	add
359	[BUG]  [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DATE_FMT).append(format);  }  [CE]  not  a  statement  [FE]      IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DATE_FMT).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format!=        null)        {        stripCustom.append(DUMMY_PATTERN).append(format);        }        if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DATE_FMT).append(format);  }	  	non-compiled	[CE]  not  a  statement	79	None	add
360	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }	  if(format!=    null)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  not  a  statement	122	None	replace
361	[BUG]  [BUGGY]  if(format.equals( " "))  {  if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format.equals( " "))  {  if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format.equals( " "))  {  if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }	          if(format    ==    null)    {    stripCustom.append(END_FE).append(format);    }    if(format    ==    null)    {    stripCustom.append(END_FE).append(format);    }    	non-compiled	[CE]  not  a  statement	50	None	replace
362	[BUG]  [BUGGY]  if(format!=  null)  {  stripCustom.append(END_FE).append(format);  }  else  {  stripCustom.append(END_FE).append(format);  }  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  stripCustom.append(END_FE).append(format);  }  else  {  stripCustom.append(END_FE).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  stripCustom.append(END_FE).append(format);  }  else  {  stripCustom.append(END_FE).append(format);  }	          if(format    ==    null)    {    stripCustom.append(END_FE).append(format);    }    if(format    ==    null)    {    stripCustom.append(END_FE).append(format);    }    	non-compiled	[CE]  not  a  statement	50	None	replace
363	[BUG]  [BUGGY]  if(format!=  null)  {  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(DUMMY_PATTERN).append(format);  }  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(DUMMY_PATTERN).append(format);  }  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(DUMMY_PATTERN).append(format);  }	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(DUMMY_PATTERN).append(format);    	non-compiled	[CE]  not  a  statement	123	None	replace
364	[BUG]  [BUGGY]  if(format  ==  null)  {  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(DUMMY_PATTERN).append(format);  }  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null)  {  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(DUMMY_PATTERN).append(format);  }  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format  ==  null)  {  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(DUMMY_PATTERN).append(format);  }	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(DUMMY_PATTERN).append(format);    	non-compiled	[CE]  not  a  statement	123	None	replace
365	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(QUOTE).append(index);  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(QUOTE).append(index);  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(QUOTE).append(index);	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  not  a  statement	23	None	replace
366	[BUG]  [BUGGY]  if(format!=  null)  {  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  not  a  statement	23	None	replace
367	[BUG]  [BUGGY]  if(format  ==  null)  {  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null)  {  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format  ==  null)  {  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  not  a  statement	23	None	replace
368	[BUG]  [BUGGY]  if(format!=  null)  {  stripCustom.append(QUOTE).append(formatDescription);  }  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  stripCustom.append(QUOTE).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  stripCustom.append(QUOTE).append(formatDescription);  }	  if(format    ==    null)    {    stripCustom.append(START_FMT).append(formatDescription);    }    	non-compiled	[CE]  not  a  statement	127	None	replace
369	[BUG]  [BUGGY]  if(format!=  null)  {  int  fmtCount  =  readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(format);  }  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  int  fmtCount  =  readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  int  fmtCount  =  readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(format);  }	  int    fmtCount    =    readArgumentIndex(pattern,    index);    stripCustom.append(END_FE).append(format);    	non-compiled	[CE]  not  a  statement	21	None	replace
370	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index);  stripCustom.append(QUOTE).append(format);  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index);  stripCustom.append(QUOTE).append(format);  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index);  stripCustom.append(QUOTE).append(format);	  int    fmtCount    =    readArgumentIndex(pattern,    index);    stripCustom.append(END_FE).append(format);    	non-compiled	[CE]  not  a  statement	21	None	replace
371	[BUG]  [BUGGY]  if(format  ==  null)  {  int  fmtCount  =  readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(format);  }  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null)  {  int  fmtCount  =  readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format  ==  null)  {  int  fmtCount  =  readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(format);  }	  int    fmtCount    =    readArgumentIndex(pattern,    index);    stripCustom.append(END_FE).append(format);    	non-compiled	[CE]  not  a  statement	21	None	replace
372	[BUG]  [BUGGY]  if(format!=  null)  {  stripCustom.append(ESCAPED_QUOTE).append(formatDescription);  }  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  stripCustom.append(ESCAPED_QUOTE).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  stripCustom.append(ESCAPED_QUOTE).append(formatDescription);  }	          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(formatDescription);    }    If(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(formatDescription);    }    	non-compiled	[CE]  not  a  statement	73	None	replace
373	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start);  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start);  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start);	  int    fmtCount    =    readArgumentIndex(pattern,    index);    	non-compiled	[CE]  not  a  statement	20	None	replace
374	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT).append(formatDescription);  }  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT).append(formatDescription);  }	  if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FE).append(formatDescription);    }    	non-compiled	[CE]  not  a  statement	117	None	replace
375	[BUG]  [BUGGY]  if(format  >=  null  &&  format.length  >  0)  {  [CE]  not  a  statement  [FE]        IllegalArgumentException      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  >=  null  &&  format.length  >  0)  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format  >=  null  &&  format.length  >  0)  {	  if(format!=    null    &&    format.length    >    0)    {    	non-compiled	[CE]  not  a  statement	120	None	replace
376	[BUG]  [BUGGY]  if(format!=  null  ||  format.equals(ESCAPED_QUOTE))  {  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null  ||  format.equals(ESCAPED_QUOTE))  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null  ||  format.equals(ESCAPED_QUOTE))  {	  if(format    ==    null    ||    format.equals(DUMMY_PATTERN))    {    	non-compiled	[CE]  not  a  statement	97	None	replace
377	[BUG]  [BUGGY]  if(format  ==  null  &&  format.equals(DUMMY_PATTERN))  {  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null  &&  format.equals(DUMMY_PATTERN))  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format  ==  null  &&  format.equals(DUMMY_PATTERN))  {	  if(format    ==    null    ||    format.equals(DUMMY_PATTERN))    {    	non-compiled	[CE]  not  a  statement	97	None	replace
378	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  if(format  >=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  if(format  >=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE);    }    if(format  >=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }	  	non-compiled	[CE]  not  a  statement	55	None	add
379	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE);    }    for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }	  	non-compiled	[CE]  not  a  statement	55	None	add
380	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  start;  i++)  {  stripCustom.append(END_FE).append(format);  }  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  start;  i++)  {  stripCustom.append(END_FE).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format  ==  null)  {  for(int  i  =  0;  i  <  start;  i++)  {  stripCustom.append(END_FE).append(format);  }	  if(format    ==    null)    {    for(int    i    =    0;    i    <    numDescriptions;    i++)    {    stripCustom.append(END_FE).append(format);    }    	non-compiled	[CE]  not  a  statement	124	None	replace
381	[BUG]  [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATT  [CE]  ')'  expected  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATT  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format        ==        null)        {        stripCustom.append(DUMMY_PATTERN);        }        if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATT	  	non-compiled	[CE]  ')'  expected	9	None	add
382	[BUG]  [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATT  [CE]  ')'  expected  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATT  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format        ==        null)        {        stripCustom.append(DUMMY_PATTERN);        }        if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATT	  	non-compiled	[CE]  ')'  expected	9	None	add
383	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  0;  i++)  {  stripCustom.append(DUMMY_PATTERN[i]);  }  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  0;  i++)  {  stripCustom.append(DUMMY_PATTERN[i]);  }  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  for(int  i  =  start;  i  <  0;  i++)  {  stripCustom.append(DUMMY_PATTERN[i]);  }	  if(format!=    null)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(DUMMY_PATTERN[i]);    }    	non-compiled	[CE]  not  a  statement	114	None	replace
384	[BUG]  [BUGGY]  if(formatDescription!=  null  &&  formatDescription.length()  ==  0)  {  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(formatDescription!=  null  &&  formatDescription.length()  ==  0)  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(formatDescription!=  null  &&  formatDescription.length()  ==  0)  {	  if(format!=    null    ||    formatDescription.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	44	None	replace
385	[BUG]  [BUGGY]  if(formatDescription!=  null  ||  formatDescription.length()  ==  0)  {  [CE]  not  a  statement  [FE]      IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(formatDescription!=  null  ||  formatDescription.length()  ==  0)  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(formatDescription!=  null  ||  formatDescription.length()  ==  0)  {	  if(format!=    null    ||    formatDescription.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	44	None	replace
386	[BUG]  [BUGGY]  if(formatDescription  ==  null  ||  formatDescription.length()  ==  0)  {  [CE]  not  a  statement  [FE]        IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(formatDescription  ==  null  ||  formatDescription.length()  ==  0)  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(formatDescription  ==  null  ||  formatDescription.length()  ==  0)  {	  if(format!=    null    ||    formatDescription.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	44	None	replace
387	[BUG]  [BUGGY]  if(format!=  null  ||  format.equals(DUMMY_PATTERN))  {  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null  ||  format.equals(DUMMY_PATTERN))  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null  ||  format.equals(DUMMY_PATTERN))  {	  if(format    ==    null    ||    format.equals(       "       "))    {    if(format    ==    null    ||    format.equals(       "       "))    {    	non-compiled	[CE]  not  a  statement	34	None	replace
388	[BUG]  [BUGGY]  if(format!=  null  &&  format.equals( "-- "))  {  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null  &&  format.equals( "-- "))  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null  &&  format.equals( "-- "))  {	  if(format    ==    null    ||    format.equals(   "-   "))    {    	non-compiled	[CE]  not  a  statement	134	None	replace
389	[BUG]  [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.app  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.app  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format        ==        null)        {        stripCustom.append(DUMMY_PATTERN).append(format);        }        if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.app	  	non-compiled	[CE]  ';'  expected	63	None	add
390	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  i  =  start;  i  <  0;  i++)  {  stripCustom.append(END_FE).append(format);  }  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null)  {  for(int  i  =  start;  i  <  0;  i++)  {  stripCustom.append(END_FE).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format  ==  null)  {  for(int  i  =  start;  i  <  0;  i++)  {  stripCustom.append(END_FE).append(format);  }	  if(format!=    null)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE).append(format);    }    	non-compiled	[CE]  ';'  expected	101	None	replace
391	[BUG]  [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(formatDescription);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format!=  null)  {  stripCustom  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(formatDescription);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format!=  null)  {  stripCustom  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format        ==        null)        {        stripCustom.append(DUMMY_PATTERN).append(formatDescription);        }        if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(formatDescription);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  if(format!=  null)  {  stripCustom	  	non-compiled	[CE]  ';'  expected	71	None	add
392	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format    ==    null)    {    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FE);    }    for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }	  	non-compiled	[CE]  ';'  expected	89	None	add
393	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT);  }  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format    ==    null)    {    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FE);    }    if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT);  }	  	non-compiled	[CE]  ';'  expected	89	None	add
394	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  >>  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  >>  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  >>  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }	  	non-compiled	[CE]  ';'  expected	77	None	add
395	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  If(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  If(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(DUMMY_PATTERN);    }    If(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }	  	non-compiled	[CE]  ';'  expected	77	None	add
396	[BUG]  [BUGGY]  if(format!=  null  &&  format.equals(   "     "))  {  if(format!=  null  &&  format.equals( ".   "))  {  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null  &&  format.equals(   "     "))  {  if(format!=  null  &&  format.equals( ".   "))  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null    &&    format.equals(   "       "))    {    if(format!=  null  &&  format.equals( ".   "))  {	  	non-compiled	[CE]  ';'  expected	14	None	add
397	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format    ==    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE);    }    for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }	  	non-compiled	[CE]  ';'  expected	103	None	add
398	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FMT);  }  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FMT);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format    ==    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE);    }    if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FMT);  }	  	non-compiled	[CE]  ';'  expected	103	None	add
399	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FMT).append(format);  }  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FMT).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE).append(format);    }    if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FMT).append(format);  }	  	non-compiled	[CE]  ';'  expected	100	None	add
400	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }  If(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }  If(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE).append(format);    }    If(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }	  	non-compiled	[CE]  ';'  expected	100	None	add
401	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  index;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  If(format!=  null)  {  for(int  i  =  start;  i  <  index;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  index;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  If(format!=  null)  {  for(int  i  =  start;  i  <  index;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    start;    i    <    index;    i++)    {    stripCustom.append(DUMMY_PATTERN);    }    If(format!=  null)  {  for(int  i  =  start;  i  <  index;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }	  	non-compiled	[CE]  ';'  expected	110	None	add
402	[BUG]  [BUGGY]  if(format  ==  null)  {  if(format!=  null)  {  stripCustom.append(END_FE).append(format);  }  [CE]  ';'  expected  [FE]              IllegalArgumentException      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null)  {  if(format!=  null)  {  stripCustom.append(END_FE).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format  ==  null)  {  if(format!=  null)  {  stripCustom.append(END_FE).append(format);  }	          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    If(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    	non-compiled	[CE]  ';'  expected	84	None	replace
403	[BUG]  [BUGGY]  if(format  ==  null)  {  stripCustom.append(QUOTE).append(formatDescription);  }  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null)  {  stripCustom.append(QUOTE).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format  ==  null)  {  stripCustom.append(QUOTE).append(formatDescription);  }	  if(format    ==    null)    {    stripCustom.append(END_FE).append(formatDescription);    }    	non-compiled	[CE]  ';'  expected	75	None	replace
404	[BUG]  [BUGGY]  if(format  >=  null  &&  format.length()  ==  0)  {  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  >=  null  &&  format.length()  ==  0)  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format  >=  null  &&  format.length()  ==  0)  {	  if(format!=    null    &&    format.length()    ==    0)    {    	non-compiled	[CE]  ';'  expected	129	None	replace
405	[BUG]  [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATT  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATT  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format!=        null)        {        stripCustom.append(DUMMY_PATTERN);        }        if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATT	  	non-compiled	[CE]  ';'  expected	1	None	add
406	[BUG]  [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format!=        null)        {        stripCustom.append(DUMMY_PATTERN);        }        if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(	  	non-compiled	[CE]  ';'  expected	1	None	add
407	[BUG]  [BUGGY]  if(format  >=  null  &&  format.length()  >  0)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  >=  null  &&  format.length()  >  0)  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format  >=  null  &&  format.length()  >  0)  {	  if(format!=    null    &&    format.length()    >    0)    {    	non-compiled	[CE]  ';'  expected	46	None	replace
408	[BUG]  [BUGGY]  if(format!=  null  ||  formatDescription.length()  ==  0)  {  If(format!=  null  ||  formatDescription.length()  ==  0)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null  ||  formatDescription.length()  ==  0)  {  If(format!=  null  ||  formatDescription.length()  ==  0)  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null    ||    formatDescription.length()    ==    0)    {    If(format!=  null  ||  formatDescription.length()  ==  0)  {	  	non-compiled	[CE]  ';'  expected	43	None	add
409	[BUG]  [BUGGY]  if(format  >=  null)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  >=  null)  {  stripCustom.append(END_FE);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format  >=  null)  {  stripCustom.append(END_FE);  }	  if(format!=    null)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	92	None	replace
410	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  >>  null)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  >>  null)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  >>  null)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }	  	non-compiled	[CE]  ';'  expected	121	None	add
411	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  If(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  If(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(DUMMY_PATTERN);    }    If(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }	  	non-compiled	[CE]  ';'  expected	121	None	add
412	[BUG]  [BUGGY]  if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  else  {  stripCustom.append(END_FE).append(format);  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  else  {  stripCustom.append(END_FE).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  else  {  stripCustom.append(END_FE).append(format);  }	          if(format    ==    null)    {    stripCustom.append(END_FE).append(format);    }    for(format    ==    null)    {    stripCustom.append(END_FE).append(format);    }    	non-compiled	[CE]  ';'  expected	54	None	replace
413	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  start;  i++)  {  stripCustom.append(END_FE).append(format);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  start;  i++)  {  stripCustom.append(END_FE).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  for(int  i  =  0;  i  <  start;  i++)  {  stripCustom.append(END_FE).append(format);  }	  if(format!=    null)    {    for(int    i    =    0;    i    <    numDescriptions;    i++)    {    stripCustom.append(END_FE).append(format);    }    	non-compiled	[CE]  ';'  expected	125	None	replace
414	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  index;  i++)  {  stripCustom.append(END_FE).append(format);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  index;  i++)  {  stripCustom.append(END_FE).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  for(int  i  =  0;  i  <  index;  i++)  {  stripCustom.append(END_FE).append(format);  }	  if(format!=    null)    {    for(int    i    =    0;    i    <    numDescriptions;    i++)    {    stripCustom.append(END_FE).append(format);    }    	non-compiled	[CE]  ';'  expected	125	None	replace
415	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(FIELD_PATTERN[i]);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(FIELD_PATTERN[i]);  }  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(FIELD_PATTERN[i]);  }	  if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(DUMMY_PATTERN[i]);    }    	non-compiled	[CE]  ';'  expected	76	None	replace
416	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(SUMMY_PATTERN[i]);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(SUMMY_PATTERN[i]);  }  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(SUMMY_PATTERN[i]);  }	  if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(DUMMY_PATTERN[i]);    }    	non-compiled	[CE]  ';'  expected	76	None	replace
417	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FMT).append(formatDescription);  }	  if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(START_FMT).append(formatDescription);    }    	non-compiled	[CE]  ';'  expected	60	None	replace
418	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FMT).append(formatDescription);  }  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FMT).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FMT).append(formatDescription);  }	  if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(START_FMT).append(formatDescription);    }    	non-compiled	[CE]  ';'  expected	60	None	replace
419	[BUG]  [BUGGY]  if(format!=  null  ||  format.equals(DUMMY_PATTERN))  {  if(format!=  null  ||  format.equals(DUMMY_PATTERN))  {  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null  ||  format.equals(DUMMY_PATTERN))  {  if(format!=  null  ||  format.equals(DUMMY_PATTERN))  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null  ||  format.equals(DUMMY_PATTERN))  {  if(format!=  null  ||  format.equals(DUMMY_PATTERN))  {	  if(format    ==    null    ||    format.equals(       "       "))    {    if(format!=    null    ||    format.equals(       "       "))    {    	non-compiled	[CE]  ';'  expected	35	None	replace
420	[BUG]  [BUGGY]  if(format!=  null  ||  format.equals(DUMMY_PATTERN))  {  if(format  ==  null  ||  format.equals(DUMMY_PATTERN))  {  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null  ||  format.equals(DUMMY_PATTERN))  {  if(format  ==  null  ||  format.equals(DUMMY_PATTERN))  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null  ||  format.equals(DUMMY_PATTERN))  {  if(format  ==  null  ||  format.equals(DUMMY_PATTERN))  {	  if(format    ==    null    ||    format.equals(       "       "))    {    if(format!=    null    ||    format.equals(       "       "))    {    	non-compiled	[CE]  ';'  expected	35	None	replace
421	[BUG]  [BUGGY]  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  else  {  stripCustom.append(END_FE).append(format);  }  [CE]  ';'  expected  [FE]        IllegalArgumentException      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  else  {  stripCustom.append(END_FE).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  else  {  stripCustom.append(END_FE).append(format);  }	          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format    >>    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    	non-compiled	[CE]  ';'  expected	108	None	replace
422	[BUG]  [BUGGY]          if(format    ==    null)    {    stripCustom.append(END_FE).append(format);    }    if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  if(format  ==  null)  {  stripCustom.append(END_FMT).append(format);  }  if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format    ==    null)    {    stripCustom.append(END_FE).append(format);    }    if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  if(format  ==  null)  {  stripCustom.append(END_FMT).append(format);  }  if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format        ==        null)        {        stripCustom.append(END_FE).append(format);        }        if(format    ==    null)    {    stripCustom.append(END_FE).append(format);    }    if(format  ==  null)  {  stripCustom.append(END_FMT).append(format);  }  if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }	  	non-compiled	[CE]  ';'  expected	49	None	add
423	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FE).append(format);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(FIELD_FE).append(format);  }  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FE).append(format);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(FIELD_FE).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(START_FE).append(format);    }    if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(FIELD_FE).append(format);  }	  	non-compiled	[CE]  ';'  expected	30	None	add
424	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FMT).append(format);  }  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FMT).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE).append(format);    }    if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FMT).append(format);  }	  	non-compiled	[CE]  ';'  expected	28	None	add
425	[BUG]  [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN  [CE]  ')'  expected  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format!=        null)        {        stripCustom.append(DUMMY_PATTERN);        }        if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN	  	non-compiled	[CE]  ')'  expected	1	None	add
426	[BUG]  [BUGGY]  if(format  >=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  >=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format  >=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }	  if(format    ==    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	104	None	replace
427	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }  If(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }  If(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format    ==    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE).append(formatDescription);    }    If(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }	  	non-compiled	[CE]  ';'  expected	130	None	add
428	[BUG]  [BUGGY]  if(format!=  null  &&  format.equals( "* "))  {  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null  &&  format.equals( "* "))  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null  &&  format.equals( "* "))  {	  if(format!=    null    &&    format.equals(   "       "))    {    	non-compiled	[CE]  ';'  expected	15	None	replace
429	[BUG]  [BUGGY]  if(format  ==  null  ||  format.equals(   "-   "))  {  If(format  ==  null  ||  format.equals(   "-   "))  {  [CE]  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null  ||  format.equals(   "-   "))  {  If(format  ==  null  ||  format.equals(   "-   "))  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format    ==    null    ||    format.equals(   "-   "))    {    If(format  ==  null  ||  format.equals(   "-   "))  {	  	non-compiled	[CE]  	133	None	add
430	[BUG]  [BUGGY]  if(format  ==  null  ||  format.equals(DUMMY_PATTERN))  {  if(format  {  null  ||  format.equals(DUMMY_PATTERN))  {  [CE]  ')'  expected  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null  ||  format.equals(DUMMY_PATTERN))  {  if(format  {  null  ||  format.equals(DUMMY_PATTERN))  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format    ==    null    ||    format.equals(DUMMY_PATTERN))    {    if(format  {  null  ||  format.equals(DUMMY_PATTERN))  {	  	non-compiled	[CE]  ')'  expected	96	None	add
431	[BUG]  [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY  [CE]  [FE]    IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format        ==        null)        {        stripCustom.append(DUMMY_PATTERN).append(format);        }        if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY	  	non-compiled	[CE]  	63	None	add
432	[BUG]  [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom  [CE]  not  a  statement  [FE]      IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format        ==        null)        {        stripCustom.append(DUMMY_PATTERN).append(format);        }        if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom	  	non-compiled	[CE]  not  a  statement	63	None	add
433	[BUG]  [BUGGY]  if(formatDescription  ==  null  ||  format.equals(DUMMY_PATTERN))  {  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(formatDescription  ==  null  ||  format.equals(DUMMY_PATTERN))  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(formatDescription  ==  null  ||  format.equals(DUMMY_PATTERN))  {	  if(formatDescription    ==    null    ||    format.length()    ==    0)    {    	non-compiled	[CE]  ';'  expected	98	None	replace
434	[BUG]  [BUGGY]  if(format  >=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  >=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format  >=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }	  if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	88	None	replace
435	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FMT).append(formatDescription);  }	  if(format    ==    null)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	113	None	replace
436	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  i  =  start;  i  <  0;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null)  {  for(int  i  =  start;  i  <  0;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format  ==  null)  {  for(int  i  =  start;  i  <  0;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }	  if(format    ==    null)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	113	None	replace
437	[BUG]  [BUGGY]  if(format  ==  null)  {  int  fmtCount  =  readArgumentIndex(start,  next(pos));  stripCustom.append(END_FE).append(format);  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null)  {  int  fmtCount  =  readArgumentIndex(start,  next(pos));  stripCustom.append(END_FE).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format  ==  null)  {  int  fmtCount  =  readArgumentIndex(start,  next(pos));  stripCustom.append(END_FE).append(format);  }	  int    fmtCount    =    readArgumentIndex(start,    next(pos));    stripCustom.append(END_FE).append(format);    	non-compiled	[CE]  ';'  expected	94	None	replace
438	[BUG]  [BUGGY]          if(format    ==    null)    {    stripCustom.append(END_FE).append(format);    }    if(format!=  null)  {  stripCustom.append(END_FE).append(format);  }  if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  if(format!=  null)  {  stripCustom.append(END_FE).append(format);  }  if(format!=  null)  {  stripCustom.append(END_FE).append(format);  }  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format    ==    null)    {    stripCustom.append(END_FE).append(format);    }    if(format!=  null)  {  stripCustom.append(END_FE).append(format);  }  if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  if(format!=  null)  {  stripCustom.append(END_FE).append(format);  }  if(format!=  null)  {  stripCustom.append(END_FE).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format        ==        null)        {        stripCustom.append(END_FE).append(format);        }        if(format!=    null)    {    stripCustom.append(END_FE).append(format);    }    if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  if(format!=  null)  {  stripCustom.append(END_FE).append(format);  }  if(format!=  null)  {  stripCustom.append(END_FE).append(format);  }	  	non-compiled	[CE]  ';'  expected	51	None	add
439	[BUG]  [BUGGY]  if(format  <  0)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  [CE]  ';'  expected  [FE]            IllegalArgumentException      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  <  0)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format  <  0)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }	          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format    >=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    	non-compiled	[CE]  ';'  expected	83	None	replace
440	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  END_FE;  i++)  {  stripCustom.append(END_FE).append(format);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  END_FE;  i++)  {  stripCustom.append(END_FE).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  for(int  i  =  0;  i  <  END_FE;  i++)  {  stripCustom.append(END_FE).append(format);  }	  if(format!=    null)    {    for(int    i    =    0;    i    <    numFormats;    i++)    {    stripCustom.append(END_FE).append(format);    }    	non-compiled	[CE]  ';'  expected	102	None	replace
441	[BUG]  [BUGGY]  if(format!=  null  &&  format.trim().length()  >  0)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null  &&  format.trim().length()  >  0)  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null  &&  format.trim().length()  >  0)  {	  if(format!=    null    &&    format.length()    >    0)    {    	non-compiled	[CE]  ';'  expected	46	None	replace
442	[BUG]  [BUGGY]          if(format    ==    null)    {    stripCustom.append(END_FE).append(format);    }    if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  if(format  ==  null)  {  stripCustom.append(START_FMT).append(format);  }  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format    ==    null)    {    stripCustom.append(END_FE).append(format);    }    if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  if(format  ==  null)  {  stripCustom.append(START_FMT).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format        ==        null)        {        stripCustom.append(END_FE).append(format);        }        if(format    ==    null)    {    stripCustom.append(END_FE).append(format);    }    if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  if(format  ==  null)  {  stripCustom.append(START_FMT).append(format);  }	  	non-compiled	[CE]  ';'  expected	49	None	add
443	[BUG]  [BUGGY]          if(format    ==    null)    {    stripCustom.append(END_FE).append(format);    }    if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format    ==    null)    {    stripCustom.append(END_FE).append(format);    }    if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format        ==        null)        {        stripCustom.append(END_FE).append(format);        }        if(format    ==    null)    {    stripCustom.append(END_FE).append(format);    }    if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }  if(format  ==  null)  {  stripCustom.append(END_FE).append(format);  }	  	non-compiled	[CE]  ';'  expected	49	None	add
444	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount  -  1;  i++)  {  stripCustom.append(END_FMT).append(format);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount  -  1;  i++)  {  stripCustom.append(END_FMT).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount  -  1;  i++)  {  stripCustom.append(END_FMT).append(format);  }	  if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FMT).append(format);    }    	non-compiled	[CE]  ';'  expected	107	None	replace
445	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  c.length;  i++)  {  stripCustom.append(END_FMT).append(format);  }  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  c.length;  i++)  {  stripCustom.append(END_FMT).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  for(int  i  =  0;  i  <  c.length;  i++)  {  stripCustom.append(END_FMT).append(format);  }	  if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FMT).append(format);    }    	non-compiled	[CE]  ';'  expected	107	None	replace
446	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FMT).append(format);  }  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FMT).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FMT).append(format);  }	  if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FMT).append(format);    }    	non-compiled	[CE]  ';'  expected	107	None	replace
447	[BUG]  [BUGGY]  if(format!=  null  &&  format.equals( ". "))  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null  &&  format.equals( ". "))  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null  &&  format.equals( ". "))  {	  if(format!=    null    ||    format.equals(   "       "))    {    	non-compiled	[CE]  ';'  expected	13	None	replace
448	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN[i],  formatDescription);  }  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN[i],  formatDescription);  }  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN[i],  formatDescription);  }	  if(format!=    null)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(DUMMY_PATTERN[i]);    }    	non-compiled	[CE]  ';'  expected	114	None	replace
449	[BUG]  [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN  [CE]  ')'  expected  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format        ==        null)        {        stripCustom.append(DUMMY_PATTERN);        }        if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN	  	non-compiled	[CE]  ')'  expected	9	None	add
450	[BUG]  [BUGGY]  if(format  <  null  ||  format.length()  >  0)  {  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  <  null  ||  format.length()  >  0)  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format  <  null  ||  format.length()  >  0)  {	  if(format    <    null    ||    format.length()    ==    0)    {    	non-compiled	[CE]  ';'  expected	99	None	replace
451	[BUG]  [BUGGY]  if(format  <  null  ||  format.length()  >=  0)  {  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  <  null  ||  format.length()  >=  0)  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format  <  null  ||  format.length()  >=  0)  {	  if(format    <    null    ||    format.length()    ==    0)    {    	non-compiled	[CE]  ';'  expected	99	None	replace
452	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  c.length;  i++)  {  stripCustom.append(END_FE).append(format);  }  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  c.length;  i++)  {  stripCustom.append(END_FE).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  for(int  i  =  0;  i  <  c.length;  i++)  {  stripCustom.append(END_FE).append(format);  }	  if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE).append(format);    }    	non-compiled	[CE]  ';'  expected	29	None	replace
453	[BUG]  [BUGGY]  ||  format!=  null)  {  stripCustom.append(STRING_PATTERN).append(format);  }  [CE]  ';'  expected  [FE]        IllegalArgumentException      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  ||  format!=  null)  {  stripCustom.append(STRING_PATTERN).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	||  format!=  null)  {  stripCustom.append(STRING_PATTERN).append(format);  }	  ||    format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    	non-compiled	[CE]  ';'  expected	66	None	replace
454	[BUG]  [BUGGY]  if(format  >=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE).append(formatDescription);  }  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  >=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format  >=  null)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE).append(formatDescription);  }	  if(format    ==    null)    {    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FE).append(formatDescription);    }    	non-compiled	[CE]  ';'  expected	119	None	replace
455	[BUG]  [BUGGY]  if(format  >=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  >=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format  >=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }	  if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE).append(formatDescription);    }    	non-compiled	[CE]  ';'  expected	58	None	replace
456	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  numDescriptions;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  numDescriptions;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  for(int  i  =  0;  i  <  numDescriptions;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }	  if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE).append(formatDescription);    }    	non-compiled	[CE]  ';'  expected	58	None	replace
457	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }  }  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE).append(formatDescription);    }    if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(formatDescription);  }  }	  	non-compiled	[CE]  ';'  expected	57	None	add
458	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentCount(pattern,  index  +  1);  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  int  fmtCount  =  readArgumentCount(pattern,  index  +  1);  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	int  fmtCount  =  readArgumentCount(pattern,  index  +  1);	  int    fmtCount    =    readArgumentIndex(pattern,    index);    	non-compiled	[CE]  ';'  expected	20	None	replace
459	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentCount(pattern,  index);  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  int  fmtCount  =  readArgumentCount(pattern,  index);  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	int  fmtCount  =  readArgumentCount(pattern,  index);	  int    fmtCount    =    readArgumentIndex(pattern,    index);    	non-compiled	[CE]  ';'  expected	20	None	replace
460	[BUG]  [BUGGY]  if(format!=  null)  {  If(format  ==  null  ||  format.equals( "   "))  {  [CE]  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  If(format  ==  null  ||  format.equals( "   "))  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  If(format  ==  null  ||  format.equals( "   "))  {	  if(format    ==    null    ||    format.equals(       "       "))    {    If(format    ==    null    ||    format.equals(       "       "))    {    	non-compiled	[CE]  	36	None	replace
461	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FE).append(format);  }  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FMT).append(format);  }  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FE).append(format);  }  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FMT).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format    ==    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(START_FE).append(format);    }    if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FMT).append(format);  }	  	non-compiled	[CE]  ';'  expected	32	None	add
462	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex()  -  1),  format);  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex()  -  1),  format);  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex()  -  1),  format);	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos),    format);    	non-compiled	[CE]  ';'  expected	19	None	replace
463	[BUG]  [BUGGY]  if(format!=  null)  {  stripCustom.append(STRING_FMT).append(formatDescription);  }  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  stripCustom.append(STRING_FMT).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  stripCustom.append(STRING_FMT).append(formatDescription);  }	          if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(formatDescription);    }    if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(formatDescription);    }    	non-compiled	[CE]  ';'  expected	72	None	replace
464	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  numDescriptions;  ++i)  {  stripCustom.append(END_FE).append(formatDescription);  }  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  numDescriptions;  ++i)  {  stripCustom.append(END_FE).append(formatDescription);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  for(int  i  =  0;  i  <  numDescriptions;  ++i)  {  stripCustom.append(END_FE).append(formatDescription);  }	  if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FE).append(formatDescription);    }    	non-compiled	[CE]  ';'  expected	117	None	replace
465	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  format.next(pos.getIndex()));  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  format.next(pos.getIndex()));  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  format.next(pos.getIndex()));	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos.getIndex()));    	non-compiled	[CE]  ';'  expected	132	None	replace
466	[BUG]  [BUGGY]  if(format  >=  null  ||  format.length()!=  0)  {  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  >=  null  ||  format.length()!=  0)  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format  >=  null  ||  format.length()!=  0)  {	  if(format    ==    null    ||    format.length()!=    0)    {    	non-compiled	[CE]  ';'  expected	37	None	replace
467	[BUG]  [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format!=        null)        {        stripCustom.append(DUMMY_PATTERN).append(format);        }        if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
468	[BUG]  [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(START_FMT).append(format);  }  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(START_FMT).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format!=        null)        {        stripCustom.append(DUMMY_PATTERN).append(format);        }        if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(START_FMT).append(format);  }	  	non-compiled	[CE]  ';'  expected	81	None	add
469	[BUG]  [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(STRING_FMT).append(format);  }  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(STRING_FMT).append(format);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format!=        null)        {        stripCustom.append(DUMMY_PATTERN).append(format);        }        if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format  ==  null)  {  stripCustom.append(STRING_FMT).append(format);  }	  	non-compiled	[CE]  ';'  expected	81	None	add
470	[BUG]  [BUGGY]  if(format  >=  null  ||  format.equals( "- "))  {  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  >=  null  ||  format.equals( "- "))  {  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format  >=  null  ||  format.equals( "- "))  {	  if(format    ==    null    ||    format.equals(   "-   "))    {    	non-compiled	[CE]  ';'  expected	134	None	replace
471	[BUG]  [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format!=        null)        {        stripCustom.append(DUMMY_PATTERN);        }        if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }	  	non-compiled	[CE]  ';'  expected	3	None	add
472	[BUG]  [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN  [CE]  ')'  expected  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format!=        null)        {        stripCustom.append(DUMMY_PATTERN);        }        if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN);  }  if(format  ==  null)  {  stripCustom.append(DUMMY_PATTERN	  	non-compiled	[CE]  ')'  expected	3	None	add
473	[BUG]  [BUGGY]  if(format  ==  null)  {  stripCustom.append(START_FMT);  }  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format  ==  null)  {  stripCustom.append(START_FMT);  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format  ==  null)  {  stripCustom.append(START_FMT);  }	          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN);    }    if(format    ==    null)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	4	None	replace
474	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }  }  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE).append(format);    }    if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE).append(format);  }  }	  	non-compiled	[CE]  ';'  expected	28	None	add
475	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FMT).append(format);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FMT).append(format);  }  }  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FMT).append(format);  }  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FMT).append(format);  }  }  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(START_FMT).append(format);    }    if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FMT).append(format);  }  }	  	non-compiled	[CE]  ';'  expected	40	None	add
476	[BUG]  [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY  [CE]  ')'  expected  [FE]    IllegalArgumentException    [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]          if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	                if(format!=        null)        {        stripCustom.append(DUMMY_PATTERN).append(format);        }        if(format!=    null)    {    stripCustom.append(DUMMY_PATTERN).append(format);    }    if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY_PATTERN).append(format);  }  if(format!=  null)  {  stripCustom.append(DUMMY	  	non-compiled	[CE]  ')'  expected	79	None	add
477	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(start,  next(pos));  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  char  fmtCount  =  readArgumentIndex(start,  next(pos));  [BUGGY]      if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	char  fmtCount  =  readArgumentIndex(start,  next(pos));	  int    fmtCount    =    readArgumentIndex(start,    next(pos));    	non-compiled	[CE]  ';'  expected	18	None	replace
478	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  numDescriptions;  i++)  {  stripCustom.append(DUMMY_PATTERN[i]);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  numDescriptions;  i++)  {  stripCustom.append(DUMMY_PATTERN[i]);  }  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  for(int  i  =  0;  i  <  numDescriptions;  i++)  {  stripCustom.append(DUMMY_PATTERN[i]);  }	  if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(DUMMY_PATTERN[i]);    }    	non-compiled	[CE]  ';'  expected	76	None	replace
479	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN[i],  formatDescription);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN[i],  formatDescription);  }  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN[i],  formatDescription);  }	  if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(DUMMY_PATTERN[i]);    }    	non-compiled	[CE]  ';'  expected	76	None	replace
480	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  d.length;  i++)  {  stripCustom.append(DUMMY_PATTERN[i]);  }  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  d.length;  i++)  {  stripCustom.append(DUMMY_PATTERN[i]);  }  [BUGGY]      stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	176	176	1	replace	if(format!=  null)  {  for(int  i  =  0;  i  <  d.length;  i++)  {  stripCustom.append(DUMMY_PATTERN[i]);  }	  if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(DUMMY_PATTERN[i]);    }    	non-compiled	[CE]  ';'  expected	76	None	replace
